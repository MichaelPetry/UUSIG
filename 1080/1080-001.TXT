@RUN CATRUN,,MARS,10,100@MSG,N This run builds the RELEASE file for MARS 3R1.@MSG,N The file is expanded from a single source input.@ASG,UP  MARS*RELEASE(+1),///1000@USE MARSREL$,MARS*RELEASE(+1).@SETC,N@ELT,SIQ MARSREL$.MGPDEF,,,164065132037,001.         MARS Global System Parameters   (Level 3R1).. This procedure element defines basic parameters of the MARS software. that may be tailored to site specification..          DEF.. M$ARCMAX determines the maximum number of files that can be selected in a. single archive or exception-list run.  Earlier levels of MARS aborted if. this parameter was exceeded.  Beginning with 3R1, the default action is to. continue processing (ignore remaining files) if the limit is reached (a. warning message is printed).  The 'X' option can be used with SELECT to. force an abort if the parameter is exceeded.  It may be changed freely,. and only SELECT is affected.  SELECT uses M$ARCMAX*15 words of table space..M$ARCMAX  EQU       2500              . Maximum files archived per run... M$TAPDEF defines the default maximum number of combined input and output. tape drives to assign if the operator solicit feature is not used.  If. fewer drives are needed in a particular archive, fewer will be assigned.. M$TAPMAX defines the maximum number of drives that may be requested by. the operator if the feature is used ('N' option on SELECT call).  Neither. parameter should be set lower than 3 or higher than 9.  Only the SELECT. program is affected and these parameters may be changed freely..M$TAPDEF  EQU       4                 . Default maximum drives to assign.M$TAPMAX  EQU       6                 . Maximum drives operator may request... The following parameters are set to the local tape assign mnemonics. for standard and cartridge tape.  These will be used at reload time. to select the proper equipment.  The third parameter determines the. equipment type to use for archive.  These parameters may be changed. freely, keeping in mind that the reload equipment types must be. compatible with archive equipment used in the past.  Changes in the. first two parameters affect RLDCTL and ACP.  SELECT is affected if. any of these parameters are changed..M$TMSTD   EQU       'U9S'             . Standard reel tape, 6250 BPI.M$TMHIC   EQU       'HICL'            . Half-inch cartridge tape.M$TMARC   EQU       M$TMSTD           . MARS will archive to standard reel tape... This parameter defines the equipment code used for FAS SAVEs and SAVALLs. at your site.  It must equal either M$TMSTD or M$TMHIC.  If the type is. changed after MARS is installed, the recommended procedure is to regen. and reinstall REBUILD, RLDCTL, SELECT and ACP immediately after doing a. SAVALL to the new equipment.  This must be done before the next archive. and before the Save-History update that normally follows the SAVALL..M$TMFAS   EQU       M$TMSTD           . SAVE, SAVALL to standard reel tape/.. The archive run is normally started at 5 AM at the development site.. Sometime it is delayed.  To prevent interference with running systems,. a file is never selected for archive if it has been referenced on the. same day, after the normal start time of the archive run.  If you want. this protection at your site, set this parameter to the hour closest to. the normal starting hour of your archive run (military time).  To. disable this feature, set it to 24.  Only the SELECT program is affected..M$ARCRNT  EQU       5                 . Archive normally started at 5 AM.. The following three parameters define the buffer sizes used by the. Archive Copy Processor (ACP).  ACP derives much of its speed through. the use of very large I/O buffers.  For larger files we have used. 36-track buffers.  This is close to the maximum supported by OS/1100.. This decision was corroborated by UNISYS Customer Support and it has. not caused any problems (while using 34N and 36N equipment).  If. your site wishes to be very cautious, you may choose to reduce one or. both somewhat.  These values may be changed at any time without. affecting the ability of ACP to restore previously-archived files... *Note: Cartridge tapes have a hardware maximum of 16 tracks per I/O.. You can leave these parameters set higher to maximize disk-disk. performance.  ACP automatically adjusts them downwards when writing. to cartridge tape, unless you are using hardware data compression.. If this is the case, set both M$BUFFINIT and M$BUFFLRG to 8..M$BUFFINIT  EQU     12                . Initial size (tracks) of I/O buffers.M$BUFFSPLIT  EQU    M$BUFFINIT*20     . Minimum file size (tracks) at which                                      . the larger value is used.M$BUFFLRG  EQU      36                . Maximum size (tracks) of I/O buffers                                      . *Do not use a value over 36... This parameter is used to turn on or off the checksum feature of ACP.. If it is changed, only ACP is affected.  It may be changed freely.. Checksums are verified at reload time if the original tape was. created with M$CHKSM = 1..M$CHKSM   EQU       1                 . Turn on ACP checksums.. This parameter specifies (approximately) the number of tracks that. can be copied to a single output tape.  It is used when estimating the. number of output reels required for an archive run and to determine the. maximum tracks that can be safely archived for a single file without. risk of reel table overflow.  Archived files may span up to four reels,. but the copy may begin near the end of the first reel, so the computed. maximum is M$TPT*3.  Files having a larger track size than this are not. archived.  This value is based on 6250 BPI reel tape, M$BUFFLRG = 36.. Only the SELECT program is affected if this parameter is changed..M$TPT     EQU       21000             . Tracks per tape                                      . *Use 28000 for cartridge tape                                      . *Use 50000 for compressed cartridge/.. These parameters define the allowed expiration periods to be used when. creating archive tapes.  MARS will permit only these values to be used. for the EXP parameter when making file entries.  It is possible to change. these values after initial installation of MARS, but this is not the. recommended approach because later changes will not affect existing file. entries in the Archive Control File.  This could result in excessive tape. creation, because at least one tape is required for each separate expira-. tion processed during an archive.  If an expiration is defined in this. table and later removed, files having the obsolete expiration will only. be archived during a FULL archive (more on this later)... Each expiration parameter has two parts.  The first part is the expira-. tion in days, which may have a range of 1 to 4095.  If you are using a. tape management system, do not use any value here that is reserved for a. special purpose (anything other than a straight expiration in days).  The. second part is set to one if critical backups are permitted, zero other-. wise.  If set to zero, users will not be able to set the <CRT> flag for. files with the corresponding expiration.  Critical-file backup is not. normally necessary for expirations less than the daily save retention... If any of the expiration parameters are changed, the MARS processor. and the SELECT program must be recompiled.  The number of subscripted. entries may be changed, but they must occur in the continuous range of. 1-M$EXPACNT and the expiration values must be kept in ascending order. from shortest to longest expiration period.  This table must remain. synchronized with the M$EXPDAYS and M$EXPTHR tables, which are defined. on following pages..M$EXPA(1)  EQU      +( 10,0)          . Expiration Period 1 (10 days)                                      .  Critical backups not allowedM$EXPA(2)  EQU      +( 40,1)          . Expiration Period 2 (40 days)                                      .  Critical backups allowedM$EXPA(3)  EQU      +(100,1)          . Expiration Period 3 (100 days)                                      .  Critical backups allowedM$EXPA(4)  EQU      +(550,1)          . Expiration Period 4 (550 days)                                      .  Critical backups allowed.M$EXPACNT  EQU      4                 . Number of configured expiration periods..M$EXPADEF  EQU      40                . Default expiration (40 days) if none                                      .  is given when adding a file parameter.                                      .  This exp must = an M$EXPA(x) value./.. MARS level 3R1 supports two additional expiration periods which are not. defined in the M$EXPA(x) table because of their unique attributes.  Use. is optional and is controlled via the M$EXPZERO and M$EXPPERM parameters.... Files with an expiration period of zero days which are selected for archive. will be purged from the system (deleted, not copied to tape) if they have. a current FAS backup, bypassed otherwise.  The backup requirement is over-. looked if the <DEL> flag is set for a zero-expiration file.  Only the site. administrator may set the <DEL> flag and it is further limited to files. which are not wildcarded.  Purge/delete action is logged in the archive. selection report and in the summary report which follows an archive... This parameter should be set to one if the zero-expiration feature is. to be allowed, zero otherwise.  If changed, the SELECT and ARSTAT programs. and the MARS processor are affected..M$EXPZERO  EQU      1                 . Zero-expiration is allowed... MARS 3R1 also allows a permanent retention code to be defined.  Files. having this expiration will only be archived during a FULL archive.  They. will never be automatically expired.  Likewise, files entered in the FAS. save-history database with this expiration code will never be expired... This feature was included at the request of another site.  It runs a. little counter-intuitive to the MARS philosophy of automatic expiration. and the author does not advocate its use.  Since MARS does not have a. traditional 'merge archive' functionality with its inherent user. involvement and high overhead, there is no way to consolidate files. which have been archived with the permanent retention.  The only way such. files can be removed is by running a special update-rebuild with the 'T'. option, which purges by tape, not by file.  (See the internal REBUILD. documentation for more information)... If configured, use of the permanent expiration will be restricted to. the site administrator only.  Its value must be higher than the largest. site-defined expiration in the M$EXPA(x) table above.  If you are using. a tape management system, the value should be the same as its permanent. retention code.  The feature is disabled if the value of this parameter. is set to zero.  If changed from zero to nonzero at a later date, the. SELECT, REBUILD, EXPRPT and ARSTAT programs and the MARS processor are. affected.  Once set to a nonzero value the parameter should not be changed. again..M$EXPPERM  EQU      0                 . Permanent retention is not configured/.. *Note: If you are a user of MARS 2R1 or 2R2, the M$EXPDAYS(x) parameters.   replace the M$BPEXDY(x) and M$CFBDY(x) parameters.  The new format.   is more straightforward than the original... Tape usage can be reduced if archival to tapes with long expiration. periods is limited in some way so these tapes are not created every. time an archive is run.  Earlier versions of MARS allowed restriction. based on day of week - this is now controlled with the M$EXPDAYS. parameters.  MARS 3R1 also allows restriction by number of tracks. selected - this is controlled with the M$EXPTHR parameters on the. following page... SELECT has two modes of operation, STANDARD and FULL.  The STANDARD. archive will bypass all files with a given expiration if it is not the. right day of the week or if not enough tracks are selected to meet user-. defined thresholds.  The FULL archive will process all expirations,. regardless of the day of the week or the number of tracks selected... The M$EXPDAYS parameters determine allowed days of the week for each. corresponding expiration period defined in the M$EXPA table (above).. The subscripts must occur in the continuous range 1 thru M$EXPACNT.. The first part of each parameter controls archiving of single-backup. files, the second is for 2-backup files (those with the <CRT> flag in. the matching file entry).  It is usually better to limit the latter to. fewer days than the former, since the amount of critical data will. usually be small in comparison to the total volume of data archived.. The second part of each parameter must be a subset of the first part,. as no files will be processed for the day if the day is not included. in the first part of the parameter... The following codes are available: MON, TUE, WED, THU, FRI, SAT, SUN. and ALL (all days).  If more than one code is used, separate with the. logical 'or' (++) symbol.  Separate the first and second part of each. parameter with a comma.  If you wish to limit by thresholds only, set. each of these parameters to (ALL,ALL)... These parameters may be changed freely - remember to always keep in. sync with the M$EXPA(x) table.  Only the SELECT program is affected..M$EXPDAYS(1)  EQU  +(ALL,0)        . Archive 10-day files on all days                                   .  Critical backups are not allowedM$EXPDAYS(2)  EQU  +(ALL,MON++THU) . Archive 40-day files on all days                                   .  Critical backups on Monday, ThursdayM$EXPDAYS(3)  EQU  +(MON++TUE++WED++THU++FRI++SAT,TUE++FRI) .  Archive                                   .  100-day files on all days except Sunday                                   .  Critical backups on Tuesday, FridayM$EXPDAYS(4)  EQU  +(WED++SUN,SUN) . Archive 550-day files on Wednesday, Sunday                                   .  Critical backups on Sunday only/.. These parameters are used to define the minimum track thresholds for normal. and critical-backup archiving for each defined expiration period.  If the. total tracks selected for a given criteria falls below the configured limit,. the affected files are not archived.  As more and more files are selected,. the threshold will eventually be exceeded and all files will be archived to. the same tape.  This minimizes usage of long-expiration tapes... Each parameter defines thresholds for the corresponding M$EXPA(x) expiration. as defined previously.  The subscripts must occur in the continuous range. 1 - M$EXPACNT.  The parameters have two values, the first for single-backup. files and the second for critical-backup files.  The second value must be. less than or equal to the first.  Neither should exceed the value of M$TPT.. If you wish to limit by day-of-week only, set each parameter to (0,0)... These parameters may be changed freely.  Remember to keep in sync with the. M$EXPA(x) table.  Only the SELECT program is affected..M$EXPTHR(1)  EQU +( 1000,    0) . Archive 10-day files if > 1000 trks selected                                .  No critical-backup for 10-day filesM$EXPTHR(2)  EQU +( 5000, 1000) . Archive 40-day files if > 5000 trks selected                                .  Make 2nd tape if > 1000 of these are <CRT>M$EXPTHR(3)  EQU +(10000, 2000) . Archive 100-day files if > 10000 trks selected                                .  Make 2nd tape if > 2000 of these are <CRT>M$EXPTHR(4)  EQU +(15000, 5000) . Archive 550-day files if > 15000 trks selected                                .  Make 2nd tape if > 5000 of these are <CRT>... The following parameters define the default and maximum values of. the CYC and REF limits when making file entries.  Just as with the. M$EXPA(x) parameters above, changes to these values will affect. only future entries, not existing ones.  Only the MARS Processor is. affected if these parameters are changed.  There is no parameter for. the maximum CYC limit; it is 32..M$CYCDEF  EQU       2                 . Default CYC limit if none is given.M$REFDEF  EQU       40                . Default REF limit if none is given.M$REFMAX  EQU       100               . Maximum REF limit (default value;                                      .  may be overridden on an individual                                      .  qualifier basis by the site admin.)... The following parameter is used to prevent users from taking advantage. of the flexibility of MARS by indiscriminately creating a file entry. of the master wildcard (all '#') and setting an unreasonably high. reference limit for all files under that qualifier.  This parameter. is the maximum REF limit for a master wildcard file entry for all. users except the site administrator.  The site administrator remains. restricted only by M$REFMAX.  Only the MARS Processor is affected.. A good benchmark to use when setting this parameter is the reference. limit on your original FAS archive.  M$REFMAX should be set higher..M$REFMXW  EQU       40                . Maximum REF limit, master wildcard/.. Define the read and write keys for the Archive Control File. (SYS$*ARCCTL$) and the two History Files (SYS$*ARCHIST$ and. SYS$*SAVHIST$).  If no keys are used, leave blank.  The MARS. Processor, the FETCH Processor and the RLDCTL and CNSRLD programs. are affected by these parameters.  Several of the batch runstreams. must be updated as well if the keys are changed.  None of the. keys may contain an ampersand (&)..M$CFRK    EQU       ''                . Control File read keyM$CFWK    EQU       ''                . Control File write key.M$HFRK    EQU       ''                . History File read keyM$HFWK    EQU       ''                . History File write key... The secondary (backup) archive tapes produced for critical files are. not available for archive reload except through use of the SELECT,B. command, and users should be cautioned not to use this unless there is. a known problem with a primary archive tape.  FETCH will never call for. any of these tapes.  Because of this, and for increased security, you. may choose to keep your backup archive tapes offsite.  If your tape. management system has a vaulting capability that is keyed from the. qualifier and filename used when the tape was created, you can use. the following parameters to define those used for backup archive tapes.. To disable this feature, set both parameters to nulls ('').  These. parameters may be changed freely, and only SELECT is affected..M$CFBQUAL  EQU      'VLT01-OFFSIT'    . Backup archive tape qualifier.M$CFBFILE  EQU      'ARCTAP'          . Backup archive tape filename                                      . (Max 11 chars - the relative unit                                      .  number, 2-9, is appended)... The following parameter defines the BDI used by the reload control. bank (MRCBNK).  It should be set to an open user BDI.  Once set for. an initial installation, the value should not need to be changed again.. If it is changed, a full gen is recommended and the COMUS-installed. components must be deinstalled and reinstalled..M$RCBBDI  EQU       0400302           . BDI of reload control bank... This parameter specifies the userid/password that will be used by the. reload controller to open an RSI demand session.  This session will. remain open continuously and will be used to submit console keyins. passed through the reload control bank.  This parameter is required if. you wish to use the reload notification feature.  If configured, the. UKEY program can also be used in non MARS-related batch runs to submit. programmed keyins.  If you do not want to use this capability, set the. parameter to the null string ('').  The RLDCTL program and the MARS. Processor are affected if this parameter is changed..M$RSIUP   EQU       'RLCDCI/PASSWD'   . RLDCTL demand console interface                                      .  userid / password/.. *Note: the M$EXPSAVE and M$EXPSAVALL parameters are no longer defined.   in this element.  Expiration of normal SAVE and SAVALL tapes is now.   indicated by a parameter card that follows execution of the REBUILD.   program in the save-history update run (RUN/SAVHST).  This allows the.   parameters to be changed without a regen and also allows a site to run.   SAVEs and SAVALLs with more than one fixed expiration.... This parameter is the default expiration used for backups that are more. than one day old, and do not have an existing entry in the history file.. This is usually an error condition and the recommended value is the normal. SAVE expiration..M$EXPSDEF  EQU      14                . Expiration for > 1-day-old backups.... This parameter specifies the maximum number of files that can be reloaded. by a single user in a single request.  If changed, the MARS Processor,. the FETCH Processor, the CNSRLD program and the MRCBNK bank will be. affected.  The value supplied should be more than adequate and should. not be increased..M$RELDMAX  EQU      100               . Maximum reloaded files/request                                      . *** Do not exceed 100 ***.... This parameter specifies the maximum number of registered qualifiers. that can be processed by the EXPRPT, LISTER and MSREP programs.  If it. is exceeded, the programs will abort.  The GETOWN subroutine used by. each of these programs uses M$OWNQMAX*4 words of table space.  Note that. this does not affect the MARS Processor or the Archive Control File.. (Up to 1000 qualifiers may be registered per class in MARS level 3R1)..M$OWNQMAX  EQU      500               . Maximum owned (registered) qualifiers                                      .  that can be processed by GETOWN.... These parameters specify the maximum number of owner account numbers. and the maximum number of associated programmer/group IDs that may be. used in the parameter element, GROUPACCTS.  If either one are exceeded,. the expiration and exception reports cannot be produced.  The EXPRPT,. SELECT and LISTER programs each use M$ACCTMAX*3 and M$GROUPMAX*4 words. of table space.  The MARS processor and the Archive Control File are. not affected by these parameters.  In the current software release,. M$GROUPMAX must not exceed 64..M$ACCTMAX  EQU      200               . Maximum owner account numbers.M$GROUPMAX  EQU     64                . Maximum programmer/group IDs                                      .  *** Must not exceed 64 ***/.. The following parameter is set to the full name of the site running. the MARS software.  It must not exceed 68 characters, and must not. contain an ampersand (&).  The name will appear at the top of several. of the generated reports..M$SITENM  EQU       'MARS USER'          . Full name of site.M$SITECD  EQU       'XXX'             . Three character site code... The following parameter is set to the number of printable lines per. page.  This is total lines/page less top and bottom margins..M$LPP     EQU       57                . Printable lines/page... The following parameter is set to the total number of lines per page,. including margins..M$TLP     EQU       66                . Total lines/page... The following parameter is set to one if files are private by account. at your site, zero if private by project..M$PVTACC  EQU       1                 . Files private by account... The following parameter determines the MHFS status of the MARS local. installation.  If your site does not use MHFS, this parameter must be. set to zero.  If you have MHFS but want to operate independent MARS. systems with local control and history files, it must also be set to. zero.  If you want to operate a shared system with shared control and. history files, set the parameter to one.  *Note: shared control and. history files are REQUIRED if files from the shared directory are to. be archived or reloaded.  This parameter affects almost every program. in the MARS system.  A full gen is required if the value is changed..M$MHFSHARED  EQU    0                 . MHFS is not configured, and/or                                      .  MARS will use local files... The following parameter is significant only when converting from a. local to a shared file system.  (Only one Archive- and one Save-. History File may be converted.)  The parameter specifies the host-id. that will be considered the originator for all pre-shared archived. or saved files.  Used only when M$MHFSHARED=1 (previously 0), during. the initial REBUILD of ARCHIST$, SAVHIST$ on a shared system.  The. allowed values are 1-4..M$MHFDFHOST  EQU    1                 . Originator host-id = 1/.. MARS has not been tested in a SENTRY=TRUE environment.  In the. standard release, nothing will be done to restore the security. information for files reloaded from archive.  There is no such. information in a SENTRY=FALSE environment, so no harm is done.. If your site has security turned on, set the following parameter. to one, and reloaded files will have security information restored.. Since the development site does not have security configured, it. is imperative that this be tested before using MARS for production. archiving.  Contact the author for more information..M$SENTRY  EQU       0                 . Security is not configured... The following parameter is a single ECL command that will make a run. privileged.  Many sites use a program for this.  If so, the command. to execute the program is specified here.  If not, a hard coded @ASG. of the SYS$*DLOC$ file (with keys) is required.  This command is. placed in all reload runstreams started by RLDCTL.  Only the RLDCTL. program is affected if the parameter is changed..M$PRVCMD  EQU       '@PRIV'           . ECL command to make reloads privileged.... The following parameters are single-line ECL commands which are. executed at the beginning and end of every reload run.  (This is. analogous to B4ROLBAK, AFROLBAK).  If used, each must begin with. an '@' in column 1.  If you do not wish to use this feature, leave. one or both blank.  Only the RLDCTL program is affected.  Note:. the run is not privileged when the first command is executed..M$BFRCMD  EQU       ''                . Execute at start of RLxxxx run.M$AFRCMD  EQU       ''                . Execute at end of RLxxxx run..P         PROC      *0MGPDEF*   NAME                        . Entry point          END@PDP,IMP MARSREL$.ACFDEF,,,156076023134.         ARCHIVE CONTROL FILE DEFINITIONS - WRC 12/88..         HEADER DEFINITIONS UPDATED FOR MARS 2R2+  (OTHERS UNAFFECTED).          DEF..         GENERAL DEFINITIONS.ACMXCL    EQU       20                . MAX NUMBER OF STORAGE CLASSESACMXPK    EQU       150               . MAX TOTAL NUMBER OF PACK-IDSACBFSC    EQU       4                 . SECTORS/BUFFERACBFSZ    EQU       ACBFSC*28         . WORDS/BUFFERACBFBS    EQU       64                . BEGINNING SECTOR ADDRESS OF DATA..         HEADER DEFINITIONS.ACHDLB    EQU       0                 . SOFTWARE LABEL *ACFL*ACHDCD    EQU       1                 . CREATION DATE/TIMEACHDLV    EQU       2                 . LEVEL OF CREATION SOFTWAREACHDPA    EQU       3                 . PRIVILEGED ACCOUNTACHDQL    EQU       5                 . POINTER TO FIRST QT IN DEFAULT CLASSACHDNB    EQU       6                 . NEXT FREE BUFFER ADDRESSACHDNW    EQU       7                 . NEXT ADDR TO WRITE IF NO FREE BUFFERS..         CLASS/PACK-ID TABLE DEFINITIONS - APPENDED TO ACF HEADER, LEV 2R2+.ACCTBG    EQU       28                . START OF STORAGE CLASS TABLE.ACCECL    EQU       0                 . OFFSET OF CLASS-ID WITHIN ENTRYACCEQL    EQUF      1,,H2             . LINK TO FIRST QUAL TABLE IN CLASS                                      . (WORDS 2-4 RESERVED FOR FUTURE USE)ACCTES    EQU       5                 . SIZE OF ONE ENTRY..ACPTBG    EQU       ACCTBG+ACCTES*ACMXCL  . START OF PACK-ID TABLE.ACPEPK    EQU       0                 . OFFSET OF PACK-ID WITHIN ENTRYACPECL    EQU       1                 . OFFSET OF CLASS-ID FOR THIS PACKACPTES    EQU       2                 . SIZE OF ONE ENTRY.ACHDSZ    EQU       ((ACPTBG+ACPTES*ACMXPK)//112)*112 . SIZE OF ACF HEADER/..         QUALIFIER TABLE (QT) DEFINITIONS.ACQTNX    EQU       0                 . POINTER TO NEXT QTACQTBG    EQU       1                 . BEGINNING OF QUALIFIER ENTRIES.ACQEQL    EQU       0                 . OFFSET OF QUALIFIER WITHIN ENTRYACQEFL    EQUF      2,,H2             . OFFSET OF POINTER TO FTACQTES    EQU       3                 . SIZE OF ONE QUALIFIER ENTRY.ACQTMX    EQU       (ACBFSZ-1)/ACQTES  . MAX QUAL ENTRIES/QT TABLE..         FILE TABLE (FT) DEFINITIONS.ACFTNX    EQU       0                 . POINTER TO NEXT FTACFTQL    EQU       1                 . QUALIFIER FOR THIS TABLE..         THE FOLLOWING 5 ENTRIES ARE ONLY DEFINED FOR THE FIRST FT.         IN AN FT CHAIN..ACFTON    EQU       3                 . OWNER OF THIS QUALIFIERACFTRM    EQUF      5,,H1             . MAX REF LIMIT (M$REFMAX IF ZERO)*3R1ACFTUI    EQU       6                 . LAST UPDATING USERIDACFTUT    EQU       7                 . DATE/TIME (TDATE$) OF LAST UPDATEACFTBA    EQU       8                 . BEGINNING OF AUTHORIZED ACCOUNT TABLE.ACFTMA    EQU       10                . MAX ACCOUNTS/FILE TABLE.ACFTBF1   EQU       ACFTBA+ACFTMA*2   . BEGINNING OF FILE ENTRIESACFTBF2   EQU       3                 . BEG OF FILE ENTS IN EXTENSION TABLE.ACFEFL    EQU       0                 . OFFSET OF FILENAME WITHIN ENTRYACFECY    EQUF      2,,S1             . CYCLE LIMIT OFFSETACFEF1    EQUF      2,,S2             . FILE FLAGS OFFSET (BITS 0-5)ACFEF2    EQUF      2,,S3             . FILE FLAGS OFFSET (BITS 6-11)   *3R1.ACFFBY    EQU       1*/0              . BYPASS THIS FILEACFFAC    EQU       1*/1              . ALL CYCLES CONSIDERED                                      . IN LEVEL 3R1 THE <ACY> FLAG WAS RE-                                      . PLACED BY <DCY> WHICH HAS AN OPPOSITE                                      . MEANING.  TO PRESERVE COMPATIBILITY                                      . BETWEEN LEVELS <DCY> IS REPRESENTENTED                                      . INTERNALLY AS THE ABSENCE OF <ACFFAC>.ACFFLR    EQU       1*/2              . LIST REQUESTEDACFFVF    EQU       1*/3              . ARCHIVE OF V-OPTION FILES OKACFFBC    EQU       1*/4              . BYPASS CURRENT CYCLEACFFCF    EQU       1*/5              . CRIT FILE - ARCHIVE TO 2 TAPES  *2R2ACFFDN    EQU       1*/6              . DO NOT NOTIFY WHEN FILE EXPIRES *3R1ACFFDF    EQU       1*/7              . DELETE FILE EVEN IF NO CURR B/U *3R1.ACFERF    EQUF      2,,H2             . REFERENCE DAYS OFFSETACFEEX    EQUF      3,,H1             . EXPIRATION DAYS OFFSETACFTES    EQU       4                 . SIZE OF ONE FILE ENTRY.ACFTMX1   EQU       (ACBFSZ-ACFTBF1)/ACFTES  . MAX FILE ENTRIES/FT TABLEACFTMX2   EQU       (ACBFSZ-ACFTBF2)/ACFTES  . MAX FILE ENTRIES/EXT FT TABLE.ACFDEF*   PROC          END@PDP,IMP MARSREL$.AHFDEF,,,156070023134.         ARCHIVE HISTORY FILE DEFINITIONS - WRC 2/89..         THESE DEFINITIONS ARE FOR MARS 3R1D3  (2/92)..         HEADER DEFINITIONS.          DEFAHHLBL    EQUF      0                 . SOFTWARE LABEL (ARCHIST$ = *AHFL*)                                      .                (SAVHIST$ = *SHFL*)AHHLEV    EQUF      1                 . MOST RECENT REBUILD LEVELAHHPQC    EQUF      2                 . ENTRY COUNT OF ALL QUALIFIER TABLESAHHUPT    EQUF      3                 . LAST UPDATE DATE/TIMEAHHPQL    EQUF      4                 . LINK TO FIRST QT (SECTOR ADDRESS)AHHSTB    EQUF      5                 . STARTING SECTOR OF HISTORY AREAAHHNXB    EQUF      6                 . PTR TO NEXT FREE SECTOR IN HIST AREAAHHSTD    EQUF      8                 . DATE/TIME OF LAST STAT AREA INITAHHAIP    EQUF      9,,S1             . ARCHIVE-IN-PROGRESS FLAGAHHSFA    EQUF      9,,S2             . SET IF SHARED FILES ARC SINCE LAST RBLDAHHERC    EQUF      9,,H2             . ERROR COUNT THIS CYCLE.AHHSAB    EQU       10                . BEGINNING OF STATISTICS AREA.AHHARR    EQUF      10                . TOTAL ARCHIVE RUNSAHHPUF    EQUF      11,,H1            . TOTAL PURGED FILES              (3R1)AHHARF    EQUF      11,,H2            . TOTAL ARCHIVED FILESAHHART    EQUF      12                . TOTAL ARCHIVED TRACKSAHHPT1    EQUF      13,,H1            . TOTAL PURGED TRACKS (35-18)     (3R1)AHHRLR    EQUF      13,,H2            . TOTAL RELOAD RUNSAHHPT2    EQUF      14,,H1            . TOTAL PURGED TRACKS (17-0)      (3R1)AHHRLF    EQUF      14,,H2            . TOTAL RELOADED FILESAHHRLT    EQUF      15                . TOTAL RELOADED TRACKSAHHEXF    EQUF      16                . TOTAL EXPIRED FILESAHHEXT    EQUF      17                . TOTAL EXPIRED TRACKSAHHSAL    EQU       8                 . LENGTH OF STATISTICS AREA.AHHSAD    EQUF      18                . DATE/TIME OF PREV STAT AREA INIT.AHHSAS    EQU       20                . BEGINNING OF STATISTICS SAVE AREA..AHBEGN    EQU       64                . STARTING SECTOR OF HISTORY/POINTER DATA/.        ***** POINTER AREA DEFINITIONS *****..         THE QUALIFIER TABLES AND FILE TABLES ARE RECREATED EACH TIME THE.         REBUILD PROGRAM IS RUN.  THESE DEFINITIONS ARE FOR MARS 3R1+.         (INTERNAL REBUILD LEVEL = 0700)...         QUALIFIER TABLE DEFINITIONS.APQTLB    EQUF      0                 . SOFTWARE QT LABEL (**QT**)APQTNX    EQUF      1                 . LINK TO NEXT QT IN CHAINAPQTBG    EQU       2                 . BEGINNING OF QUALIFIER ENTRIES.APQEQL    EQUF      0                 . QUALIFIERAPQEFC    EQUF      2                 . COUNT OF FILE TABLE (ENTRIES)APQEFL    EQUF      3                 . LINK TO FT (SECTOR ADDRESS)APQTES    EQU       4                 . SIZE OF QT ENTRY.APQTBS    EQU       1792*2            . QUALIFIER TABLE BUFFER SIZE.APMXQL    EQU       (APQTBS-APQTBG)/APQTES  . MAXIMUM QUALIFIER ENTRIES/BUFFER..         FILE TABLE DEFINITIONS.APFTQL    EQUF      0                 . QUALIFIER FOR THIS FILE TABLEAPFTBG    EQU       2                 . BEGINNING OF FILE ENTRIES.APFEFL    EQUF      0                 . FILENAMEAPFECL    EQUF      2                 . F-CYC (35-24), HIST SECT OFFSET (23-0)APFEW3    EQUF      3                 . HOST-ID (35-33), CREATION D/T (32-0)APFEHC    EQUF      3,,H1             . HOST-ID (35-33), JUL CRT DATE (32-18)                                      . (HOST-ID > 0 ONLY ON SHARED-HF SYSTEMS)APFECT    EQUF      3,,H2             . CREATION TIME (TDATE$ H2)APFEBW    EQUF      4                 . FOR TESTING CRIT-BACKUP BIT (35)APFERD    EQUF      4,,H1             . LAST REF DATE (TDATE$, H1) (34-18)APFETS    EQUF      4,,H2             . TRACK SIZEAPFERW    EQUF      5                 . WHOLE WORD DEF FOR TESTING RELOAD BITAPFERE    EQUF      5,,H1             . RELOAD FLAG (35), EXPIRATION (34-18)APFEAD    EQUF      5,,H2             . ARCHIVE DATE (JULIAN)APFTES    EQU       6                 . SIZE OF FT ENTRY.APFTBS    EQU       1792*4            . FILE TABLE BUFFER SIZE.APMXFL    EQU       (APFTBS-APFTBG)/APFTES  . MAXIMUM FILE ENTRIES/BUFFER/.        ***** HISTORY AREA DEFINITIONS *****..         FILE ENTRY DEFINITIONS (ONE PER SECTOR).             THESE ARE UPWARD-COMPATIBLE FROM MARS 2R1 TO 2R2, 3R1.AHQUAL    EQUF      0                 . QUALIFIERAHFILE    EQUF      2                 . FILENAMEAHCYCL    EQUF      4,,H1             . CYCLE NUMBERAHEXP     EQUF      4,,H2             . EXPIRATIONAHCATT    EQUF      5                 . CATALOG DATE/TIMEAHREFT    EQUF      6                 . LAST REF DATE/TIMEAHARCT    EQUF      7                 . ARCHIVE DATE/TIMEAHMNM4    EQUF      8                 . FIRST 4 CHARS EQUIP MNEM (S1-S4)AHINHI    EQUF      8,,S5             . INHIBIT FLAGSAHPCFF    EQUF      8,,S6             . PCHAR (5-2) AND FILE FLAGS (1-0)AHINIT    EQUF      9,,H1             . INITIAL RESERVEAHMXGR    EQUF      9,,H2             . MAXIMUM GRANULES.AHMIST    EQU       10                . OFFSET OF MATCHING INFO IN AH BUFFER.AHMQUAL   EQUF      0                 . MATCHING QUALIFIER FROM CTL FILE (2R1)AHMFILE   EQUF      2                 . MATCHING FILENAME FROM CTL FILE (2R1)AHMIVF    EQUF      0,,S1             . VERSION OF MATCHING INFOAHMIV2    EQU       1                 .  VALUE OF <AHMIVF>, LEVEL 2R2+AHMQWC    EQUF      0,,S2             . WILDCARD COUNT OF MATCHING QUAL (2R2+)AHMFWC    EQUF      0,,S3             . WILDCARD COUNT OF MATCHING FILE (2R2+)AHMFLG    EQUF      0,,S4             . ADDITIONAL FLAG BITS (3R1+)AHMFDN    EQU       1*/0              . DO NOT NOTIFY        (3R1+)AHMCLS    EQUF      1                 . CLASS-ID (2R2+)AHMVLC    EQUF      4,,H1             . DSR/RFC FROM CONTROL FILEAHMVLF    EQUF      4,,H2             . DSR/RFC OF THIS FILEAHMTYPE   EQUF      5,,S1             . REASON FOR ARCHIVAL (R)EF, (C)YCLE.AHMICT    EQU       6                 . SIZE OF MI BUFFER.AHHOST    EQUF      15,,S2            . HOST-ID (OVERLAYS LAST MI WORD) (3R1)                                      . 0 = NON-SHARED SYSTEM                                      . 1-4 = LOCAL FILE, SHARED SYSTEM                                      . 077 = SHARED FILEAHRFCT    EQUF      15,,H2            . REFERENCE CT (OVERLAYS LAST MI WORD)AHPROJ    EQUF      16                . PROJECT IDAHACCT    EQUF      18                . ACCOUNT NUMBERAHACVN    EQUF      20,,H1            . ACP VERSION USED TO GENERATE ENTRYAHTKCT    EQUF      20,,H2            . TRACK COUNTAHPKID    EQUF      21                . PACKID IF REMOVABLEAHACQA    EQUF      22,,H1            . ACQ$ TRACK ADDRAHACQN    EQUF      22,,H2            . ACQ$ TRACK COUNTAHRLDF    EQUF      23,,S1            . SET (+1) IF FILE HAS BEEN RELOADED                                      .  FIELDATA 'P' IF FILE PURGED (3R1+)                                      .  FIELDATA 'D' IF FILE DELETED (3R1+).AHFLGS    EQUF      23,,S2            . MISC FLAGSAHFDEL    EQU       1*/0              . SET IF FILE DELETEDAHFRKY    EQU       1*/1              . SET IF FILE HAD READ KEYAHFWKY    EQU       1*/2              . SET IF FILE HAD WRITE KEYAHFCFB    EQU       1*/3              . SET IF CRIT FILE, 2ND BACKUP (2R2+)AHFHIC    EQU       1*/4              . ARCHIVED TO CARTRIDGE TAPEAHFNEW    EQU       1*/5              . SET IF NEW ENTRY.AHBRCT    EQUF      23,,S3            . ARCHIVE REEL COUNTAHSTFP    EQUF      23,,H2            . STARTING FILE POSITIONAHBRST    EQU       24                . START OF REEL TABLE.AHBRMX    EQU       4                 . MAX ENTRIES IN REEL TABLE                                      .  (<RCBRMX> MUST EQUAL THIS VALUE).AHFDEF*   PROC          END@PDP,IMP MARSREL$.CHRPRC,,,173523100733.         CHARACTER INPUT PROCS                               WRC 8/79.. GNCH - GET NEXT CHARACTER. GNCHNB - GET NEXT NONBLANK CHARACTER. JUMP - JUMP ON CURRENT CHARACTER. JUMPNB - JUMP ON CURRENT / NEXT NONBLANK CHARACTER.. <GNCH(NB)/JUMP(NB)>,<ERROR>,<NOFIND>   <PARAMETER LIST>.. <ERROR> - RETURN ADDRESS FOR ALPHA/NUMERIC SCAN ERRORS.. <NOFIND> - RETURN ADDRESS IF NO MATCH IN PARAMETER LIST.            (NEXT INSTRUCTION ASSUMED IF ZERO).. <PARAMETER LIST> IS A SEQUENCE OF PARAFORMS OF FORMAT:.                  <MATCH>,<JUMP-ADDRESS> WHERE:..     <MATCH> IS A SINGLE ASCII CHARACTER OR ONE OF THE FOLLOWING:..     'AL' - ALPHA, FIRST 12 CHARS RETURNED IN A4-A5 (FD, LJSF).     'NU' - NUMERIC, BINARY RETURNED IN A5.     'DN' - NUMERIC, BINARY IN A4-A5, A3=[DOUBLE] IF DOUBLE PRECISION.     'EN' - MATCH ON END OF IMAGE.     'TR' - TERMINATION CHARACTER: 'EN', ')', OR '. '.     'TC' - MATCH FOR CURRENT CONTENTS OF [TSTCHR].     'A1' - LIKE 'AL', ALLOW '$','-' CHARACTERS (FILE/ELT NAMES).     'A2', 'A3' - SPECIAL USE BY INFOR FORMAT SCANNER.P         PROCGNCH*     NAME      0JUMPNB*   NAME      1GNCHNB*   NAME      2JUMP*     NAME      3          LMJ       X11,*SCAN+P(0,0)          +         P(0,2),P(0,1)I DO P-1 , +        LTR(P(I,1)),P(I,2)          END.          DEFLTR('EN') EQU       0200              . INTERNAL CODES FOR MATCH IDENTIFIERSLTR('AL') EQU       01000LTR('NU') EQU       02000LTR('DN') EQU       03000LTR('TR') EQU       04000LTR('TC') EQU       05000LTR('A1') EQU       07000LTR('A2') EQU       07001LTR('A3') EQU       07002.CHRDEF*   PROCI DO 0200 ,LTR(I-1)*  EQU  I-1        . INTERNAL CODES FOR 1-CHAR IDS          END@PDP,IMP MARSREL$.DBIOP,,,173524100733.         DOUBLE BUFFERED GENERAL PURPOSE DISC FILE I/O ROUTINE..         REGISTER USAGE:  A0-A2, X11...  OPEN INPUT I/O:..   D$BIO  <PACKET>  <SECTOR ADDRESS>    . ADDRESS IS OPTIONAL...  OPEN OUTPUT I/O:..   D$BOO  <PACKET>  <SECTOR ADDRESS>    . NOT REQ UNLESS ADDR IS GIVEN...  READ A RECORD:..   D$BI  <PACKET>  <I/O ERR>,<EOF>    . A2 = STATUS.    . THE ADDRESS OF THE NEXT RECORD IS RETURNED IN REGISTER A1...  WRITE A RECORD:..   D$BO  <PACKET>  <I/O ERR>          . A2 = STATUS.    . THE ADDRESS OF THE NEXT RECORD TO WRITE IS RETURNED IN REGISTER A1...  CLOSE INPUT I/O:..   D$BIC  <PACKET>...  CLOSE OUTPUT I/O:..   D$BOC  <PACKET>  <I/O ERR>          . A2 = STATUS...  PACKET GENERATION:..   D$BRP  'FILE'  <REC LEN>,<BLOCK SIZE>,<START ADDR>,<BUFF ADDR>.   D$BWP  'FILE'  <REC LEN>,<BLOCK SIZE>,<START ADDR>,<BUFF ADDR>.                  . ONLY REC LENGTH AND BLOCK SIZE ARE REQUIRED.                  . START ADDR DEFAULTS TO ZERO (OPEN VALUE OVERRIDES).                  . BUFFER MUSE BE 2*(BLOCK SIZE), IS GEN IF NOT GIVEN/..         GENERATE CODE FOR READ/WRITE AND CLOSE OUTPUT.P         PROC      0D$BDEF*   NAME..         THE DBIO$ ROUTINE IS CALLED BY THE D$BI AND D$BO PROCEDURES..$($LCN+2),DBIO$*          DL        A1,8,A0           . PICK UP REC POINTER, LOOP COUNT          UNLIST                      .          NOP       ,,*A1             . INCREMENT POINTER          JGD       A2,DBIO10         . LOOP FORWARD UNTIL RECS EXHAUSTED          TP        3,A0              . CHECK STATUS          ER        WAIT$             .  WAIT IF NECESSARY          LA,S1     A2,3,A0           . PICKUP COMPLETION STATUS          JZ        A2,DBIO05         . SKIP FORWARD IF ZERO (NORMAL)          TE,U      A2,5              . I/O 5 (EOF)?          J         0,X11             .  NOPE - RETURN ERROR          LA,H2     A2,3,A0           . GET COUNT OF WORDS READ          SZ,H2     3,A0              . ZERO FOR NEXT PASS          LA,U      A1,0              . SET UP FOR DIVIDE          DI,H1     A1,8,A0           . DIVIDE BY RECORD SIZE          LA,U      A2,,A1            . PUT INTO LOOP COUNT          LA        A1,4,A0           . SETUP RECORD POINTER          LXI,H1    A1,8,A0           . RECORD SIZE INTO INCREMENT          JGD       A2,DBIO10         . SKIP FORWARD AND DECR FOR FIRST REC          LA,U      A2,5              . NOTHING THERE AFTER ALL          J         1,X11             .  SO RETURN I/O 5DBIO05          LA        A2,6,A0           . GET BUFFER POINTERS          SA,H2     A2,4,A0           . SAVE ADDR OF NEXT BUFFER IN PKT          SSC       A2,18             . EXCHANGE POINTERS          SA        A2,6,A0           .  AND REPLACE IN PKT          LXM,U     A1,,A2            . ADDRESS OF CURRENT BUFFER          LA        A2,5,A0           . SECTOR ADDRESS JUST READ/WRITTEN          AA,H2     A2,7,A0           . INCREMENT TO NEXT SECTOR          SA        A2,5,A0           .  AND REPLACE IN PKT          ER        IO$               . ISSUE NEXT I/O          LA,H1     A2,7,A0           . PICK UP LOOP COUNTDBIO10          DS        A1,8,A0           . SAVE POINTER AND COUNT IN PKT          J         2,X11             . RETURN NORMAL..         THE DBOC$ ROUTINE IS CALLED BY THE D$BOC PROCEDURE..DBOC$*          TP        3,A0              .          ER        WAIT$             . WAIT FOR PREVIOUS I/O TO COMPLETE          LA,S1     A2,3,A0           . GET COMPLETION STATUS          JNZ       A2,0,X11          . RETURN ERROR IF NONZERO          LA        A2,6,A0           . GET FINAL BUFFER ADDRESS          SA,H2     A2,4,A0           .  AND SAVE IN PKT          LA        A2,5,A0           . SECTOR ADDRESS JUST WRITTEN          AA,H2     A2,7,A0           . INCREMENT TO NEXT SECTOR          SA        A2,5,A0           .  AND REPLACE IN PKT          DL        A1,8,A0           . RESTORE POINTER, LOOP COUNT          NOP       ,,*A1             . INCREMENT TO UNUSED RECORD ADDR          LXI,U     A1,1              . SETUP FOR TRANSFER          MSI,H1    A2,8,A0           . COMPUTE REMAINING WORD COUNT          LR        R1,A2             .  INTO R1 FOR TRANSFER          LA,U      A2,(0)            . SETUP FOR TRANSFER          BT        A1,,*A2           . ZEROFILL REMAINDER OF BUFFER          ER        IOW$              . WRITE LAST BUFFER TO FILE          LA,S1     A2,3,A0           . FINAL COMPLETION STATUS          JNZ       A2,0,X11          .  RETURN ERROR IF NONZERO          J         1,X11             .  RETURN NORMAL IF ZERO$($LCN-2)          LIST          END/.P         PROC      2D$BIO*    NAME DO P(2)>0 ,  LA    A0,P(2,1),P(2,2),P(2,3) DO P(2)>0 ,  SA    A0,P(1,1)+5          LA,U      A0,P(1,1)          ER        IO$          END.P         PROC      2D$BOO*    NAME DO P(2)>0 ,  LA      A0,P(2,1),P(2,2),P(2,3) DO P(2)>0 ,  ANA,H2  A0,P(1,1)+7 DO P(2)>0 ,  SA      A0,P(1,1)+5          END.P         PROC      2D$BI*     NAME          LA,U      A0,P(1,1)          LMJ       X11,DBIO$ DO P(2)>0 , J      P(2,1) DO P(2)>1 , J      P(2,2)          END.P         PROC      2D$BO*     NAME          LA,U      A0,P(1,1)          LMJ       X11,DBIO$          NOP       0 DO P(2)>0 , J      P(2,1)          END.P         PROC      1D$BIC*    NAME          TP        P(1,1)+3          ER        WAIT$          END.P         PROC      2D$BOC*    NAME          LA,U      A0,P(1,1)          LMJ       X11,DBOC$ DO P(2)>0 , J      P(2,1)          END/.P         PROC      3D$BRP*    NAME      1D$BWP*    NAME      2PL        FUNCLNORM*    NAME      0G         FORM      6,66F         FORM      72I(0)      EQU       +(F PL(1))          DO        12 , ;          DO        ((I(0)**(G 0,-0))=I(0))--((I(0)**(G -0,0))=(G -0,0)) ,;I(0)      EQU       ((I(0)**(G 0,-0))*/6)+5 .          END       +(F  I(0))          +         LNORM(P(1,1))          +         0 DO P(2)>3 ,  GO    D$EXTLBUF1      EQU       $($LCN+2)$($LCN+2) RES       2*P(2,2)$($LCN-2)          GO        D$CONTD$EXTL    NAMEBUF1      EQU       P(2,4)D$CONT    NAMEBUF2      EQU       BUF1+P(2,2)RC        EQU       P(2,2)/P(2,1)SL        EQU       P(2,2)//28 DO P(0,0)=2 , GO   WPGEN          +         R$,0,0            . READ FUNCTION          +         P(2,2),BUF1       . WORD COUNT, FIRST BUFFER          +         P(2,3)            . FIRST SECTOR TO READ          +         BUF1,BUF2         . BUFFER POINTERS          +         RC-1,SL           . INIT JGD COUNT, SECT SIZE OF BUFFER          +         P(2,1),BUF1       . REC SIZE, FIRST BUFFER          +         0                 . THIS WORD USED TO STORE JGD COUNT          GO        D$ENDAWPGEN     NAME          +         W$,0,0            . WRITE FUNCTION          +         P(2,2),0          . WORD COUNT, BUFFER ADDR (FILLED)          +         P(2,3)-SL         . 1ST SECT TO WRITE (INCR BEFORE WRITE)          +         BUF1,BUF2         . BUFFER POINTERS          +         RC-1,SL           . INIT JGD COUNT, SECT SIZE OF BUFFER          +         P(2,1),BUF2-P(2,1) . REC SIZE, FIRST BUFFER (INCR BEF USE)          +         RC                . INITIAL JGD COUNT (EMPTY BUFFER)D$ENDA    NAME          END@PDP,IMP MARSREL$.MFDDEF,,,215242121237          DEF.. DIRECTORY DATA BASE EQUATES..         THIS IS FOR MFDEDT 2R3+   (EXEC 41RX+).. HEADER DEFINITIONS.MFLABL    EQU       0                 . SOFTWARE LABEL *MFDB*MFFLCT    EQU       1                 . FILE COUNTMFTDAT    EQU       2                 . TDATE$ OF DIRECTORY CREATIONMFLVWD    EQU       3                 . MFDEDT LEVEL WORDMFFLAD    EQU       4                 . BEGINNING SECTOR ADDR OF FILE INFOMFMSCT    EQUF      5,,H1             . WORD COUNT OF MSALL$ INFOMFMSAD    EQUF      5,,H2             . SECTOR ADDR OF MSALL$ INFOMFOPWD    EQU       6                 . OPTIONS ON @MFDEDT CALL CARDMFHHID    EQUF      7,,S1             . HOST-ID (0 = NO MHFS, 1-4 = MHFS)MFHDID    EQUF      7,,S2             . DIRECTORY-ID (0 = STD, 1 = SHARED)                                      .  (077 = COMBINED, PRODUCED BY MFDMRG).. FILE RECORD DEFINITIONS.MFQUAL    EQU       0                 . QUALIFIERMFFILE    EQU       2                 . FILENAMEMFACCT    EQU       4                 . ACCOUNTMFPROJ    EQU       6                 . PROJECTMFRKEY    EQU       8                 . READ KEYMFWKEY    EQU       9                 . WRITE KEYMFPKCT    EQUF      10,,S1            . PACK COUNT (REMOVABLE ONLY)MFBUNO    EQUF      10,,S3            . NUMBER OF BACKUP REELSMFSTFP    EQUF      10,,H2            . STARTING FILE POSITIONMFBKUT    EQU       11                . DATE/TIME OF BACKUP (TDATE$)MFD1LK    EQUF      12,,H1            . TRACK, SECT LINK TO 1ST DADTBLMFDRID    EQUF      12,,S4            . DIRECTORY ID FROM LEAD ITEMMFSYMF    EQUF      12,,S5            . SET IF FILE IN SYMBIONT QUEUE.MFTYPE    EQUF      12,,S6            . FILE TYPEMMFIXD    EQU       0                 . FIXED DISCMMTAPE    EQU       1                 . TAPEMMREMD    EQU       040               . REMOVABLE DISC.MFTPSF    EQUF      13,,H1            . TAPE STUFFMFTPCT    EQUF      13,,S1            . REEL COUNT.MFTPFM    EQUF      13,,S2            . U12/16/20/36 TAPE FORMATMM9TRK    EQU       1*/5              . 9-TRACKMMEVEN    EQU       1*/4              . EVEN PARITYMM8BIT    EQU       1*/3              . 8-BIT PACKEDMM6BIT    EQU       1*/2              . 6-BIT PACKEDMMQRTR    EQU       1*/1              . QUARTER WORD PACKEDMMEBCD    EQU       1*/0              . DATA CONVERTER.MFTPDN    EQUF      13,,S3            . TAPE DENSITYMMDENL    EQU       1                 . LOW DENISTY (7-TRK=200, 9-TRK=800)MMDENM    EQU       2                 . MEDIUM DENSITY (7-TRK=556, 9-TRK=1600)MMDENH    EQU       3                 . HIGH DENSITY (7-TRK=800, 9-TRK=6250).MFFILF    EQUF      13,,S5            . FILE FLAGSMMBIGF    EQUF      1*/5              . BIG FILEMMWRTN    EQU       1*/1              . WRITTEN TOMMSTRT    EQU       1*/0              . STORE THROUGH.MFDISF    EQUF      13,,S6            . DISABLE FLAGSMMDISA    EQU       1*/5              . SET IF ANY DISABLE CONDITION EXISTSMMDISH    EQU       1*/4              . HARDWARE DISABLEMMDISSW   EQU       1*/3              . SOFTWARE DISABLEMMDISS    EQU       1*/2              . SECURE DISABLEMMDISD    EQU       1*/1              . DATA DISABLE.MFMXGR    EQUF      14,,H1            . MAX GRANULES.MFDESC    EQUF      14,,H2            . DESCRIPTOR BITS + J-OPTION FOR TAPESMMUNLD    EQU       1*/11             . UNLOADEDMMBKUP    EQU       1*/10             . BACKED UPMMJOPT    EQU       1*/6              . J-OPTION (TAPE).MFM1LD    EQUF      15,,T1            . MAIN ITEM SECTOR 1 LDAT INDEXMFD1LD    EQUF      15,,T2            . LDAT INDEX OF FIRST DAD TABLE. MFM2CT  EQUF      15,,S5            . (UNIMPLEMENTED).MFPCHR    EQUF      15,,S6            . PCHAR FLAGSMMPOGR    EQU       1*/5              . POSITION GRANULARITYMMWAD     EQU       1*/3              . WORD ADDRESSABLE.MFMNEM    EQU       16                . ASSIGN MNEMONIC (LJSF). MFDACT  EQUF      17,,T1            . DAD TABLE COUNT (UNIMPLEMENTED)MFNBRA    EQUF      17,,S3            . NUMBER OF RUNS ASSIGNED (UP TO 63)MFASGS    EQUF      17,,H2            . TOTAL NUMBER OF ASSIGNMENTSMFLILD    EQUF      18,,T1            . LEAD ITEM LDAT INDEXMFM0LD    EQUF      18,,T2            . MAIN ITEM SECTOR 0 LDAT INDEXMFTOBK    EQUF      18,,S5            . SET IF FILE WRITTEN SINCE LAST BACKUP.MFINHI    EQUF      18,,S6            . INHIBIT FLAGSMMGOPT    EQU       1*/5              . G-OPTIONMMVOPT    EQU       1*/4              . V-OPTIONMMPRVT    EQU       1*/3              . PRIVATEMMWOLY    EQU       1*/1              . WRITE ONLYMMROLY    EQU       1*/0              . READ ONLY.MFINIT    EQUF      19,,H1            . INITIAL RESERVEMFCYCL    EQUF      19,,H2            . ABSOLUTE F-CYCLEMFCATT    EQU       20                . TIME OF CATALOGINGMFREFT    EQU       21                . TIME OF LAST REFERENCEMFBRST    EQU       22                . START OF BACKUP REEL LISTMFBUR1    EQU       22                . FIRST BACKUP REELMFBUR2    EQU       23                . SECOND BACKUP REELMFBUR3    EQU       24                . THIRD BACKUP REELMFBUR4    EQU       25                . FOURTH BACKUP REELMFPKID    EQU       26                . FIRST PACK ID (R-DISC)MFTPR1    EQU       26                . FIRST REEL NUMBER (TAPE)MFTPR2    EQU       27                . SECOND REEL NUMBER (TAPE)MFGRAN    EQU       27                . GRANULE INFORMATION (DISC)MFHITR    EQUF      27,,H1            . HIGHEST TRACK WRITTENMFNOTR    EQUF      27,,H2            . NUMBER OF TRACKS IN FILE.MFDDEF*   PROC          END@PDP,IMP MARSREL$.RCBDEF,,,116573132234.         RELOAD CONTROL BANK DEFINITIONS - WRC 8/90..         THESE DEFINITIONS ARE FOR MARS 3R1+  (11/92)..         GENERAL/SIZING DEFINITIONS.          DEFRCADDR    EQU       034000            . START ADDRESS OF RELOAD CTL BANKRCLEVL    EQU       0300              . INTERNAL BANK SOFTWARE LEVELRCRSMX    EQU       50                . MAX RUN STATUS ENTRIESRCBRMX    EQU       4                 . MAX BACKUP REELS, MUST = <AHBRMX>RCKYMX    EQU       15                . MAX WORDS (ASCII) OF U-KEYIN TEXT..         HEADER DEFINITIONS.RCHDTS    EQUF      0                 . TEST AND SET CELLRCHDFL    EQUF      1                 . CONTROL FLAG, *READY OR *DATA*RCHDTM    EQUF      2                 . TIME$ OF LAST RLDCTL CYCLERCHDAC    EQUF      3,,H1             . ACCESS COUNT, INCR ONCE PER REQRCHDHC    EQUF      3,,H2             . ARCHIST$ ABS F-CYCLERCHDFC    EQUF      4,,H1             . FILE COUNTRCHDKL    EQUF      4,,S4             . WORD COUNT OF U-KEYIN TEXTRCHDFE    EQUF      4,,S5             . SET IF REQUEST IS FROM FETCHRCHDFA    EQUF      4,,S6             . FAS FLAG (1 = SAVE-HIST MODE)RCHDU4    EQUF      5                 . FIRST 4 CHARS USERIDRCHDLV    EQUF      6                 . LEVEL OF BANK ACCESS SOFTWARERCHDAP    EQUF      7,,S1             . ARCHIVE-IN-PROGRESS FLAG.RCHDNT    EQUF      7,,S2             . NOTIFICATION TYPE (0=NONE)RCNTTR    EQU       1                 . NOTIFY TERMINALRCNTUS    EQU       2                 . NOTIFY USERID.RCHDND    EQUF      8                 . NOTIFICATION DESTINATION..         STATUS DEFINITIONS.RCRSBG    EQU       10                . BEGINNING OF STATUS ENTRIES.RCRSGR    EQUF      0                 . GENERATED RUNID OF REQ RUN                                      .  REPL BY GEN RELOAD RUNID (FETCH ONLY).RCRSAS    EQUF      1,,S5             . ACP/FETCH STATUS CELLRCASIN    EQU       2                 . INITIALIZE VALUERCASCM    EQU       0                 . NORMAL COMPLETIONRCASER    EQU       1                 . ERROR COMPLETION.RCRSST    EQUF      1,,S6             . REQUEST STATUSRCSTCM    EQU       0                 . REQUEST COMPLETERCSTWT    EQU       1                 . REQUEST WAITINGRCSTER    EQU       2                 . REQUEST ERROREDRCKYER    EQU       3                 . KEYIN REQUEST ERRORED.RCRSSZ    EQU       2                 . SIZE OF STATUS ENTRY..         RELOAD FILE ENTRY DEFINITIONS.RCFEBG    EQU       RCRSBG+(RCRSMX*RCRSSZ) . BEGINNING OF RELOAD ENTRIES.RCFEQL    EQUF      0                 . QUALIFIERRCFEFL    EQUF      2                 . FILENAMERCFECY    EQUF      4,,H1             . CYCLERCFEC2    EQUF      4,,H2             . REPLACEMENT CYCLERCFELW    EQUF      5                 . WORD CONTAINING AHF LINK (BITS 23-0).RCFEFB    EQUF      5,,S1             . FLAG BITSRCFBCT    EQU       1*/0              . RELOAD TO CARTRIDGE TAPERCFBOS    EQU       1*/1              . ORIGINAL FILE WAS SHAREDRCFBRS    EQU       1*/2              . RELOAD TO SHARED DIRECTORYRCFBFX    EQU       1*/3              . RELOAD TO FIXED STORAGE.RCFEBC    EQUF      5,,S2             . COUNT OF BACKUP REELSRCFEQ2    EQUF      6                 . REPLACEMENT QUALIFIER (0 = NONE)RCFEF2    EQUF      8                 . REPLACEMENT FILERCFEBS    EQU       10                . START OF BACKUP REEL TABLE.RCFESZ    EQU       RCFEBS+RCBRMX     . SIZE OF ONE RELOAD ENTRY.RCKYTX    EQU       RCFEBG+(M$RELDMAX*RCFESZ) . START ADDRESS OF U-KEYIN TEXT.RCSIZE    EQU       RCKYTX+RCKYMX-1   . SIZE OF RELOAD CONTROL BANK.RCBDEF*   PROC          END@ELT,SIP MARSREL$.CERU$/MARS,,,133140142133,023.         DEFINITION OF MARS RELOAD CONTROL BANK BDI.          MGPDEF.MRCBNK*   EQU       M$RCBBDI          . MRCBNK - BANK DESCRIPTOR INDEX          END@ELT,SIP MARSREL$.CHRCON,,,224567120432,023.         GENERAL PURPOSE FREEFORM SCANNER                    WRC 8/79.. THIS SUBROUTINE IS INTENDED FOR USE WITH THE 'GNCH(NB)' AND 'JUMP(NB)'. PROCEDURES.  WHILE IN USE, THE FOLLOWING REGISTERS MUST BE LEFT ALONE:..         X4 = INPUT CHARACTER POINTER.         X5 = INPUT SCAN ADDRESS.         A6 = CURRENT CHARACTER (ASCII).         A10,A11 = NUMERIC RANGE CHECK VALUES.         A12,A13 = ALPHA RANGE CHECK VALUES.         R4 = REMAINING IMAGE WORD COUNT.$(1)      AXR$          $LIT          $ASCII.DOUBLE    EQU       1                 . FLAG SET IN A3 IF DOUBLE PRECISION.... ASCII UPPERCASE-ONLY SCANNING ENTRANCES.SCAN1A                                . GNCH          EX        0,*X4             . A3 = NEXT ASCII CHAR          TG,U      A3,0200           . IS THIS VALID CHAR?          LA,U      A3,'?'            .  NO, USE QUESTION MARK          LA,Q4     A6,AFTTBL,A3      . CONVERT TO UPPERCASE (-1=0200)          J         SCANST            . START SCANNING.SCAN2A                                . JUMPNB          TE,U      A6,' '            . IS CURRENT CHAR = SPACE?          J         SCAN4A            .  NO, START SCANNING.SCAN3A                                . GNCHNB          EX        0,*X4             . A3 = NEXT ASCII CHAR          TNE,U     A3,' '            . IS THIS A SPACE?          J         SCAN3A            .  YES, GET NEXT CHAR          TG,U      A3,0200           . IS THIS A VALID CHAR?          LA,U      A3,'?'            .  NO, USE QUESTION MARK          LA,Q4     A6,AFTTBL,A3      . CONVERT TO UPPERCASE (-1=0200)          J         SCANST            . START SCANNING.SCAN4A                                . JUMP          LA        A3,A6             . A3 = CURRENT CHAR          J         SCANST            . START SCANNING... ASCII CASE-SENSITIVE SCANNING ENTRANCES.SCAN1AL                               . GNCH          EX        0,*X4             . A3 = NEXT CHARACTER          TG,U      A3,0200           . IS THIS A VALID CHAR?          LA,U      A3,' '            .  NO, USE A SPACE          LA        A6,A3             . A6 = CHARACTER          JP        A6,SCANST         . START SCANNING IF POSITIVE          LA,U      A6,0200           .  IF NOT, LOAD 0200 (END OF IMAGE)          J         SCANST            . BEGIN SCAN.SCAN2AL                               . JUMPNB          TE,U      A6,' '            . IS CURRENT CHAR = SPACE?          J         SCAN4AL           .  NO, START SCANNING.SCAN3AL                               . GNCHNB          EX        0,*X4             . A3 = NEXT CHARACTER          TNE,U     A3,' '            . IS NEXT CHAR A SPACE?          J         SCAN3AL           .  YES, GET NEXT CHARACTER          TG,U      A3,0200           . IS CHARACTER IN VALID RANGE?          LA,U      A3,' '            .  NO, USE A SPACE          LA        A6,A3             . A6 = CURRENT CHARACTER          JP        A6,SCANST         . START SCANNING IF POSITIVE          LA,U      A6,0200           .  IF NOT, LOAD 0200 (END OF IMAGE)          J         SCANST            . BEGIN SCAN.SCAN4AL                               . JUMP          LA        A3,A6             . A3 = CURRENT CHAR          J         SCANST            . START SCAN... FIELDATA SCANNING ENTRANCES.SCAN1F                                . GNCH          EX        0,*X4             . A3 = NEXT INPUT CHARACTER (FD)          LA,Q2     A6,AFTTBL,A3      . CONVERT TO ASCII          J         SCANST            . BEGIN SCAN.SCAN2F                                . JUMPNB          TE,U      A6,' '            . IS CURRENT CHAR = SPACE?          J         SCAN4F            .  YES, BEGIN SCAN.SCAN3F                                . GNCHNB          EX        0,*X4             . A3 = NEXT INPUT CHARACTER (FD)          TNE,U     A3,$CFS(' ')      . IS THIS A SPACE?          J         SCAN3F            .  YES, GET NEXT CHARACTER          LA,Q2     A6,AFTTBL,A3      . CONVERT TO ASCII          J         SCANST            . BEGIN SCAN.SCAN4F                                . JUMP          LA        A3,A6             . A6 = CURRENT CHAR (ASCII)          LA,Q3     A3,AFTTBL,A3      . A3 = CURRENT CHAR (FD)          J         SCANST            . BEGIN SCAN/.. SCANNING CONTROL.SCANST          SA        A0,SAVA0          . SAVE A0          LXI,U     X11,1             . INCREMENT FOR PARAMETER LIST SCAN          LA        A4,,X11           . A4 = (NOFIND ADDR, ERROR ADDR)SC010          LA,Q1     A0,1,*X11         . SCAN TYPE INDEX          TG,U      A0,010            . ANYTHING IN S1?          J         SC090             .  YES, END OF LIST - RETURN NO FIND          EX        TSTTAB,A0         .  NO, EXECUTE APPROPRIATE TEST          J         SC010             . TEST FAILED, TRY NEXT PARAMETER          J         $+1,A0            . TEST SUCCESSFUL, BRANCH TO SCAN RTN.          J         SC080             . SAME CHAR          J         SC100             . 'AL'          J         SC200             . 'NU'          J         SC200             . 'DN'          ER        ERR$              . 'TR'  (WILL NOT EXECUTE HERE)          J         SC080             . 'TC' MATCH.TSTTAB          TE,Q2     A6,,X11           . SINGLE CHAR MATCH          TW        A12,A6            . 'AL'          TW        A10,A6            . 'NU'          TW        A10,A6            . 'DN'          J         SC020             . 'TR'          TE        A6,TSTCHR         . 'TC'          ER        ERR$              . UNUSED          J         SC015             . INFOR STUFF..SC015          LA,Q2     A0,,X11           . INFOR SUBCODE          TG,U      A0,3              . LESS THAN 3?          ER        ERR$              .  NO, SOMETHING VERY WRONG HERE          J         $+1,A0            .  YES, BRANCH ON TYPE.          J         SC030             . 'A1'          J         SC040             . 'A2'          J         SC050             . 'A3'/..         'TR' - TEST FOR TERMINATION CHARACTER.SC020          TE,U      A6,0200           . ARE WE AT END OF IMAGE,          TNE,U     A6,')'            .  OR IS CHAR = RIGHT PAREN?          J         SC080             .   YES, RETURN FIND          TE,U      A6,'.'            . IS THIS CHAR = PERIOD?          J         SC010             .  NO, NO FIND          SA        A3,SAVA3          .  YES, SAVE REGS TO GET NEXT CHAR          SX        X4,SAVX4          .          SX        X5,SAVX5          .          SR        R4,SAVR4          .          EX        0,*X4             . A3 = NEXT CHAR AFTER PERIOD          LXM       X4,SAVX4          . RESTORE REGISTERS          LXM       X5,SAVX5          .          LR        R4,SAVR4          .          TW        A10,A3            . IS NEXT CHAR NUMERIC?          J         SC080             .  NO, RETURN FIND          LA        A3,SAVA3          .  YES, RESTORE A3          J         SC010             .   AND RETURN NO FIND..         'A1' - INFOR FORMAT 1 - FILE/ELT NAMES.SC030          SZ        CHFLGS            . CLEAR SPECIAL FLAGS          SP1       A1FLG             . SET A1-FORMAT FLAG          TW        A12,A6            . IS CURRENT CHAR ALPHA          TNW       A10,A6            .  OR NUMERIC?          J         SC110             .   YES, FIND - CONTINUE SCAN          TE,U      A6,'$'            . IS IT A DOLLAR SIGN          TNE,U     A6,'-'            .  OR A DASH?          J         SC110             .   YES, FIND - CONTINUE SCAN          J         SC010             .   NO, RETURN NO FIND..         'A2' - INFOR FORMAT 2 - READ/WRITE KEYS.SC040          TG,U      A6,' '+1          . CHECK LOWER AND          TG,U      A6,0172+1         .  UPPER LIMITS FOR VALID KEY CHAR          J         SC010             .   RETURN NO FIND IF OUT OF RANGE          TE,U      A6,','            . COMMA          TNE,U     A6,'.'            .  OR PERIOD?          J         SC010             .   YES, ILLEGAL - RETURN NO FIND          TE,U      A6,'/'            . SLASH          TNE,U     A6,';'            .  OR SEMICOLON?          J         SC010             .   YES, ILLEGAL - RETURN NO FIND          SP1       A2FLG             . THIS IS LEGAL 1ST KEY CHAR - SET FLAG          J         SC110             .  AND START KEY SCAN..         'A3' - INFOR FORMAT 3 - FILE/ELT CYCLESSC050          TW        A10,A6            . IS CURRENT CHAR NUMERIC          TNE,U     A6,'+'            .  OR PLUS SIGN?          J         SC300             .   YES - START SCAN          TNE,U     A6,'-'            . IS CHAR A MINUS SIGN?          J         SC300             .  YES - START SCAN          J         SC010             .  NO, RETURN NO FIND..         COME HERE WHEN SINGLE-CHARACTER MATCH WAS SUCCESSFUL.SC080          LA        A0,SAVA0          . RESTORE A0          LX,H2     X11,,X11          . X11 = FIND ADDRESS          J         0,X11             . RETURN 'FIND' TO CALLER..         COME HERE WHEN PARAMETER LIST EXHAUSTED - NO FIND.SC090          LA        A0,SAVA0          . RESTORE A0          SSL       A4,18             . A4 = NO FIND ADDRESS          JZ        A4,0,X11          . IF ZERO, RETURN TO NI          SA        A4,RETADR         . IF NONZERO, SAVE ADDRESS          J         *RETADR           .  AND JUMP INDIRECT TO IT/.. ALPHANUMERIC SCANNER.SC100          SZ        CHFLGS            . CLEAR SPECIAL MODE FLAGSSC110          SA        A4,RETADR         . STORE RETURN ADDRESSES          LA,U      A0,11             . SAVE UP TO 12 CONTIGUOUS CHARACTERS          DL        A4,FSPACES        . INIT A4,A5 = FD SPACES          TZ        ASCIMG            . ARE WE SCANNING ASCII?          J         SC150             .  YES, SKIP.. FIELDATA ALPHANUMERIC.          LA,U      A12,$CFS('A')-1   . SET UP A12,A13 FOR FD RANGE TEST          LA,U      A13,$CFS('Z')     .SC115          LSSL      A4,6              . PREPARE A4 TO RECIEVE CHAR          DSL       A3,6              . SHIFT TO A4 UPPER SIXTH          LDSC      A4,6              . MOVE TO A4,A5 LOWER SIXTHSC120          EX        0,*X4             . A3 = NEXT FD CHARACTER          TW        A12,A3            . IS CHAR ALPHABETIC          TNW       A10,A3            .  OR NUMERIC?          J         SC140             .   YES, LEGAL CHAR - SKIP          TZ        A1FLG             . SCANNING FOR FILE/ELT NAMES?          TE,U      A3,$CFS('-')      .  YES, '-' IS LEGAL CHAR          TNE,U     A3,$CFS('$')      .  TEST FOR '$' ALSO          J         SC140             .   LEGAL CHAR, SKIP          TNZ       A2FLG             . SCANNING FOR FILE KEYS?          J         SC130             .  NO, ILLEGAL CHAR - STOP SCAN          JN        A3,SC130          . STOP ALSO IF END OF IMAGE          TE,U      A3,$CFS(' ')      .          TNE,U     A3,$CFS(',')      .          J         SC130             . STOP IF SPACE OR COMMA          TG,U      A3,$CFS(';')      .          TG,U      A3,$CFS('.')+1    .          J         SC140             . STOP IF ';', '/', '.' (OTHERS LEGAL)SC130          LA,Q2     A6,AFTTBL,A3      . A6 = NEXT CHAR (ASCII)          LA,U      A12,'A'-1         . RESTORE A12,A13 FOR ASCII RANGE CHECK          LA,U      A13,'Z'           .          J         SC190             . GO SET UP A4,A5 AND RETURN TO USERSC140          JGD       A0,SC115          . LOOP BACK FOR NEXT CHAR          TNZ       CHFLGS            . TOO MANY LEGAL CHARS - IS THIS INFOR?          J         SC120             .  NO, IGNORE EXCESS CHARACTERS          LA,U      A12,'A'-1         .  YES, ERR: RESTORE A12,A13 FIRST          LA,U      A13,'Z'           .          LA        A0,(0100+ER1L,ERR1) . 'ALPHA MAX LENGTH EXCEEDED'          J         SC900             .  GO PRINT MESSAGE AND RETURN ERROR.. ASCII ALPHANUMERIC.SC150          LA,Q3     A3,AFTTBL,A3      . A3 = CURRENT CHAR (FIELDATA)          LSSL      A4,6              . PREPARE A4 TO RECIEVE CHAR          DSL       A3,6              . SHIFT TO A4 UPPER SIXTH          LDSC      A4,6              . SHIFT TO A4,A5 LOWER SIXTHSC160          EX        0,*X4             . A3 = NEXT CHAR (ASCII)          TW        A12,A3            . IS IT ALPHABETIC,          TNW       A10,A3            .  OR NUMERIC?          J         SC170             .   YES, LEGAL CHAR - SKIP          TZ        A1FLG             . SCANNING FILE/ELT NAME?          TE,U      A3,'-'            .  YES, ALLOW '-' AS LEGAL CHAR          TNE,U     A3,'$'            .  ALSO ALLOW '$' REGARDLESS          J         SC170             .   SKIP IF LEGAL CHAR          TNZ       A2FLG             . SCANNING FILE KEYS?          J         SC165             .  NO, GO CHECK FOR LOWERCASE CHAR          TG,U      A3,' '+1          . TEST FOR VALID RANGE OF KEY CHARS          TG,U      A3,0172+1         .          J         SC180             .  SKIP IF ILLEGAL CHARACTER          TE,U      A3,','            .          TNE,U     A3,'.'            .          J         SC180             . DON'T ALLOW COMMA OR PERIOD EITHER          TE,U      A3,';'            .          TNE,U     A3,'/'            .          J         SC180             . OR SEMICOLON OR SLASH          J         SC170             .  ALL OTHER CHARS LEGALSC165          TG,U      A3,0141           . TEST FOR WITHIN RANGE OF          TG,U      A3,0172+1         .  ASCII LOWERCASE CHARS          J         SC180             .   NO, ILLEGAL CHARSC170          JGD       A0,SC150          . BACK FOR NEXT CHARACTER          TNZ       CHFLGS            . FIELD SIZE EXCEEDED - IS THIS INFOR?          J         SC160             .  NO, CONTINUE, IGNORE EXCESS CHARS          LA        A0,(0100+ER1L,ERR1) . 'ALPHA MAX LENGTH EXCEEDED'          J         SC900             .  GO PRINT MESSAGE AND RETURN ERRORSC180          TG,U      A3,0200           . IS NEXT CHAR IN VALID RANGE?          LA,U      A3,'?'            .  NO, USE QUESTION MARK          LA,Q4     A6,AFTTBL,A3      . A6 = CURRENT ASCII CHARACTER.. FINISH UP.SC190          TP        A0                . A0 = REMAINING LOOP COUNT          LA,U      A0,0              .  IF NEG, SET TO ZERO          LA,U      A3,12             .          ANA       A3,A0             . 12 - REM CT = CHAR COUNT IN A4,A5          MSI,U     A0,6              . TIMES 6 = BIT COUNT (FD CHARS)          LDSC      A4,,A0            . LEFT JUSTIFY RESULT          LA        A0,SAVA0          . RESTORE A0          LX,H2     X11,,X11          . X11 = RETURN ADDRESS          TNZ       CHFLGS            . INFOR SCAN?          J         0,X11             .  NO, RETURN NOW          DL        A0,A4             .  YES, A0,A1 = RESULT ALSO          LA        A2,A3             .  A2 = CHAR COUNT          J         0,X11             . RETURN NOW/.. NUMERIC SCANNER.. TAKE FULL ADVANTAGE OF THE FACT THAT ASCII AND FIELDATA CHARACTER. CODES FOR NUMBERS ARE THE SAME!.SC200          SA        A4,RETADR         . SAVE ERROR RETURN          DSL       A4,72             . INIT A4,A5 = 0          ANA,U     A0,2              . A0 = 2 ('NU') OR 3 ('DN')          SA        A0,DBLFLG         . DBLFLG = 1 IF 'DN', 0 IF NOT          TE,U      A6,'0'            . IS FIRST CHAR A ZERO?          J         SC220             .  NO, DECIMAL SCAN.. SCAN OCTAL NUMERIC.SC210          EX        0,*X4             . A3 = NEXT CHARACTER          TW        A10,A3            . IS IT NUMERIC?          J         SC260             .  NO, ALL DONE          TG,U      A3,'8'            .  YES, IS CHAR 8 OR 9?          J         SC280             .   YES, ERROR          LSSL      A3,33             . SHIFT BINARY TO A3 UPPER          LDSC      A3,3              . NOW INTO A4 LOWER          JNZ       A3,SC290          . IF A3 NONZERO, OVERFLOW          SSC       A4,3              . SHIFT TO A4 UPPER          LDSC      A4,3              . NOW TO A4,A5 LOWER          TNZ       DBLFLG            . IS THIS DOUBLE PRECISION SCAN?          JNZ       A4,SC290          .  NO, OVERFLOW IF A4 NONZERO          J         SC210             . GO GET NEXT CHARACTER.. SCAN DECIMAL NUMERIC.SC220          LA,U      A0,9              . MAX OF TEN CHARS FOR S. P. SCANSC230          ANA,U     A3,'0'            . CONVERT TO BINARY          MSI,U     A5,10             . MULT TOTAL BY TEN          AA        A5,A3             . ADD THIS DIGIT TO TOTAL          EX        0,*X4             . GET NEXT CHAR          TW        A10,A3            . IS IT NUMERIC?          J         SC260             .  NO, ALL DONE          JGD       A0,SC230          .  YES, BACK TO TOP UNTIL COUNT > 10SC240          ANA,U     A3,'0'            . CONVERT TO BINARY          SA        A3,DIGIT+1        . STORE FOR LATER ADDITION          LA,U      A3,0              .          LDSL      A3,4              . A3 = UPPER 4 BITS OF TOTAL          JNZ       A3,SC290          . OVERFLOW IF NONZERO          SSL       A4,4              . RESTORE TOTAL          LDSL      A4,3              . A4,A5 = TOTAL TIMES 8          DS        A4,OPSAVE         . STORE FOR LATER USE          DSL       A4,2              . A4,A5 = TOTAL TIMES 2          DA        A4,OPSAVE         . ADD TIMES 8 = TIMES TEN          JO        SC290             . ERROR IF OVERFLOW DETECTED          DA        A4,DIGIT          . ADD BINARY NEXT DIGIT          JO        SC290             . ERROR IF OVERFLOW          TNZ       DBLFLG            . DOUBLE PRECISION SCAN?          JNZ       A4,SC290          .  NO, ERROR IF A4 IS NONZERO          EX        0,*X4             . GET NEXT CHARACTER          TNW       A10,A3            . IS IT NUMERIC?          J         SC240             .  YES, DO THIS ALL OVER AGAIN          TNZ       DBLFLG            .  NO, CHECK FOR DP SCAN          JN        A5,SC290          .   IF NOT, OVERFLOW IF A5 IS NEGSC260          TG,U      A3,0200           . IS NEXT CHAR IN LEGAL RANGE?          LA,U      A3,'?'            .  NO, USE QUESTION MARK          LA,Q2     A6,AFTTBL,A3      . A6 = NEXT CHAR (ASCII)          TZ        ASCIMG            . IS THIS AN ASCII SCAN?          LA,Q4     A6,AFTTBL,A3      . YES, CONVERT TO ASCII UPPERCASE          LA,U      A3,0              . CLEAR DOUBLE PRECISION FLAG          TE,U      A4,0              . IS A4 NONZERO?          LA,U      A3,DOUBLE         .  YES, SET FLAG          LA        A0,SAVA0          . RESTORE A0          LX,H2     X11,,X11          . X11 = RETURN ADDRESS          J         0,X11             . RETURN TO USERSC280          LA        A0,(0100+ER2L,ERR2) . 'ILLEGAL OCTAL DIGIT'          J         SC900             . GO PRINT MESSAGE AND RETURN ERRORSC290          LA        A0,(0100+ER3L,ERR3) . 'NUMERIC CONSTANT OVERFLOW'          J         SC900             . GO PRINT MESSAGE AND RETURN ERROR/.. ALPHA FORMAT 3 ('A3') SCANNER - ELEMENT/FILE CYCLES.SC300          SA        A4,RETADR         . SAVE ERROR RETURN ADDRESS          LA,U      A0,6              . ALLOW UP TO 6 CHARS          LA        A4,FSPACES        . INIT A4 = FD SPACES          TZ        ASCIMG            . SCANNING ASCII?          LA,Q3     A3,AFTTBL,A3      .  YES, A3 = CURRENT CHAR (FD)          J         SC320             . GO PUT CHAR IN OUTPUTSC310          EX        0,*X4             . A3 = NEXT CHAR          TW        A10,A3            . IS IT NUMERIC?          J         SC330             .  NO, ALL DONESC320          LSSL      A4,6              . SHIFT RESULT ONE CHAR LEFT          AA        A4,A3             . PLACE CURRENT CHAR IN A4 LOWER          JGD       A0,SC310          . BACK FOR MORE          LA        A0,(0100+ER1L,ERR1) . 'ALPHANUMERIC MAX LENGTH EXCEEDED'          J         SC900             . GO PRINT MESSAGE AND RETURN ERRORSC330          TG,U      A3,0200           . IS THIS CHARACTER WITHIN LEGAL RANGE?          LA,U      A3,'?'            .  NO, USE QUESTION MARK          LA,Q2     A6,AFTTBL,A3      . A6 = NEXT CHAR (ASCII)          TZ        ASCIMG            . ARE WE SCANNING ASCII?          LA,Q4     A6,AFTTBL,A3      .  YES, CONVERT TO ASCII UPPERCASE          LA,U      A3,6              . MAX CHARS IN OUTPUT          ANA       A3,A0             . MINUS REMAINING LOOP CT = TOT CHARS          MSI,U     A0,6              . TIMES 6 = BIT COUNT          LSSC      A4,,A0            . LEFT JUSTIFY RESULT          LX,H2     X11,,X11          . X11 = RETURN ADDRESS          LA        A0,A4             . A0 = RESULT FOR INFOR SCAN          LA        A2,A3             . A2 = CHAR COUNT          J         0,X11             . RETURN TO USER.. ERROR RETURN.SC900          ER        PRINT$            . PRINT APPROPRIATE ERROR MESSAGE          LA        A0,SAVA0          . RESTORE A0          LX,H2     X11,RETADR        . X11 = ERROR RETURN ADDRESS          J         0,X11             .  RETURN ERROR STATUS/.. SETUP FOR SCANNING.. ENTER HERE WITH X5 = IMAGE ADDRESS.                 R4 = WORD COUNT.SETUPA*                               . ASCII          LX        X4,(1,GETAS)      . INIT CHAR POINTER          LXI,U     X5,1              . AND INCREMENT FOR TEXT POINTER          SP1       ASCIMG            . SET ASCII IMAGE FLAGSETUPAA          DL        A0,SCANA          . ADDRESSES FOR ASCII UPPERCASE          DS        A0,SCAN           .  SCAN ENTRY POINTS          DL        A0,SCANA+2        .          DS        A0,SCAN+2         .          J         SETUPCOM          . JUMP TO COMMON INIT.SETUPF*                               . FIELDATA          DL        A0,SCANF          . ADDRESSES FOR FIELDATA          DS        A0,SCAN           .  SCAN ENTRY POINTS          DL        A0,SCANF+2        .          DS        A0,SCAN+2         .          LX        X4,(1,GETFD)      . INIT CHAR POINTER          LXI,U     X5,1              . AND INCREMENT FOR TEXT POINTER          SZ        ASCIMG            . ZERO ASCII IMAGE FLAG.SETUPCOM          LA,U      A10,'0'-1         . SET UP NUMERIC RANGE CHECK VALUES          LA,U      A11,'9'           .          LA,U      A12,'A'-1         . SET UP ALPHA RANGE CHECK VALUES          LA,U      A13,'Z'           .          TZ        QFLAG             . HAVE WE SET QUARTER WORD MODE YET?          LPD       010               .  NO, SET IT NOW          SZ        QFLAG             . ONLY DO THIS ONE TIME          J         0,X11             . SETUP COMPLETE, RETURN TO USER.. CALL LOWERCASE TO ALLOW A6 TO RETURN LOWER CASE ASCII CHARACTERS.LOWERCASE*          TNZ       ASCIMG            . SCANNING ASCII ALREADY?          J         0,X11             .  NO, NOTHING TO DO          DL        A0,SCANAL         .  YES, SETUP SCAN ENTRY POINTS          DS        A0,SCAN           .   FOR CASE-SENSITIVE OPERATION          DL        A0,SCANAL+2       .          DS        A0,SCAN+2         .          J         0,X11             . RETURN.. CALL UPPERCASE TO RESUME UPPERCASE-ONLY SCAN.UPPERCASE*          TNZ       ASCIMG            . SCANNING ASCII?          J         0,X11             .  NO, RETURN - NOTHING TO DO          J         SETUPAA           .  YES, GO SETUP UPPERCASE ENTRY POINTS/.. CHARACTER GET EXECUTE TABLES.. THIS IS THE TABLE FOR THE ASCII SCAN.GA010          JGD       R4,GA030          . LOOP FORWARD UNTIL LAST WORD SCANNEDGA020          LA,XU     A3,-1             . SET A3 TO -1 (CODE FOR END OF IMAGE)          LMJ       X4,,X4            . RETURN          LMJ       X4,GA020          . IF CALLED AGAIN, KEEP RET END OF IMAGEGA030          LA,Q1     A3,,X5            . LOAD 1ST CHAR OF WORD          LMJ       X4,,X4            . RETURN          LA,Q2     A3,,X5            . Q2-Q4 LOADS ARE DIRECTLY EXECUTED          LA,Q3     A3,,X5            .          LA,Q4     A3,,*X5           . INCREMENT TEXT POINTER WHEN Q4 LOADEDGETAS          LMJ       X4,GA010          . BACK TO TOP.. THIS IS THE TABLE FOR THE FIELDATA SCAN.GF010          JGD       R4,GF030          . LOOP FORWARD UNTIL LAST WORD SCANNEDGF020          LA,XU     A3,-1             . SET A3 TO -1 (CODE FOR END OF IMAGE)          LMJ       X4,,X4            . RETURN          LMJ       X4,GF020          . IF CALLED AGAIN, KEEP RET END OF IMAGEGF030          LA,S1     A3,,X5            . LOAD 1ST CHAR OF WORD          LMJ       X4,,X4            . RETURNI DO 4 ,  LA,S2-I+1  A3,,X5           . S2-S6 LOADS ARE DIRECTLY EXECUTED          LA,S6     A3,,*X5           . INCREMENT TEXT POINTER WHEN S6 LOADEDGETFD          LMJ       X4,GF010          . BACK TO TOP/.. THE FOLLOWING LINE *MUST* DIRECTLY PRECEDE THE LABEL 'AFTTBL'. (LOOKUP INDEX OF -1 MEANS END OF IMAGE, 0200 = CODE FOR END OF IMAGE).          +         0,0200,0200,0200AFTTBL.. Q2: FIELDATA TO ASCII. Q3: ASCII TO FIELDATA. Q4: ASCII TO ASCII UPPERCASE.          +         0,'@',$CFS(' '),0          +         0,'[',$CFS(' '),1          +         0,']',$CFS(' '),2          +         0,'#',$CFS(' '),3          +         0,'^',$CFS(' '),4          +         0,' ',$CFS(' '),5I DO 26 ,  +        0,'A'+I-1,$CFS(' '),6+I-1          +         0,')',$CFS(' '),040          +         0,'-',$CFS('!'),041          +         0,'+',$CFS('"'),042          +         0,'<',$CFS('#'),043          +         0,'=',$CFS('$'),044          +         0,'>',$CFS('%'),045          +         0,'&',$CFS('&'),046          +         0,'$',$CFS(''''),047          +         0,'*',$CFS('('),050          +         0,'(',$CFS(')'),051          +         0,'%',$CFS('*'),052          +         0,':',$CFS('+'),053          +         0,'?',$CFS(','),054          +         0,'!',$CFS('-'),055          +         0,',',$CFS('.'),056          +         0,'\',$CFS('/'),057I DO 10 ,  +        0,'0'+I-1,$CFS('0')+I-1,060+I-1          +         0,'''',$CFS(':'),072          +         0,';',$CFS(';'),073          +         0,'/',$CFS('<'),074          +         0,'.',$CFS('='),075          +         0,'"',$CFS('>'),076          +         0,'_',$CFS('?'),077          +         0,0,$CFS('@'),0100I DO 26 ,  +        0,0,$CFS('A')+I-1,0101+I-1          +         0,0,$CFS('['),0133          +         0,0,$CFS('\'),0134          +         0,0,$CFS(']'),0135          +         0,0,$CFS('^'),0136          +         0,0,$CFS('_'),0137          +         0,0,$CFS('@'),0140I DO 26 ,  +        0,0,$CFS('A')+I-1,'A'+I-1          +         0,0,$CFS('?'),0173          +         0,0,$CFS('\'),0174          +         0,0,$CFS('!'),0175          +         0,0,$CFS('^'),0176          +         0,0,$CFS('_'),0177          +         0,0200,0200,0200/..SCANA     +         SCAN1A            . ENTRY POINTS FOR ASCII UPPERCASE          +         SCAN2A            .          +         SCAN3A            .          +         SCAN4A            .SCANAL    +         SCAN1AL           . ENTRY POINTS FOR ASCII CASE-SENSITIVE          +         SCAN2AL           .          +         SCAN3AL           .          +         SCAN4AL           .SCANF     +         SCAN1F            . ENTRY POINTS FOR FIELDATA          +         SCAN2F            .          +         SCAN3F            .          +         SCAN4F            ..          $FDATAERR1      'ALPHANUMERIC MAXIMUM LENGTH EXCEEDED'ER1L      EQU       $-ERR1ERR2      'ILLEGAL OCTAL DIGIT'ER2L      EQU       $-ERR2ERR3      'NUMERIC CONSTANT OVERFLOW'ER3L      EQU       $-ERR3.FSPACES   '            '          $ASCIIASPACES   '        '/.$(0)SCAN*     RES       4                 . INDIRECT BRANCH TABLE FOR SCAN ENTRIESTSTCHR*   +         01000             . TEST CHARACTER, INIT TO NO-MATCHQFLAG     +         1                 . ZEROED WHEN QUARTER WORD MODE SETSAVA0     RES       1                 . A0 SAVESAVA3     RES       1                 . A3 SAVESAVX4     EQUF      $,,H1             . X4 SAVE (MODIFIER)SAVX5     EQUF      $,,H2             . X5 SAVE (MODIFIER)          RES       1                 .SAVR4     RES       1                 . R4 SAVERETADR    RES       1                 . ERROR RETURN ADDRESSOPSAVE    RES       2                 . TEMP STORAGE FOR DP ACCUMULATORDIGIT     +         0D                . TEMP STORAGE FOR NEXT DIGIT (BINARY)CHFLGS    EQUF      $,,H1             . SPECIAL SCAN FLAGS:DBLFLG    EQUF      $,,S1             .  DOUBLE PRECISIONA1FLG     EQUF      $,,S2             .  INFOR FORMAT 1 (FILE/ELT NAMES)A2FLG     EQUF      $,,S3             .  INFOR FORMAT 2 (READ/WRITE KEYS).ASCIMG    EQUF      $,,S5             . SET IF SCANNING ASCII IMAGE          +         0          END@ELT,SIP MARSREL$.FINDFILE,,,173346022434,023.         SUBROUTINE TO SEARCH THE POINTER AREA OF SYS$*ARCHIST$ OR.         SYS$*SAVHIST$ FOR FILE(S) WHICH MATCH USER SPECIFICATION.                                                                   WRC 3/89..         THE INPUT FILE MUST BE PREASSIGNED WITH USE NAME OF 'HISTIN$'..         THE HEADER OF THIS FILE (SECTOR ZERO) MUST HAVE BEEN READ INTO.         A BUFFER WITH EXTERNAL NAME 'AHFHDR'.  ALSO, A ONE-WORD VALUE AT.         ADDRESS 'HSTLBL' (EXTERNALIZED) MUST CONTAIN THE PROPER LABEL.         FOR THE FILE (*AHFL* OR *SHFL*, FIELDATA)...         CALLING SEQUENCE:..         DL        A0,(TARGET QUAL)  . MAY BE WILDCARDED.         DL        A2,(TARGET FILE)  . MAY BE WILDCARDED.         LA        A4,(TARGET CYCLE) . 0 = MATCH ANY CYCLE.         LA        A5,(HOSTID,BACKUP-IND) ..                                     . HOSTID = 0 RET ALL HOSTS.                                     .         *1-4 RET FOR SPECIFIC HOST.                                     .         *077 RET FOR SHARED FILE.                                     .         *0100+1-4 SPECIFIC HOST+SHARED.                                     .  *(ONLY RELEVANT FOR SHARED-HF SYSTEMS).                                     . BACKUP-IND = 0 RET FIRST BACKUP.                                     .              1 RET SECOND BACKUP.                                     .                (<CRT> FILES ONLY).         LMJ       X11,FINDFILE.         <ERROR RETURN>              . A MESSAGE IS PRINTED.         <NO FIND RETURN>.         <FIND RETURN>               . X4 = POINTER TO INCORE FT ENTRY.                                     . X5 = POINTER TO INCORE QT ENTRY..         EACH TIME THIS ROUTINE IS CALLED WITH EXACTLY THE SAME PARAMETERS,.         THE NEXT MATCHING ENTRY IS RETURNED UNTIL THERE ARE NO MORE MATCHING.         ENTRIES.   USES BUT DOES NOT RESTORE X4-X5, X10, A0-A6, R1, R4-R5..$(1)      AXR$          $LIT          MGPDEF          AHFDEF/..         FFINIT IS CALLED TO FORCE THE NEXT CALL TO FINDFILE TO BEGIN.         A NEW SEARCH EVEN IF THE QUALIFIER, FILENAME AND CYCLE ARE.         IDENTICAL AND THE PREVIOUS SEARCH WAS NOT COMPLETED..FFINIT*          SZ        QTPTR             . CLEAR QUAL TABLE POINTER          J         0,X11             . RETURN..         THIS IS THE ENTRY TO THE MAIN FINDFILE ROUTINE.FINDFILE*          SX        X11,SAVX11        . SAVE RETURN ADDR          TZ        QTPTR             . ARE WE CURRENTLY PROCESSING A QUAL,          DTE       A0,FFQUAL         .  AND IS IT THE SAME ONE AS REQ NOW?          J         FF100             .   NO, START FROM SCRATCH          TNE       A4,FFCYCL         .   YES, SAME CYCLE          DTE       A2,FFFILE         .    AND FILE AS PREV REQUEST?          J         FF100             .     NO, START FROM SCRATCH          TE        A5,HBFLGS         . SAME HOST/BACKUP FLAGS?          J         FF100             .  NO, START OVER          LX        X4,FTPTR          .  YES, RESTORE POINTERS AND COUNTERS          LX        X5,QTPTR          .          LR        R4,FTCNT          .          LR        R5,QTCNT          .          J         FF350             . CONTINUE SEARCH FROM PREVIOUS LOCATION..         BEGIN A NEW SEARCH HERE.FF100          DS        A0,FFQUAL         . STORE CURRENT QUAL, FILE, CYCLE          DS        A2,FFFILE         .          SA        A4,FFCYCL         .          SA        A5,HBFLGS         . SAVE HOST/BACKUP FLAGS          LX,U      X4,AHFHDR         . GET POINTER TO AHF HEADER          TZ        INTFLG            . HAS INITIALIZATION BEEN DONE?          J         FF130             .  YES, SKIP          LA        A0,AHHLBL,X4      . AHF LABEL WORD          TE        A0,HSTLBL         . IS LABEL CORRECT?          J         FF105             .  NO, BAD LABEL IN FILE          LA        A1,AHHLEV,X4      . LEVEL OF 'REBUILD' PROGRAM USED          SSL       A1,6              . SHIFT OFF FLAG BITS, IF ANY          JZ        A1,FF115          . FILE IS EMPTY IF LEVEL = 0          TNE,U     A1,07             . IS THIS FILE FROM REBUILD LEVEL 7?          J         FF110             .  YES, SKIPFF105          P$RINT    ERRPRT(1)         . 'FILE HAS BAD LABEL OR WRONG <REBUILD>'          J         FF990             .   RETURN ERRORFF110          LA        A0,AHHLEV,X4      . REBUILD LEVEL          AND,U     A0,1*/0           . A1 = LOW ORDER BIT          TNE,U     A1,+(M$MHFSHARED>0) . ARE WE CONSISTENT WITH REBUILD?          J         FF112             .  YES, SKIP          P$RINT    ERRPRT(6)         .  NO, 'REBUILD INCONSIS W <M$MHFSHARED>'          J         FF990             .  RETURN ERRORFF112          TZ        AHHPQC,X4         . IS QUAL TABLE EMPTY?          TNZ       AHHPQL,X4         .          J         $+2               .  YES, ERROR          J         FF120             .  NO, CONTINUEFF115          P$RINT    ERRPRT(2)         . 'HISTORY FILE IS EMPTY'          J         FF990             .   RETURN ERRORFF120          ER        TDATE$            . GET TODAY'S DATE          LMJ       X11,JULOUT        . CONVERT TO JULIAN          ER        ERR$              . SHOULD NEVER HAPPEN          SA        A4,CURJUL         . SAVE TODAY'S JULIAN DATE          SP1       INTFLG            . SET INITIALIZATION COMPLETE FLAG          J         FF140             . GO READ FIRST QTFF130          LA        A0,QTREM          . REMAINING QT ENTRIES TO PROCESS          TNE       A0,AHHPQC,X4      . IS 1ST QT IN MEMORY?          J         FF160             . YES, START SEARCH FROM HERE          DL        A0,FFQUAL         . TARGET QUALIFIER          DJZ       A0,FF140          . MUST START AT 1ST QT IF MASTER W/C          JP        A0,FF132          . SKIP IF TARGET IS POSITIVE          TN        QUALTB+APQTBG     . TARGET IS NEG - IS 1ST QT ENT ALSO NEG?          J         FF160             .  NO, CONTINUE FROM HERE          J         FF135             .  YES, COMPARE QUALIFIERSFF132          TP        QUALTB+APQTBG     . TARGET IS POS - IS 1ST QT ENT ALSO POS?          J         FF140             .  NO, RESTART SEARCHFF135          DAN       A0,QUALTB+APQTBG  . SUBTRACT 1ST ENTRY IN CURR QT          JP        A0,FF160          . CONTINUE FROM HERE IF >= THIS ENTRYFF140          LA        A0,AHHPQC,X4      . START SEARCH AT 1ST QT          LA        A2,AHHPQL,X4      .   IN CHAIN..         READ THE NEXT QT - A0=REM COUNT, A2=SECTOR ADDRESS.FF150          SA        A0,QTREM          . SAVE REMAINING ENTRY COUNT          TG,U      A0,APMXQL+1       . MORE ENTRIES THAN BUFF CAN HOLD?          LA,U      A0,APMXQL         .  YES, LOAD MAXIMUM          MSI,U     A0,APQTES         . WORD COUNT OF QUALS TO READ          AA,U      A0,APQTBG+27      . ADD START + 27 (COV QUOTIENT)          DSL       A0,36             . PREPARE FOR DIVIDE          DI,U      A0,28             . A0 = SECTOR COUNT TO READ          MSI,U     A0,28             . A0 = WORD COUNT TO READ          DSL       A0,18             . TO A1 UPPER          LXM,U     A1,QUALTB         . A1 LOWER = QT BUFFER ADDR          DS        A1,RPKT+4         . STORE CT, ADDR, ADDRESS IN READ PKT          I$OW      RPKT              . READ THE NEXT QT FROM THE FILE          LMJ       X10,STATUS        . CHECK STATUS          J         FF980             .  ABORT IF I/O ERRORFF160          LA        A0,QUALTB+APQTLB  . GET QT LABEL WORD          TNE       A0,('**QT**')     . IS THIS A VALID TABLE?          J         FF170             .  YES, CONTINUE          P$RINT    ERRPRT(3)         .  NO, 'QUAL TABLE VALIDATION ERROR'          J         FF990             .  ABORTFF170          LX        X5,(APQTES,QUALTB+APQTBG-APQTES) . POINTER TO QUAL TABLE          LA        A0,QTREM          . REMAINING ENTRIES          TG,U      A0,APMXQL+1       . MORE THAN MAX BUFFER CAN HOLD?          LA,U      A0,APMXQL         .  YES, LOAD MAXIMUM          LR,U      R5,,A0            . INTO R5 FOR LOOP          JGD       R5,FF200          . DECR FOR LOOP AND SKIP          ER        ERR$              . THIS SHOULD NEVER HAPPEN!FF200          DL        A0,APQEQL+APQTES,*X5 . GET NEXT QUALIFIER FROM TABLE          DL        A4,FFQUAL         . LOAD TARGET QUALIFIER          LMJ       X11,COMPARE       . CHECK FOR MATCH          J         $+2               . NO MATCH          J         FF250             . MATCH - SKIP          JP        A6,FF380          . IF A6 IS POSITIVE, CONTINUE SEARCH          J         FF900             .  OTHERWISE, NO FINDFF250          LA        A0,APQEFL,X5      . LINK TO FIRST FILE TABLE BUFFER          SA        A0,FTADDR         . STORE FOR LATER USE          LA        A0,APQEFC,X5      . TOTAL COUNT OF FILE ENTRIESFF260          LA        A1,A0             . A1 = REMAINING FILE ENTRIES          TG,U      A1,APMXFL         . LESS THAN MAXIMUM/BUFFER?          LA,U      A1,APMXFL         .  NO, LOAD MAXIMUM          ANA       A0,A1             . SUBTRACT THIS FROM TOTAL          SA        A0,REMFIL         . STORE REMAINING TOTAL          LR,U      R4,,A1            . R4 = LOOP COUNT THIS BUFFER          MSI,U     A1,APFTES         . A1 = WORD COUNT TO READ          AA,U      A1,APFTBG         .  ADD OFFSET FOR START OF FILE ENTRIES          LSSL      A1,18             . INTO A1 UPPER          LXM,U     A1,FILETB         . ADDRESS OF FT BUFFER IN MEMORY          LA        A2,FTADDR         . NEXT ADDRESS TO READ          DS        A1,RPKT+4         . SET UP PACKET TO READ NEXT FT BUFFER          AA,U      A2,APFTBS//28     . A2 = NEXT ADDRESS TO READ          SA        A2,FTADDR         .  STORE FOR LATER USE          I$OW      RPKT              . READ FILE TABLE INTO MEMORY          LMJ       X10,STATUS        . CHECK STATUS          J         FF990             .  I/O ERROR, ABORT          DL        A0,FILETB+APFTQL  . COMPARE PRESET QUAL FOR THIS FILE TABLE          DTE       A0,APQEQL,X5      .  WITH MATCHED QUAL FROM QUAL TABLE          J         FF270             .   NO MATCH, SKIP          JGD       R4,FF280          . DECR, SKIP - THIS SHOULD ALWAYS BE > 0FF270          P$RINT    ERRPRT(5)         . SOMETHING VERY WRONG HERE, PRINT ERROR          J         FF990             .   MESSAGE AND ABORTFF280          LX        X4,(APFTES,FILETB+APFTBG-APFTES) . LOAD FILE TABLE POINTERFF300          LA        A0,APFERE+APFTES,*X4 . GET RELOAD FLAG, EXP FOR NEXT ENTRY          AND       A0,(0377777)      . WANT ONLY EXPIRATION, IN A1          AU        A1,APFEAD,X4      .  PLUS ARCHIVE DATE, = JUL EXP DATE          TG        A2,CURJUL         . EXPIRE TODAY OR AFTER?          J         FF302             .  YES, THIS FILE MAY BE SELECTED          ON        M$EXPPERM>0       . THIS CODE FOR PERM-EXP ONLY          TNE,U     A1,M$EXPPERM      . DOES FILE HAVE PERM RETENTION?          J         FF302             .  YES, FILE MAY BE SELECTED          OFF       M$EXPPERM>0       . END OF PERM-ONLY CODE          J         FF350             . THIS FILE HAS EXPIRED, DO NOT SELECT ITFF302          DL        A0,APFEFL,X4      . GET FILENAME FROM TABLE          DL        A4,FFFILE         . LOAD TARGET FILENAME          LMJ       X11,COMPARE       . COMPARE ENTRIES          J         FF320             .  NO MATCH          ON        M$MHFSHARED>0     . THIS CODE FOR SHARED-ONLY          LA        A0,RETHST         . RETURN-HOST INDICATOR          JZ        A0,FF305          . ZERO = RETURN ALL HOSTS          AND,U     A0,07             . NO, A1 = LOWEST 3 BITS          LA        A0,APFEHC,X4      . GET HOST-ID, CREATE DATE OF THIS FILE          SSL       A0,15             . HOST-ID TO A0 LOWER          TNE,U     A0,,A1            . IS THIS FILE FROM REQUESTED HOST?          J         FF305             .  YES, RETURN THIS FILE          TZ        RETSHR            . IS RETURN-SHARE SET,          TE,U      A0,07             .  AND IS THIS A SHARED FILE?          J         FF350             .  NO, DON'T RETURN THIS FILEFF305          OFF       M$MHFSHARED>0     . END OF SHARED-ONLY CODE          LA        A0,APFEBW,X4      . BIT 35 INDICATES BACKUP STATUS          TNZ       RBFLAG            . RETURN BACKUP ENTRIES?          J         FF310             .  NO, SKIP          JP        A0,FF350          .  YES, NO MATCH IF APFEBW BIT 35 = 0          AND       A0,(0377777777777) . CLEAR BIT 35          SA        A1,APFEBW,X4      .  AND REPLACE IN RECORD          J         FF315             . CONT W/CYCLE CHECKFF310          JN        A0,FF350          . NO MATCH IF APFEBW BIT 35 = 1FF315          LA        A0,APFECL,X4      .   MATCH - LOAD CYCLE, LINK FROM ENTRY          SSL       A0,24             . ISOLATE CYCLE IN A0          TE        A0,FFCYCL         . ARE CYCLES EQUAL,          TNZ       FFCYCL            .  OR IS FFCYCL=0 (MATCH ANY CYCLE)?          J         FF400             .   YES, RETURN FINDFF320          JN        A6,FF380          . STOP SEARCH IF A6 IS NEGFF350          JGD       R4,FF300          . LOOP BACK FOR MORE FILES          LA        A0,REMFIL         . REM ENTRIES IN FOLLOWING BUFFER(S)          JNZ       A0,FF260          . BACK FOR MORE IF NONZEROFF380          JGD       R5,FF200          . LOOP BACK FOR MORE QUALIFIERS          LA        A0,QTREM          . REMAINING QT ENTRIES INCL CURR BUFFER          ANA,U     A0,APMXQL         . SUBTRACT MAX BUFFER CAN HOLD          TLE,U     A0,1              . MORE QUALS TO PROCESS?          J         FF900             .  NO, RETURN NO FIND          LA        A2,QUALTB+APQTNX  .  YES, GET ADDRESS OF NEXT QT IN CHAIN          J         FF150             .   AND CONTINUE FROM THEREFF400          SX        X5,QTPTR          . MATCH FOUND: STORE POINTERS          SR        R5,QTCNT          .   AND COUNTERS          SX        X4,FTPTR          .          SR        R4,FTCNT          .          LX        X11,SAVX11        .          J         2,X11             . RETURN FIND SUCCESSFULFF900          SZ        QTPTR             . ZERO PTR, NEW SRCH REQ IF CALLED AGAIN          LX        X11,SAVX11        .          J         1,X11             . RETURN NO FINDFF980          SZ        INTFLG            . MUST RE-INIT IF I/O ERR READING QUAL TBLFF990          SZ        QTPTR             . ZERO PTR, NEW SRCH REQ IF CALLED AGAIN          LX        X11,SAVX11        .          J         0,X11             . RETURN ERROR STATUS/..         COMPARE A TARGET QUAL OR FILENAME WHICH MAY BE WILDCARDED.         WITH ONE FROM THE POINTER AREA OF THE AHF..         ENT: A0,A1 = AHF QUAL OR FILE ENTRY.              A4,A5 = TARGET QUAL/FILE ENTRY..         RETURNS 0,X11 NO MATCH  (A6 NEGATIVE INDICATES STOP SEARCH).                 1,X11 MATCH.COMPARE          LR,U      R1,12-1           . LOOP COUNT FOR 12 CHARACTER CHECKCP100          LDSC      A0,6              . SHIFT AHF ENTRY ONE CHAR LEFT          LDSC      A4,6              . SHIFT TARGET ENTRY ONE CHAR LEFT          AND,U     A1,077            . A2 = NEXT CHAR FROM AHF          AND,U     A5,077            . A6 = NEXT CHAR FROM TARGET          TLE       A6,A2             . IS TARGET CHAR < ACF CHAR?          J         CP900             .  YES, RET NO FIND, STOP SEARCH          TE        A6,A2             . IS TARGET CHAR = ACF CHAR?          J         CP120             .  NO, SKIP          TE,U      A6,' '            .  YES, ARE BOTH CHARS SPACES?          JGD       R1,CP100          .   NO, LOOP BACK FOR MORE CHARS          J         CP800             .   YES OR END OF LOOP, RETURN FINDCP120          TE,U      A6,077            . IS TARGET CHAR = WILDCARD?          J         CP920             .  NO, RETURN NO FINDCP800          J         1,X11             . RETURN FINDCP900          LNA,U     A6,1              . SET FLAG TO STOP SEARCHCP920          J         0,X11             . RETURN NO FIND/..         I/O STATUS CHECK ROUTINE.STATUS          TNZ,S1    3,A0              . CHECK STATUS IN I/O PACKET          J         1,X10             . RETURN SUCCESSFUL COMPLETION IF ZERO          SX        X4,SAVX4          .  OTHERWISE, SAVE X4          LX,U      X4,,A0            . POINT X4 TO I/O PACKET          LXI,U     X4,1              . INCREMENT FOR LOOP          P$RINT    ERRPRT(4)         . 'NONZERO STATUS - DUMP FOLLOWS:'          E$DIT     EDPKT             . OPEN EDIT          LA,U      A4,5              . DUMP 6 WORDSST100          E$OCTF    12,,*X4           . EDIT NEXT WORD OF PACKET          E$SKIP    1                 .          JGD       A4,ST100          . LOOP FOR REM WORDS IN PACKET          P$RINT    (0116,EDLINE)     . PRINT EDITED PACKET DUMP          E$DITX                      . CLOSE EDIT          LX        X4,SAVX4          . RESTORE X4          J         0,X10             . RETURN ERROR STATUS/.ERR(1)    'HISTORY FILE HAS BAD HEADER OR INCOMPATIBLE ''REBUILD'' LEVEL'ERR(2)    'HISTORY FILE IS EMPTY'ERR(3)    'QUALIFIER TABLE VALIDATION ERROR - NOTIFY SYSTEMS'ERR(4)    'NONZERO I/O STATUS - PACKET DUMP FOLLOWS:'ERR(5)    'FILE TABLE VERIFICATION ERROR - NOTIFY SYSTEMS'ERR(6)    'LAST REBUILD INCONSISTENT WITH SETTING OF <M$MHFSHARED>'NERR      EQU       6ERR(NERR+1)I DO NERR ,ERRPRT(I)  +  0100+ERR(I+1)-ERR(I),ERR(I)/.$(0)FFQUAL    +         0D                . TARGET QUALIFIERFFFILE    +         0D                . TARGET FILENAMEFFCYCL    +         0                 . TARGET CYCLERETSHR    EQUF      $,,S2             . ALWAYS-RET-SHARED INDICATORRETHST    EQUF      $,,S3             . RETURN-HOSTID INDICATORRBFLAG    EQUF      $,,H2             . RETURN-SECOND-BACKUP INDICATORHBFLGS    +         0                 . SAVE FOR HOST, BACKUP PARAMSCURJUL    +         0                 . TODAY'S JULIAN DATEQTREM     +         0                 . REM QUAL ENTRIES IN CURR + EXT TABLESQTPTR     +         0                 . PTR TO QUAL TBL DURING ACTIVE SEARCHQTCNT     +         0                 . REM ENTRIES -1 IN QUAL TABLEFTPTR     +         0                 . PTR TO FILE TBL DURING ACTIVE SEARCHFTCNT     +         0                 . REM ENTRIES -1 IN FT BUFFERREMFIL    +         0                 . ENTRY COUNT OF REMAINING FT BUFFERSFTADDR    +         0                 . SECTOR ADDRESS OF NEXT FT BUFFERSAVX4     +         0                 . REGISTER SAVESSAVX11    +         0                 .INTFLG    +         0                 . SET TO 1 WHEN INIT COMPL (QT READ IN)RPKT      I$OD      'HISTIN$',R$  $-$,$-$  $-$ . PACKET FOR READING QT AND FTSEDPKT     E$PKT     14,EDLINE         . EDIT$ PACKETEDLINE    RES       14                . EDIT$ OUTPUT BUFFERFILETB    RES       APFTBS            . FILE TABLEQUALTB    RES       APQTBS            . QUALIFIER TABLE          END@ELT,SIP MARSREL$.GETOWN,,,161623112232,023.         SUBROUTINE TO DETERMINE THE OWNER ACCOUNT OF A FILE IF THE.         FILE'S QUALIFIER IS REGISTERED WITH MARS         WRC 10/89.$(1)      AXR$          $LIT          MGPDEF          ACFDEF..         INITIALIZATION ROUTINE - READS ACF, BUILDS/SORTS <OWNTBL>.ARSETUP*          I$OW      ACHPKT            . READ ACF HEADER          LMJ       X10,STATUS        . CHECK STATUS          ER        ERR$              .  ABORT IF I/O ERROR          LA        A0,ACHBUF+ACHDLB  . GET SOFTWARE LABEL          TNE       A0,('*ACFL*')     . IS IT CORRECT?          J         AR100             .  YES, SKIP          P$RINT    ERRPRT(1)         .  NO, 'ACF HAS BAD LABEL'          ER        ERR$              .   ABORTAR100          LX        X6,(4,OWNTBL)     . POINTER TO QUALIFIER, OWNER TABLE          LA,U      A6,0              . INIT OWNER COUNT = 0          LA        A0,ACHBUF+ACHDQL  . LINK TO FIRST QUALIFIER TABLEAR110          SA        A0,ACQPKT+5       . STORE LINK IN ACF READ PACKET          I$OW      ACQPKT            . READ NEXT QUALIFIER TABLE          LMJ       X10,STATUS        . CHECK STATUS          ER        ERR$              .  ABORT IF I/O ERROR          LX        X5,(ACQTES,ACQBUF+ACQTBG) . POINTER TO QT BUFFER          LR,U      R5,ACQTMX-1       . QT ENTRY COUNT, -1 FOR LOOPAR120          DL        A4,ACQEQL,X5      . GET NEXT QUALIFIER ENTRY          LA        A0,ACQEFL,*X5     . LINK TO FT FOR THIS ENTRY          JZ        A4,AR180          . SKIP IF ZERO OR MASTER WILD QUALIFIER          SA        A0,ACFPKT+5       .  IF NOT, STORE LINK TO FT          I$OW      ACFPKT            . READ FIRST FT FOR THIS QUALIFIER          LMJ       X10,STATUS        . CHECK STATUS          ER        ERR$              .  ABORT IF I/O ERROR          DTE       A4,ACFBUF+ACFTQL  . COMPARE QUALIFIER WITH QUAL FROM FT          J         $+2               .  NOT EQUAL, SOMETHING IS WRONG          J         AR140             .  EQUAL, CONTINUE          P$RINT    ERRPRT(2)         . 'ACF - INTERNAL BUFF LINK AMBIGUITY'          ER        ERR$              .  BLOW UP IF QUALIFIERS ARE DIFFERENTAR140          TLE,U     A6,M$OWNQMAX      . TOO MANY OWNED QUALIFIERS?          J         AR160             .  NO, CONTINUE          P$RINT    ERRPRT(3)         .  YES, 'TOO MANY QUALS, INCR <M$OWNQMAX>'          ER        ERR$              .   ABORTAR160          AA,U      A6,1              . INCREMENT OWNED QUALIFIER COUNT          DS        A4,,X6            . STORE QUALIFIER IN TABLE          DL        A0,ACFBUF+ACFTON  . GET OWNER ACCOUNT FROM 1ST FT          DS        A0,2,*X6          . STORE IN TABLE AND INCREMENT POINTERAR180          JGD       R5,AR120          . LOOP BACK FOR OTHER QUAL ENTRIES IN TBL          LA        A0,ACQBUF+ACQTNX  . DONE WITH THIS TABLE, GET LINK TO NEXT          JNZ       A0,AR110          . JUMP BACK IF MORE TABLES IN CHAIN          SA        A6,OWNCNT         .  IF NOT, SAVE OWNED QUALIFIER COUNT..         SORT THE <OWNTBL> TABLE ALPHABETICALLY BY QUALIFIER (WORDS 0,1).          ANA,U     A6,1              . DECREMENT FOR LOOP          LR        R3,A6             . INIT OUTER LOOP COUNTAR200          JGD       R3,$+2            . DECREMENT OUTER LOOP COUNT EACH PASS          J         AR250             .  EXIT WHEN ZERO          LR        R2,R3             . INIT INNER LOOP COUNT = OUTER LOOP CT          LA        A0,(4,OWNTBL-4)   . POINTER TO QUAL, OWNER TABLE          LA,U      A1,0              . CLEAR EXCHANGE FLAGAR210          DL        A4,4,*A0          . GET COMPARISON DATA FROM 1ST RECORD          JP        A4,AR215          . SKIP IF POSITIVE          TN        4,A0              .  IF NOT, IS SECOND RECORD NEG?          J         AR230             .   NO, EXCHANGE RECORDS          J         AR220             .   YES, TREAT AS BOTH POSITIVEAR215          TP        4,A0              . FIRST RECORD POS, IS SECOND POS?          J         AR240             .  NO, RECORDS ARE IN CORRECT ORDERAR220          DAN       A4,4,A0           . SUBTRACT 2ND QUAL FROM 1ST          JN        A4,AR240          . IF RESULT IS NEG, RECORDS ARE IN ORDER          DJZ       A4,AR240          . DO NOT EXCHANGE IF EQUAL, EITHERAR230          LA,U      A1,,A0            . ADDRESS OF FIRST RECORD          LXI,U     A1,1              . INCREMENT, EXCHANGE ONE WORD AT A TIME          LR,U      R1,4-1            . LOOP COUNT FOR EXCHANGEAR235          LA        A4,,A1            . GET NEXT WORD FROM 1ST RECORD          LA        A5,4,A1           .  AND NEXT FROM 2ND RECORD          SA        A5,,A1            . EXCHANGE WORDS          SA        A4,4,*A1          .   AND INCREMENT POINTER          JGD       R1,AR235          . BACK FOR OTHER WORDS IN RECORDSAR240          JGD       R2,AR210          . LOOP BACK FOR NEXT COMPARISON          JNZ       A1,AR200          . BACK TO START IF EXCHANGE WAS MADEAR250          J         0,X11             . ALL DONE, RETURN TO CALLER/..         SEARCH <OWNTBL> FOR A MATCH AGAINST AN INPUT QUALIFIER..         ENTRY: A4,A5 = QUALIFIER (LJSF FIELDATA)..         RETURNS A4,A5 = OWNER ACCOUNT (FIND).                         ZERO (NO FIND).ARSRCH*          DS        A4,QALSAV         . SAVE INPUT QUALIFIER          LX        X6,(4,OWNTBL-4)   . POINTER TO QUALIFIER, OWNER ACCT TABLE          LR        R2,OWNCNT         . ENTRY COUNT OF OWNTBL          JGD       R2,AR320          . DECREMENT FOR LOOP          J         AR360             .  IF TABLE IS EMPTY, RETURN NO FINDAR320          DL        A0,4,*X6          . GET NEXT QUAL IN TABLE          DL        A4,QALSAV         . INPUT QUALIFIER          LDSC      A0,6              . SHIFT ACF ENTRY ONE CHAR LEFT          LDSC      A4,6              . SHIFT INPUT ENTRY ONE CHAR LEFT          AND,U     A1,077            . A2 = FIRST ACF CHAR          AND,U     A5,077            . A6 = FIRST INPUT CHAR          TLE       A6,A2             . IS INPUT CHAR < ACF CHAR?          J         AR360             .  YES, NO FIND, STOP SEARCH          TE        A6,A2             . IS INPUT CHAR = ACF CHAR?          J         AR350             .  NO, CONTINUE SEARCH WITH NEXT ENTRY          LR,U      R1,11-1           .  YES, SET UP LOOP FOR OTHER 11 CHARSAR330          LDSC      A0,6              . SHIFT ACF ENTRY ONE CHAR LEFT          LDSC      A4,6              . SHIFT INPUT ENTRY ONE CHAR LEFT          AND,U     A1,077            . A2 = NEXT CHAR FROM ACF          AND,U     A5,077            . A6 = NEXT CHAR FROM INPUT          TE        A6,A2             . DOES INPUT CHAR = ACF CHAR?          J         AR340             .  NO, SKIP          TE,U      A6,' '            .  YES, ARE BOTH CHARS SPACES?          JGD       R1,AR330          .   NO, LOOP BACK TO TEST THE REST          J         AR345             .   YES/END OF LOOP = FIND RETURNAR340          TE,U      A2,077            . IS ACF CHAR = WILDCARD?          J         AR350             .  NO, CONTINUE SEARCH WITH NEXT ENTRYAR345          DL        A4,2,X6           . MATCH FOUND - LOAD OWNER ACCT FROM TBL          J         AR370             .  AND RETURNAR350          JGD       R2,AR320          . NO MATCH, LOOP BACK FOR NEXT ENTRYAR360          DSL       A4,72             . ZERO A4,A5 TO INDICATE NO FINDAR370          J         0,X11             . RETURN/.        I/O STATUS CHECK ROUTINE.STATUS          TNZ,S1    3,A0              . IS I/O STATUS = 0 (NORMAL)?          J         1,X10             .  YES, RETURN GOOD STATUS          LX,U      X4,,A0            .  NO, SET UP FOR PACKET DUMP          LXI,U     X4,1              . X4 = POINTER TO I/O PACKET          P$RINT    ERRPRT(4)         . 'BAD I/O STATUS, PACKET DUMP FOLLOWS:'          E$DIT     EPKT              . OPEN EDIT          LA,U      A4,5              . PACKET CONTAINS 6 WORDSST100          E$OCTF    12,,*X4           . EDIT NEXT WORD INTO IMAGE          E$SKIP    1                 .          JGD       A4,ST100          . BACK FOR REST OF PACKET          P$RINT    (0116,LINE)       . DUMP I/O PACKET IN OCTAL          J         0,X10             . RETURN ERROR STATUS.ERR(1)    'ARCHIVE CONTROL FILE HAS BAD LABEL'ERR(2)    'ACF - INTERNAL BUFFER LINK AMBIGUITY'ERR(3)    'TOO MANY QUALIFIERS IN ACF, INCREASE <M$OWNQMAX>'ERR(4)    'BAD I/O STATUS - PACKET DUMP FOLLOWS:'NERR      EQU       4ERR(NERR+1)I DO NERR ,ERRPRT(I) + 0100+ERR(I+1)-ERR(I),ERR(I)/.$(0)ACHPKT    I$OD      'ARCCTL$',R$  ACHDSZ,ACHBUF  0 . PACKET TO READ ACF HEADERACQPKT    I$OD      'ARCCTL$',R$  ACBFSZ,ACQBUF  $-$ . PKT TO READ QUAL TABLEACFPKT    I$OD      'ARCCTL$',R$  ACBFSZ,ACFBUF  $-$ . PKT TO READ FILE TABLEEPKT      E$PKT     14,LINE           . EDIT$ PACKETOWNCNT    +         0                 . ENTRY COUNT OF <OWNTBL>QALSAV    +         0D                . INPUT QUALIFIER SAVELINE      RES       14                . EDIT$ OUTPUT BUFFERACHBUF    RES       ACHDSZ            . ACF HEADER BUFFERACQBUF    RES       ACBFSZ            . QUALIFIER TABLE BUFFERACFBUF    RES       ACBFSZ            . FILE TABLE BUFFEROWNTBL    RES       M$OWNQMAX*4       . ENTRY WDS 0-1 = QUAL, 2-3 = OWNER ACCT          END@ELT,SIP MARSREL$.HFREAD,,,207535033034,023.         COBOL-CALLABLE SUBROUTINE TO READ ARCHIVE HISTORY FILE    WRC 3/92..         CALL 'HFREAD' USING AHF-RECORD EOF-FLAG...         <AHF-RECORD> IS 28 WORDS (168 FIELDATA CHARACTERS), WILL.                      CONTAIN EACH HISTORY ENTRY IN ORDER WRITTEN TO AHF.         <EOF-FLAG>   IS ONE WORD (COMP), WILL BE SET NONZERO WHEN.                      LAST RECORD RETURNED BY PRIOR CALL.$(1)      AXR$          $LIT          AHFDEF          D$BDEFHFREAD*          SX        X11,RETURN        . SAVE RETURN ADDRESS          LA,U      A3,,A0            . A3 = POINTER TO ARG LIST          LA,H2     A0,,A3            . ARGUMENT COUNT          TNE,U     A0,2              . TWO ARGUMENTS?          J         HF020             .  YES, SKIP          P$RINT    (0100+ER1L,ERR1)  .  NO, 'INVALID ARGUMENT COUNT'          ER        ERR$              . ABORTHF020          TZ        OPNFLG            . HAS FILE BEEN OPENED?          J         HF100             .  YES, SKIP          I$OW      AHHDPK            .  NO, READ HEADER          TZ,S1     AHHDPK+3          . GOOD STATUS?          J         HF050             .  NO, ERROR          LA,U      A2,AHHDBF         . A2 = POINTER TO HEADER RECORD          LA        A0,AHHLBL,A2      . SOFTWARE LABEL          TE        A0,('*AHFL*')     . GOOD LABEL?          J         HF050             .  NO, ERROR          LA        A0,AHHNXB,A2      . NEXT SECTOR TO WRITE          ANA       A0,AHHSTB,A2      . MINUS FIRST SECTOR = REC COUNT          TG,U      A0,1              . AT LEAST ONE RECORD IN FILE?          J         HF080             .  YES, SKIPHF050          P$RINT    (0100+ER2L,ERR2)  . 'AHF IS EMPTY OR HAS BAD HEADER'          ER        ERR$              . ABORTHF080          SA        A0,COUNT          . SAVE RECORD COUNT          D$BIO     AHRDPK  AHHSTB,A2 . OPEN D-B INPUT FROM AHF          SP1       OPNFLG            . SET FILE-OPEN FLAGHF100          LA,H2     A2,2,A3           . ADDRESS OF COBOL EOF-FLAG          SZ        0,A2              . CLEAR FLAG          LA        A0,COUNT          . COUNT OF REMAINING RECORDS          JGD       A0,HF120          . DECREMENT AND SKIP IF > 0          J         HF200             . ALL DONE, RETURN EOFHF120          SA        A0,COUNT          . SAVE REMAINING RECORD COUNT          D$BI      AHRDPK  HF150,HF150 . READ NEXT RECORD, A1 = ADDRESS          LA,H2     A0,1,A3           . ADDRESS OF COBOL RECORD BUFFER          LXI,U     A0,1              . INCREMENT FOR TRANSFER OUTPUT          LXI,U     A1,1              . INCREMENT FOR TRANSFER INPUT          LR,U      R1,28             . MOVE 28 WORDS          BT        A0,,*A1           . TRANSFER DATA TO COBOL          J         HF300             . RETURN NORMALHF150          P$RINT    (0100+ER3L,ERR3)  . 'I/O ERROR DURING READ OF AHF'          ER        ERR$              . ABORTHF200          SP1       0,A2              . SET EOF-FLAGHF300          LX        X11,RETURN        . RESTORE RETURN ADDRESS          J         0,X11             . BACK TO CALLER.ERR1      'INVALID ARGUMENT COUNT TO <HFREAD>'ER1L      EQU       $-ERR1ERR2      'INPUT FILE FOR <HFREAD> IS EMPTY OR HAS BAD HEADER'ER2L      EQU       $-ERR2ERR3      'I/O ERROR DURING READ OF HISTORY FILE BY <HFREAD>'ER3L      EQU       $-ERR3.$(0)C$BHFREAD* . LABEL REQUIRED BY COBOLRETURN    +         0                 . RETURN ADDRESSOPNFLG    +         0                 . FILE-OPEN FLAGCOUNT     +         0                 . REMAINING RECORD COUNTAHHDPK    I$OD      'HISTIN$',R$  28,AHHDBF  0 . PKT TO READ AHF HEADERAHRDPK    D$BRP     'HISTIN$'  28,1792*2,$-$  . PKT FOR D-B READ OF AHFAHHDBF    RES       28                . AHF HEADER BUFFER          END@ELT,SIP MARSREL$.JULDATE,,,142631052132,023.         SUBROUTINES TO PROCESS JULIAN DATES..         WRC 10/87.$(1)      AXR$          LIT..         CONVERT TDATE$ FORMAT IN A0 TO JULIAN DATE IN A4.         SINCE JAN 1, 1964.JULOUT*          DSL       A0,30             . A0 = MONTH          DSL       A1,30             . A1 = DAY          SSL       A2,30             . A2 = YEAR (MOD 64)          TLE,U     A0,13             . IS MONTH > 12          TLE,U     A0,1              .  OR < 1?          J         JO900             .   YES, ERROR          TLE,U     A1,32             . IS DAY > 31          TLE,U     A1,1              .  OR < 1?          J         JO900             .   YES, ERROR          AND,U     A2,3              . A3 > 0 IF NOT LEAP YEAR          LA,U      A4,3,A2           . A4 = YEAR NUMBER (MOD 64) + 3          SSL       A4,2              . DIV BY 4: A4 = NUMBER PRIOR LEAP YEARS          MSI,U     A2,365            . NUMBER OF DAYS IN PRIOR YEARS          AA        A4,A2             . ADD TO TOTAL          AA        A4,MTAB-1,A0      . ADD DAYS IN PRIOR MONTHS          AA        A4,A1             . ADD CURRENT DAY OF MONTH          JNZ       A3,JO200          . SKIP IF NOT LEAP YEAR          TG,U      A0,3              .  IF LEAP YEAR, IS MONTH > 2?          AA,U      A4,1              .   YES, ADD ONE FOR FEB 29THJO200          J         1,X11             . RETURN NORMAL STATUSJO900          J         0,X11             . RETURN ERROR STATUS/..         CONVERT JULIAN IN A4 BACK TO TDATE$ IN A0.JULIN*          LA,U      A2,64             . START WITH FIRST YEAR          LA,U      A0,0              . CUM DAY COUNT = 0JI100          AU,U      A0,365            . A1 = NEXT YEAR JAN 1. JUL DATE          AND,U     A2,3              . A3 > 0 IF NOT LEAP YEAR          JNZ       A3,JI120          . SKIP IF NOT LEAP YEAR          AA,U      A1,1              .  IF LEAP YEAR ADJUST FOR NEXT J. D.JI120          TLE,U     A4,1,A1           . IS THIS DATE IN RANGE OF CURR YEAR?          J         JI200             .  YES, SKIP          LA,U      A0,,A1            .  NO, SET NEW CUM DAY COUNT          AA,U      A2,1              .   AND INCREMENT YEAR NUMBER          J         JI100             . GO CHECK NEXT YEARJI200          ANA,U     A4,1,A0           . SUBTRACT PRIOR YEAR(S) CUM DAY COUNT + 1          JNZ       A3,JI250          . SKIP IF NOT LEAP YEAR          TLE,U     A4,59             .  IF LEAP YEAR, IS DAY < FEB 29?          J         JI250             .   YES, SKIP          TG,U      A4,60             .   NO, IS DAY > FEB 29?          J         JI240             .    YES, ADJUST FOR LEAP YEAR          LA,U      A0,2              . SET MONTH = 2 FOR FEB 29          J         JI300             . DON'T BOTHER SEARCHING FOR MONTH NUMBERJI240          ANA,U     A4,1              . ADJUST FOR LEAP YEAR, MONTH > FEBJI250          LR,U      R1,12             . SEARCH COUNT = 12          LA        A0,(1,0)          . POINTER TO MONTH TABLE          SG        A4,MTAB+1,*A0     . LOOK FOR MONTH NUMBER BASED ON DAY CT          ER        ERR$              . DAY CT SHOULD NEVER BE >= 365          LA,U      A0,,A0            . CLEAR INCREMENT, A0 = MONTH NUMBERJI300          ANA       A4,MTAB-1,A0      . SUBTR CUM DAYS TO CURR MONTH = DAY NBR          LA        A1,A4             . INTO A1          AA,U      A1,1              . MAKE 1-RELATIVE          LSSL      A2,30             . SHIFT YEAR NEXT TO DAY          LDSL      A1,30             . SHIFT DAY, YEAR NEXT TO MONTH          LDSL      A0,30             . SHIFT M/D/Y TO A0 UPPER (TDATE$ FORMAT)          J         0,X11             . RETURN/.DT(1)     EQU       31                . JANDT(2)     EQU       28                . FEBDT(3)     EQU       31                . MARDT(4)     EQU       30                . APRDT(5)     EQU       31                . MAYDT(6)     EQU       30                . JUNDT(7)     EQU       31                . JULDT(8)     EQU       31                . AUGDT(9)     EQU       30                . SEPDT(10)    EQU       31                . OCTDT(11)    EQU       30                . NOVDT(12)    EQU       31                . DEC.DY(0)     EQU       0I DO 12 ,DY(I) EQU  DY(I-1)+DT(I).MTAB                                  . TABLE OF CUM DAYS IN PRIOR MONTHSI DO 13 , +         DY(I-1)MTHMAX*                               . TABLE OF DAYS PER MONTHI DO 12 , +         DT(I)          END@ELT,SIP MARSREL$.ACP,,,221314121237,023.         ARCHIVE COPY PROCESSOR -  FAST COPY, SAVE, RESTORE A DISC FILE..         ORIGINAL DESIGN 5/88, ADDED ARCHIVE/TAPE FEATURES 2/89      WRC.         MHFS OPERATION ADDED, 6/91.         COPY,G INPUT CAPABILITY ADDED, 6/92.. ACP HAS 4 MODES OF OPERATION:.. (1) COPY:   (VALID OPTIONS ARE O,J,Q,V,X,C)..     @ACP<,OPT>  <INPUT-FILE>.,<OUTPUT-FILE>... (2) SAVE:   (VALID OPTIONS ARE A,B,N,Z,D,F,O,J,U,Y,X,C)..     @ACP,S<OPT>  <INPUT-FILE>.,<OUTPUT-FILE>... (3) RESTORE:   (VALID OPTIONS ARE A,G,I,P,F,V,U,Y,X,C)..     @ACP,RA<OPT> <INPUT-FILE>.,<OUTPUT-FILE>.<EQUIP>,<PACK-1>,<LOC>,<RUN/IDX>.     @ACP,R<OPT>  <INPUT-FILE>.,<OUTPUT-FILE>.<EQUIP>,<PACK-1>,...,<PACK-5>.. (4) MOVE:   (VALID OPTIONS ARE G,I,P,J,U,Y,X,C)..     @ASG,T  ACP$SCRATCH$,///<MAXIMUM>   (OPTIONAL - AUTO ASG'D IF NOT GIVEN).     @ACP,M<OPT>  <INPUT-FILE>.,<OUTPUT-FILE>.<EQUIP>,<PACK-1>,...,<PACK-5>.. THE FOLLOWING OPTIONS ARE AVAILABLE:.. S - SAVE OPERATION.  (MODE 2 ONLY).  THE INPUT MUST BE DISC.  THE.     OUTPUT FILE, IF DISC, WILL CONTAIN A HEADER WHICH CAN BE USED.     TO RESTORE THE FILE TO ITS ORIGINAL STATE.  ALL TAPE OUTPUT FILES.     HAVE A HEADER, BUT CAN BE COPIED BACK TO DISC IN NON-RESTORE MODE... R - RESTORE OPERATION.  (MODE 3 ONLY).  THE FILE IS RESTORED TO ITS ORIGINAL.     STATE.  INPUT MUST BE TAPE OR S-OPTION DISC.  IF AN OUTPUT FILE IS.     GIVEN, THIS WILL BE THE NAME OF THE RESTORED FILE.  IT MUST NOT EXIST... M - MOVE OPERATION.  (MODE 4 ONLY).  THE FILE IS SAVED, DELETED.     AND RESTORED TO ORIGINAL STATE.  DISC ONLY.  USED PRIMARILY TO.     CHANGE DEVICE ALLOCATION AND/OR TO DEFRAGMENT.  <OUTPUT-FILE> IS.     OPTIONAL.  IF GIVEN THE OUTPUT WILL HAVE A DIFFERENT FILE NAME... P - CLEAR ORIGINAL PACKID.  USED IN MODE 3,4 OPERATION TO RESTORE A.     FILE PREVIOUSLY ON REMOVABLE TO FIXED DISC... G - REVERSE ORIGINAL G-OPTION DURING RESTORE (MODE 3,4 ONLY).. I - RESTORE WITH APPROPRIATE INITIAL RESERVE... J - DISPLAY THE FILENAME AND TRACK COUNT ON THE CONSOLE AFTER A.     SUCCESSFUL MOVE OPERATION, OR FILENAME, POSITION AND REEL NUMBER.     AFTER COPY/ARCHIVE TO TAPE... A - ARCHIVE OPERATION.  MUST ACCOMPANY 'S' (MODE 2) OR 'R' (MODE 3)..     A SAVE-ARCHIVE IS SIMILAR TO A NORMAL SAVE EXCEPT THAT THE FILE.     ACP$ARCHIST$ IS UPDATED UPON SUCCESSFUL COMPLETION.  ALSO, IF THE.     INPUT FILE IS UNLOADED IT IS COPIED FROM THE FAS/SECURE TAPE(S)..     A RESTORE-ARCHIVE OPERATION RELOADS THE FILE SPECIFIED FROM.     TAPE BASED ON INFORMATION IN ACP$ARCHIST$.  THE SECTOR-NUMBER.     OF THE HISTORY FILE INFO FOR THE INPUT FILE MUST BE SUPPLIED... B - USED IN CONJUNCTION WITH 'S' AND 'A' (MODE 2 ONLY) TO INDICATE.     THAT THIS ARCHIVE IS A SECONDARY BACKUP OF A CRITICAL FILE... N - USED WITH 'S' AND 'A' (MODE 2 ONLY) TO REQUEST PURGE OF FILE.     (DELETE WITHOUT ARCHIVE-COPY) IF CURRENT BACKUP EXISTS.. Z - USED WITH 'S', 'A', 'N' TO ALLOW PURGE WITH BACKUP REQUIREMENT.     OMITTED (DELETE).. D - DELETE-AFTER-SAVE/PURGE OPERATION.  MUST ACCOMPANY 'S' (MODE 2 ONLY)..     THE DELETION IS DONE ONLY AFTER COPY OR PURGE VERIFICATION... U - SAVE FROM / RESTORE TO SHARED DIRECTORY.  MUST BE USED WITH EITHER.     'S', 'R' OR 'M'.  CANNOT BE USED WITH 'Y'.  REQUIRED FOR SAVE-.     ARCHIVE OPERATION (OR 'Y') IF M$MHFSHARED = 1... Y - SAVE FROM / RESTORE TO STD (LOCAL) DIRECTORY.  SAME CONSTRAINTS AS 'U'... F - (SAVE-ARCHIVE) DO NOT FREE THE INPUT FILE AFTER A SUCCESSFUL COPY..                    (FIRST COPY OF CRIT-BACKUP SET)..     (RESTORE-ARCHIVE) THIS IS THE LAST FILE FOR A FETCH-RESTORE... V - (COPY FROM TAPE) VERIFY THAT THE SAVED QUALIFIER, FILE IS THE SAME AS.                      THE OUTPUT QUALIFIER, FILE.  ABORT IF NOT EQUAL...     (RESTORE) BYPASS SECURITY-ATTRIBUTE COMPARE WHEN RESTORING A PLUS.               OR MINUS F-CYCLE IN A SECURITY ENVIRONMENT.  THIS OPTION.               IS NEVER AUTO-GENERATED FOR A PROGRAMMED RESTORE... Q - IF I/O, BLOCK SEQUENCE OR CHECKSUM ERRORS OCCUR WHILE READING A.     COPY,G INPUT TAPE, QUERY THE OPERATOR WHETHER TO ABORT OR CONTINUE..     IF CONTINUATION IS REQUESTED, THE CONDITION WORD (T3) IS SET TO.     ONE UPON TERMINATION.  USUALLY THE AFFECTED FILE WILL HAVE ONE OR.     MORE BAD TRACKS AND WILL NEED TO BE RECOVERED MANUALLY... O - NORMALLY ALL DISC OUTPUT FILES (EXCEPT ACP$SCRATCH$) MUST BE.     EMPTY PRIOR TO COPYING.  USE OF THIS OPTION WILL ALLOW THE FILE.     TO BE OVERWRITTEN BY ACP... X - ABORT THE RUN (ERR$) IF ANY NON-RECOVERABLE ERRORS OCCUR..     THIS IS THE BATCH DEFAULT - IF GIVEN, OVERRIDES 'C'... C - TAKE NORMAL EXIT (EXIT$) IF A NON-RECOVERABLE ERROR OCCURS..     THIS IS THE DEMAND DEFAULT....   UNUSED OPTIONS:  E, H, K, L, T, W..$(1)      AXR$          $LIT          MGPDEF          AHFDEF          RCBDEF.ACPVER    EQU  01100+(M$CHKSM>0)*1+(M$SENTRY>0)*2+(M$MHFSHARED>0)*4 .                                      . ACP INTERNAL VERSIONBUFSIZ    EQU       1792*M$BUFFINIT   . INITIAL SIZE OF I/O BUFFERSBUFLRG    EQU       1792*M$BUFFLRG    . MAXIMUM SIZE OF OUTPUT I/O BUFFERSBUFMAX    EQU       1792*36           . MAX SIZE OF INPUT I/O BUFFERSBUFMXC    EQU       1792*16           . MAX BUFFER SIZE FOR CARTRIDGE TAPENBUFF     EQU       2                 . NUMBER OF I/O BUFFERS - DO NOT CHANGECPGBFC    EQU       16                . COUNT OF TRACK-SIZE COPY,G INPUT BUFFERSPCKMAX    EQU       5                 . MAX PACKIDS/FILE (DO NOT SET >5)MAXFIL    EQU       2                 . ENTRY COUNT OF FCTTBL.PCTNAM    EQU       0241              . START OF FACILITIES AREAPCFLNK    EQUF      0,X5,H2           . LINK WORDPCFIDL    EQUF      6,X5              . MFDF LOCATION/ SPECIAL FLAGS..         FILE CONTROL TABLE DEFINITIONS.FCTFLGS   EQUF      0                 . CONTROL FLAGSFCTSTAT   EQUF      0,,S1             . ASG/FREE STATUSFCTTAP    EQUF      0,,S2             . SET IF FILE IS TAPEFCTUNL    EQUF      0,,S3             . SET IF FILE IS UNLOADEDFCTRSA    EQUF      0,,S4             . SET IF RESTORE ARCHIVEFCTPOS    EQUF      0,,S5             . SET IF POSITION GRANULARITYFCTEQP    EQUF      0,,S6             . EQUIPMENT CODE FROM FITEM$FCTUSE    EQUF      1                 . USE NAME FOR MOST I/O OPERATIONS.                                     . (THIS IS 'IBACKUP' IF UNLOADED,.                                     .   SAME AS FCTUEX OTHERWISE)FCTQUAL   EQUF      3                 . EXTERNAL QUALIFIERFCTFILE   EQUF      5                 . EXTERNAL FILENAMEFCTCYC    EQUF      7,,H1             . EXTERNAL CYCLEFCTFL2    EQUF      7,,H2             . ADDITIONAL FLAGSFCTSHR    EQUF      7,,S4             . SET IF FILE FROM SHARED DIRECTORYFCTCPG    EQUF      7,,S5             . INPUT TAPE IS COPY,G FORMATFCTTPR    EQUF      7,,S6             . TAPE ASSIGNED WITH 'R' OPTIONFCTUEX    EQUF      8                 . USE NAME FOR EXTERNAL FILEFCTLEN    EQU       10                . LENGTH OF FCT..         TAPE BLOCK HEADER DEFINITIONS.THSECT    EQUF      0                 . STARTING SECTOR ADDRESS OF DATA BLOCKTHCKSM    EQUF      1,,H1             . CHECKSUM (ON IF ACPVER BIT 0 IS SET)THSEQ     EQUF      1,,H2             . BLOCK SEQUENCE NUMBERTHLEN     EQU       2                 . LENGTH OF TAPE BLOCK HEADER..         FAS/SECURE HEADER DEFINITIONS.SEHDBS    EQUF      0,,H1             . BLOCK SEQUENCE NUMBERSEHDTR    EQUF      0,,H2             . TRACK ADDRESSSEHDW0    EQUF      0                 . COMBINED BLOCK SEQ, TRACK ADDRSEHDCS    EQUF      2                 . CHECKSUMSEHDLN    EQU       8                 . LENGTH OF FAS/SECURE HEADER..         COPY,G HEADER DEFINITIONS.CGHDSA    EQUF      0                 . SECTOR ADDRESS OF DATA BLOCKCGHDCS    EQUF      1,,H1             . CHECKSUMCGHDBS    EQUF      1,,H2             . BLOCK SEQUENCE NUMBERCGHDLN    EQU       2                 . LENGTH OF COPY,G HEADER..         LEAD ITEM DEFINITIONS.L0RKEY    EQUF      7                 . READ KEYL0WKEY    EQUF      8                 . WRITE KEYL0CYLM    EQUF      9,,S3             . CYCLE LIMITL0DRID    EQUF      10,,S3            . DIRECTORY-ID (0=STD, 1=SHARED)...         HEADER DEFINITIONS..  THE FIRST 28 WORDS OF THE HEADER OF A SAVE-FORMAT FILE IS AN IMAGE. OF THE MAIN ITEM SECTOR 0 OF THE ORIGINAL FILE IF THE ORIGINAL FILE. WAS CATALOGUED.  CERTAIN PARTS OF THIS ARE OVERWRITTEN BY ACP TO SAVE. OTHER RELEVANT DATA.  HERE FOLLOW THE DEFINITIONS OF ALL FIELDS WHICH. ARE IN USE.  IF CHARS 3-4 = 'XX', THE FIELD IS SET BY ACP.  OTHERWISE,. IT IS IN ITS ORIGINAL PLACE IN THE MAIN ITEM AS RETURNED BY MSCON$..M0XXLB    EQUF      0               . * UNIQUE ACP LABEL (*ACSV*)M0QUAL    EQUF      1               .   QUALIFIERM0FILE    EQUF      3               .   FILENAMEM0PROJ    EQUF      5               .   PROJECT IDM0ACCT    EQUF      7               .   ACCOUNT (0 IF TEMP FILE)M0XXDT    EQUF      9               . * DATE FILE WAS COPIED IN SAVE FORMATM0TOFW    EQUF      10              .   TIME OF FIRST WRT AFT SAVE (INPUT ONLY)M0XXAF    EQUF      10,,S1          . * SET IF FILE WAS ARCHIVEDM0XXCL    EQUF      10,,S2          . * CYCLE LIMIT (ACPVER > 0677)M0XXRS    EQUF      10,,S3          . * REEL SEQUENCE (ACPVER > 0777)M0XXVN    EQUF      10,,H2          . * VERS OF ACP WHICH CREATED SAVE FILEM0XXBS    EQUF      11,,H2          . * BLOCK SIZE (SECTORS) USED FOR COPYM0DSCW    EQUF      12              .   WORD CONTAINING DESCRIPTOR FLAGS (T1)M0FILF    EQUF      12,,S3          .   FILE-FLAGSM0PCHR    EQUF      13,,S1          .   PCHAR FLAGSM0PCHW    EQUF      13              .   WORD CONTAINING PCHAR FLAGS (IN S1)M0MNEM    EQUF      14              .   ASSIGN MNEMONICM0ASGS    EQUF      15,,H2          .   ASSIGN COUNTM0XXAC    EQUF      16,,H2          . * COUNT OF ACWS THAT DESCRIBE FILEM0INHI    EQUF      17,,S2          .   INHIBIT FLAGSM0XXPC    EQUF      17,,S3          . * PACKID COUNT (ACPVER > 01077)M0CYCW    EQUF      17              .   WORD CONTAINING ABS F-CYCLE (T3)M0REFT    EQUF      18              .   LAST REFERENCE DATE/TIMEM0CATT    EQUF      19              .   CATALOG DATE/TIMEM0NGST    EQU       20              .   STARTING ADDR OF 8-WORD GRAN TABLE (H2)M0INIT    EQUF      20,,H1          .   INITIAL GRANULE COUNTM0XXR1    EQUF      20,,H2          . * FIRST HALF READ KEY  (ACPVER > 0477)M0MAXG    EQUF      21,,H1          .   MAXIMUM GRANULE COUNTM0XXR2    EQUF      21,,H2          . * SECOND HALF READ KEY  (ACPVER > 0477)M0XXW1    EQUF      22,,H2          . * FIRST HALF WRITE KEY  (ACPVER > 0477)M0HITR    EQUF      23,,H1          .   HIGHEST TRK WRITTEN (INP ONLY, SECURE)M0XXW2    EQUF      23,,H2          . * SECOND HALF WRITE KEY  (ACPVER > 0477)M0XXNT    EQUF      24              . * ASSIGNED TRACK COUNTM0XXHT    EQUF      25              . * HIGHEST TRACK WRITTENM0XXPK    EQUF      26              . * FIRST PACKID.HBACBG    EQU       28                . BEGINNING OF FILE ACWSHBACMX    EQU       164               . MAXIMUM NUMBER OF ACWSHBPTBG    EQU       192               . PACKID TABLE, PACKS 2-5 (ACPVER > 01077)HBLIBG    EQU       196               . START OF SAVED LEAD ITEM (ACPVER > 0777)HBSIZE    EQU       224               . SIZE OF HEADER BUFFER..         MAIN ITEM SECTOR 1 AND 2 DEFS (NOT SAVED IN HEADER).M1BRCT    EQUF      28+7,,T1          . COUNT OF BACKUP REELSM1FASB    EQUF      28+9,,S2          . FAS BITSM1BUBC    EQUF      28+9,,H2          . FAS/SECURE BACKUP BLOCK COUNTM1STFW    EQUF      28+10             . STARTING FILE POS ON IBACKUP (IN T2)M1BUR1    EQUF      28+11             . FIRST IBACKUP REELM1BUR2    EQUF      28+12             . SECOND IBACKUP REELM1STFP    EQUF      28+13             . STARTING FILE POSITION (GENERATED)M1PKCT    EQUF      28+17,,S6         . PACKID COUNTM1PKID    EQUF      28+18             . FIRST PACKIDM2BRST    EQUF      56+8              . STARTING ADDR OF ADD'TL REELS/.. BEGIN HERE.START          TE,U      A4,4              . IS THIS A DEMAND RUN?          SZ        DEMAND            .  NO, ZERO DEMAND FLAG          SA        A5,A15            . SAVE PROCESSOR OPTIONS          TOP       A5,(1*/33)        . DOES R13 = MASTER LVL ID?          J         BH006             .  NO, MUST BE PRE-41R7          LA        A0,R13            .  YES, A0 = SYSTEM ID          SSL       A0,12             . 1ST 4 CHARS TO A0 LOWER          AND,U     A0,07700          . 3RD CHAR TO A1          TE,U      A1,'R@'           . IS LEVEL IN FORM XXRX?          J         BH005             .  NO, ASSUME > 41R7          TLE       A0,('@@41R7')     . LEVEL => 41R7?          J         BH006             .  NO, SKIPBH005          SP1       EX41R7            . SET EXEC 41R7+ FLAGBH006          LA        A0,(1,DBANK1)     . POINTER TO PRE-INIT DBANK          LA        A1,(1,DB1SAV)     . POINTER TO DBANK 1 SAVE AREA          LR,U      R1,DB1SIZ         . SIZE OF DBANK 1          BT        A1,,*A0           . MOVE INIT VALUES TO SAVE AREA          LA        A0,(2,CLIST)      .          ER        CLIST$            . REGISTER @ACP WITH CLIST$          LA        A0,(1*/15,CGYPKT) .          ER        IALL$             . REGISTER ERR MODE CONTINGENCIES          LA        A0,(5,LINE)       .          ER        PCT$              . GET FIRST 5 WORDS OF PCT          LA        A0,LINE+1         . GENERATED RUNID          SA        A0,GENRUN         . SAVE FOR LATER USE          LA,S2     A0,LINE+4         .          SA        A0,PRVFLG         . SET PRIVILEGED FLAG          J         RSTRT2            ...         2ND AND SUBSEQUENT EXECUTIONS AS A REUSABLE PROCESSOR BEGIN HERE.RESTART          SZ        PASS1             . CLEAR FIRST PASS FLAG          LA        A0,(1,DBANK1)     .          LA        A1,(1,DB1SAV)     .          LR,U      R1,DB1SIZ         .          BT        A0,,*A1           . MOVE INIT VALUES BACK TO DBANK 1RSTRT2          LA        A0,(1,DBANK2)     . POINTER TO DBANK 2          LA,U      A1,(0)            .          LR,U      R1,DB2SIZ         .          BT        A0,,*A1           . CLEAR ALL OF DBANK 2          SZ        INFOR$            . CLEAR POINTER TO PREVOIUS INFOR          LA        A0,(50,INFBUFF)   .          LMJ       X11,RINF$         . READ INFOR FOR THIS ACP CALL          J         INFERR            .  ERROR READING INFOR          LA        A14,INFBUFF       . FIRST WORD OF INFOR IS OPTION MASK          AND       A14,(1*/26-1)     . SAVE ALL BUT BIT 26 INTO REG A15          LMJ       X11,IDONLY$       . FORMAT ID LINE          P$RINT    (0107,IDBUFF)     .  AND PRINT IT          TOP       A15,(1*/('Z'-'C')) . IF CONTINUE OPT SET, SKIP BATCH CHECK          TZ        DEMAND            . TEST FOR BATCH RUN          TEP,U     A15,1*/('Z'-'X')  .  OR X OPTION          SP1       BOMB              .   IF SO, SET ABORT FLAG          TEP       A15,(1*/('Z'-'A')) . IS THIS AN ARCHIVE OPERATION?          SP1       ARCFLG            .  YES, SET ARCHIVE FLAG          LA        A0,PRVSTA         . PREVIOUS ASSIGNMENT STATUS (S,F OPTS)          SA        A0,STASAV         . SAVE FOR THIS OPERATION          SZ        PRVSTA            . CLEAR FOR NEXT FILE          LA        A0,PRVUNL         . PREVIOUS-UNLOADED FLAG          SA        A0,UNLFLG         . SAVE FOR THIS OPERATION          SZ        PRVUNL            . CLEAR FOR NEXT FILE..         CHECK MHFS STATUS, OPTION SETTINGS.          AND,U     A15,1*/('Z'-'M')++1*/('Z'-'R')++1*/('Z'-'S')          LA        A14,A15+1         . PICK UP RUN MODE OPTIONS          LA,U      A2,0              . CLEAR U,Y OPTION FLAG          TOP,U     A15,1*/('Z'-'U')  . IS 'U' OPT SET?          J         BH020             .  NO, SKIP          TEP,U     A15,1*/('Z'-'Y')  .  YES, IS 'Y' SET?          J         ER003             .   YES, CANNOT USE U,Y TOGETHER          J         BH025             .   NO, CONTINUEBH020          TOP,U     A15,1*/('Z'-'Y')  . IS 'Y' OPTION SET?          J         BH030             .  NO, SKIPBH025          JZ        A14,ER004         . ERROR IF 'S','R','M' NOT SET W/'U','Y'          LA,U      A2,1              . SET U,Y OPTION FLAGBH030          TEP,U     A15,1*/('Z'-'S')  .          TNZ       ARCFLG            . SAVE-ARCHIVE OPERATION?          J         BH040             .  NO, SKIP DO M$MHFSHARED=0 , JNZ  A2,ER005     . U,Y ILLEGAL - NOT MARS-CONFIGURED DO M$MHFSHARED>0 , JZ   A2,ER005     . U,Y REQUIRED - MARS-CONFIGUREDBH040          SZ        HOSTID            . INIT HOST-ID = 0          LA,U      A0,DIDPKT         .          ER        MSCON$            . PERFORM MSCON$ - DIRID$ REQUEST          JN        A0,BH045          . NO MHFS IF ERROR STAT RETURNED          LA,S6     A0,DIDBUF         . GET MHFS STATUS BITS          TEP,U     A0,1*/0           . IS MHFS CONFIGURED ON THIS SYSTEM?          J         BH050             .  YES, SKIPBH045          JNZ       A2,ER006          . U,Y ILLEGAL - MHFS NOT SYS-CONFIGURED          SZ        MHFCFG            . CLEAR CONFIG FLAG IF NEITHER OPT GIVEN          J         BH080             .BH050          AND,U     A0,1*/4++1*/5     . DOWN, NOT-AVAIL FLAGS TO A1          JZ        A1,BH060          . SKIP IF MHFS UP, AVAIL          TEP,U     A15,1*/('Z'-'U')  . SHARED FILE REQUEST?          J         ER007             .  YES, ABORT - MHFS NOT AVAILBH060          SP1       MHFCFG            . SET MHFS-CONFIGURED FLAG          JZ        A2,BH080          . DONE IF U,Y NOT SET          LA,S5     A0,DIDBUF         . GET HOST-ID          TG,U      A0,1              .          TG,U      A0,4+1            .          J         ER008             . ERROR IF NOT IN RANGE 1-4          SA        A0,HOSTID         . VERIFICATION OK, SAVE FOR LATER USE...         BRANCH TO COPY/SAVE OR RESTORE CODE DEPENDING ON USER OPTIONS.BH080          TNE,U     A14,1*/('Z'-'S')  .          J         SAVFIL            . PROCESS SAVE FILE IF ONLY 'S' SET          TNE,U     A14,1*/('Z'-'R')  .          J         RSTFIL            . PROCESS RESTORE FILE IF ONLY 'R' SET          LA        A0,ARCFLG         . LOAD ARCHIVE FLAG          SZ        ARCFLG            .  ZERO ARCHIVE FLAG          JNZ       A0,ER010          . IF FLAG WAS SET, OPTION CONFLICT          TE,U      A14,1*/('Z'-'M')  . IS ONLY 'M' OPTION ON? (MOVE)          J         BH100             .  NO, SKIP          SP1       MOVFLG            . SET MOVE FLAG          AA,U      A15,1*/('Z'-'S')++1*/('Z'-'R') . SET SAVE AND RESTORE OPTS          J         SAVFIL            . PROCESS SAVE AS 1ST HALF OF MOVEBH100          JNZ       A14,ER010         . ERROR IF MULTIPLE MODE OPTIONS SET          LA,U      A0,1              . FILE 1          LA,U      A14,1*/3          . SET INPUT, TAPE ALLOWED          LMJ       X11,OPNFILE       . GO OPEN INPUT (SPEC 1)          J         ERREXT            .  ERROR OPENING FILE          TNZ       FCTTAP,X4         . IS THIS A TAPE FILE?          J         COPDSK            .  NO, TREAT AS COPY/SAVE          J         COPTAP            .  YES, TREAT AS RESTORE/..  COPY ONE FILE TO ANOTHER.   INPUT IS A STANDARD DISC FILE.   OUTPUT IS IN SAVE FILE FORMAT IF 'S' OPTION IS SET OR IF OUTPUT IS TAPE.SAVFIL          TNZ       PRVFLG            . IS REQUESTOR PRIVILEGED?          J         ER210             . NOPE, CANNOT PERFORM SAVE FUNCTION          TNZ       ARCFLG            . ARCHIVE OPERATION?          J         SF060             .  NO, SKIP          R$EAD     (SF040,AHMBUFF)   .  YES, READ MATCHING INFO VIA READ$          LA,U      A0,,A0            . GET WORD COUNT READ          TE,U      A0,AHMICT         . MUST EQUAL EXPECTED          J         SF045             .  IF NOT, PRT ERROR AND IGNORE          SP1       AHMFLG            . SET 'GOOD' MI FLAG          J         SF050             .  AND CONTINUE NORMAL PROCESSINGSF040          SA        A0,RDSTAT         . SAVE EOF STATUS FOR RESTARTSF045          P$RINT    (0100+ER14L,ERR14)  . MISSING OR INVALID MATCHING INFO          TNZ       DEMAND            . DEMAND RUN? (ASSUME TEST MODE)          LMJ       X1,ABORT          .  NO, ABORT ARCHIVESF050          TNZ       SKPNXT            . IS SKIP-NEXT FLAG SET?          J         SF060             .  NO, SKIP          SZ        SKPNXT            .  YES, CLEAR FLAG          TOP       A15,(1*/('Z'-'B')) . IS THIS SECONDARY BACKUP?          J         SF060             .  NO, IGNORE FLAG SETTING          P$RINT    (0100+ER39L,ERR39) . 'COMMAND BYPASSED DUE TO PREV ERROR'          J         NRMEX1            .  DON'T PROCESS THIS COMMANDSF060          LA,U      A0,1              . FILE 1          LA,U      A14,1*/1          . INPUT FILE, SET X-USE REQ FLAG          TNZ       MOVFLG            . MOVE OPERATION?          AA,U      A14,1*/6          .  NO, SET SPECIFIC DIR-ID FLAG          LMJ       X11,OPNFILE       . OPEN INPUT FILE          J         ERREXT            . STOP HERE IF ERROR          TNZ       MOVFLG            . MOVE OPERATION?          J         SF070             .  NO, SKIP          LA,U      A0,2              .  YES, PRE-VALIDATE SPEC 2 IF GIVEN          LMJ       X11,SELT$         . CALL SELT$ FOR THIS          J         SF080             . NO FIND, SKIP          TNZ,S2    ELT$              . WAS A FILENAME GIVEN?          J         SF080             .  NO, SKIP          TZ,S1     ELT$              .  YES, IS QUALIFIER          TNZ,S3    ELT$              .    OR CYCLE MISSING?          J         ER218             .     YES, ERROR          LA        A0,ELT$+6         . SYMBOLIC F-CYCLE          LA,U      A1,0              .  ONLY LOOK AT ONE WORD          LMJ       X11,FDTOBN        . CONVERT TO BINARY          J         ER218             . CONVERSION ERROR          J         SF080             . NORMAL RETURN, PRE-VALIDATION IS OKSF070          LA        A0,FCTSHR,X4      . GET SHARED FLAG FROM FITEM$          TEP,U     A15,1*/('Z'-'U')  . SHARED REQUEST?          JZ        A0,ER205          .  YES, ERROR IF NOT RET SHARED          TEP,U     A15,1*/('Z'-'Y')  . LOCAL REQUEST?          JNZ       A0,ER205          .  YES, ERROR IF NOT RET LOCALSF080COPDSK          LX,U      X7,HBUFF          . ADDRESS OF ACP HEADER BUFFER          DL        A0,FCTUEX,X4      . INPUT USE NAME          DS        A0,DREAD+1        . INTO MSCON$ DREAD$ PKT          LA        A0,(1,BUFF+56)    .          LA,U      A1,(0)            .          LR,U      R1,28*3           .          BT        A0,,*A1           . CLEAR 3RD, 4TH, 5TH DIR ENTRIES          LA,U      A0,DREAD          .          ER        MSCON$            . DO THE DREAD$          JN        A0,SF200          . GO CHECK ERROR TYPES          LA,S1     A4,BUFF           . DIRECTORY INDICATOR BITS          AND,U     A4,034            . AND OFF BITS 34-30          TE,U      A5,010            . MUST BE LEAD ITEM          LMJ       X1,ABORT          .  IF NOT, ABORT          LA        A0,BUFF+L0DRID    . DIR-ID FROM LEAD ITEM          TE        A0,FCTSHR,X4      . SAME AS EXPECTED FROM FITEM$?          J         ER206             .  NO, ERROR          SA        A0,ORGSHR         . SAVE ORIGINAL DIR-ID          LA        A0,(1,BUFF+28)    . POINTER TO SECOND ENTRY          LA,S1     A4,,A0            . GET INDICATOR BITS          AND,U     A4,034            .          TNE,U     A5,020            . IS THIS MAIN ITEM SECTOR 0?          J         SF090             .  YES, SKIP          AA,U      A0,28             . INCREMENT POINTER          LA,S1     A4,,A0            . GET BITS FOR NEXT ENTRY          AND,U     A4,034            .          TE,U      A5,020            . IS THIS MAIN ITEM SECTOR 0?          LMJ       X1,ABORT          .  IF NOT, ABORTSF090          AU,U      A0,M0NGST         . A1 = POINTER TO GRANULE TABLE (H2)          LA,U      A2,0              . INIT GRAN CT = 0          LR,U      R1,8-1            . LOOP COUNT (8 WORDS)SF092          AA,H2     A2,,*A1           . ADD TO TOTAL FOR EACH QUOTA GROUP          JGD       R1,SF092          . BACK FOR NEXT          SA        A2,TOTGRN         . SAVE TOTAL GRANULE COUNT          LA        A1,(1,HBUFF)      . POINTER TO ACP HEADER BUFF          LR,U      R1,28*3           . MOVE 3 ENTRIES          BT        A1,,*A0           .  FROM DREAD$ BUFF INTO HEADER BUFF          LA        A1,(1,HBUFF+HBLIBG) . LEAD ITEM SAVE AREA IN HEADER          LA        A0,(1,BUFF)       . POINTER TO LEAD ITEM          LR,U      R1,28             . TRANSFER LEAD ITEM          BT        A1,,*A0           .  FROM DREAD$ BUFF INTO HEADER BUFF          LA        A0,M0FILF,X7      . FILE FLAGS          TEP,U     A0,1*/5           . IS BIG FILE BIT SET?          LMJ       X1,ABORT          .  YES, ABORT - INCONSISTENT W/FITEM$          SZ        M0XXPK,X7         . ZERO PACK ID          SZ        M0XXPC,X7         .  AND PACKID COUNT          LA        A0,M1STFW,X7      . STARTING FILE POSITION IN T2          LSSL      A0,12             . SHIFT TO A0 UPPER          SSL       A0,24             . SHIFT TO A0 LOWER          SA        A0,M1STFP,X7      . SAVE VALUE WITHOUT SIGN EXTENSION          SZ        PURFLG            . ZERO PURGE FLAG          TOP,U     A15,1*/('Z'-'N')  . PURGE OR DELETE REQUESTED?          J         SF110             .  NO, SKIP          TNZ       ARCFLG            .  YES, IS THIS ARCHIVE OPERATION?          J         ER207             .   NO, ERROR - PURGE/DELETE NOT ALLOWED          LA        A0,(1,AHFBUF)     . ZERO AHF BUFFER          LA,U      A1,(0)            .  FOR THIS FILE          LR,U      R1,28             .          BT        A0,,*A1           .          LX,U      X8,AHFBUF         . X8 = POINTER TO HISTORY BUFFER          TEP,U     A15,1*/('Z'-'Z')  . IS THIS A DELETE REQUEST?          J         SF095             .  YES, BYPASS BACKUP-CHECK          LA        A0,M0DSCW,X7      . A0 = WORD WITH DESCRIPTOR-FLAGS          SSL       A0,24             . DESCRIPTOR FLAGS TO A0 LOWER          TOP,U     A0,1*/10          . IS FILE BACKED UP?          J         SF100             .  NO, DON'T PURGE          TOP,U     A0,1*/11          . IS FILE UNLOADED,          TNZ       M0TOFW,X7         .  OR IS MOST RECENT SAVE CURRENT?          J         $+2               .   YES, CONTINUE          J         SF100             .    NO, DON'T PURGE          LA        A2,M1BRCT,X7      . A2 = COUNT OF BACKUP REELS          LA        A3,M1BUR1,X7      . A3 = FIRST BACKUP REEL-ID          JZ        A2,SF100          . DON'T PURGE IF EITHER OF THESE IS ZERO          JZ        A3,SF100          .          SA        A2,AHBRCT,X8      . SAVE COUNT OF BACKUP REELS          SA        A3,AHBRST,X8      .  AND 1ST REEL-ID          LA        A0,M1STFP,X7      . STARTING FILE POSITION ON BACKUP          SA        A0,AHSTFP,X8      . STORE POSITION IN AHF BUFFERSF095          ER        TDATE$            . RETRIEVE CURRENT DATE/TIME          SA        A0,M0XXDT,X7      . SAVE PURGE TIME IN HDR FOR LATER USE          LA        A0,TOTGRN         . TOTAL GRANULES IN FILE          TP        M0PCHW,X7         . IS FILE POSITION GRANULARITY?          LSSL      A0,6              .  YES, TIMES 64 = TRACK TOTAL          TP        M0DSCW,X7         . IS FILE UNLOADED?          LA        A0,M1BUBC,X7      .  YES, USE SAVED BLOCK CT AS TRACK CT          SA        A0,TRKCNT         . SAVE TRACK COUNT FOR LATER USE          SP1       PURFLG            . SET PURGE/DELETE FLAG          TEP,U     A15,1*/('Z'-'Z')  . IS THIS A DELETE REQUEST?          J         SF098             .  YES, SKIP          P$RINT    (0100+PURL,PURMSG) . PRINT PURGE ACCEPTED MESSAGE          J         SF620             . SKIP TAPE COPY, REJOIN AT AHF UPDATESF098          P$RINT    (0100+DELL,DELMSG) . PRINT DELETE ACCEPTED MESSAGE          J         SF620             . SKIP TAPE COPY, REJOIN AT AHF UPDATESF100          P$RINT    (0100+NOPL,NOPMSG) . PRINT MSG - NO CURR B/U, NO ACTION TKN          J         NRMEXT            . NO PROCESSING FOR THIS FILESF110          LA        A0,M1PKCT,X7      . COUNT OF PACKIDS          JZ        A0,SF115          . SKIP IF ZERO (FIXED DISC)          TLE,U     A0,PCKMAX+1       . MORE THAN <PCKMAX> PACKS?          J         SF112             .  NO, CONTINUE          TEP,U     A15,1*/('Z'-'S')  .  YES, SAVE OPERATION?          J         ER211             .   YES, CANNOT SAVE MULTI-PACK FILE          J         SF115             .   NO, CONTINUE (TREAT AS FIXED)SF112          SA        A0,M0XXPC,X7      . SAVE PACKID COUNT IN HEADER          LA        A1,M1PKID,X7      . LOAD FIRST PACK ID          SA        A1,M0XXPK,X7      . STORE IN HEADER          ANA,U     A0,2              . DECREMENT COUNT          JN        A0,SF115          . SKIP IF <2 PACKIDS          LA,U      A2,M1PKID+2,X7    . ADDRESS OF M1-TABLE, PACKS 2-5          LXI,U     A2,2              . ENTRIES ARE TWO WORDS LONG          LA,U      A3,HBPTBG,X7      . ADDRESS OF HEADER TABLE, PACKS 2-5          LXI,U     A3,1              . ENTRIES ARE ONE WORD LONGSF113          LA        A1,,*A2           . GET NEXT PACKID FROM MI SECT 1          SA        A1,,*A3           . STORE IN HEADER TABLE          JGD       A0,SF113          . BACK FOR MORESF115          TZ        FCTUNL,X4         . TEST FOR UNLOADED INPUT FILE          J         SF150             .  IF SO, PROCESS DIFFERENTLY          LA        A0,BUFF+L0RKEY    . GET READ KEY          DSL       A0,18             . MOVE H1 INTO A0 LOWER          SSL       A1,18             . AND H2 INTO A1 LOWER          SA        A0,M0XXR1,X7      . STORE KEY IN HEADER          SA        A1,M0XXR2,X7      .          LA        A0,BUFF+L0WKEY    . GET WRITE KEY          DSL       A0,18             . MOVE H1 INTO A0 LOWER          SSL       A1,18             . AND H2 INTO A1 LOWER          SA        A0,M0XXW1,X7      . STORE KEY IN HEADER          SA        A1,M0XXW2,X7      .          LA        A0,BUFF+L0CYLM    . GET CYCLE LIMIT          SA        A0,M0XXCL,X7      . STORE IN HEADER          TNZ       M0ACCT,X7         . IS ACCOUNT ZERO?          SP1       M0ACCT,X7         .  YES, MUST BE NONZERO, IND CAT FILE          LA,U      A8,0              . INIT ACW COUNT = 0          TZ        TOTGRN            . DOES FILE HAVE ANY ASSIGNED GRANULES?          J         SF118             .  YES, SKIP          LA        A0,FACPKT+7       .  NO, GET ASSIGNMENT OPTIONS          AND       A0,(1*/('Z'-'C')++1*/('Z'-'U')) . CHK FOR @ASG,C OR @ASG,U          JZ        A1,SF117          . SKIP IF NOT PRESENT - FILE ALREADY CAT          TEP,U     A15,1*/('Z'-'S')  . SAVE OPERATION?          J         ER204             .  YES, ERROR - FILE MUST BE @ASG,A          SP1       CATPCT            .  NO, SET FLAG FOR PCT DAD SCAN          J         SF204             .   AND SKIP TO PCT DAD CODESF117          LA        A0,FCTSTAT,X4     . INPUT FILE ASSIGNMENT STATUS          TNE,U     A0,3              . WAS FILE ASSIGNED BY ACP?          J         SF291             .  YES - TOTGRN = 0 MEANS EMPTY FILESF118          LXI,U     X6,3              . INCREMENT FOR SCAN OF SINGLE DADT          LX        X8,(1,HBUFF+HBACBG) . POINTER FOR OUTPUT ACW LIST          LA        A3,(07770*/6+2,BUFF)  . RETURN UP TO 146 DAD TABLES          DSL       A4,72             . A4=TRACK ACCUM, A5=LAST ADDRESS          DS        A3,DREAD+3        . SET UP PKT FOR READ OF DAD TBLS          LA,U      A6,04             . FOR TESTING LAST DAD IN TABLE          LA,U      A10,0             . SET WORD ADDRESS TO ZEROSF120          LA,U      A0,DREAD          .          ER        MSCON$            . READ IN THE FIRST DADTS (UP TO 146)          JN        A0,ER130          . ERROR EXIT IF BAD STATUS          LX        X5,(28,BUFF-28)   . POINTER TO MSCON$ RETURNED DADTS          LR,T2     R5,DREAD+4        . DADT COUNT          JGD       R5,SF140          . DECREMENT FOR JGD          LMJ       X1,ABORT          . ERROR IF ZEROSF140          LXM,U     X6,28+4,*X5       . ADDRESS OF NEXT DADT          LR,U      R6,7              . UP TO 8 DADS IN MSCON$ DADT          TE        A10,2,X5          . IS FIRST ADDRESS = EXPECTED?          LMJ       X1,ABORT          .  NO, ABORT          LA        A0,A10            . A0 = FIRST WORD ADDRESS OF TABLE          DSL       A0,36             . PREPARE FOR DIVIDE          DI,U      A0,1792           . DIVIDE BY TRACK SIZE          JZ        A1,$+2            .          LMJ       X1,ABORT          . BLOW UP IF NOT EVENLY DIVISIBLE          ANA       A0,A4             . MINUS ACCUMULATED TRACKS          TE        A0,A5             . IS THIS CORRECT ADDRESS?          LMJ       X1,ABORT          .  NO, ABORT          LA        A10,3,X5          .  YES, LOAD FIRST ADDR OF NEXT TABLE          LMJ       X11,DADTBL        . GO SCAN THE TABLE          TN        0,X5              . MORE DADTS IN CHAIN?          J         SF145             .  YES, SKIP          TNZ       R5                . ADDITIONAL ENTRIES RETURNED BY DREAD$?          J         SF280             .  NO, FINISHED DADT SCAN          LA        A0,28+10,X5       .  YES, GET WORD 10 OF NEXT ENTRY          TNE       A0,('*SF.1*')     . SHARED FILE EXTENSION ITEM?          J         SF280             .  YES, FINISHED SCANSF145          JGD       R5,SF140          . LOOP BACK FOR NEXT TABLE          LA        A0,DREAD+4        . ISOLATE T2 OF PACKET+4          LSSL      A0,12             .   (DAD TABLES RETURNED)          SSL       A0,24             .          TE,U      A0,07770/28       . BETTER BE 146 (WHAT WE ASKED FOR)          LMJ       X1,ABORT          . NOPE - ERROR          AA,T1     A0,DREAD+4        . INCREMENT BASE FOR NEXT REQUEST          SA,T1     A0,DREAD+4        .          J         SF120             . GO DO ANOTHER DREAD$SF150          LA,T2     A4,DREAD+4        . GET DIR SECTORS RETURNED          TLE,U     A4,2              . MUST HAVE AT LEAST TWO          J         ER135             .  IF NOT, ERROR - NO BACKUP INFO          LA        A0,M1FASB,X7      . FAS BITS          TEP,U     A0,1*/4           . IS BIG FILE FLAG SET?          J         ER136             .  YES, FILE TOO LARGE TO ARCHIVE          TNZ       M1BUBC,X7         . IS UNLOADED TRACK COUNT > 0?          J         ER139             .  NO, ERROR          LA        A5,M1BRCT,X7      . GET BACKUP REEL COUNT          TLE,U     A5,1              . MUST BE AT LEAST ONE          J         ER135             .  IF NOT, ERROR          LX        X5,(1,0)          . POINTER TO REEL TABLE          LA        A0,M1BUR1,X7      . GET FIRST REEL NUMBER          JZ        A0,ER135          . ERROR IF ZERO          SA        A0,BURTBL,*X5     . SAVE INTO REEL TABLE          TLE,U     A5,2              . CHECK FOR MORE THAN 1 REEL          J         SF160             .  IF NOT, SKIP          LA        A0,M1BUR2,X7      . GET SECOND REEL NUMBER          JZ        A0,SF160          . SKIP IF ZERO          SA        A0,BURTBL,*X5     . SAVE INTO REEL TABLE          ANA,U     A5,3              . PREPARE FOR REEL JGD LOOP          JN        A5,SF160          . IF NEG, NO MORE REELS          TLE,U     A4,3              . MUST HAVE AT LEAST 3 DIR SECTORS          J         SF160             .  IF NOT, SKIP          LX,U      X6,M2BRST,X7      . GET ADDRESS OF FIRST REEL ENTRY          LXI,U     X6,1              . LOOP INCREMENT          TG,U      A5,19             .          LA,U      A5,19             . PROCESS MAX OF 19 ADDITIONAL REELSSF155          LA        A0,,*X6           . GET NEXT REEL FROM MFD SECTOR          JZ        A0,SF160          . SKIP IF ZERO          SA        A0,BURTBL,*X5     . SAVE IN REEL TABLE          JGD       A5,SF155          . BACK FOR MORESF160          E$DIT     EPKT              . OPEN EDIT          E$MSG     UNLMSG            . 'INPUT IS UNLOADED - COP FROM REEL:'          E$FD1     BURTBL            . FIRST REEL NUMBER          E$MSGR                      . ' POS:'          E$DECV    M1STFP,X7         . POSITION ON BACKUP TAPE          E$MSGR                      . ' *'          P$RINT    (0114,LINE)       . PRINT UNLOADED STATUS MESSAGE          LA        A8,M1STFP,X7      . GET STARTING FILE POSITION          LA        A0,M1BUBC,X7      . GET BACKUP BLOCK (TRACK) COUNT          SA        A0,TRACKS         . SAVE IN TRACKS-TO-COPY          LA,U      A0,,X5            . GET REEL TABLE INDEX          SA        A0,UNLRCT         . SAVE BACKUP REEL COUNT          DL        A0,FCTUSE,X4      . INPUT TAPE (IBACKUP) USE NAME          DS        A0,SECPKT         . SAVE INTO FAS/SECURE READ PACKET          DS        A0,FSFPKT         .  AND FORWARD SPACE FILE PKT          DS        A0,BSFPKT         .  AND BACK SPACE FILE PKT          DS        A0,REWPKT         .  AND REWIND PKT          LA        A0,BURTBL         . GET FIRST BACKUP REEL NUMBER          TE        A0,ERRTAP         . HAVE WE HAD ERROR(S) ON THIS TAPE?          J         SF161             .  NO, SKIP          LA        A1,ERRTPC         . GET ERROR COUNT          TG,U      A1,2              . CHECK FOR 2 OR MORE CONTIGUOUS ERRORS          J         ER137             .  IF SO, SKIP PROCESSING THIS FILESF161          TE        A0,FACPKT+11      . SAME AS REEL MOUNTED?          J         SF165             .  NO, SKIP          LA        A0,(4,INFPKT)     .          ER        INFO$             . GET CURRENT FILE POSITION VIA INFO$          LA        A0,FILPOS         . GET POSITION          DSL       A0,36             . PREPARE FOR DIVIDE          DI,U      A0,3              . DIVIDE BY 3 (ADJ FOR LABELED TAPES)          ANA,U     A8,,A0            . COMPUTE OFFSET FROM CURRENT POSITION          JN        A8,SF164          . REWIND AND START OVER IF NEGATIVE          TG,U      A8,2              . IS THIS CURRENT OR PREV FILE?          J         SF175             .  NO, BEGIN FSF CODE          LNA       A8,A8             .  YES, INVERT A8 FOR BSF-LOOP          AA,U      A8,1              . A8=0 - CURRENT, A8=1 - PREVIOUSSF162          I$OW      BSFPKT            . SKIP BACKWARDS ONE EOF POSITION          LA,S1     A1,BSFPKT+3       . GET I/O STATUS          TG,U      A1,2              . ZERO OR EOF?          J         SF163             .  NO, OUT OF LOOP          JGD       A8,SF162          .  YES, ONE MORE TIME IF NECESSARY          J         SF180             . ONE FSF WILL PUT US AT THE RIGHT SPOTSF163          TNE,U     A1,2              . BOT STATUS?          J         SF170             .  YES, MUST REREAD TAPE HEADER, ETC.          LMJ       X9,STATUSX        .  NO, I/O ERROR          J         ERREXT            .   QUIT HERESF164          I$OW      REWPKT            .  IF NOT, REWIND TAPE          LMJ       X9,STATUS         . CHECK REWIND STATUS          J         ERREXT            .  I/O ERROR          NOP                         .  EOF STATUS IS OK HERE          LA        A8,M1STFP,X7      . LOAD STARTING POSITION          J         SF170             . GO START READING TAPESF165          SA        A0,SECPKT+2       . SAVE REEL NUMBER IN TSWAP PKT          LA        A0,(2,SECPKT)     .  (USE SECPKT FOR THIS)          ER        TSWAP$            . SWAP REELS          JP        A0,SF168          . SKIP IF GOOD STATUS          LA        A1,SECPKT+2       . BAD STATUS - GET REEL NUMBER          SA        A1,ERRTAP         . SAVE ERRORING TAPE NUMBER          SA        A1,ERRTPC         . SET SO NEXT I/O WILL IGNORE REEL          J         ER138             . STOP PROCESSING HERESF168          SZ        SECPKT+2          . ZERO REEL NUMBER IN I/O PACKETSF170          LMJ       X10,SECRDH        . READ FAS/SECURE TAPE HEADER          J         ERREXT            .  ERROR - STOP HERE          SZ        ERRTAP            . OK - ZERO TAPE ERROR INDICATORSF175          ANA,U     A8,2              . DECREMENT POSITION FOR JGD          JN        A8,SF185          .  IF NEG, WE HAVE ARRIVEDSF180          I$OW      FSFPKT            . FORWARD SPACE TAPE          LMJ       X9,STATUS         . CHECK STATUS          J         ERREXT            .  ERROR - STOP HERE          NOP                         .  EOF STATUS IS OK HERE          JGD       A8,SF180          . LOOP BACK UNTIL CORRECTLY POSITIONEDSF185          LMJ       X10,SECRDF        . READ FAS/SECURE FILE HEADER          J         ERREXT            .  ERROR - NOT CORRECT FILE OR I/O ERR          SZ        ERRTAP            . ZERO TAPE ERROR INDICATOR          LA        A2,M0XXPC,X7      . PACKID COUNT FROM MI SECT 1          LA        A5,M0XXPK,X7      . FIRST PACKID FROM MI SECT 1          LA,U      A0,,X7            . ADDRESS OF ACP HEADER BUFF          LXI,U     A0,1              . INCREMENT FOR BT          LA,U      A1,,X6            . ADDRESS OF MI SECT 0 FROM FAS/SEC HDR          LXI,U     A1,1              . INCREMENT FOR BT          LR,U      R1,28             . TRANSFER 28 WORDS          BT        A0,,*A1           . MOVE MI-0 FROM FAS/SEC HDR TO ACP HEADER          SA        A2,M0XXPC,X7      . RESTORE PACKID COUNT FROM ONLINE INFO          SA        A5,M0XXPK,X7      . RESTORE FIRST PACKID FROM ONLINE INFO          LA        A0,L0DRID,A3      . DIRECTORY-ID FROM SAVED LEAD ITEM          TE        A0,FCTSHR,X4      . SAME AS EXPECTED FROM FITEM$?          J         ER206             .  NO, ERROR          LA        A0,L0RKEY,A3      . GET READ KEY FROM LEAD ITEM          DSL       A0,18             . A0 = BITS 35-18          SSL       A1,18             . A1 = BITS 17-0          SA        A0,M0XXR1,X7      . SAVE READ KEY          SA        A1,M0XXR2,X7      .          LA        A0,L0WKEY,A3      . GET WRITE KEY FROM LEAD ITEM          DSL       A0,18             . A0 = BITS 35-18          SSL       A1,18             . A1 = BITS 17-0          SA        A0,M0XXW1,X7      . SAVE WRITE KEY          SA        A1,M0XXW2,X7      .          LA        A0,L0CYLM,A3      . GET CYCLE LIMIT FROM LEAD ITEM          SA        A0,M0XXCL,X7      . SAVE IN HEADER          TNZ       M0ACCT,X7         . IS ACCOUNT NUMBER ZERO? (UNUSUAL)          SP1       M0ACCT,X7         .  IF SO, SET TO 1 (0 IND TEMP FILE)          LA,U      A0,HBLIBG,X7      . PTR TO LEAD ITEM SAVE IN HEADER          LXI,U     A0,1              . INCREMENT FOR TRANSFER          LXI,U     A3,1              . INCREMENT          LR,U      R1,28             . TRANSFER 28 WORDS          BT        A0,,*A3           .  FROM FAS HEADER TO LEAD ITEM SAVE AREA          LA,U      A8,0              . CLEAR ACW CTR (NONE FOR TAPE INPUT)          LA        A0,M0HITR,X7      . GET HIGHEST-TRK FROM FAS/SEC MI SECT 0          JNZ       A0,SF300          .  USE THIS VALUE IF NON-ZERO          LA        A0,TRACKS         . GET TRACK COUNT          ANA,U     A0,1              .  SUBTRACT ONE          J         SF300             .  USE THIS AS HIGHEST TRACK WRITTENSF200          LSSL      A0,12             . ISOLATE S3 OF MSCON$ STATUS          SSL       A0,30             .          TNE,U     A0,023            . TEST FOR 023 (FILE NOT CAT)          TZ,T1     DREAD+4           . ALSO BE SURE NO DADTS HAVE BEEN PROC.          J         ER130             . IF NOT, ERROR          TEP,U     A15,1*/('Z'-'S')  . SAVE OPTION?          J         ER220             . YES - ERROR - CAN'T SAVE A TEMP FILE          DL        A0,FACPKT+4       . GET QUALIFIER FROM FITEM$ PACKET          DL        A2,FACPKT+2       . GET FILENAME          DS        A0,M0QUAL,X7      . SAVE IN FILE HEADER FOR TEMP FILE          DS        A2,M0FILE,X7      .          SZ        M0ACCT,X7         . CLEAR ACCOUNT (IND TEMP FILE)          SZ        M0XXPK,X7         . CLEAR PACKID          LA,U      A0,0              . FLAG FOR TRACK GRANULARITY          TZ,S3     FACPKT+6          .          LA,U      A0,040            . SET TO POSITION IF APPROPRIATE          SA        A0,M0PCHR,X7      . SAVE IN PCHAR FLAGS          LA,H1     A0,FACPKT+8       . GET INITIAL RESERVE          LA,H2     A1,FACPKT+8       . GET MAX GRANULE COUNT          SA        A0,M0INIT,X7      . SAVE IN FILE HEADER          SA        A1,M0MAXG,X7      .SF204          LA        A0,(1792,BUFF+BUFSIZ)  .          LNA,U     A1,1              .          DS        A0,IOPKT+4        . INIT FOR DADT CORRECTION READSF205          LXI,U     X6,3              . INCREMENT FOR SCAN OF SINGLE DADT          LX        X8,(1,HBUFF+HBACBG) . POINTER FOR OUTPUT ACW LIST          DSL       A4,72             . A4=TRACK ACCUM, A5=LAST ADDRESS          LA,U      A6,04             . FOR TESTING LAST DAD IN TABLE          LA,U      A8,0              . COUNT OF ACWS BUILT          LA,U      A10,0             . SET WORD ADDRESS TO ZERO..         THE FOLLOWING CODE TO SCAN THE PCT FOR TEMP FILE DAD TABLES.         WAS BORROWED FROM THE 'DADS' PROGRAM (AUTHOR UNKNOWN).          LA        A0,(01000,BUFF)   . PCT BLOCK 0          ER        PCT$              . GET PCT TO D BANK          L,U       R9,PCTNAM         . PCT FACILITY AREA          L,U       X5,BUFF+PCTNAM    .SF210     .          DL        A0,FCTUSE,X4      . FILE NAME          S         X5,R10            . SAVE PCT LINK          LXI,U     X5,3              .          L,S3      R5,,X5            . FILES ASGSF220     .          DTE       A0,1,*X5          . FILE-NAME MATCH??          J         $+2               . IF NOT TRY NEXT          J         SF240             . IF SO CARRY ON          JGD       R5,SF220          . LOOK AGAIN          L         X5,R10            . POINT PCTNAM          L,H2      A2,,X5            . LINK TO NEXT PCTNAM BUFFER          JZ        A2,ER140          . COULDN'T FIND NAME IN PCT          A         A2,R9             . BIAS BY CURRENT FACILITY TABLE ADDRESS          S         A2,A0             . MOVE TO A0          S         A2,R9             . SAVE NEW PCT FACILITY ADDRESS          AND,U     A0,0777000        . ELIMINATE LOWER 9 BITS          LXI,U     A1,01000          . BLOCK SIZE = 512 WORDS          L,U       A0,BUFF           . DATA AREA          ER        PCT$              . GET THE NEEDED BLOCK          L,U       A0,,A2            . PCTNAM ADDRESS          AND,U     A0,0777           . ELIMINATE BLOCK ADDRESS          A,U       A1,BUFF           . + MY D-BANK BASE          S         A1,X5             . KEEP TRACK OF DISPLACEMENT          J         SF210             . CHECK THE NEXT BLOCKSF240     .          L,H2      A0,,X5            . GET RELATIVE ITEM ADDRESS          A         A0,R9             . ADD CURRENT PCTNAM ADDRESS          S         A0,A2             . INTO A2 TOO          AND,U     A0,0777000        . ROUND TO THE BLOCK ADDRESS          LXI,U     A1,01000          . 512 WORDS          L,U       A0,BUFF           . DATA AREA ADDRESS          ER        PCT$              . FETCH THE BLOCK WITH THE ITEM INNIT          AND,U     A2,0777           .          L,U       X5,BUFF           . D-BANK BASE          A         X5,A3             . + ITEM DISPLACEMENT          LA,U      A0,0              . SET FLAG = TEMP FILE          TN        PCFIDL            . IS THIS A TEMPORARY FILE??          LA,U      A0,1              .  NO, SET FLAG = CAT FILE          TE        A0,CATPCT         . IS FILE TYPE = EXPECTED?          J         ER140             . NOPE - SOMETHING'S WRONG HERE          SA        A2,R9             . SAVE ITEM ADDRESS          LA        A2,PCFLNK         . A2 = LINK TO 1ST DAD TABLESF260     .          TZ        EX41R7            . IS EXEC LEVEL => 41R7 ?          LR,U      R9,01000          . YES, R9 = OFFSET FOR PCT-ABS ADDRESS          A         A2,R9             . LINK TO THE DAD TABLE          SA        A2,R9             . SAVE NEW OFFSET ADDRESS          S         A2,A0             . KEEP TOTAL IN A0 ALSO          AND,U     A0,0777000        . ROUND TO CORE BLOCK ADDRESS          TG,U      A1,01000          . VERIFY ADDRESS IS IN VALID          TG,U      A1,0700000        .  RANGE FOR PCT BLOCK OFFSET          J         $+2               .   YES, CONTINUE          J         ER270             .   NO, ERR - 'DAD TABLES NOT RESIDENT'          LXI,U     A1,01000          . 512 WORD REQUEST          L,U       A0,BUFF           . DATA AREA ADDRESSS          ER        PCT$              . FETCH THE BLOCK WITH THE DADS          AND,U     A2,0777           . DISPLACEMENT          L,U       X5,BUFF           . DATA AREA          A         X5,A3             . + ITEM DISPLACEMENT..         THE FOLLOWING CODE IS REQUIRED TO CORRECT FOR THE WAY THE EXEC.         HANDLES TEMP FILE DAD TABLES IN THE PCT.  OCCASIONALLY FOR VERY.         FRAGMENTED FILES THE TABLES WILL NOT BE LINKED CORRECTLY BEFORE.         THE FILE IS READ THROUGH.  WE GET AROUND THIS PROBLEM BY CHECKING.         THE FIRST WORD ADDRESS OF EACH TABLE TO BE SURE IT IS EQUAL TO THE.         LAST+1 ADDRESS OF THE PREVIOUS TABLE.  IF NOT, A 1-TRACK READ IS.         PERFORMED AT THE CORRECT FIRST ADDRESS.  THIS SEEMS TO CAUSE THE.         EXEC TO RELINK THE TABLES PROPERLY.  THE ENTIRE PCT DAD TABLE SCAN.         IS REPEATED.  IF ANOTHER ERROR IS DETECTED AT AN ADDRESS LESS THAN.         OR EQUAL TO THE CORRECTED ADDRESS, ACP GIVES UP AND ABORTS..          TNE       A10,5,X5          . IS THE FIRST ADDRESS CORRECT?          J         SF270             .  YES, CONTINUE WITH NEXT DADT          TG        A10,5,X5          .  NO, CHECK TO BE SURE IT IS TOO LARGE          LMJ       X1,ABORT          . ERROR IF TOO SMALL          LA        A0,A10            . GET CORRECT WORD ADDRESS          DSL       A0,36             . PREPARE FOR DIVIDE          DI,U      A0,1792           . CONVERT TO TRACK ADDRESS          JZ        A1,$+2            .          LMJ       X1,ABORT          . IF REMAINDER THERE'S SOMETHING WRONG          LSSL      A0,6              . CONVERT TO SECTOR ADDRESS          LA        A1,IOPKT+5        . GET PREVIOUS ADDRESS          TG        A1,A0             . MUST BE SMALLER          LMJ       X1,ABORT          .  IF NOT, ERROR          SA        A0,IOPKT+5        . SAVE READ ADDRESS          I$OW      IOPKT             . READ THE TRACK          TZ,S1     IOPKT+3           .          LMJ       X1,ABORT          . ERROR IF CAN'T READ HERE          P$RINT    (0100+ER13L,ERR13) . 'PCT DADT CORRECTION ATTEMPTED'          J         SF205             . GO BACK AND START OVERSF270          LA        A10,6,X5          . GET FIRST ADDRESS OF FOLLOWING DADT..         END OF PCT DADT CORRECTION CODE.          LXM,U     X6,7,X5           . BEGINNING OF DAD ENTRIES          LR,U      R6,7              . UP TO 8 ENTRIES IN PCT DADT          LMJ       X11,DADTBL        . GO PROCESS THE DAD TABLE          L         A2,PCFLNK         . GET THE LINK TO THE NEXT TABLE          JNZ       A2,SF260          . PROCESS IF NONZERO, OTHERWISE DONE..         END DADS CODE.SF280          JZ        A4,SF290          . SKIP IF NO ACCUM TRKS SINCE LAST ACW          SA,H1     A4,,X8            . SAVE TRACK COUNT          SA,H2     A5,,X8            .  AND ADDRESS          AA,U      A8,1              . INCR ACW COUNT          AA        A4,TRACKS         . INCREMENT TOTAL DAD TRACKS          SA        A4,TRACKS         .SF290          JNZ       A8,SF292          . SKIP IF 1 OR MORE ACWS CREATEDSF291          TZ,H1     FACPKT+9          . BETTER HAVE ZERO TRACKS IN FILE          LMJ       X1,ABORT          .  IF NOT, ABORT - SOMETHING WRONG          TOP,U     A15,1*/('Z'-'S')  . EMPTY FILE - IS THIS A SAVE?          J         ER160             .  NOPE, ERROR          LA,U      A0,0              .  YES, LOAD ZERO TRACKS          J         SF300             .   AND CONTINUE PROCESSINGSF292          LA        A3,A8             . PUT LAST ACW NUMBER INTO X-REG          LA,H1     A0,FACPKT+9       . GET INPUT HIGHEST TRACK REF          ANU,H2    A0,HBUFF+HBACBG-1,A3 . SUBTRACT ADDRESS OF LAST ACW          JP        A1,$+2            .          LMJ       X1,ABORT          . MUST BE >= 0, BLOW UP OTHERWISE          AA,U      A1,1              . THIS IS TRUE TRACK COUNT OF LAST ACW          TG,H1     A1,HBUFF+HBACBG-1,A3 . LESS THAN COUNT FROM DADTS?          J         SF300             . NOPE - CONTINUE          ANU,H1    A1,HBUFF+HBACBG-1,A3 . YES - COMPUTE DIFFERENCE IN A2          SA,H1     A1,HBUFF+HBACBG-1,A3 . STORE CORRECT TRACK COUNT          AA        A2,TRACKS         . DECREMENT TRACK COUNT (A2 IS NEG)          SA        A2,TRACKS         . STORE CORRECT TOTAL TRACKSSF300          LA        A1,TRACKS         .          SA        A0,M0XXHT,X7      . STORE INPUT HIGHEST TRK REF          SA        A1,M0XXNT,X7      . STORE INPUT TRACK COUNT          SA        A8,M0XXAC,X7      . STORE ACW COUNT          LA,U      A0,2              . FILE 2          LA,U      A14,1*/0++1*/3    . INDICATE OUTPUT FILE (TAPE OK)          TEP,U     A15,1*/('Z'-'M')  . IS THIS A MOVE?          LA,U      A14,1*/0++1*/2    .  IF SO, SPECIAL SCR FILE, CAN'T BE TAPE          TZ        ARCFLG            . ARCHIVE?          LA,U      A14,1*/0++1*/4    .  IF SO, OUTPUT MUST BE TAPE          LMJ       X11,OPNFILE       . GO OPEN OUTPUT FILE          J         $+2               . ERROR OPENING FILE          J         SF310             . OPEN SUCCESSFUL - CONTINUE          TNZ       ARCFLG            . ARCHIVE OPERATION?          J         ERREXT            .  NO, NORMAL ERROR EXIT          LMJ       X1,ABORT          .  YES, ABORTSF310          LA,U      A0,BUFSIZ         . STANDARD BUFFER SIZE          LA        A1,M0XXNT,X7      . TRACK COUNT TO COPY          TG,U      A1,M$BUFFSPLIT    . IS FILE LESS THAN LRG BUFF CUTOFF SIZE?          LA,U      A0,BUFLRG         .  NO, LOAD MAXIMUM CONFIG OUTPUT SIZE          LA        A1,FCTEQP,X4      . OUTPUT FILE EQUIPMENT CODE          TE,U      A1,017            . CARTRIDGE TAPE?          J         SF320             .  NO, SKIP          TG,U      A0,BUFMXC         .  YES, BUFFER TOO LARGE FOR CARTRIDGE?          LA,U      A0,BUFMXC         .   YES, LOAD MAX CARTRIDGE BUFF SIZESF320          LMJ       X11,EXPAND        . SETUP BUFFERS          TZ        FCTTAP,X4         . IS OUTPUT TAPE?          J         SF370             .  IF SO, SKIP OUTPUT SIZE CHECK          TOP,U     A15,1*/('Z'-'O')  . IS OVERWRITE NONEMPTY FILE SET,          TEP,U     A15,1*/('Z'-'M')  .  OR IS THIS A MOVE OPERATION?          J         SF340             .   YES, SKIP EMPTY FILE CHECK          TZ,H1     FACPKT+9          . IS THE OUTPUT FILE EMPTY?          J         ER230             .  NO, ERRORSF340          LA,H2     A0,FACPKT+8       . MAX GRANULES OF OUTPUT FILE          TZ,S3     FACPKT+6          . TEST POSITION GRANULARITY          LSSL      A0,6              . IF SO CONVERT TO TRACKS          ANA,U     A0,1              . DECREMENT FOR COMPARE          TEP,U     A15,1*/('Z'-'S')  . TEST FOR SAVE OPERATION          J         SF360             . YES - SKIP          TLE       A0,M0XXHT,X7      . COMPARE OUTPUT MAX WITH INPUT MAX          J         ER170             . ERROR IF OUTPUT FILE IS TOO SMALL          J         SF450             . ALL OK - GO DO THE COPYSF360          TLE       A0,M0XXNT,X7      . COMPARE OUTPUT MAX WITH INPUT TRK CT          J         ER170             . ERROR IF FILE IS TOO SMALLSF370          LA        A0,('*ACSV*')     . ACP HEADER WORD          SA        A0,M0XXLB,X7      . STORE IN SECTOR 0          ER        TDATE$            .          SA        A0,M0XXDT,X7      . STORE DATE/TIME OF SAVE          LA        A0,SECCNT         .          SA        A0,M0XXBS,X7      . STORE BLOCK SIZE USED FOR COPY          LA        A0,ARCFLG         .          SA        A0,M0XXAF,X7      . STORE ARCHIVE INDICATOR          LA,U      A0,ACPVER         . CURRENT VERSION          SA        A0,M0XXVN,X7      .  INTO HEADER          SZ        M0XXRS,X7         . ZERO REEL SEQUENCE          LA        A0,(W$,0,0)       . SETUP TO WRITE HEADER          LA        A1,(HBSIZE,HBUFF) .          DS        A0,IOPKT+3        .          SZ        IOPKT+5           . HEADER BEGINS AT SECTOR ZERO          I$OW      IOPKT             . WRITE HEADER          LMJ       X9,STATUS         . CHECK STATUS          J         SF375             . ERROR STATUS          J         SF380             . EOT STATUS          TNZ       FCTTAP,X4         . GOOD STATUS - IS OUTPUT TAPE?          J         SF440             .  NO - SKIP          LA        A0,(12,FACPKT)    . YES - GET POS, REEL, EXP INFO          ER        FITEM$            .          LA        A0,FACPKT+10      .          AND,U     A0,07777          . WORD 10, T3 = BLOCKS EXTENDED          TLE,U     A1,2              . SHOULD BE ONE BLOCK OR LESS          J         SF420             .  YES, CONTINUE NORMALLY          P$RINT    (0100+ER15L,ERR15) .  NO, PRINT POSITIONING ERR MSG          TNZ       ARCFLG            . ARCHIVE OPERATION?          J         ERREXT            .  NO, ERROR AT THIS POINT          DL        A0,FCTUSE,X4      . OUTPUT TAPE USE NAME          DS        A0,WEFPKT         . INTO WRITE EOF PACKET          I$OW      WEFPKT            . WRITE EOF ON TAPE NOW          LMJ       X9,STATUS         . CHECK STATUS          J         SF400             . ERROR - ABANDON TAPE          J         SF385             . EOT - SWAP REELS          I$OW      IOPKT             . WRITE HEADER          LMJ       X9,STATUS         . CHECK I/O STATUS          J         SF375             . BAD STATUS          J         SF380             . EOT STATUS          J         SF420             . GOOD STATUSSF375          TZ        ARCFLG            . ARCHIVE OPERATION?          J         SF400             .  YES, TRY ANOTHER TAPE          J         ERREXT            .  NO, STD ERROR EXITSF380          TNZ       FCTTAP,X4         . IS OUTPUT TAPE?          LMJ       X1,ABORT          .  NOPE - SOMETHING WRONG HERE          DL        A0,FCTUSE,X4      . OUTPUT FILENAME          DS        A0,MBPKT          .  INTO PACKET          I$OW      MBPKT             . MOVE BACK 1 BLOCK          LMJ       X9,STATUS         . CHECK STATUS          J         ERREXT            .  BAD STATUS, ERROR EXIT          NOP                         .  EOT?  IGNORE IF THIS HAPPENSSF385          DL        A0,FCTUSE,X4      . OUTPUT TAPE USE NAME          DS        A0,WTSPKT         . INTO WRITE-TSWAP PACKET          I$OW      WTSPKT            . WRITE TSWAP BLOCK ON TAPE          LMJ       X9,STATUS         . CHECK STATUS          J         ERREXT            . BAD STATUS - ABORT          NOP                         . EOT - IGNORE          LX,U      X5,FCTTBL+FCTLEN  . OUTPUT FCT IN X5 FOR WRTEOF          LR,U      R1,2              .          LMJ       X10,WRTEOF        . WRITE DOUBLE EOF ON TAPE          NOP                         .          J         SF410             . SWAP REELSSF400          P$RINT    (0100+ER16L,ERR16) . PRINT 'REEL ABANDONED' MESSAGESF410          LA,U      A4,'OUT'          . INDICATE OUTPUT REEL          LA,U      A5,0              . ZERO TRACKS COPIED SO FAR          LA,U      A0,IOPKT          . PACKET CONTAINING FILENAME          LMJ       X10,TSWAP         . GO SWAP REELS          LMJ       X1,ABORT          . BLOW UP IF ERROR SWAPPING HERE          ER        TDATE$            . GET UPDATED DATE/TIME          SA        A0,M0XXDT,X7      . REPLACE IN HEADER          SZ        M0XXRS,X7         . ZERO REEL SEQUENCE          LA        A0,(W$,0,0)       . SETUP TO WRITE HEADER          LA        A1,(HBSIZE,HBUFF) .          DS        A0,IOPKT+3        .          I$OW      IOPKT             . WRITE HEADER, AGAIN          LMJ       X9,STATUS         . CHECK I/O STATUS DO 2 ,   LMJ       X1,ABORT          .  BLOW UP IF BAD STATUS OR EOT NOW          LA        A0,(12,FACPKT)    .          ER        FITEM$            . GET NEW REEL NUMBER, EXPIRATIONSF420          TNZ       ARCFLG            . ARCHIVE OPERATION,          TEP,U     A15,1*/('Z'-'J')  .  OR POS/REEL INFO REQUESTED?          J         $+2               .   YES, INIT HIST BUFFER WITH 1ST R,P          J         SF440             .   NO, SKIP          LA        A0,(1,AHFBUF)     .  YES          LA,U      A1,(0)            .          LR,U      R1,28             .          BT        A0,,*A1           . ZERO-FILL AHF BUFFER          LX,U      X8,AHFBUF         . POINTER TO AHF BUFFER          LA        A0,FACPKT+10      . GET WORD 10 OF FAC PKT, OUTPUT TAPE          SSL       A0,24             . SHIFT OVER EXPIRATION CODE          SA        A0,AHEXP,X8       . SAVE EXPIRATION          SP1       AHBRCT,X8         . INIT BACKUP REEL COUNT          LA        A0,FACPKT+11      . GET REEL NUMBER OF OUTPUT TAPE          SA        A0,AHBRST,X8      . SAVE FIRST REEL NBR IN AHF BUFFER          LA        A0,(4,INFPKT)     .          ER        INFO$             . GET POSITION FROM INFO$          LA        A0,FILPOS         .          SA        A0,AHSTFP,X8      . STORE POSITION IN AHF BUFFERSF440          TOP,U     A15,1*/('Z'-'M')  . SKIP FILE PRINT IF MOVE          TOP,U     A15,1*/('Z'-'S')  . PRINT IF SAVE IS BEING DONE          J         $+2               .          LMJ       X10,PRTFILE       . PRINT FILE NAME FOR SAVESF450          LX,U      X4,FCTTBL         . INPUT FCT FOR DCOPY          LX,U      X5,FCTTBL+FCTLEN  . OUTPUT FCT FOR DCOPY          SZ        BLKSEQ            . ZERO BLOCK SEQUENCE NUMBER          SZ        TRKCNT            . ZERO TRACK COUNT          SZ        TAPERR            . ZERO OUTPUT TAPE ERR FLG          LA        A6,M0XXAC,X7      . A6 IS ACW COUNT          JZ        A6,SF550          . SKIP IF NO ACWS PRESENT (UNLOADED FILE)          ANA,U     A6,1              . DECREMENT FOR JGD          LX        X6,(1,HBUFF+HBACBG) . SETUP X6 TO POINT TO ACWSSF500          LA,H2     A12,,X6           . TRACK ADDR TO WRITE (NORMAL COPY)          TEP,U     A15,1*/('Z'-'S')  . CHECK FOR SAVE          TZ        FCTTAP,X5         .  AND OUTPUT DISC          J         SF520             . NO - CONTINUE WITH COPY          LA        A12,TRKCNT        . OUTPUT TRACK IS CURRENT + 1 FOR SAVE          AA,U      A12,1             .SF520          LA,H1     A10,,X6           . GET TRACK COUNT          LA,H2     A11,,*X6          . INPUT TRACK ADDRESS          LMJ       X11,DCOPY         . CALL DCOPY TO COPY THE DATA          J         SF530             . ERROR DURING COPYING          JGD       A6,SF500          . LOOP BACK FOR OTHER ACWS          TZ        FCTTAP,X5         . ALL DONE - IS OUTPUT TAPE?          J         SF570             .  YES, GO WRITE EOF MARK(S)          J         SF600             .  NO, PRINT TRACKS COPIEDSF530          TNZ       FCTTAP,X5         . OUTPUT TO TAPE?          J         ERREXT            .  NO - NORMAL ERROR EXIT          TZ        DSKERR            . INPUT DISC ERROR?          J         SF570             .  YES - WRT EOF TO TAPE BEFORE QUITTING          TZ        TAPERR            . OUTPUT TAPE ERROR?          J         SF590             .  YES - POSSIBLY RECOVER          J         ERREXT            .  NO - STOP HERESF550          TOP,U     A15,1*/('Z'-'S')  . NO ACWS - BE SURE THIS IS SAVE          LMJ       X1,ABORT          .  NOPE, BLOW UP!          SZ        SECADR            . ZERO ADDRESS OF PRE-READ BLOCK          SZ        SECBLK            . ZERO FAS/SECURE BLOCK SEQUENCE CTR          SZ        UNLRPT            . ZERO UNLOADED FILE REEL POINTER          SN1       NXTSEC            . INIT SO FIRST READ FORCES ACW SAVE          LA        A0,(-2,-1)        . THIS CANNOT BE 1ST HEADER WORD          SA        A0,PRVHD0         . INIT PREVIOUS HEADER WORD          LA        A10,TRACKS        . TRACK COUNT FOR COPY          JZ        A10,SF565         . SKIP IF EMPTY FILE          LMJ       X11,DCOPY         . GO DO NON-ACW COPY          J         SF560             . ERROR DURING COPYING          DL        A0,FCTUSE,X5      . GET OUTPUT TAPE USE NAME          DS        A0,IOPKT          . INTO I/O PACKET          LA        A0,(W$,0,0)       . SETUP FOR WRITE,          LA        A1,(020,EOFBLK)   .  020 WORDS (EOF SENTINAL)          DS        A0,IOPKT+3        .          SZ        IOPKT+5           . ZERO WORD 5 OF PACKET          I$OW      IOPKT             . WRITE EOF SENTINAL          LMJ       X9,STATUS         . CHECK STATUS          J         SF588             . I/O ERROR, SWAP REELS AND EXIT          NOP                         .  EOT IS OK HERE          J         SF570             . GO WRITE EOF ON OUTPUT TAPESF560          TZ        DSKERR            . ERROR FROM INPUT?          J         SF570             .  YES, WRITE EOF BEFORE QUITTING          TZ        TAPERR            . OUTPUT TAPE ERROR?          J         SF588             .  YES, TSWAP BEFORE QUITTING          J         ERREXT            .  NO, STOP HERESF565          TNZ       FCTTAP,X5         . OUTPUT TO TAPE?          J         SF600             .  NO, SKIP WRITE OF EOF MARKSF570          LR,U      R1,2              . SET UP TO WRITE DOUBLE EOF          TNZ       ARCFLG            . ARCHIVE OPERATION,          TZ        FCTTPR,X5         .  OR TAPE ASSIGNED WITH R-OPTION?          LR,U      R1,1              .   YES, ONLY WRITE ONE EOF          LMJ       X10,WRTEOF        . WRITE EOF MARK(S) ON TAPE          J         SF585             . ERROR WRITING EOF          TNZ       ARCFLG            . ARCHIVE OPERATION,          TZ        FCTTPR,X5         .  OR TAPE ASSIGNED WITH R-OPTION?          J         SF580             .   YES, DON'T SKIP BACK          DL        A0,FCTUSE,X5      . OUTPUT FILE INTERNAL NAME          DS        A0,BSFPKT         . INTO BSF$ PACKET          I$OW      BSFPKT            . SKIP BACK OVER SECOND EOF          LMJ       X9,STATUS         . CHECK STATUS          J         ERREXT            . BAD STATUS          NOP                         . EOF IS OK HERESF580          TZ        DSKERR            . INPUT DISC ERROR?          J         ERREXT            .  YES - STOP PROCESSING HERE          J         SF600             .  NO - CONTINUESF585          TZ        M0XXAC,X7         . NON ACW COPY (FROM IBACKUP)?          J         SF590             .  NO, POSSIBLY RECOVERSF588          P$RINT    (0100+ER16L,ERR16) . PRINT 'REEL ABANDONED' MSG          DL        A0,FCTUSE,X5      . OUTPUT TAPE USE NAME          DS        A0,IOPKT          . INTO I/O PACKET          LA,U      A4,'OUT'          . INDICATE OUTPUT REEL          LA,U      A5,0              . ZERO TRACKS COPIED          LA,U      A0,IOPKT          . PACKET CONTAINING FILENAME          LMJ       X10,TSWAP         . GO SWAP OUTPUT REELS          LMJ       X1,ABORT          .  ABORT IF BAD STATUS FROM TSWAP          J         ERREXT            . SWAP OK, TAKE RECOV ERR EXITSF590          TZ        ARCFLG            . ARCHIVE OPERATION?          J         SF400             .  YES - TRY ANOTHER TAPE          J         ERREXT            .  NO - STOP HERESF600          LX,U      X9,TSFMSG         . MESSAGE EXTENSION IF MOVE          LMJ       X10,PRTTOT        . PRINT BLOCK COUNT          TZ        DCEFLG            . CHECK FOR RECOVERABLE DCOPY ERRORS          J         ERREXT            .  IF ERROR(S) ERROR EXIT NOW          TZ        ARCFLG            . ARCHIVE OPERATION?          J         SF620             .  YES, SKIP          TOP,U     A15,1*/('Z'-'S')  .  NO, SAVE OR MOVE?          J         SF750             .   NO, DELETION NOT ALLOWED          TOP,U     A15,1*/('Z'-'M')  . IS THIS A MOVE,          TEP       A15,(1*/('Z'-'D')) .  OR DELETE-AFTER-SAVE?          J         SF720             .   YES, ISSUE @FREE,D FOR FILE          J         SF750             .   NO, NORMAL EXIT PROCESSINGSF620          TNZ       AHMFLG            . IS CORRECT MATCHING INFO IN BUFFER?          J         SF640             .  NO, SKIP          LA        A0,(1,AHMBUFF)    .  YES, TRANSFER TO AHF BUFFER          LA,U      A1,AHMIST,X8      .          LXI,U     A1,1              .          LR,U      R1,AHMICT         . TRANSFER <AHMICT> WORDS          BT        A1,,*A0           .SF640          LA        A0,(RDL$,0,0)     . SETUP FOR READ-LOCK SECTOR 0 OF AHF          SA        A0,AHHDPK+3       .          I$OW      AHHDPK            . ISSUE THE REQUEST          LMJ       X9,STATUS         . CHECK STATUS          LMJ       X1,ABORT          .  ABORT IF I/O ERROR          J         STATUSX           .  EOF STATUS IS BAD HERE          LX,U      X6,AHFHDR         . SETUP X6 TO POINT TO AHF HEADER BUFF          LA        A0,AHHLBL,X6      . GET LABEL          TE        A0,('*AHFL*')     . MUST EQUAL STANDARD LABEL          J         ER180             .  IF NOT, ERROR          LA        A0,AHHNXB,X6      . GET NEXT FREE SECTOR          SA        A0,AHBFPK+5       . INTO AHF DATA WRITE PACKET          AA,U      A0,1              . INCREMENT SECTOR POINTER          SA        A0,AHHNXB,X6      . STORE BACK INTO AHF HEADER          TZ        PURFLG            . IS THIS A PURGE/DELETE?          J         SF650             .  YES, SKIP          SP1       AHHAIP,X6         . SET ARCHIVE-IN-PROGRESS FLAG          INC       AHHARF,X6         . INCR ARCHIVE FILE COUNTER          NOP                         .          LA        A0,AHHART,X6      .          AA        A0,TRKCNT         .          SA        A0,AHHART,X6      . UPDATE ARCHIVE TRACK COUNTER          J         SF655             .SF650          INC       AHHPUF,X6         . INCR PURGE/DELETE FILE COUNTER          NOP                         .          LXI       A0,AHHPT1,X6      . UPPER HALF P/D TRACK COUNT          LXM       A0,AHHPT2,X6      . LOWER HALF P/D TRACK COUNT          AA        A0,TRKCNT         . ADD TRACK COUNT OF THIS FILE          DSL       A0,18             . UPPER HALF TO A0 LOWER          SSL       A1,18             . LOWER HALF TO A1 LOWER          SA        A0,AHHPT1,X6      .  REPLACE IN HEADER          SA        A1,AHHPT2,X6      .SF655          DL        A0,M0QUAL,X7      .          DS        A0,AHQUAL,X8      . STORE QUALIFIER IN AHF DATA BUFFER          DL        A0,M0FILE,X7      .          DS        A0,AHFILE,X8      . STORE FILENAME          LA        A0,M0CYCW,X7      .          AND,U     A0,07777          .          SA        A1,AHCYCL,X8      . STORE F-CYCLE          LA        A0,M0CATT,X7      .          SA        A0,AHCATT,X8      . STORE CAT DATE          LA        A0,M0REFT,X7      .          SA        A0,AHREFT,X8      . STORE REF DATE          LA        A0,M0XXDT,X7      .          SA        A0,AHHUPT,X6      . STORE DATE ARCHIVED IN HEADER          SA        A0,AHARCT,X8      .  AND DATA BUFFER          LA        A0,M0MNEM,X7      .          LA        A1,M0INHI,X7      .          SA        A0,AHMNM4,X8      . STORE DEVICE MNEMONIC          SA        A1,AHINHI,X8      . STORE INHIBIT BITS          LA        A1,M0FILF,X7      .          AND,U     A1,1*/0++1*/1     .          LA        A0,M0PCHR,X7      .          AND,U     A0,077-(1*/0++1*/1) .          OR,U      A1,,A2            .          SA        A2,AHPCFF,X8      . STORE PCHAR (5-2) AND FILE-FLGS (1-0)          LA        A0,M0INIT,X7      .          LA        A1,M0MAXG,X7      .          SA        A0,AHINIT,X8      . STORE INITIAL RESERVE          SA        A1,AHMXGR,X8      . STORE MAX GRANULES          LA        A0,M0ASGS,X7      .          SA        A0,AHRFCT,X8      . STORE ASSIGN COUNT          LA        A0,HOSTID         . HOST-ID, IF MHFS/SHARED HIST FILE          TNZ       ORGSHR            . WAS INPUT FILE FROM SHARED DIR?          J         SF670             .  NO, SKIP          SP1       AHHSFA,X6         .  YES, SET SHARED IND IN AHF HEADER          LA,U      A0,077            . INTERNAL CODE FOR SHARED FILESF670          SA        A0,AHHOST,X8      .  STORE HOST/SHARED ID          DL        A0,M0PROJ,X7      .          DS        A0,AHPROJ,X8      . STORE PROJECT-ID          DL        A0,M0ACCT,X7      .          DS        A0,AHACCT,X8      . STORE ACCOUNT NUMBER          LA,U      A0,ACPVER         .          SA        A0,AHACVN,X8      . STORE ACP VERSION USED FOR ARCHIVE          LA        A0,TRKCNT         .          SA        A0,AHTKCT,X8      . STORE TRACK COUNT          LA        A0,M0XXPK,X7      .          SA        A0,AHPKID,X8      . STORE PACK-ID          LA,U      A0,0              . SET RELOAD FLAG = 0          TNZ       PURFLG            . IS THIS A PURGE OR DELETE?          J         SF675             .  NO, SKIP          LA,U      A0,'P'            .  YES, SET PURGE INDICATOR          TEP,U     A15,1*/('Z'-'Z')  . IS THIS A DELETE?          LA,U      A0,'D'            .  YES, SET DELETE INDICATORSF675          SA        A0,AHRLDF,X8      . SAVE RELOAD FLAG / PURGE IND          LA,U      A0,AHFNEW         . ALL NEW ENTRIES HAVE 'NEW' FLAG SET          LA,U      A1,'   '          .          TE        A1,M0XXR1,X7      . DOES FILE HAVE READ KEY?          AA,U      A0,AHFRKY         .  YES, SET FLAG          TE        A1,M0XXW1,X7      . DOES FILE HAVE WRITE KEY?          AA,U      A0,AHFWKY         .  YES, SET FLAG          TEP       A15,(1*/('Z'-'D')) . IS FILE TO BE DELETED AFTER ARCHIVE?          AA,U      A0,AHFDEL         .   YES, SET DELETED FLAG          TZ        PURFLG            . IS THIS A PURGE/DELETE?          J         SF680             .  YES, SKIP          TEP       A15,(1*/('Z'-'B')) . IS THIS SECONDARY BACKUP?          AA,U      A0,AHFCFB         .  YES, SET CRITICAL-BACKUP FLAG          LA        A1,FCTEQP,X5      . OUTPUT TAPE EQUIP CODE          TNE,U     A1,017            . IS THIS CARTRIDGE TAPE?          AA,U      A0,AHFHIC         .  YES, SET CARTRIDGE FLAGSF680          SA        A0,AHFLGS,X8      . STORE FLAG BITS          LA        A0,(W$,0,0)       .          SA        A0,AHHDPK+3       . SETUP TO WRITE DATA BUFFER          SA        A0,AHBFPK+3       .  AND HEADER BUFFER          I$OW      AHBFPK            . WRITE DATA BUFFER          LMJ       X9,STATUS         . CHECK STATUS          J         ERREX1            .  I/O ERROR          J         STATUSX           .  I/O ERROR          I$OW      AHHDPK            . WRITE HEADER          LMJ       X9,STATUS         . CHECK STATUS          J         ERREX1            .  I/O ERROR          J         STATUSX           .  I/O ERROR          I$OW      AHSFPK            . PERFORM FSAFE$, ASSURE AHF INTEGRITY          LMJ       X9,STATUS         . CHECK STATUS          J         ERREX1            .  I/O ERROR          J         STATUSX           .  I/O ERROR          P$RINT    (0100+AHL,AHFMSG)  . PRINT 'HISTORY FILE UPDATED'          TEP       A15,(1*/('Z'-'D'))  . DELETE FLAG SET?          J         SF720             .   YES, ISSUE @FREE,D FOR FILE          LX,U      X4,FCTTBL         . X4 = INPUT FCT          TOP       A15,(1*/('Z'-'F')) . KEEP INPUT FILE ASSIGNED?          J         SF750             .  NO, SKIP          LA        A0,FCTSTAT,X4     .  YES, LOAD CURRENT ASSIGNMENT STATUS          SA        A0,PRVSTA         . SAVE FOR BACKUP OPERATION          SP1       FCTSTAT,X4        . NOW SET SO WILL ONLY @FREE,A          LA        A0,FCTUNL,X4      . UNLOADED STATUS OF FILE          SA        A0,PRVUNL         . SAVE FOR BACKUP OPERATION          J         SF750             .SF720          LX,U      X4,FCTTBL         . POINT TO INPUT FCT          SZ        FCTSTAT,X4        . CLEAR STATUS FOR FREFILE          DL        A0,FCTUEX,X4      . PICK UP USE NAME          DS        A0,FREED+2        . INTO @FREE,D IMAGE          LA        A0,(4,FREED)      .          ER        CSF$              . ISSUE @FREE,D - DELETE INPUT FILE          JN        A0,ER190          . MUST GET GOOD STAT, OTHERWISE ERROR          TEP,U     A15,1*/('Z'-'M')  . MOVE OPERATION?          J         SF850             .  YES, PREPARE FOR RESTORE          P$RINT    (0100+RML,REMMSG) .  NO - ISSUE REMOVAL NOTIFICATIONSF750          TZ        PURFLG            . IS THIS PURGE/DELETE?          J         SF800             .  YES, SKIP          TZ        FCTTAP,X5         . IS OUTPUT TAPE,          TOP,U     A15,1*/('Z'-'J')  .  AND IS POS/REEL INFO REQUESTED?          J         SF800             .   NO, SKIP          E$DIT     EPKT              .   YES, PREPARE TO EDIT COM$ MESSAGE          LA        A1,ORGSHR         . INPUT FILE DIRECTORY-ID          LMJ       X10,EDFILE        . EDIT IN Q/F/C          E$MSG     POSRMSG           . ' AT POS X REEL X'          LA        A0,AHSTFP,X8      . GET STARTING FILE POSITION          DSL       A0,36             . PREPARE FOR DIVIDE          DI,U      A0,3              . COMPENSATE FOR TAPE LABELING          AA,U      A0,1              . FUDGE          E$DECV                      . EDIT ACTUAL POSITION          E$MSGR                      . CONTINUE MESSAGE          LX,U      X6,AHBRST,X8      . LOC OF FIRST REEL NUMBER          LXI,U     X6,1              . INCREMENT          LA        A6,AHBRCT,X8      . GET REEL COUNT          JGD       A6,SF770          . SKIP AND DECR FOR LOOPSF760          E$CHAR    ','               . REEL SEPARATORSF770          E$FD1     0,*X6             . EDIT NEXT REEL NUMBER          JGD       A6,SF760          . LOOP BACK FOR OTHER REELS          E$COLN                      . GET COLUMN NUMBER          SA,H1     A0,COMPKT+1       . SAVE IN COM$ PACKET          SZ        COMPKT+2          . INDICATE NOT READ AND REPLY          LA,U      A0,COMPKT         .          ER        COM$              . SEND COMPLETED MSG TO CONSOLESF800          J         NRMEXT            . FINISHED WITH COPY/SAVE/ARCHIVESF850          LA,U      A1,3000           . WAIT 3 SECONDS          ER        TWAIT$            .  BEFORE WE ISSUE @ASG TO REBUILD FILE          P$RINT    (0100+RPL,RPMSG)  . TELL USER WE'RE STARTING RESTORE          J         RF200             . GO ENTER RESTORE CODE...         ROUTINE TO SCAN ONE DAD TABLE, INCREMENT AND SAVE FILE ACWS.DADTBL          LA        A0,1,X6           . GET WORD COUNT OF DAD          DSL       A0,36             . SETUP FOR DIVIDE          DI,U      A0,1792           . DIVIDE BY TRACK SIZE          JZ        A1,$+2            .          LMJ       X1,ABORT          . BLOW UP IF NOT EVENLY DIVISIBLE          TP,XH2    2,X6              . CHECK FOR HOLE DAD          J         DT100             . THIS IS A HOLE          AA,U      A4,,A0            . NOT A HOLE - INCREMENT TRACK COUNT          J         DT140             . CHECK NEXT DADDT100          JZ        A4,DT120          . SKIP OUTPUT OF ACW IF TRACK CT = 0          AA,U      A8,1              . INCREMENT ACW COUNT          TG,U      A8,HBACMX         . MAX OF <HBACMX> OF ACWS          LMJ       X1,ABORT          . BLOW UP IF TOO MANY          SA,H1     A4,,X8            . STORE TRACK COUNT          SA,H2     A5,,*X8           .  AND ADDRESS          AA        A5,A4             . COMPUTE NEW BASE ADDRESS          AA        A4,TRACKS         . INCREMENT DADT TRACK TOTAL          SA        A4,TRACKS         .          LA,U      A4,0              . SET TRACK COUNT TO ZERODT120          AA,U      A5,,A0            . ADD SIZE OF HOLE TO BASE ADDRESSDT140          TOP,H1    A6,2,*X6          . SKIP IF LAST DAD IN TABLE          JGD       R6,DADTBL         . LOOP BACK FOR OTHER DADS          J         0,X11             . RETURN/..  COPY SAVE FILE (DISC OR TAPE) TO STANDARD DISC FILE.  RESTORE FILE ALSO IF 'M' OR 'R' OPTION IS USED.RSTFIL          TNZ       PRVFLG            . PRIVILEGED?          J         ER210             .  NOPE, CAN'T DO RESTORE          TNZ       ARCFLG            . ARCHIVE OPERATION?          J         RF160             .  NO, SKIP          LA,U      A0,010506         . SPEC 5 ELTNAME (FETCH-RUNID)          LMJ       X11,SINF$         . RETRIEVE FROM INFOR          J         RF100             . SKIP IF NOTHING THERE          LA        A6,A0             . SAVE RUNID IN A6          LA,U      A0,010507         . SPEC 5 VERSION (STATUS-INDEX)          LMJ       X11,SINF$         . RETRIEVE FROM INFOR          J         RF100             . SKIP IF NOTHING THERE          LMJ       X11,FDTOBN        . CONVERT TO BINARY          J         RF100             . SKIP IF NON-NUMERIC          TG,U      A4,RCRSBG         . MUST BE >= RCRSBG AND          TG,U      A4,RCFEBG         .   < RCFEBG          J         ER212             . IF NOT, ERROR          LA        A3,A4             .          AA,U      A3,RCADDR         . A3 = ABS ADDR OF STATUS RECORD          LA        A0,GENRUN         . GENERATED RUNID OF THIS RUN          TNE       A6,RCRSGR,A3      . IS STATUS RUNID = FETCH-RUNID?          SA        A0,RCRSGR,A3      .  YES, REPLACE WITH OUR RUNID          TE        A0,RCRSGR,A3      . IS STATUS RUNID = OUR RUNID?          J         ER212             .  NO, ERROR          TZ        PLSACT            . IS PULSER ALREADY ACTIVE?          J         RF100             .  YES, SKIP          SP1       PLSACT            .  NO, MARK ACTIVE NOW          LA,U      A0,PULSER         .          ER        FORK$             .  AND FORK OFF AN ACTIVITY TO ITRF100          LA,U      A0,010406         . SPEC 4 ELTNAME (ARCHIST$ LOC)          LMJ       X11,SINF$         . RETRIEVE FROM INFOR          J         ER215             . NO FIND, ERROR          LMJ       X11,FDTOBN        . CONVERT TO BINARY          J         ER215             . CONVERSION ERROR          I$OW      AHHDPK            . READ SYS$*ARCHIST$ HEADER          LMJ       X9,STATUS         . CHECK I/O STATUS          J         ERREXT            .  I/O ERROR          J         STATUSX           .  EOF IS NOT ALLOWED HERE          LX,U      X6,AHFHDR         . GOOD STATUS - LOAD POINTER TO HDR BUFF          LA        A0,AHHLBL,X6      . GET LABEL          TE        A0,('*AHFL*')     . MUST BE GOOD LABEL          J         ER180             .  IF NOT, ERROR          TG        A4,AHHNXB,X6      . COMPARE SECTOR ADDR WITH NEXT AVAIL          J         ER185             .  IF GTR OR EQUAL, ERROR          SA        A4,AHBFPK+5       . STORE ADDR IN READ PACKET          I$OW      AHBFPK            . READ ARCHIST$ SECTOR FOR THIS FILE          LMJ       X9,STATUS         . CHECK STATUS          J         ERREXT            .  I/O ERROR          J         STATUSX           .  I/O ERROR          LX,U      X8,AHFBUF         . GOOD STAT - LOAD POINTER TO RD BUFFER          LA,U      A0,1              . OPEN SPEC 1          LA,U      A14,1*/5          . READ INFOR AND ASSIGN IBACKUP ONLY          LMJ       X11,OPNFILE       .          J         ERREXT            . ERROR OPENING INPUT          LR        R1,AHBRCT,X8      . GET COUNT OF BACKUP REELS          SR        R1,UNLRCT         . SAVE FOR LATER USE          LA,U      A0,AHBRST,X8      . ADDR OF FIRST REEL IN TABLE          LXI,U     A0,1              . LOOP INCREMENT          LA        A1,(1,BURTBL)     . POINTER TO BACKUP REEL TABLE          BT        A1,,*A0           . MOVE REEL TABLE FOR LATER USE          DL        A0,FCTUSE,X4      . GET INPUT USE NAME (IBACKUP)          DS        A0,IOPKT          .  PUT INTO I/O PACKET          DS        A0,FSFPKT         .  AND FORWARD SPACE FILE PACKET          DS        A0,REWPKT         .  AND REWIND PACKET          LA        A8,AHSTFP,X8      . STARTING FILE POSITION          ANA,U     A8,2              . SUBTRACT FOR TAPE LABELING          LA        A0,BURTBL         . GET FIRST REEL ID          TE        A0,FACPKT+11      . SAME AS TAPE MOUNTED?          J         RF120             .  NO, GO SWAP REELS          LA        A0,(4,INFPKT)     .          ER        INFO$             . GET CURRENT TAPE POSITION          TNZ       FILPOS            . ARE WE AT POS ZERO?          SN1       FILPOS            .  YES, SUBTRACT FOR LABELING COMP          TG        A8,FILPOS         . IS REQ POS LESS THAN CURRENT POS?          J         RF140             .  NO, SKIP          I$OW      REWPKT            .  YES, REWIND TAPE          LMJ       X9,STATUS         . CHECK STATUS          J         ERREXT            .  I/O ERROR          NOP                         .  EOF IS OK AT THIS POINT          J         RF130             . BEGIN MOVING FORWARD ON TAPE NOWRF120          SA        A0,FSFPKT+2       . SAVE REQUESTED REEL FOR TSWAP          LA        A0,(2,FSFPKT)     . TELL SYSTEM WHICH REEL WE NEED          ER        TSWAP$            .  AND SWAP REELS          JN        A0,ER138          .  STOP HERE IF ERROR          SZ        FSFPKT+2          . ZERO REEL ID IN PACKETRF130          SN1       FILPOS            . SET CURRENT POS TO MINUS 1RF140          LNA,U     A4,10             . INIT - LOAD UP IMPOSSIBLE 1ST POSITIONRF145          TNE       A8,FILPOS         . ARE WE AT REQUESTED POSITION?          J         RF150             .  YES, NO MORE SKIPPING          TLE       A8,FILPOS         .  NO, HAVE WE GONE TOO FAR?          LMJ       X1,ABORT          .   YES, ABORT          I$OW      FSFPKT            . FORWARD SPACE FILE ONE LOGICAL EOF          LMJ       X9,STATUS         . CHECK I/O STATUS          J         ERREXT            .  I/O ERROR          NOP                         .  EOF IS NORMAL HERE          LA        A0,(4,INFPKT)     .          ER        INFO$             . GET POSITION VIA INFO$          LA        A0,A4             . LOAD PREVIOUS POSITION          LA        A4,FILPOS         . SET NEW PREVIOUS POSITION          TLE       A0,FILPOS         . HAVE WE ADVANCED THE TAPE?          J         RF145             .  YES, CONTINUE THIS LOOP          LMJ       X10,EDTSPC        .  NO, EDIT ERROR MESSAGE          E$MSG     ERM26             .  'CANNOT MOVE TO REQ POSITION'          J         ERRPRT            .   ERROR EXITRF150          LA        A0,(HBSIZE,HBUFF) .          SA        A0,IOPKT+4        . TELL I/O TO READ INTO HEADER BUFFER          I$OW      IOPKT             . READ FIRST BLOCK OF THIS FILE          LMJ       X9,STATUS         . CHECK I/O STATUS          J         ERREXT            .  I/O ERROR          J         STATUSX           .  EOF IS NOT GOOD HERE          J         COPTAP            . BEGIN FILE RESTORERF160          LA,U      A0,1              . FILE 1          LA,U      A14,1*/3          . INPUT FILE (TAPE ALLOWED)          LMJ       X11,OPNFILE       . GO OPEN THE FILE          J         ERREXT            . ERROR IF SOMETHING WRONG WITH FILECOPTAP          LX,U      X7,HBUFF          . BASE ADDRESS OF HEADER BUFFER          TNZ       FCTCPG,X4         . IS INPUT A COPY,G TAPE?          J         RF190             .  NO, SKIP          LA        A0,(1,CPGHDR)     .  YES, TRANSFER DATA FROM          LA        A1,(1,HBUFF)      .   ACP HEADER BUFFER TO COPY,G          LR,U      R1,28             .   HEADER BUFFER          BT        A0,,*A1           .          LA,U      A0,(0)            . NOW ZEROFILL ACP HEADER BUFFER          ANA,U     A1,28             .  (WILL BE INITIALIZED FROM COPY,G          LR,U      R1,28             .  HEADER DATA)          BT        A1,,*A0           .          LX,U      X9,CPGHDR         . X9 = COPY,G HEADER BUFFER          DL        A0,2,X9           . QUALIFIER          DL        A2,4,X9           . FILENAME          DS        A0,M0QUAL,X7      .  STORE IN ACP HEADER          DS        A2,M0FILE,X7      .          LA        A0,6,X9           . ABS F-CYCLE (RJSF FIELDATA)          LA        A1,('      ')     . FD SPACES          LR,U      R1,5              . LOOP MAX OF 6 TIMESRF170          LDSC      A0,6              . NEXT CHAR TO A1 LOWER          AND,U     A1,077            . INTO A2          TNE,U     A2,' '            . IS CHAR A SPACE?          J         RF172             .  YES, SKIP          TE,U      A2,'+'            .  NO, CHECK FOR +,- FORMAT          TNE,U     A2,'-'            .          J         $+2               . SKIP AHEAD - THIS IS REL FORMAT          J         RF175             . NOT REL FORMAT - MUST BE NUMERIC          ANA,U     A1,,A2            . CHANGE CHAR FROM +,- TO SPACE          AA,U      A1,' '            . THIS REQUIRED TO AVOID ERR FROM FDTOBNRF172          JGD       R1,RF170          . CONTINUE TO SHIFT LEFT          J         ER225             . ERROR IF WORD 6 = ALL SPACESRF175          DSC       A0,6              . A0,A1 = F-CYCLE (LJSF FIELDATA)          LMJ       X11,FDTOBN        . CONVERT TO BINARY          J         ER225             .  ABORT IF ERROR IN CONVERSION          SA        A4,M0CYCW,X7      . SAVE BINARY F-CYCLE IN ACP HEADER          LA        A0,7,X9           . DATE COPIED (6 FD CHARS)          LA        A1,('      ')     . REQUIRED BY FDTOBN          LMJ       X11,FDTOBN        . CONVERT TO BINARY          J         ER225             .  ABORT IF ERROR IN CONVERSION          DSL       A2,72             . PREPARE FOR DOUBLE DIVIDE          DI,U      A3,100            . DIV BY 100, REMAINDER = YEAR          DI,U      A2,100            . A2 = MONTH, A3 = DAY          TLE,U     A4,64             . IS YEAR LESS THAN 64?          AA,U      A4,100            . YES, MUST BE 2000+, BIAS BY 100          ANA,U     A4,64             . MAKE YEAR MOD-64 AS TDATE$          TG,U      A4,64             . WILL YEAR FIT IN TDATE$ WORD?          J         ER225             .  NO, ERROR          LSSL      A4,30             . YEAR TO A4 UPPER          LDSL      A3,30             . DAY, YEAR TO A3 UPPER          LDSL      A2,12             . MONTH, DAY, YEAR TO A2 LOWER          SA,H1     A2,M0XXDT,X7      . SAVE IN ACP HEADER          LA        A0,8,X9           . TIME COPIED (6 FD CHARS)          LA        A1,('      ')     . REQUIRED BY FDTOBN          LMJ       X11,FDTOBN        . CONVERT TO BINARY          J         ER225             .  ABORT IF ERROR IN CONVERSION          DSL       A2,72             . PREPARE FOR DOUBLE DIVIDE          DI,U      A3,100            . DIV BY 100, REMAINDER = SECONDS          DI,U      A2,100            . A2 = HOURS, A3 = MINUTES          TG,U      A2,24             . IS HOUR WITHIN ACCEPTABLE RANGE?          J         ER225             .  NO, HEADER FORMAT ERROR          MSI,U     A2,3600           . CONVERT HOURS TO SECONDS          MSI,U     A3,60             . CONVERT MINUTES TO SECONDS          AA,U      A2,,A3            . ADD HOURS, MINUTES          AA        A2,A4             .  A2 = SEC SINCE MIDNIGHT (TDATE$ FMT)          SA,H2     A2,M0XXDT,X7      . SAVE IN ACP HEADER          LA        A1,10,X9          . HIGHEST TRACK WRITTEN          SA        A1,M0XXHT,X7      . SAVE IN ACP HEADER          LA,U      A0,BUFSIZ/28      . DEFAULT BUFFER SIZE (SECTORS)          TG,U      A1,M$BUFFSPLIT    . IS FILE LARGER THAN CUTOFF SIZE?          LA,U      A0,BUFLRG/28      .  YES, USE LARGER SIZE BUFFERS          SA        A0,M0XXBS,X7      . SAVE IN ACP HEADER          SP1       M0XXNT,X7         . SET TRACK COUNT NONZERO          SP1       M0ACCT,X7         . DON'T MARK AS TEMP FILE          SN1       CPGADR            . SET FLAG, NO DATA WAITING          SZ        CPGBLK            . ZERO BLOCK SEQUENCE NUMBER          SZ        NXTSEC            .  AND ADDRESS OF EXPECTED NEXT SECTOR          LA,U      A0,CPGBFC         . TELL EXPAND TO ALLOCATE <CPGBFC>          SA        A0,FASBCT         .  FAS-SIZE DATA BLOCKS FOR          SP1       FASIN             .  DOUBLE-BUFFERED INPUT          P$RINT    (0100+CGL,CPGMSG) . INFORM USER THAT TAPE IS COPY,G FORMAT          J         RF300             . OPEN OUTPUT FOR NON-RESTORE OPERATIONRF190          LA        A0,M0XXLB,X7      . PICK UP HEADER WORD          TE        A0,('*ACSV*')     . IS THIS AN ACP SAVE FILE?          TNE       A0,('*SCSV*')     .  ALSO TEST FOR ORIGINAL FORMAT          J         RF195             .  YES - OK          LMJ       X10,EDTSPC        .  NOPE - EDIT ERROR MESSAGE          E$MSG     ERM22             .          J         ERRPRT            .  AND EXITRF195          TNZ       ARCFLG            . ARCHIVE OPERATION?          J         RF200             .  NO, SKIP          DL        A0,M0QUAL,X7      . GET QUAL FROM HEADER          DTE       A0,AHQUAL,X8      . COMPARE W/ARCHIST$ QUALIFIER          J         ER217             .  ERROR IF NOT THE SAME          LA        A1,M0CYCW,X7      . GET CYCLE          AND,U     A1,07777          .          DL        A0,M0FILE,X7      .  AND FILENAME FROM HEADER          TNE       A2,AHCYCL,X8      . COMPARE CYCLE AND          DTE       A0,AHFILE,X8      .  FILENAME W/ARCHIST$ VALUES          J         ER217             .   ERROR IF NOT THE SAMERF200          LA        A0,M0XXVN,X7      . GET ACP CREATION VERSION          TG,U      A0,01000          . IS IT 01000 OR GREATER,          TNZ       M0XXRS,X7         .  AND IS THE REEL SEQUENCE NONZERO?          J         $+2               .   NO, CONTINUE          J         ER216             .   YES, 'POS AT START OF CONTINUED FILE'          TZ        M0XXAF,X7         . WAS INPUT FILE ARCHIVED,          TZ        PRVFLG            .  AND IS USER NON-PRIVILEGED?          J         $+2               .   NO, SKIP          J         ER214             .   YES, 'MUST BE PRIV TO READ ARC TAPE'          TOP,U     A15,1*/('Z'-'R')  . IS THIS A RESTORE?          J         RF300             .  NO, OUTPUT FILE IS SPEC 2          SZ        NEWQL             . CLEAR REPLACEMENT QUAL INDICATOR          LA,U      A0,2              .          LMJ       X11,SELT$         . PICK UP 2ND INFOR FIELD          J         RF203             . SKIP IF NONE THERE          TNZ,S2    ELT$              . WAS A FILENAME SPECIFIED?          J         RF202             .  NO, SKIP          TZ,S1     ELT$              . IF FILENAME GIVEN, QUAL AND CYCLE          TNZ,S3    ELT$              .  BOTH MUST BE SUPPLIED          J         ER218             .   IF NOT, ERROR EXIT          DL        A0,ELT$+2         . SPEC 2 QUAL          DL        A2,ELT$+4         . SPEC 2 FILENAME          DS        A0,NEWQL          . STORE FOR LATER USE, ALSO NEWQL > 0          DS        A2,NEWFL          .   INDICATES SPEC 2 Q*F WAS GIVEN          DS        A0,EXPKT+1        . STORE QUAL, FN IN MSCON$-EXIST$ PKT          DS        A2,EXPKT+3        .          LA        A0,ELT$+6         . SPEC 2 CYCLE          LA,U      A1,0              .  ONLY LOOK AT ONE WORD          LMJ       X11,FDTOBN        . CONVERT TO BINARY          J         ER218             . CONVERSION ERROR          SA        A4,NEWCY          . STORE SPEC 2 F-CYCLE          SA,H2     A4,EXPKT+5        . STORE ALSO IN MSCON$-EXIST$ PKTRF202          TNZ,S1    ELT$+1            . WAS SPEC 2 ELTNAME (EQUIP) GIVEN?          J         RF203             .  NO, SKIP          LA        A0,ELT$+9         .  YES, GET SPEC 2 ELTNAME          SA        A0,M0MNEM,X7      . SAVE NEW EQUIP MNEMONIC          SP1       MNMFLG            . SET FLAG THAT EQUIP WAS SPECIFIEDRF203          TZ        NEWQL             . LOAD INTO DIFFERENT Q*F?          J         RF204             .  YES, EXIST$ PACKET ALREADY SET UP          DL        A0,M0QUAL,X7      .  NO, SET UP WITH QUAL, FILE, CYCLE          DL        A2,M0FILE,X7      .    FROM ACP HEADER          DS        A0,EXPKT+1        .          DS        A2,EXPKT+3        .          LA        A0,M0CYCW,X7      . CYCLE WORD          AND,U     A0,07777          . CYCLE TO A1          SA,H2     A1,EXPKT+5        .  INTO EXIST$ PACKETRF204          LA,U      A1,0              . INIT DIR-ID = 0          LA        A0,M0XXVN,X7      . ACP VERSION USED TO SAVE FILE          TG,U      A0,01000          . WAS LEAD ITEM SAVED IN HEADER?          LA        A1,HBLIBG+L0DRID,X7 .  YES, LOAD FROM SAVED LI          SA        A1,ORGSHR         . SAVE ORIGINAL FILE DIR-ID          TNZ       MHFCFG            . IS MHFS CONFIG ON THIS SYSTEM?          J         RF205             .  NO, SKIP          LA,S6     A0,DIDBUF         .  YES, GET STATUS BITS          SSL       A0,4              . ISOLATE DOWN, NOT AVAIL FLAGS          JZ        A0,RF206          . SKIP IF MHFS IS UP, AVAILRF205          JZ        A1,RF207          . SKIP IF ORIGINAL FILE FROM LOCAL DIR          P$RINT    (0100+RSDL,RSDMSG) . 'MHFS NOT AVAIL, FILE RST TO LOC DIR'          LA,U      A1,0              . SET RESTORE-TO-LOCAL FLAG          J         RF207             .RF206          TEP,U     A15,1*/('Z'-'U')  . RESTORE TO SHARED DIR?          LA,U      A1,1              .  YES, SET FLAG          TEP,U     A15,1*/('Z'-'Y')  . RESTORE TO LOCAL DIR?          LA,U      A1,0              .  YES, CLEAR FLAGRF207          SA        A1,RSTSHR         . SAVE RESTORE DIR-ID          SA,H1     A1,EXPKT          .  AND SAVE IN ALL RELATED          SA,H1     A1,MSAPKT         .  MSCON$ REQUEST PACKETS          LA,U      A0,EXPKT          .          ER        MSCON$            . ISSUE MSCON$-EXIST$ REQUEST          JP        A0,RF208          . JUMP IF 'GOOD' STATUS          AND       A0,(077*/18)      . ISOLATE S3 OF STATUS WORD          TNE       A1,(043*/18)      . IS IT 043 (FILE DOES NOT EXIST) ?          SP1       RSTCYC            .  YES, WE CAN RESTORE CYCLE LIMIT ALSO          J         RF210             . PROCEED WITH RESTORERF208          SSL       A0,18             . STATUS TO A0 LOWER          TG,U      A0,2              . LESS THAN 2 INDICATES FILE IS CATALOGED          J         RF209             . SKIP IF OTHER CYCLES EXIST, NOT THIS ONE          E$DIT     EPKT              .  IF CATALOGUED, OPEN EDIT FOR ERR MSG          E$MSG     CNRMSG            . '*CANNOT RESTORE '          LMJ       X9,EDRELF         . EDIT QUAL*FILE(CYCLE)          E$MSGR                      . ' - FILE ALREADY EXISTS*'          LA,U      A2,BUFF           . POINTER TO MAIN ITEM          LA        A0,M0CATT,A2      . CATALOG DATE/TIME OF CURR FILE          TNE       A0,M0CATT,X7      . DIFFERENT TIME THAN FILE TO RESTORE,          TEP,U     A15,1*/('Z'-'M')  .  OR IS THIS A MOVE OPERATION?          J         ERRPRT            .  YES, PRINT MESSAGE AND ERR EXIT          P$RINT    (0114,LINE)       .  NO, PRINT MESSAGE          J         NRMEXT            .    AND TAKE NORMAL EXITRF209          ON        M$SENTRY>0        . START OF SECURITY-COMPARE CODE          TEP,U     A15,1*/('Z'-'V')  . BYPASS SECURITY COMPARE?          J         RF210             .  YES, SKIP          SZ        SACPKT            .  NO, INIT SATTCP$ PKT          E$DIT     EPKT              . OPEN EDIT          E$MSG     SACUSE            . '@USE SACIN$,'          E$FD2     EXPKT+1           . QUALIFIER          E$MSGR                      . *          E$FD2     EXPKT+3           . FILENAME          E$MSGR                      . ' . '          LA,U      A0,LINE           .          ER        CSF$              . ATTACH 'SACIN$' TO OUTPUT Q*F          LA,U      A0,SACASG         .          ER        CSF$              . @ASG,AY SACIN$          JN        A0,RF2095         . SKIP IF COULD NOT ASSIGN          LA,U      A0,HBLIBG,X7      . ADDRESS OF SAVED LEAD ITEM          SA,H2     A0,SACPKT+1       . SAVE IN SATTCP$ PKT          LA        A0,SACPTR         . BDI$,OFFSET          ER        SATTCP$           . COMPARE SECURITY ATTRIBUTESRF2095          LA,U      A0,SACFREE        .          ER        CSF$              . @FREE SACIN$          TNZ       SACPKT            . ANY SATTCP$ ERRORS?          J         RF210             .  NO, CONTINUE WITH RESTORE          E$CLEAR                     .  YES, CLEAR EDIT FOR ERROR MESSAGE          E$MSG     ERM11             . 'SECURITY ATTRIBUTE COMPARISON FAILURE'          E$OCTF    12,SACPKT         . INDICATE SATTCP$ STATUS          J         ERRPRT            . PRINT MESSAGE AND ABORT RELOAD          OFF       M$SENTRY>0        . END OF SECURITY-COMPARE CODERF210          LA        A0,M0XXVN,X7      . ACP VERSION USED FOR SAVE          TLE,U     A0,01100          . DOES THIS VERS SUPPORT MULT PACKIDS?          SP1       M0XXPC,X7         .  NO, SET PACKID COUNT TO ONE          TEP,U     A15,1*/('Z'-'P')  . CHECK FOR 'P' OPTION          SZ        M0XXPK,X7         . IF SET CLEAR ORIGINAL PACKID          LA,U      A0,010306         .          LMJ       X11,SINF$         . PICK UP SPEC 3 (PACKID)          J         RF211             .  SKIP IF NO FIND          SA        A0,M0XXPK,X7      . SAVE RESTORE-PACKID          SP1       M0XXPC,X7         . SET PACKID COUNT TO ONE          SP1       PCKFLG            . SET USER-SPEC PACK FLAG          ON        PCKMAX>1          . THIS CODE ON FOR MULTI-PACK OPERATION          TZ        ARCFLG            . IS THIS ARCHIVE RESTORE?          J         RF211             .  YES, MULT PACKIDS NOT ALLOWED          LX        X4,(0100,010406)  . SINF$ PARAMETER INDEX          LX,U      X5,HBPTBG,X7      . POINTER TO PACKID TABLE IN HEADER          LXI,U     X5,1              . EACH ENTRY IS ONE WORD LONG          LA,U      A6,PCKMAX-2       . LOOP COUNTERRF2105          LA,U      A0,,*X4           . POINTER TO NEXT PACKID IN INFOR          LMJ       X11,SINF$         . SEARCH FOR NEXT PACKID          J         RF2108            .  SKIP IF NO FIND          SA        A0,,*X5           . SAVE NEXT PACKID          JGD       A6,RF2105         . BACK FOR NEXTRF2108          LA,U      A0,PCKMAX-1       . FOR COMPUTING PACKID COUNT          ANA       A0,A6             . SUBTRACT REM LOOP COUNT          SA        A0,M0XXPC,X7      . SAVE PACKID COUNT          OFF       PCKMAX>1          . END OF MULTI-PACK CODERF211          LA        A6,M0XXPK,X7      . A6 = PACKID          JZ        A6,RF220          . SKIP MSALL$ SEARCH IF NO PACKID          LA,U      A7,0              . ZERO MSALL$ PACK POINTER          LA,U      A0,MSAPKT         .          ER        MSCON$            . PICK UP MSALL$ INFO          TP        A0                .          LMJ       X1,ABORT          . BLOW UP IF BAD MSCON$ STATUS          LA        A0,M0XXPC,X7      . PACKID COUNT          TG,U      A0,PCKMAX+1       . MORE THAN CONFIGURED?          LMJ       X1,ABORT          .  YES, ABORT - DO NOT CONTINUE          ANA,U     A0,1              . DECREMENT FOR LOOP          LR        R2,A0             . USE R2 FOR LOOP COUNTER          LX,U      X5,HBPTBG,X7      . POINTER TO PACKID TABLE IN HEADER          LXI,U     X5,1              . EACH ENTRY HAS ONE WORD          LA,U      A9,0              . PACKID INDEX          J         RF2117            . BEGIN PACKID VERIFICATION FOR PACK 1RF2115          LA        A6,,*X5           . GET NEXT PACKID FROM TABLE          LA,U      A7,0              . MSALL$ PTR NOT USED FOR PACKID > 1          AA,U      A9,1              . INCREMENT PACKID INDEXRF2117          LR,H2     R4,BUFF           . COUNT OF EQUIP TYPES          JGD       R4,$+2            . DECR FOR JGD          LMJ       X1,ABORT          . BLOW UP IF NOT > 0          LX        X4,(1,0)          . POINTER INTO EQUIP INDEX TABLE          LXI,U     X6,10             . INCREMENT FOR UNIT TABLE LENGTHRF212          LXM,H1    X6,BUFF+1,X4      . ADDRESS OF NEXT UNIT TABLE          LA,H2     A0,BUFF+1,*X4     . ADDRESS OF EQUIP SUMMARY TABLE          LA        A5,BUFF+2,A0      . GET SPECIFIC EQUIP MNEMONIC          LA        A0,BUFF,A0        . LOAD WORD 0 OF EQUIP SUMM TABLE          SSL       A0,24             . ISOLATE T1 (UNIT COUNT)          LR,U      R6,,A0            . INTO R6 FOR LOOP          JGD       R6,RF214          . SKIP FORWARD, INIT FOR JGD          J         RF216             .  SKIP THIS EQUIP IF NO UNITS IN TABLERF214          TE        A6,BUFF+7,*X6     . COMPARE PACKID WITH NEXT IN TABLE          J         RF215             . SKIP IF NOT EQUAL          LA        A0,(2,EQPTAB-2)   . POINTER TO EQUIP MNEMONIC TABLE          LR,U      R1,EQTLEN         .          SE        A5,2,*A0          . SEARCH FOR EQ-TYPE FROM EQUIP SUMM TBL          J         ER250             .  NO FIND, ERROR          LA,H1     A1,1,A0           . LOAD FIRST 3 CHARS OF EQUIP MNEMONIC          TNE,H1    A1,M0MNEM,X7      . IS THIS CORRECT MNEMONIC FOR FILE?          J         RF217             .  YES, VERIFY PACK STATUS          JNZ       A9,RF215          .  NO, SKIP IF PACK INDEX > ZERO          LA        A8,1,A0           . LOAD CORRECT MNEMONIC FOR THIS EQP          LA        A7,X6             . SAVE POINTER IF NO OTHER FINDRF215          JGD       R6,RF214          . LOOP BACK FOR MORE UNITSRF216          JGD       R4,RF212          . LOOP BACK FOR OTHER EQUIP TYPES          JZ        A7,RF218          . SKIP IF NO PREV FIND W/DIFF EQUIP          TNZ       MNMFLG            . DID USER SPECIFY ASSIGN MNEMONIC?          SA        A8,M0MNEM,X7      .  NO, USE COMPUTED MNEMONIC          LX        X6,A7             . RESTORE PACKID POINTERRF217          ANX,U     X6,10             . BACKUP POINTER TO CORRECT ENTRY          LA        A0,BUFF+2,X6      . UNIT STATUS BITS #1          AND,U     A0,074            .          JNZ       A1,RF218          . ERROR IF DN, RV, SU OR NOT AVAIL          LA        A0,BUFF+3,X6      . UNIT STATUS BITS #2          TEP,U     A0,02             . IS THIS A FIXED PACK?          J         RF218             .  YES, CANNOT USE AS REM-PACKID          LA        A0,BUFF+8,X6      . AVAIL TRACKS ON THIS PACK          AA        A0,TOTAVL         . ADD TOTAL AVAILABLE THIS FAR          SA        A0,TOTAVL         . SAVE NEW TOTAL          JGD       R2,RF2115         . BACK FOR NEXT PACKID IN TABLE          TG        A0,M0XXNT,X7      . IS THERE ROOM FOR THIS FILE?          J         RF220             .  YES, BEGIN RESTORE PROCESSRF218          TNZ       PCKFLG            . WAS A PACK-ID SPEC ON CALL LINE?          J         RF219             .  NO, RESTORE TO FIXED STORAGE W/MSG          LA,U      A0,3              .  YES, SET SPEC 3 FOR ERROR MESSAGE          AA        A0,A9             . ADD INDEX FOR OFFENDING PACKID          SA        A0,SPCNUM         .          J         ER240             . 'OUTPUT PACK IS NOT AVAILABLE'RF219          E$DIT     EPKT              . OPEN EDIT          E$MSG     CNPMSG            . '*CANNOT RESTORE TO PACK(S): '          LMJ       X10,EDPACK        . EDIT STRING OF PACKIDS          E$MSGR                      . ' - USING FIXED*'          P$RINT    (0116,LINE)       . PRINT ERROR MESSAGE          SZ        M0XXPK,X7         . CLEAR PACKID - FORCE ASG TO FIXEDRF220          E$DIT     EPKT              . OPEN EDIT TO COMPOSE @ASG STATEMENT          E$COPY    5,('@ASG, ')      . LITERAL @ASG          TNZ       M0ACCT,X7         . IS ACCOUNT ZERO?          J         RF225             .  YES, THIS IS A TEMP FILE          E$CHAR    'C'               .  NO, USE 'C' OPTION ON ASG          LA        A4,M0INHI,X7      . GET INHIBIT BITS          LA,U      A0,'P'            .          TOP,U     A4,1*/3           . PRIVATE FILE?          E$CHAR                      .  NO, SET 'P' OPT ON ASG          LA,U      A0,'V'            .          TEP,U     A4,1*/4           . V-OPTION FILE?          E$CHAR                      .  YES, SET OPT ON ASG          LA,U      A0,'R'            .          TEP,U     A4,1*/0           . READ-ONLY FILE?          E$CHAR                      .  YES, SET OPTION          LA,U      A0,'G'            .          TEP       A15,(1*/('Z'-'G')) . REVERSE ORIGINAL G-OPTION?          LNA       A4,A4             .  YES, LOAD NEG INHIBIT BITS          TEP,U     A4,1*/5           . G-OPTION FILE?          E$CHAR                      .  YES, SET OPTION ON ASG          LA        A4,M0FILF,X7      . GET FILE-FLAGS          LA,U      A0,'S'            .          TEP,U     A4,1*/0           . S-OPTION FILE?          E$CHAR                      .  YES, SET ASG OPTION          J         RF230             .RF225          E$CHAR    'T'               . EDIT 'T' OPT FOR TEMP ASSIGNRF230          E$CHAR    ' '               . SKIP 1 SPACE BET OPTS AND FILENAME          LMJ       X9,EDRELF         . EDIT FILENAME INTO IMAGE          TNZ       M0ACCT,X7         . IS ACCOUNT ZERO?          J         RF238             .  YES, TEMP FILE, SKIP THIS          LA        A0,M0XXVN,X7      . GET ACP VERSION USED TO COPY          TLE,U     A0,0500           . S2 (MAJOR) MUST BE AT LEAST 5          J         RF238             .  IF NOT, KEYS WERE NOT SAVED          LA        A1,M0XXR2,X7      . LOAD LOWER 18 BITS OF READ KEY          LXI       A1,M0XXR1,X7      . LOAD UPPER 18 BITS          LA        A0,M0XXW2,X7      . LOAD LOWER 18 BITS OF WRITE KEY          LXI       A0,M0XXW1,X7      . LOAD UPPER 18 BITS          DTE       A0,('            ') . ARE BOTH KEYS SPACES?          J         $+2               .  NO, CONTINUE          J         RF238             .  YES, NO KEYS: SKIP          TE        A0,('//////')     . HAS READ KEY          TNE       A1,('//////')     .  OR WRITE KEY BEEN SLASHED?          J         RF235             .   YES, CANNOT RESTORE - PRT MSG          DL        A4,A0             . LOAD KEYS INTO A4,A5          E$CHAR    '/'               . KEY SEPARATOR          LMJ       X10,EDKEY         . EDIT READ KEY INTO ASG STATEMENT          TNE       A4,('      ')     . IS THERE A WRITE KEY?          J         RF238             .  NO, SKIP          E$CHAR    '/'               .  YES, ADD ANOTHER SEP CHAR          LA        A5,A4             .          LMJ       X10,EDKEY         . EDIT WRITE KEY INTO ASG STATEMENT          J         RF238             . CONTINUE NORMALLYRF235          P$RINT    (0100+ER20L,ERR20) . 'CANNOT RESTORE KEYS'RF238          E$CHAR    ','               . KEEP ON WITH THIS          TNZ       M0ACCT,X7         .          J         RF240             . SKIP IF TEMP FILE          E$FD1     M0MNEM,X7         . EDIT EQUIP MNEMONICRF240          E$CHAR    '/'               .          LA        A0,M0INIT,X7      . ORIGINAL INIT RESERVE          TOP,U     A15,1*/('Z'-'I')  . IS INIT RESERVE TO BE ADJUSTED?          J         RF250             .  NO, SKIP          LA        A1,M0XXHT,X7      . PICK UP HIGHEST TRACK WRITTEN          TLE,U     A1,128            .          J         RF250             . SKIP IF LESS THAN 128          ANU       A1,M0XXNT,X7      . SUBTRACT TRACKS IN FILE          TG,U      A2,28             .          J         RF250             . SKIP IF 28 OR MORE HOLE TRACKS          AA,U      A1,1              . COMPUTE NEW INIT RESERVE          TN        M0PCHW,X7         .          J         RF245             . SKIP IF TRACK GRANULARITY          AA,U      A1,63             . COVERED QUOTIENT          SSL       A1,6              . DIVIDE BY 64 TO GET INIT POSITIONSRF245          TLE       A0,A1             . IS ORIGINAL INIT RESERVE > COMPUTED?          LA        A0,A1             .  NO, USE COMPUTED VALUERF250          E$DECV                      . EDIT INITIAL RESERVE IN @ASG          E$CHAR    '/'               .          LA,U      A0,'TRK'          .          TP        M0PCHW,X7         .          LA,U      A0,'POS'          .          E$FD1                       . EDIT GRANULARITY          E$CHAR    '/'               .          E$DECV    M0MAXG,X7         . EDIT MAX GRANULES          TNZ       M0XXPK,X7         .          J         RF260             . SKIP IF NO PACK-ID PRESENT          E$CHAR    ','               .          LMJ       X10,EDPACK        . EDIT STRING OF PACKIDSRF260          E$CHAR    ' '               .          E$CHAR    '.'               . TERMINATOR CHARACTER          E$CHAR    ' '               .          E$COLN                      . GET COLUMN NUMBER          AA,U      A0,4              . COVERED QUOTIENT          DSL       A0,36             . PREPARE FOR DIVIDE          DI,U      A0,6              . WORDS IN CSF$ IMAGE          LSSL      A0,18             . TO A0 UPPER          LXM,U     A0,LINE           . ADDRESS TO A0 LOWER          ER        CSF$              . ISSUE @ASG TO CREATE FILE          TOP       A0,(1*/33)        . ERROR IF FILE ALREADY EXISTS          JP        A0,RF270          . SKIP IF GOOD STATUS, OTHERWISE          LA        A4,A0             . SAVE STATUS          P$RINT    (0116,LINE)       . PRINT @ASG STATEMENT          E$CLEAR                     .          E$MSG     ERM5              . EDIT ERR MSG 'BAD CSF$ STATUS...'          E$OCTF    12,A4             . EDIT STATUS CODE          P$RINT    (0114,LINE)       . PRINT ERROR MESSAGE          J         ERREXT            . AND TAKE ERROR EXITRF270          E$CLEAR                     .          E$MSG     USEMSG            . EDIT @USE ACP$FILE$$$Z,...          LMJ       X9,EDRELF         . EDIT IN Q*F(C)          E$CHAR    ' '               .          E$CHAR    '.'               . TERMINATOR          LA,U      A0,LINE           .          ER        CSF$              . ISSUE @USE FOR FILE          TP        A0                .          LMJ       X1,ABORT          . BLOW UP IF ERROR HERE          LX,U      X4,FCTTBL+FCTLEN  . ADDRESS OF SECOND FILE FCT          TEP,U     A15,1*/('Z'-'M')  . IS THIS A MOVE?          LX,U      X4,FCTTBL         .  YES, USE FIRST FILE FCT          SZ        FCTFLGS,X4        . CLEAR FCT FLAGS          DL        A0,DREG+1         . GET INTERNAL NAME (ACP$FILE$$$Z)          DS        A0,FCTUSE,X4      . INTO FCT          DS        A0,FCTUEX,X4      . ALSO USE AS EXTERNAL NAME          DS        A0,IOPKT          . AND IN GENERAL I/O PACKET          DL        A0,M0QUAL,X7      .          DL        A2,M0FILE,X7      .          DS        A0,FCTQUAL,X4     . STORE QUAL IN FCT          DS        A2,FCTFILE,X4     . STORE FILENAME IN FCT          TP        M0PCHW,X7         . IS THIS FILE POSITION GRANULARITY?          SP1       FCTPOS,X4         .  IF SO, SET FLAG IN FCT          TZ        M0ACCT,X7         . TEST FOR TEMP FILE          J         RF280             .  NO, SKIP          SP1       FCTSTAT,X4        .  YES, STATUS 1 INDICATES @FREE,A ...          SZ        FCTCYC,X4         . TEMP FILE IS ALWAYS CYCLE ZERO          J         RF320             .RF280          LA        A0,M0CYCW,X7      . CYCLE WORD FROM HEADER          AND,U     A0,07777          . T3 (F-CYCLE) INTO A1          LA,U      A0,3              .          SA        A0,FCTSTAT,X4     . STATUS 3 INDICATES @FREE,AR ...          SA        A1,FCTCYC,X4      . STORE CYCLE IN FCT          DL        A0,M0PROJ,X7      . GET PROJECT-ID FROM HEADER          DL        A2,M0ACCT,X7      .  ALSO ACCOUNT          TNE       A0,('//////')     . HAS PROJECT BEEN SLASHED?          DSL       A0,72             .  YES, DO NOT CHANGE          TNE,U     A2,1              .          LA,U      A2,0              . IF ACCOUNT WAS SET TO 1, RESET TO ZERO          TNE       A2,('//////')     . HAS ACCOUNT BEEN SLASHED?          DSL       A2,72             .  YES, DO NOT CHANGE          DS        A0,DREG+3         . STORE PROJECT INTO DREG$ PACKET          DS        A2,DREG+5         .  ALSO ACCOUNT          JZ        A0,RF285          . PRINT ERR MESSAGE IF PROJECT          JNZ       A2,RF290          .  OR ACCOUNT COULD NOT BE RESETRF285          P$RINT    (0100+ER3L,ERR3)  . 'ACCT/PROJ NOT RESTORED'RF290          LA        A0,M0ASGS,X7      . ASSIGN COUNT          LA        A1,M0CATT,X7      . CATALOG TIME          LA        A2,M0REFT,X7      . REFERENCE TIME          TZ        NEWQL             . LOADING INTO THE SAME Q*F,          TEP,U     A15,1*/('Z'-'M')  .  OR DOING A MOVE?          J         RF295             .   YES, SKIP          LA,U      A0,1              .   NO, SET ASSIGN COUNT TO 1          DSL       A1,72             .    AND DON'T CHANGE CAT, REF TIMERF295          SA        A0,DREG+7         . STORE ALL 3 INTO DREG$ PACKET          SA        A1,DREG+8         .          SA        A2,DREG+9         .          LA,U      A0,DREG           .          ER        MSCON$            . ISSUE MSCON$-DREG$, RESTORE DIR INFO          JN        A0,RF296          . SKIP IF ERROR STATUS RETURNED          LA        A0,M0XXVN,X7      . GET ACP VERS USED TO SAVE FILE          TG,U      A0,0700           . WAS THE CYCLE LIMIT SAVED,          TNZ       RSTCYC            .  AND IS THIS THE ONLY EXISTING F-CYC?          J         RF320             .  NO, SKIP          TZ        NEWQL             . ARE WE RELOADING INTO SAME Q*F,          TEP,U     A15,1*/('Z'-'M')  .  OR IS THIS A MOVE?          J         $+2               .   YES, CONTINUE          J         RF298             .   NO, SKIP          LA        A0,M0XXCL,X7      . LOAD SAVED CYCLE LIMIT          TG,U      A0,1              . LESS THAN 1 OR          TG,U      A0,32             .  GTR, EQ TO 32?          J         RF298             .   YES, DO NOT RESTORE          SA        A0,DCYC+3         .   NO, SET UP DCYC$ PACKET          LA,U      A0,DCYC           .          ER        MSCON$            . ISSUE MSCON$-DCYC$ REQUEST          JP        A0,RF298          . SKIP IF GOOD STATUS RETURNEDRF296          LSSL      A0,12             .          SSL       A0,30             .          LA,U      A4,,A0            . STATUS CODE (BITS 24-19) INTO A4          E$DIT     EPKT              .          E$COPY    12,('OUTPUT FILE ') .          E$MSG     ERM13             . MSCON$ ERROR MESSAGE          E$OCTV    A4                .          J         ERRPRT            .  PRINT MESSAGE AND TAKE ERROR EXITRF298          ON        M$SENTRY>0        . START OF SECURITY-RESTORE CODE          LA        A0,(0140000441007) . RESTORE ALL SEC INFO FROM LEAD ITEM          SA        A0,SUMPKT         . INTO SUMOD$ PACKET          DL        A0,FCTUSE,X4      . INTERNAL FILE NAME          DS        A0,SUMPKT+1       .  INTO SUMOD$ PKT          SZ        SUMPKT+3          .          LA,U      A0,HBLIBG,X7      . START OF SAVED LEAD ITEM          LXI,U     A0,1              . INCREMENT FOR TRANSFER          LA        A1,(1,SUMPKT+4)   . LEAD ITEM DATA AREA IN SUMOD$ PKT          LR,U      R1,28             .          BT        A1,,*A0           . TRANSFER SAVED LI INTO SUMOD$ PKT          LA        A0,(32,SUMPKT)    .          ER        SUMOD$            . RESTORE SECURITY INFO          TNZ,S2    SUMPKT            . GOOD STATUS?          J         RF299             .  YES, SKIP          E$DIT     EPKT              . NO, OPEN EDIT          E$MSG     ERM12             . '*ER SUMOD$ ERR DURING RESTORE - TYPE: '          E$OCTV    SUMPKT,,S2        . ERROR TYPE          E$MSGR                      . ' CODE: '          E$OCTV    SUMPKT,,S3        . ERROR CODE          J         ERRPRT            .  PRINT MESSAGE AND ERROR EXITRF299          OFF       M$SENTRY>0        . END OF SECURITY-RESTORE CODE          J         RF320             . BEGIN DATA RESTORE..         OPEN OUTPUT FILE FOR NON-RESTORE OPERATION (COPY FROM TAPE).RF300          LA,U      A0,2              . SPEC 2          LA,U      A14,1*/0          . OUTPUT FILE, MUST BE DISC          LMJ       X11,OPNFILE       . OPEN OUTPUT FILE          J         ERREXT            .  ERROR OPENING FILE          TEP,U     A15,1*/('Z'-'O')  . SKIP EMPTY FILE CHECK?          J         RF310             .  YES          TZ,H1     FACPKT+9          .  NO, IS OUTPUT FILE EMPTY?          J         ER230             .   NOPE - ERRORRF310          LA,H2     A0,FACPKT+8       . OUTPUT MAXIMUM GRANULES          TZ,S3     FACPKT+6          . POSITION GRANULARITY?          LSSL      A0,6              .  YES, CONVERT TO TRACKS          ANA,U     A0,1              . SUBTRACT FOR TEST          TLE       A0,M0XXHT,X7      . DO WE HAVE ENOUGH ROOM IN OUTPUT?          J         ER170             .  NO, ERROR          TOP,U     A15,1*/('Z'-'V')  . FILENAME VERIFICATION REQUESTED?          J         RF320             .  NO, SKIP          DL        A0,M0QUAL,X7      .  YES, GET INPUT QUALIFIER          DTE       A0,FCTQUAL,X4     . SAME AS OUTPUT QUALIFIER?          J         RF315             .  NO, ERROR          DL        A0,M0FILE,X7      .  YES, GET INPUT FILENAME          DTE       A0,FCTFILE,X4     . SAME AS OUTPUT FILENAME?          J         RF315             .  NO, ERROR          J         RF320             .  YES, VERIFICATION SUCCESSFULRF315          LMJ       X10,PRTFILE       . DISPLAY INPUT NAME FOR DEBUG PURPOSES          J         ER172             .  ERROR EXIT..         COMMON CODE BEGINS HERE.RF320          TEP,U     A15,1*/('Z'-'M')  . IS THIS A MOVE?          J         RF350             .  YES, SKIP PRINT/EXPAND          LMJ       X10,PRTFILE       . PRINT Q*F(C) COPIED/ARCHIVED ON ...          LA        A0,M0XXBS,X7      . BUFFER SIZE USED FOR SAVE/ARCHIVE          MSI,U     A0,28             . CONVERT TO WORDS          TG,U      A0,BUFMAX+1       . WILL THIS FIT WITHIN CONFIGURED MAX?          LMJ       X1,ABORT          .  NO, ABORT - BLOCK SIZE IS TOO LARGE          LMJ       X11,EXPAND        .  YES, EXPAND MEMORY IF NECESSARYRF350          LX,U      X4,FCTTBL         . INPUT FCT POINTER          LX,U      X5,FCTTBL+FCTLEN  . OUTPUT FCT POINTER          TNZ       FCTCPG,X4         . IS INPUT A COPY,G TAPE?          J         RF360             .  NO, SKIP          DL        A0,FCTUSE,X4      .  YES, GET INTERNAL NAME          DS        A0,SECPKT         . USE SECPKT FOR READ AFTER EOF/EOR          DS        A0,MRPKT          . USE MULTI-READ PKT FOR MAIN INPUT          DS        A0,TLBPKT+1       . TAPE LABELING STATUS REQUEST PKT          LA,H2     A0,SECPKT+4       . START ADDRESS OF INPUT BUFFERS          LXI,U     A0,1792+CGHDLN    . WORD COUNT OF ONE BLOCK          LA        A1,(04000+R$,0,0) . COMMAND CHAIN, READ REQUESTS          LA        A2,(2,CPGACW)     . POINTER TO COPY,G MR$ ACW LIST          LR,U      R1,CPGBFC-1       . LOOP COUNTERRF355          DS        A0,,*A2           . STORE NEXT ACW WORD PAIR          AA,U      A0,1792+CGHDLN    . POINT TO NEXT AVAILABLE BUFFER          JGD       R1,RF355          . BACK UNTIL ALL ACWS ARE SET UP          J         RF370             .RF360          TOP,U     A15,1*/('Z'-'M')  . IS THIS A MOVE?          J         RF370             .  NO, SKIP          LX,U      X4,FCTTBL+FCTLEN  .  YES, FCTS ARE REVERSED FOR SECOND          LX,U      X5,FCTTBL         .   HALF OF MOVE OPERATIONRF370          SZ        BLKSEQ            . ZERO BLOCK SEQUENCE COUNTER          SZ        TRKCNT            . ZERO TRACK COUNTER          LA        A6,M0XXAC,X7      . GET ACCESS WORD COUNT          JZ        A6,RF420          . SKIP IF ZERO          ANA,U     A6,1              . DECREMENT FOR JGD          LX        X6,(1,HBUFF+HBACBG) . POINTER TO ACW TABLERF400          LA,H1     A10,,X6           . TRACK COUNT FOR THIS ACW          LA        A11,TRKCNT        . INPUT TRACK NUMBER (RESTORE FROM DISC)          AA,U      A11,1             . ADD ONE TO BYPASS HEADER          LA,H2     A12,,*X6          . OUTPUT TRACK NUMBER FOR THIS ACW          LMJ       X11,DCOPY         . CALL DCOPY TO COPY THE DATA          J         ERREXT            . ERROR DURING COPYING - EXIT HERE          JGD       A6,RF400          . COPY WAS OK - LOOP BACK FOR MORE          J         RF440             .RF420          TNZ       M0XXNT,X7         . ANY DATA TO COPY?          J         RF440             .  NO, SKIP          TZ        ARCFLG            . TEST FOR ARCHIVE OPERATION          TP        M0PCHW,X7         .  AND TRACK GRANULARITY          J         RF430             . SKIP EACQ$ IF NOT BOTH          DL        A0,FCTUSE,X5      . OUTPUT INTERNAL FILE NAME          DS        A0,EAQPKT         . INTO EACQ$ PACKET          LA        A0,AHACQN,X8      . GET TRACK COUNT FROM ARCHIST$          JZ        A0,RF430          . SKIP IF ZERO          TG,U      A0,0200000        .          LA,U      A0,0177777        . MAX TRACKS ALLOWED = 65535          SA,H1     A0,EAQPKT+4       . SAVE IN PACKET          LA        A0,AHACQA,X8      . TRACK ADDRESS AT WHICH TO ACQ STORAGE          LSSL      A0,6              . CONVERT TO SECTOR ADDRESS          SA        A0,EAQPKT+5       . SAVE IN PACKET          I$OW      EAQPKT            . GRAB SPACE FOR THE LARGEST CHUNK          LMJ       X9,STATUS         . CHECK STATUS OF REQUEST          J         ERREXT            .  ERROR, ABORT          J         STATUSX           .  EOF STATUS IS BAD HERERF430          SZ        UNLRPT            . ZERO POINTER TO REEL TABLE          LA,U      A10,1             . SET TRACK COUNT NONZERO          LMJ       X11,DCOPY         . CALL DCOPY TO PERFORM NON-ACW COPY          J         ERREXT            . ERROR DURING COPYING, STOP HERERF440          TZ        FCTTAP,X4         . IS INPUT TAPE,          TZ        FCTCPG,X4         .  AND NOT COPY,G FORMAT?          J         RF450             .   NO, SKIP          DL        A0,FCTUSE,X4      . INPUT INTERNAL NAME          DS        A0,IOPKT          . INTO GENERAL I/O PACKET          LA        A0,(R$,0,0)       .          LA        A1,(BUFSIZ,BUFF+BUFSIZ) .          DS        A0,IOPKT+3        . SET UP PACKET FOR READ OPERATION          I$OW      IOPKT             . READ FROM TAPE          LA,S1     A0,IOPKT+3        . GET STATUS          TE,U      A0,1              . TEST FOR HARDWARE EOF MARK          LMJ       X1,ABORT          .  NOT THERE, ABORTRF450          LX,U      X9,FSFMSG         . 'FROM SCRATCH FILE' (MOVE ONLY)          LMJ       X10,PRTTOT        . PRINT XXX TRACKS COPIED ...          TZ        DCEFLG            . TEST FOR CHECKSUM/BLOCK SEQ ERRORS          J         ERREXT            .  IF ANY, ERROR EXIT NOW!          TOP,U     A15,1*/('Z'-'R')  . CHECK FOR MOVE/RESTORE OPERATION          J         RF800             .  NO, ALL DONE!          LA        A0,ORGSHR         . ORIGINAL DIRECTORY-ID          TNZ       NEWQL             . RESTORE TO DIFFERENT Q*F,          TE        A0,RSTSHR         .  OR DIFFERENT DIRECTORY-ID?          J         RF460             .   YES, SKIP          P$RINT    (0100+RSTL,RSTMSG) .   NO, PRINT *FILE RESTORED*          J         RF470             .RF460          E$DIT     EPKT              .          E$MSG     RSTMSG2           . 'FILE CONTENTS RESTORED TO: '          LMJ       X9,EDRELF         . EDIT REPLACEMENT Q*F(C)          E$MSGR                      .          P$RINT    (0114,LINE)       . PRINT RESTORE MESSAGERF470          TNZ       ARCFLG            . ARCHIVE OPERATION?          J         RF500             .  NO, SKIP          TZ        NEWQL             . RELOADING INTO A DIFF Q*F?          J         RF475             .  YES, DO NOT MARK AS RELOADED          SP1       AHRLDF,X8         .  NO, SET RELOAD FLAG          LA        A0,AHBRCT,X8      . GET COUNT OF BACKUP REELS          TG,U      A0,AHBRMX         . IS THE REEL TABLE FULL?          J         RF472             .  NO, SKIP          ER        TDATE$            .  YES, SAVE DATE/TIME OF RELOAD          SA        A0,AHBRST+AHBRMX-1,X8 .   IN LAST WORD OF REEL TABLERF472          LA        A0,(W$,0,0)       .          SA        A0,AHBFPK+3       . SET UP TO WRITE BACK HISTORY DATA          I$OW      AHBFPK            . WRITE DATA TO ARCHIST$          LMJ       X9,STATUS         . CHECK STATUS          J         ERREXT            .  I/O ERROR          J         STATUSX           .  EOF IS ALSO ERROR HERERF475          LA        A0,(RDL$,0,0)     .          SA        A0,AHHDPK+3       .          I$OW      AHHDPK            . READ AND LOCK ARCHIST$ HEADER          TZ,S1     AHHDPK+3          . CHECK STATUS          J         RF480             . IF NONZERO, SKIP UPDATE          LX,U      X4,AHFHDR         . POINTER TO HEADER BUFFER          TZ        PASS1             . FIRST TIME THROUGH?          INC       AHHRLR,X4         .  YES, INCREMENT RELOAD RUN COUNT          NOP                         .          INC       AHHRLF,X4         . INCREMENT RELOAD FILE COUNT ALWAYS          NOP                         .          LA        A0,AHHRLT,X4      .          AA        A0,TRKCNT         . UPDATE TOTAL TRACKS RELOADED          SA        A0,AHHRLT,X4      .          LA        A0,(W$,0,0)       .          SA        A0,AHHDPK+3       .          I$OW      AHHDPK            . WRITE HEADER BACK TO FILE          P$RINT    (0100+AHL,AHFMSG) . PRINT 'HISTORY FILE UPDATED'RF480          J         RF800             . ALL DONE WITH RESTORERF500          TEP,U     A15,1*/('Z'-'M')  . TEST FOR MOVE OPERATION          TOP,U     A15,1*/('Z'-'J')  .  AND CONSOLE MESSAGE DESIRED          J         RF800             .   IF NOT BOTH, SKIP          E$DIT     EPKT              .          LA        A1,RSTSHR         . RESTORED FILE DIRECTORY-ID          LMJ       X10,EDFILE        . EDIT Q*F(C) RESTORED          E$SKIP    2                 .          E$DECV    TRKCNT            . TRACKS COPIED          E$SKIP    1                 .          E$FD1     ('TRACKS')        . CONTINUE MESSAGE          E$COLN                      .          SA,H1     A0,COMPKT+1       .          LA,U      A0,COMPKT         .          ER        COM$              . SEND MESSAGE TO CONSOLERF800          J         NRMEXT            . ALL DONE - TAKE NORMAL EXIT...         EDRELF IS CALLED FROM ABOVE TO EDIT THE Q*F(C) INTO THE.         ASSIGN AND USE IMAGES FOR A RELOADED FILE.  IF THIS IS A.         STANDARD RESTORE, USE THE 'EDFILE' ROUTINE TO PICK UP THESE.         FIELDS FROM THE INPUT HEADER.  IF RESTORE INTO A DIFFERENT.         FILE, USE SPECIAL FIELDS SET FROM USER-SUPPLIED SPEC 2..EDRELF          DL        A0,NEWQL          . REPLACEMENT QUALIFIER          JNZ       A0,ERF100         . SKIP IF SOMETHING THERE          LA        A1,RSTSHR         . RESTORED FILE DIRECTORY-ID          LMJ       X10,EDFILE        . USE EDFILE, ORIGINAL QUAL*FILE          J         ERF200            . RETURNERF100          TZ        MHFCFG            . IS MHFS CONFIGURED,          TNZ       M0ACCT,X7         .  AND IS RESTORE TO CAT FILE?          J         ERF150            .   NO, SKIP          LA,U      A0,'STD'          .   YES, SPECIFIC DIR-ID REQUIRED          TZ        RSTSHR            .          LA        A0,('SHARED')     . LOAD APPROPRIATE TYPE          E$FD1                       . EDIT INTO IMAGE          E$CHAR    '#'               .  WITH APPROPRIATE SEPARATOR          DL        A0,NEWQL          . RELOAD REPLACEMENT QUALERF150          E$FD2                       . NEW QUALIFIER          E$CHAR    '*'               .          E$FD2     NEWFL             . NEW FILENAME          E$CHAR    '('               .          E$DECV    NEWCY             . NEW CYCLE          E$CHAR    ')'               .ERF200          J         0,X9              . RETURN/.. EDFILE - EDIT FILE NAME INTO IMAGE, A1 = DIRECTORY-ID.EDFILE          TZ        MHFCFG            . IS MHFS CONFIGURED,          TNZ       M0ACCT,X7         .  AND IS THIS A CAT FILE?          J         EF050             .   NO, SKIP          LA,U      A0,'STD'          .   YES, SPECIFIC DIR-ID REQUIRED          JZ        A1,$+2            .          LA        A0,('SHARED')     . LOAD APPROPRIATE TYPE          E$FD1                       . EDIT INTO IMAGE          E$CHAR    '#'               .  WITH APPROPRIATE SEPARATOREF050          E$FD2     M0QUAL,X7         . QUALIFIER          E$CHAR    '*'               .          E$FD2     M0FILE,X7         . FILENAME          TNZ       M0ACCT,X7         .          J         EF100             . SKIP CYCLE IF TEMP FILE (ACCT=0)          E$CHAR    '('               .          LA        A0,M0CYCW,X7      .          LSSL      A0,24             .          SSL       A0,24             .          E$DECV                      . CYCLE          E$CHAR    ')'               .EF100          J         0,X10             . RETURN..         EDKEY - EDIT A FILE KEY INTO IMAGE.EDKEY          LA,U      A7,5              . LOOP COUNT - 1EK100          LSSC      A5,6              . NEXT CHAR TO A5:S6          AND,U     A5,077            . INTO A6          TNE,U     A6,' '            .          J         EK200             . ALL DONE IF CHAR IS A SPACE          E$CHAR    A6,,W             .  OTHERWISE, EDIT INTO IMAGE          JGD       A7,EK100          .  LOOP BACK FOR OTHER CHARSEK200          J         0,X10             . RETURN..         EDPACK - EDIT A STRING OF PACKIDS INTO IMAGE.EDPACK          E$FD1     M0XXPK,X7         . INSERT FIRST PACKID          LA        A4,M0XXPC,X7      . PACKID COUNT          ANA,U     A4,2              . DECREMENT FOR LOOP          JN        A4,EP200          . SKIP IF <2 PACKIDS TO INCLUDE          LX,U      X5,HBPTBG,X7      . POINTER TO PACKID TABLE IN HEADER          LXI,U     X5,1              . ONE WORD PER ENTRYEP100          E$CHAR    '/'               . PACKID SEPARATOR          E$FD1     0,*X5             . NEXT PACKID          JGD       A4,EP100          . BACK FOR MOREEP200          J         0,X10             . RETURN.. PRTFILE - PRINT FILE NAME AND WHEN COPIED.PRTFILE          E$DIT     EPKT              .          TZ        MHFCFG            . IS MHFS CONFIGURED,          TNZ       M0ACCT,X7         .  AND IS THIS A CAT FILE?          J         PF050             .   NO, SKIP          LA,U      A0,'STD'          .   YES, SPECIFIC DIR-ID REQUIRED          TZ        ORGSHR            .          LA        A0,('SHARED')     . LOAD APPROPRIATE TYPE          E$FD1                       . EDIT INTO IMAGE          E$CHAR    '#'               .  WITH APPROPRIATE SEPARATORPF050          E$FD2     M0QUAL,X7         . QUALIFIER          E$CHAR    '*'               .          E$FD2     M0FILE,X7         . FILENAME          TNZ       M0ACCT,X7         .          J         PF100             . SKIP CYCLE IF TEMP FILE (ACCT=0)          E$CHAR    '('               .          LA        A0,M0CYCW,X7      .          LSSL      A0,24             .          SSL       A0,24             .          E$DECV                      . CYCLE          E$CHAR    ')'               .          J         PF120             .PF100          E$MSG     TFMSG             . INDICATE TEMPORARY FILEPF120          E$SKIP    1                 .          LA        A0,('COPI')       . DEFAULT IS 'COPIED'          TZ        M0XXAF,X7         .          LA        A0,('ARCHIV')     . SAY 'ARCHIVED' IF FLAG SET IN HEADER          E$FD1                       .          E$MSG     FILMSG            . CONTINUE MESSAGE          E$DAY1    M0XXDT,X7         . DATE COPIED/ARCHIVED          E$MSGR                      .          E$TIME    M0XXDT,X7         . TIME COPIED/ARCHIVED          E$DITX                      .          P$RINT    (0114,LINE)       . PRINT MESSAGE          J         0,X10             . RETURN.. PRTTOT - PRINT TOTAL TRACKS COPIED.PRTTOT          E$DIT     EPKT              .          E$DECV    TRKCNT            . TRACK COUNT          E$MSG     COPMSG            . 'COPIED'          TOP,U     A15,1*/('Z'-'M')  . TEST FOR MOVE          J         PT100             .  NO, SKIP          E$MSG     0,X9              .  YES, ADD 'TO(FROM) SCRATCH FILE'PT100          E$CHAR    '.'               . MAKE IT PRETTY          E$DITX                      .          P$RINT    (0114,LINE)       . PRINT TRACKS COPIED MESSAGE          J         0,X10             . RETURN/.. DATA COPY ROUTINE.. A10 = TRACK COUNT. A11 = INPUT TRACK. A12 = OUTPUT TRACK. X4 = INPUT FCT. X5 = OUTPUT FCT.DCOPY          SX        X11,DCSX11        . SAVE RETURN ADDRESS          LA        A0,PKTADR+1       . ADDRESS OF 2ND I/O PACKET          SZ        3,A0              .  ZERO STATUS FROM PREVIOUS USE          LA        A0,A10            . INPUT TRACK COUNT          LA        A3,(1,0)          . PKT/BUFF PTR, H1/H2 EXCH EACH PASS          LSSL      A10,6             . CONVERT TRACK CT TO SECTOR CT          LDSL      A11,6             .  SAME FOR INPUT/OUTPUT ADDRESSES          TZ        PRVFLG            . CHECK FOR PRIVILEGED, AND          TZ        FCTPOS,X5         .  TRACK GRANULARITY          J         DC100             .   SKIP ACQUIRE IF NOT          TZ        M0XXAC,X7         . CHECK FOR ACW COPY, AND          TZ        FCTTAP,X5         .  OUTPUT DISC          J         DC100             .   SKIP ACQUIRE IF NOT          DL        A4,FCTUSE,X5      . OUTPUT FILE INTERNAL NAME          DS        A4,EAQPKT         .  STORE IN ACQUIRE PACKET          TG,U      A0,0200000        .          LA,U      A0,0177777        . 0177777 = MAX TRACKS PER ONE ACQUIRE          SA,H1     A0,EAQPKT+4       . STORE IN ACQUIRE PACKET          SA        A12,EAQPKT+5      . STORE FIRST OUTPUT ADDR IN PACKET          I$OW      EAQPKT            . GRAB THE REQUIRED SPACE          LMJ       X9,STATUS         . CHECK STATUS          J         DC900             .  ERROR, DO NOT CONTINUE          J         STATUSX           .  EOF IS NOT OK HEREDC100          LA        A0,PKTADR,A3      . ADDRESS OF NEXT AVAILABLE I/O PACKET          DL        A4,FCTUSE,X4      . INPUT FILE USE NAME          DS        A4,,A0            .  STORE IN PACKET          LA,U      A4,0              .          LA        A5,(R$,0,0)       .          DS        A4,2,A0           . SET UP WORDS 2,3 FOR STANDARD READ          INC       BLKSEQ            . INCREMENT BLOCK SEQUENCE NUMBER          NOP                         .          TZ        FCTUNL,X4         . IS INPUT FILE UNLOADED?          J         DC150             .  YES, SKIP          TZ        FCTCPG,X4         . IS INPUT A COPY,G TAPE?          J         DC180             .  YES, SKIP          TNZ       M0XXAC,X7         . IS THIS A NON-ACW COPY?          J         DC120             .  YES, HANDLE DIFFERENTLY          LA        A4,SECCNT         . MAX SECTORS PER I/O, LIM BY BUFF SIZE          TG        A4,A10            . IS THIS GREATER THAN CURR REQUEST?          LA        A4,A10            .  IF SO, LOAD SIZE OF CURRENT REQUEST          ANA       A10,A4            . SUBTRACT FROM REQUEST SECTOR COUNT          MSI,U     A4,28             . CONVERT TO WORDS          LA        A2,BUFADR,A3      . ADDRESS OF NEXT AVAIL BUFFER          TZ        FCTTAP,X4         . IS INPUT TAPE?          J         DC110             .  YES, HANDLE DIFFERENTLY..         DISC INPUT.          AA,U      A2,THLEN          .  NO, ADD HEADER LENGTH TO BUFF PTR          SA,H2     A2,4,A0           . STORE BUFFER ADDR IN PACKET          SA,H1     A4,4,A0           . STORE WORD COUNT          SA        A11,5,A0          . STORE INPUT SECTOR ADDRESS          AA        A11,SECCNT        . INCREMENT ADDR IN CASE WE DO THIS AGAIN          ER        IOW$              . ISSUE I/O TO READ INPUT DISC FILE          LMJ       X9,STATUS         . CHECK I/O STATUS          J         DC920             .  ERROR STATUS, STOP HERE          J         STATUSX           .  EOF STATUS IS BAD FOR DISC INPUT          TE,H2     A4,3,A0           . IS FINAL WORD COUNT = REQUESTED?          LMJ       X1,ABORT          .  NO, ABORT          LA,U      A1,0              . DISC INPUT DOES NOT HAVE HEADER          J         DC140             . GO MAKE LAST WORD COUNT CHECK..         TAPE INPUT (ACW) (ACP TAPE WAS CREATED FROM DISC).DC110          SA,H2     A2,4,A0           . STORE BUFFER ADDRESS IN INPUT PACKET          AA,U      A4,THLEN          . ADD HEADER SIZE TO WORD COUNT          SA        A4,INPEXP         . SAVE INPUT EXPECTED WORD COUNT          LA        A1,SECCNT         . MAXIMUM SECTORS BUFFER CAN HANDLE          MSI,U     A1,28             . CONVERT TO WORDS          AA,U      A1,THLEN          . ADD HEADER SIZE          SA,H1     A1,4,A0           . STORE IN PACKET          SZ        5,A0              . ZERO SECTOR ADDR (UNUSED FOR TAPE)          LMJ       X10,RDTAPE        . GO READ INPUT TAPE          J         DC900             . ERROR READING TAPE, STOP HERE          J         DC910             . EOF ENCOUNTERED, STOP HERE          J         DC130             . CONTINUE - CHECK BLOCK SEQ, CHECKSUM..         TAPE INPUT (NON-ACW) (ACP TAPE WAS CREATED FROM FAS/SECURE SAVE TAPE).DC120          LA        A1,SECCNT         . MAXIMUM SECTORS BUFFER CAN HANDLE          MSI,U     A1,28             . CONVERT TO WORDS          AA,U      A1,THLEN          . ADD HEADER SIZE          SA,H1     A1,4,A0           . STORE IN PACKET          LA        A2,BUFADR,A3      . NEXT AVAIL BUFFER ADDRESS          SA,H2     A2,4,A0           . STORE IN PACKET          SZ        5,A0              . ZERO SECTOR ADDR (UNUSED FOR TAPE)          LMJ       X10,RDTAPE        . GO READ INPUT TAPE          J         DC900             . ERROR READING TAPE, STOP HERE          J         DC910             . EOF ENCOUNTERED, STOP HERE          LA,H2     A4,3,A0           . GET ACTUAL INPUT WORD COUNT          TE,U      A4,020            . IS THIS THE SIZE OF ACP EOF BLOCK?          J         DC125             .  NO, SKIP          LA        A1,,A2            .  YES, GET FIRST WORD READ          TE        A1,EOFBLK         . IS THIS THE ACP EOF SENTINAL?          LMJ       X1,ABORT          .  NO, ABORT          SSC       A3,18             .  YES, EXCHANGE BUFF/PKT POINTERS          LA        A0,PKTADR,A3      . GET ADDR OF OTHER I/O PACKET          J         DC400             . GO WAIT FOR FINAL OUTPUT TO COMPLETEDC125          LA        A12,THSECT,A2     . GET OUTPUT SECTOR ADDR FROM INPUT HDR..         CHECK BLOCK SEQUENCE, CHECKSUM FOR ACP-CREATED TAPE INPUT.DC130          LA        A5,THSEQ,A2       . INPUT BLOCK SEQUENCE NUMBER          LA        A4,BLKSEQ         . EXPECTED NUMBER          SA        A5,BLKSEQ         . STORE INPUT FOR NEXT COMPARISON          TE        A4,A5             . DO THEY EQUAL?          LMJ       X10,BSQERR        .  NO, PRINT ERROR MESSAGE AND SET FLAG          LA        A5,M0XXVN,X7      . GET ACP VERSION USED TO CREATE TAPE          TOP,U     A5,1              . IS BIT ZERO SET?          J         DC138             .  NO, THIS DATA WAS NOT CHECKSUMMED          LA,H2     A4,3,A0           .  YES, GET INPUT WORD COUNT          ANA,U     A4,THLEN+1        . SUBTRACT FOR HEADER + JGD          LR        R1,A4             . INTO LOOP COUNTER          LX,U      X9,THLEN,A2       . STARTING ADDRESS OF DATA          LXI,U     X9,1              . LOOP INCREMENT          LA,U      A4,0              . ZERO ACCUMULATORDC135          AA        A4,,*X9           . ADD NEXT WORD          JGD       R1,DC135          . LOOP UNTIL ALL DATA ACCOUNTED FOR          AND       A4,(0777777)      . A5 = LOWER A4          SSL       A4,18             . A4 = UPPER A4          AH        A5,A4             . ADD TOGETHER, IGNORE OVERFLOW          LA        A1,BLKSEQ         . GET SEQUENCE NUMBER OF THIS BLOCK          LA        A4,THCKSM,A2      . EXPECTED CHECKSUM VALUE          TE        A4,A5             . DOES EXPECTED = ACTUAL?          LMJ       X10,CKSERR        .  NO, PRINT MESSAGE AND SET ERROR FLAGDC138          LA,H2     A4,3,A0           . GET ACTUAL INPUT WORD COUNT          LA,U      A1,THLEN          . TAPE INPUT SHOULD INCLUDE HEADER          TNZ       M0XXAC,X7         . WAS INPUT TAPE CREATED FROM DISC?          J         DC140             .  NO, SKIP          TE        A12,THSECT,A2     .  YES, INPUT SECTOR ADDR MUST = EXPECTED          LMJ       X1,ABORT          .   IF NOT, ABORT          TE        A4,INPEXP         . ACTUAL WORD COUNT MUST EQUAL EXPECTED          LMJ       X1,ABORT          .  IF NOT, ABORT..         FINAL PROCESSING FOR DISC OR ACP TAPE INPUT.DC140          DSL       A4,36             . PREPARE FOR DIVIDE          DI,U      A4,1792           . CONVERT WORD COUNT TO TRACK COUNT          TE        A5,A1             . VERIFY EXPECTED REMAINDER          LMJ       X1,ABORT          .  BLOCK SIZE ERROR, ABORT          AA        A4,TRKCNT         .          SA        A4,TRKCNT         . UPDATE TRACK COUNTER          J         DC200             . BEGIN OUTPUT PROCESSING/..         PROCESS INPUT FAS OR SECURE TAPE (UNLOADED FILE, ARCHIVE ONLY).DC150          LA        A1,SECPKT+4       . SET BY EXPAND, POINTS TO FAS BUFFER          SA        A1,4,A0           . STORE IN INPUT PACKET          LA        A2,BUFADR,A3      . WE WILL MOVE DATA TO INPUT BUFFER          AA,U      A2,THLEN          . ADD OFFSET FOR ACP HEADER          LXI,U     A2,1              . INCREMENT FOR BLOCK TRANSFER          LA        A12,SECADR        . SECTOR ADDR OF NEXT DATA IN FAS BUFFER          JNZ       A12,DC160         .  SKIP IF NONZERO          LMJ       X11,RDSEC         . READ NEXT FAS/SECURE TRACK          J         DC920             .  ERROR, STOP HERE          J         DC910             .  EOF, STOP HERE          LA        A12,SEHDTR,A1     . GET TRACK ADDRESS OF DATA          LSSL      A12,6             . CONVERT TO SECTOR ADDRESS          TNE       A12,NXTSEC        . IS THE NEXT TRACK IN SEQUENCE?          J         DC165             .  YES, SKIP          LA        A4,A12            .  NO, A4 = SECTOR ADDRESS OF DATA          TLE       A4,NXTSEC         . GREATER THAN PREVIOUS ADDR?          J         DC177             .  NO, ERRORDC160          LA        A1,SEBFAD         . RESTORE BUFFER ADDRESS IF CONTINUATION          LA        A4,A12            . SECTOR ADDRESS OF THIS DATA          LA        A5,A10            . REMAINING SECTORS TO COPY          DSL       A4,6              . CONVERT TO TRACKS          SA        A4,AHACQA,X8      . SAVE TRACK ADDRESS AND COUNT OF LAST          SA        A5,AHACQN,X8      .  CONTIG BLOCK FOR FUTURE ARC-RESTOREDC165          LA,U      A11,0             . INITIALIZE BLOCK SECTOR COUNT          SZ        SECADR            . ZERO CONTINUATION DATA ADDRESSDC170          LA        A4,SEHDBS,A1      . FAS/SECURE BLOCK SEQUENCE NUMBER          AND,U     A4,0377777        . INTO A5: BITS 16-0 ARE SIGNIFICANT          LA        A4,SECBLK         . EXPECTED BLOCK SEQUENCE NUMBER          SA        A5,SECBLK         . STORE NEW EXPECTED NUMBER          TE        A4,A5             . IS EXPECTED = ACTUAL?          LMJ       X10,BSQERR        .  NO, PRINT ERROR MSG AND SET FLAG          INC       SECBLK            . INCREMENT BLOCK SEQUENCE NUMBER          NOP                         .          INC       TRKCNT            . INCREMENT TRACKS PROCESSED          NOP                         .          LA        A4,SEHDCS,A1      . INPUT EXPECTED CHECKSUM          AA,U      A1,SEHDLN         . ADD HEADER SIZE, POINT TO START OF DATA          LXI,U     A1,1              . INCREMENT FOR BLOCK TRANSFER          LX        X9,A1             . SAVE POINTER IN X9          LR,U      R1,1792           . WORD COUNT          BT        A2,,*A1           . TRANSFER DATA TO ACP INPUT BUFFER          JZ        A4,DC176          . SKIP IF CHECKSUM IS ZERO          LA,U      A5,0              . INIT CHECKSUM COUNTER          LR,U      R1,1792-1         . INIT LOOP COUNTDC175          AA        A5,,*X9           . ADD NEXT DATA TO CHECKSUM          JGD       R1,DC175          . LOOP BACK UNTIL ENTIRE TRACK PROCESSED          LA        A1,SECBLK         . BLOCK SEQUENCE NUMBER          TE        A4,A5             . DOES EXPECTED = ACTUAL?          LMJ       X10,CKSERR        .  NO, PRINT ERROR MESSAGE AND SET FLAGDC176          AA,U      A11,64            . INCREMENT BLOCK SECTOR COUNT          ANA,U     A10,64            . DECREMENT SECTORS REMAINING TO COPY          JZ        A10,DC179         . SKIP IF NOTHING MORE TO PROCESS          AU        A12,A11           . A13 = SECTOR ADDR OF NEXT CONTIG TRACK          SA        A13,NXTSEC        . STORE FOR LATER REF          TG        A11,SECCNT        . IS INPUT BUFFER FULL?          J         DC179             .  YES, PROCESS OUTPUT NOW          LMJ       X11,RDSEC         .  NO, READ THE NEXT FAS/SECURE TRACK          J         DC920             . ERROR READING DATA, STOP HERE          J         DC910             .  EOF, STOP HERE          LA        A4,SEHDTR,A1      . GET NEXT FAS/SECURE TRACK ADDRESS          LSSL      A4,6              . CONVERT TO SECTOR ADDRESS          TNE       A4,NXTSEC         . IS THIS EQUAL TO NEXT CONTIG TRACK?          J         DC170             .  YES, ADD DATA TO END OF INPUT BUFFER          TG        A4,NXTSEC         .  NO, IS ADDR LESS THAN NEXT CONTIG?          J         DC178             .   NO, CONTINUEDC177          E$DIT     EPKT              .   YES, FATAL ERR: OPEN EDIT          E$MSG     ADRERR            . '*ERROR: NEXT SECTOR ADDRESS OF '          E$OCTF    12,A4             . NEXT ADDRESS          E$MSGR                      . ' PRECEDES MINIMUM OF '          E$OCTF    12,NXTSEC         . MINIMUM NEXT ADDRESS          P$RINT    (0116,LINE)       . PRINT ERROR MESSAGE          J         DC920             .  AND TAKE ERR EXITDC178          SA        A4,SECADR         . SET CONTINUATION DATA ADDRESSDC179          MSI,U     A11,28            . COMPUTE BLOCK WORD COUNT          SA,H2     A11,3,A0          . STORE IN INPUT PACKET FOR LATER REF          J         DC200             . BEGIN OUTPUT PROCESSING/..         PROCESS INPUT TAPE IN COPY,G FORMAT.DC180          LA        A2,BUFADR,A3      . WE WILL MOVE DATA TO INPUT BUFFER          AA,U      A2,THLEN          . ADD OFFSET FOR ACP HEADER          LXI,U     A2,1              . INCREMENT FOR BT          LA,U      A11,0             . ZERO BLOCK SECTOR COUNT          LA        A12,CPGADR        . SECT ADDR OF NEXT DATA IN INPUT BUFFER          JN        A12,DC181         .  SKIP IF NEGATIVE (NO DATA WAITING)          SN1       CPGADR            . CLEAR DATA WAITING FLAG          LA        A1,CPGBFP         . RESTORE BUFFER ADDRESS          J         DC192             . PROCESS NEXT BLOCK (ALREADY READ)DC181          LA,U      A0,MRPKT          . MULTI-READ INPUT PACKET          LA        A4,CPGREM         . REMAINING WORDS IN BUFFER          LA        A5,CPGSTA         . STATUS FROM LAST REQUEST          JZ        A4,DC1812         . SKIP IF NO MORE WORDS TO PROCESS          ANA,U     A4,1792+CGHDLN    . DECREMENT FOR NORMAL WORD COUNT          JN        A4,DC1818         . IF NEG, INCOMPLETE READ          SA        A4,CPGREM         .  OTHERWISE STORE COUNT OF WHAT'S LEFT          J         DC190             .  PROCESS DATA FROM NEXT BLOCKDC1812          JNZ       A5,DC182          . SKIP IF NONZERO STATUS RETURNED          TNZ       TRKCNT            . FIRST TIME THROUGH?          ER        IO$               .  YES, INITIATE 1ST I/O          TP        3,A0              . WAIT FOR I/O TO COMPLETE          ER        WAIT$             .DC1815          LA,S1     A5,3,A0           . A5 = COMPLETION STATUS          LA        A4,010,A0         . A4 = TOTAL WORDS READ          ANA,U     A4,1792+CGHDLN    . DECREMENT FOR FIRST BLOCK          JP        A4,DC189          . IF REMAINDER >= 0, PROCESS 1ST BLOCKDC1818          JNZ       A5,DC182          . NONINTEGRAL BLOCK COUNT, STATUS MUST          LMJ       X1,ABORT          .  BE NONZERO - ABORT IF NOTDC182          DS        A2,CPGSAV         . SAVE A2,A3          LMJ       X9,STATUS         . CHECK STATUS          J         DC183             .  ERROR, POSSIBLY CONTINUE          J         DC185             .  EOF, SKIP AHEAD          LMJ       X1,ABORT          . ZERO STATUS SHOULD NEVER OCCUR HEREDC183          LA,U      A0,'I/O'          . INDICATE SYSTEM I/O ERROR          LMJ       X11,QRYCNS        . ASK OPERATOR WHAT TO DO          J         DC920             .  ERROR, 'Q' OPTION NOT SET          DL        A0,SECPKT         .  'Q' WAS SET - ATTEMPT TO CONTINUE          DS        A0,MFPKT          . SET FILENAME IN MF$ PACKET          SZ,S1     MFPKT+3           . CLEAR STATUS IN PACKET          I$OW      MFPKT             . MOVE FORWARD OVER BAD BLOCK          LMJ       X9,STATUS         . CHECK STATUS          J         DC183             .  ASK AGAIN IF I/O ERROR          J         DC184             .  SKIP IF EOF STATUS          DL        A2,CPGSAV         .  NORMAL STATUS - RESTORE A2,A3          LA,U      A0,MRPKT          . RESTORE INPUT PACKET ADDRESS          SZ,S1     3,A0              . CLEAR STATUS          SZ        010,A0            .  AND WORDS TRANSFERRED          ER        IOW$              . ATTEMPT READ OF NEXT BLOCK(S)          J         DC1815            . BACK INTO MAIN INPUT LOOPDC184          DL        A2,CPGSAV         . EOF FROM MF$ - RESTORE A2,A3DC185          LA        A0,(19,TLBPKT)    . ER TLBL$ PACKET          ER        TLBL$             . READ TRAILER LABEL          SSA       A0,18             . SHIFT S3 TO A0 LOWER, KEEP SIGN          JZ        A0,DC1865         . LABELED EOF, CHECK FOR TSWAP BLOCK          JN        A0,DC186          . SKIP IF NEG STATUS RETURNED          TE,U      A0,024            . IS THIS AN END OF VOLUME?          LMJ       X1,ABORT          .  NO, DON'T KNOW WHAT IT IS!          LA,U      A0,SECPKT         .  YES, LOAD PACKET FOR TSWAP          J         DC187             .   AND GO SWAP REELSDC186          AND,U     A0,077            . S3 ONLY TO A1 LOWER          TE,U      A1,016            . IS THIS AN UNLABELED TAPE?          LMJ       X1,ABORT          .  NO, ABORT - UNKNOWN STATUSDC1865          LA,U      A0,SECPKT         . LOAD SINGLE READ PACKET ADDRESS          SZ,S1     3,A0              . CLEAR STATUS          ER        IOW$              . READ TAPE AGAIN          LA,S1     A1,3,A0           . GET STATUS          TNE,U     A1,4              . ABNORMAL FRAME COUNT?          J         DC195             .  YES, TERMINATE WITHOUT ERROR          LA,U      A5,BSFPKT         . POSITION BY BSF$ IF EOF FOUND          LMJ       X9,STATUS         . CHECK STATUS          J         DC196             . ERROR - TERMINATE COPY          J         DC1952            . END OF FILE, TERMINATE WITH BSF$          LA,H2     A4,3,A0           . DATA READ - GET WORD COUNT          TG,U      A4,020+1          . IS THIS SMALL ENOUGH FOR TSWAP BLK?          J         DC195             .  NO, TREAT AS EOF          LA,H2     A1,4,A0           . A1 = BUFFER POINTER          LA        A4,,A1            . FIRST WORD OF DATA          TE        A4,TSBLK          . IS THIS A TSWAP BLOCK?          J         DC195             .  NO, TREAT AS EOFDC187          DS        A2,CPGSAV         .  YES, SAVE A2,A3 OVER TSWAP          LXI,U     A0,1              . FUNCTION 1 TSWAP (REQUEST REEL ID)          LA,U      A4,'IN'           . INDICATE INPUT SWAP          LA        A5,TRKCNT         . TRACKS COPIED TO THIS POINT          LMJ       X10,TSWAP         . SWAP REELS          J         DC920             .  ERROR FROM TSWAP - ABORT          E$DIT     EPKT              . OPEN EDIT          E$MSG     REELID            . ' REEL ID = '          E$FD1     SECPKT+2          . INSERT REEL ID          P$RINT    (0104,LINE)       . PRINT REEL ID          E$DITX                      . CLOSE EDIT          SZ        SECPKT+2          . ZERO WORD 2 OF PACKET          DL        A2,CPGSAV         . RESTORE A2,A3          LA,U      A0,MRPKT          . RESTORE PACKET ADDRESS          SZ        010,A0            . ZERO WORDS TRANSFERRED          ER        IOW$              . READ 1ST BLOCK(S) OF NEXT REEL          LA,S1     A5,3,A0           . A5 = COMPLETION STATUS          LA        A4,010,A0         . A4 = FINAL WORD COUNT          ANA,U     A4,1792+CGHDLN    . DECREMENT FOR 1ST BLOCK          JP        A4,DC189          . SKIP IF AT LEAST ONE BLOCK READ          LMJ       X9,STATUS         .  IF NOT, CHECK STATUS          J         DC920             . ERROR STATUS, DO NOT ATTEMPT RECOVERY          J         STATUSX           . EOF IS TREATED AS ERROR HERE          LMJ       X1,ABORT          . NORMAL STATUS SHOULD NOT HAPPEN HEREDC189          SA        A5,CPGSTA         . SAVE STATUS          SA        A4,CPGREM         .  AND REMAINING WORD COUNT          LA,H2     A1,4,A0           . ADDRESS OF FIRST ACW          LA,H2     A1,,A1            . ADDRESS OF FIRST DATA BUFFER          ANA,U     A1,1792+CGHDLN    . DECREMENT BEFORE SAVE          SA        A1,CPGBFP         . SAVE BUFFER POINTER          JNZ       A5,DC190          . SKIP IF ERROR STATUS, NO FURTHER I/O          LA        A1,CPGACP         . CIRCULAR ACW POINTER          SSC       A1,18             . EXCHANGE ACW LIST ADDRESSES          SA        A1,CPGACP         . REPLACE POINTER WORD          SA,H2     A1,4,A0           . POINT PACKET TO OTHER ACW LIST          SZ        010,A0            . ZERO FINAL WORD COUNT          ER        IO$               . INITIATE READ INTO ALT BUFFER(S)DC190          LA        A1,CPGBFP         . POINTER TO PREVIOUS BUFFER          AA,U      A1,1792+CGHDLN    . INCREMENT TO CURRENT BUFFER          SA        A1,CPGBFP         . SAVE FOR NEXT TIME          JNZ       A11,DC191         . SKIP UNLESS 1ST BLOCK OF OUTPUT BUFFER          LA        A12,CGHDSA,A1     .  IF SO, A12 = SECTOR ADDRESS          J         DC192             . BEGIN FILL OF NEW OUTPUT BUFFERDC191          LA        A4,CGHDSA,A1      . SECTOR ADDRESS OF DATA          TE        A4,NXTSEC         . IS THIS TRACK IN SEQUENCE?          J         DC198             .  NO, THAT'S ALL FOR THIS BLOCKDC192          LA        A4,CGHDBS,A1      . BLOCK SEQUENCE NUMBER          AND,U     A4,0377777        .  INTO A5, SAVE BITS 16-0          LA        A4,CPGBLK         . EXPECTED BLOCK SEQUENCE NUMBER          SA        A5,CPGBLK         . STORE NEW EXPECTED NUMBER          TE        A4,A5             . DOES EXPECTED = ACTUAL?          LMJ       X10,BSQERR        .  NO, PRINT ERR MESSAGE AND SET FLAG          INC       CPGBLK            . INCREMENT BLOCK SEQUENCE NUMBER          NOP                         .          INC       TRKCNT            . INCREMENT TRACKS PROCESSED          NOP                         .          LXI,U     A1,1              . INCREMENT FOR BLOCK TRANSFER          LX        X9,A1             . SAVE INPUT DATA POINTER IN X9          TNZ       CGHDCS,X9         . WAS DATA CHECKSUMMED WHEN COPIED?          J         DC194             .  NO, SKIP CHECKSUM COMPUTATION          AA,U      A1,CGHDLN         . POINT A1 TO START OF DATA          LA,U      A4,0              . INIT CHECKSUM ACCUMULATOR          LR,U      R1,1792/8-1       . LOOP COUNTDC193 DO 8 ,   AA        A4,,*A1           . ADD NEXT DATA TO CHECKSUM          JGD       R1,DC193          . BACK FOR MORE          AND       A4,(0777777)      . A5 = LOWER HALF TOTAL          SSL       A4,18             . A4 = UPPER HALF          AH        A5,A4             . A5 = HALF WORD CHECKSUM          LA        A1,CPGBLK         . BLOCK SEQUENCE NUMBER          LA        A4,CGHDCS,X9      . EXPECTED CHECKSUM          TNE       A4,A5             . DOES EXPECTED = ACTUAL?          J         DC194             .  YES, SKIP          TNE       A4,(0777777)      .  NO, DOES EXPECTED = -0?          JZ        A5,DC194          .   YES, OK IF ACTUAL = 0          LMJ       X10,CKSERR        .   NO, PRINT ERR MSG AND SET FLAGDC194          AX,U      X9,CGHDLN         . POINT X9 TO START OF DATA          LR,U      R1,1792           . WORD COUNT OF ONE TRACK          BT        A2,,*X9           . MOVE DATA TO ACP INPUT BUFFER          AA,U      A11,64            . INCREMENT BLOCK SECTOR COUNT          AU        A12,A11           . A13 = ADDR OF NEXT BLOCK IN SEQ          SA        A13,NXTSEC        . SAVE FOR LATER REFERENCE          TLE       A11,SECCNT        . IS INPUT BUFFER FULL?          J         DC181             .  NO, GET NEXT BLOCK FROM TAPE          J         DC199             .  YES, QUEUE FOR OUTPUTDC195          LA,U      A5,MBPKT          . ISSUE MB$ TO REPOS AFTER TSWAP CHECKDC1952          LA        A0,A5             . BSF OR MB PACKET          DL        A4,SECPKT         . INTERNAL NAME OF INPUT TAPE          DS        A4,,A0            . INTO PACKET          ER        IOW$              . REPOSITION TAPE          LMJ       X9,STATUS         . CHECK STATUS          J         DC920             . ABORT IF ERROR          NOP                         . IGNORE EOF, CONTINUE IF NORMALDC196          LA,U      A10,0             . EOF FOUND - CLEAR DATA-REMAINING FLAG          JNZ       A11,DC199         . NORMAL EXIT IF CURR BUFF HAS DATA          TNZ       TRKCNT            . NO, HAS ANY DATA BEEN PROCESSED?          J         DC800             .  NO, EXIT WITH ZERO TRACKS COPIED          SSC       A3,18             . EXCHANGE OUTPUT BUFFER POINTER          LA        A0,PKTADR,A3      . RESTORE PREVIOUS PACKET ADDRESS          J         DC400             . WAIT FOR FINAL WRITE AND EXITDC198          SA        A4,CPGADR         . SAVE CONTINUATION DATA ADDRESSDC199          LA        A0,PKTADR,A3      . RESTORE INPUT PACKET ADDRESS          MSI,U     A11,28            . A11 = BLOCK WORD COUNT          AA,U      A11,THLEN         . PLUS ACP HEADER LENGTH          SA,H2     A11,3,A0          . STORE IN INPUT PACKET FOR LATER REF/..         WRITE PENDING IN ALTERNATE BUFFER..         WAIT FOR PREVIOUS WRITE TO COMPLETE, PROCESS TAPE SWAP.          IF EOT ENCOUNTERED ON OUTPUT TAPE.DC200          SSC       A3,18             . EXCHANGE BUFFER POINTERS          LA        A0,PKTADR,A3      . ADDRESS OF PREVIOUS I/O PACKET          TP        3,A0              .          ER        WAIT$             . WAIT FOR WRITE TO COMPLETE          LMJ       X9,STATUS         . CHECK STATUS          J         DC940             .  I/O ERROR, STOP HERE          J         $+2               .  EOT STATUS, SKIP          J         DC250             .  NORMAL STATUS, JUMP AHEAD          TNZ       FCTTAP,X5         . IS OUTPUT TAPE?          LMJ       X1,ABORT          .  NO, ABORT          DL        A4,FCTUSE,X5      . OUTPUT FILE INTERNAL NAME          DS        A4,WEFPKT         . STORE INTO WRITE-EOF PACKET          DS        A4,WTSPKT         .  AND WRITE-TSWAP PACKET          I$OW      WEFPKT            . WRITE EOF ON TAPE          LMJ       X9,STATUS         . CHECK STATUS          J         DC940             .  I/O ERROR          NOP                         .  EOT IS OK          TNZ       ARCFLG            . ARCHIVE OPERATION?          J         DC230             .  NO, SKIP          LA        A0,AHBRCT,X8      . COUNT OF ARCHIVE OUTPUT REELS          TLE,U     A0,AHBRMX         . IS REEL TABLE FULL?          J         DC230             .  NO, CONTINUE          P$RINT    (0100+ER27L,ERR27) .  YES, 'REEL TABLE OVERFLOW'          J         DC900             .  ABORT COPYDC230          I$OW      WTSPKT            . WRITE TSWAP BLOCK          LMJ       X9,STATUS         . CHECK STATUS          J         DC940             .  I/O ERROR          NOP                         .  EOT IS OK          LR,U      R1,2              . SET EOF COUNTER TO 2          LMJ       X10,WRTEOF        . WRITE 2 EOFS ON TAPE          J         DC940             .  ERROR WRITING EOFS          LA        A0,PKTADR,A3      . ORIGINAL WRITE I/O PACKET ADDRESS          LA,U      A4,'OUT'          . PRINTED BY TSWAP, INDICATE OUTPUT REEL          LA        A5,TRKOUT         . PRINTED BY TSWAP, OUTPUT TRACK COUNTER          SA        A3,SAVA34         . SAVE A3          LMJ       X10,TSWAP         . DO STANDARD TSWAP          J         DC940             . TSWAP ERROR, STOP HERE          LA        A3,SAVA34         . RESTORE A3..         WRITE HEADER AT START OF CONTINUATION REEL.          INC       M0XXRS,X7         . INCREMENT REEL SEQUENCE IN HEADER          NOP                         .          DL        A0,FCTUSE,X5      . OUTPUT USE NAME          DS        A0,IOPKT          . INTO GENERAL I/O PACKET          DS        A0,FACPKT         .  AND FITEM$ REQUEST PACKET          LA        A0,(W$,0,0)       . SETUP FOR HEADER WRITE          LA        A1,(HBSIZE,HBUFF) .          DS        A0,IOPKT+3        .          I$OW      IOPKT             . WRITE CONTINUATION HEADER          LMJ       X9,STATUS         . CHECK STATUS          J         DC940             . I/O ERROR          J         STATUSX           . EOT IS NOT NORMAL HERE, ABORT          TNZ       ARCFLG            . ARCHIVE OPERATION,          TEP,U     A15,1*/('Z'-'J')  .  OR CONSOLE MESSAGE REQUESTED?          J         $+2               .   YES, CONTINUE          J         DC250             .   NO, DON'T NEED REEL NUMBER INFO          LA        A1,AHBRCT,X8      . OUTPUT REEL COUNT          TG,U      A1,AHBRMX         . ALREADY AT MAXIMUM?          J         DC250             .  YES, SKIP          AA,U      A1,1              .  NO, INCREMENT REEL COUNT          SA        A1,AHBRCT,X8      .   AND REPLACE IN ARCHIVE HISTORY BUFF          LA        A0,(12,FACPKT)    .          ER        FITEM$            . CALL FITEM$ TO GET REEL NUMBER          LA        A0,FACPKT+11      . CURRENT REEL NUMBER          AA,U      A1,AHBRST-1,X8    . POINTER TO REEL TABLE, ADJ FOR OFFSET          SA        A0,,A1            . STORE REEL NUMBER IN NEXT OPEN SLOT..         INITIATE WRITE OF NEXT BLOCK TO DISC OR TAPE.DC250          SSC       A3,18             . EXCHANGE BUFFER POINTERS          LA        A0,PKTADR,A3      . GET ADDRESS OF NEXT OUTPUT PACKET          LA        A1,BUFADR,A3      . GET ADDRESS OF LAST INPUT BUFFER          LA,H2     A2,3,A0           . INPUT WORD COUNT          DL        A4,FCTUSE,X5      . OUTPUT FILE INTERNAL NAME          DS        A4,,A0            . STORE IN I/O PACKET          LA,U      A4,0              .          LA        A5,(W$,0,0)       .          DS        A4,2,A0           . SETUP WORDS 2,3 FOR STANDARD WRITE          TZ        FCTTAP,X5         . IS OUTPUT TAPE?          J         DC300             .  YES, SKIP          AA,U      A1,THLEN          .  NO, INCREMENT ADDRESS TO BYPASS HDR          TZ        FCTTAP,X4         . IS INPUT TAPE?          ANA,U     A2,THLEN          .  YES, DECREMENT WORD CT, ADJ FOR HDR          SA        A12,5,A0          . PUT OUTPUT SECTOR ADDRESS IN PACKET          J         DC350             . CONTINUE WITH STD OUTPUT SEQUENCEDC300          SA        A12,THSECT,A1     . STORE OUTPUT SECTOR ADDRESS IN HDR          LA        A4,BLKSEQ         .          SA        A4,THSEQ,A1       . STORE BLOCK SEQ NUMBER IN HEADER          SZ        THCKSM,A1         . ZERO CHECKSUM IN HEADER          ON        (ACPVER**1)=1     . TURN ON THIS CODE IF CONFIG IN VERS NUM          LX,U      X9,THLEN,A1       . START ADDRESS OF DATA          LXI,U     X9,1              . LOOP INCREMENT          LA,U      A4,0              . A4 WILL BE CHECKSUM ACCUMULATOR          LA        A5,A2             . A4,A5 = INPUT WORD COUNT          DSC       A4,4              . SHIFT 4 RIGHT (DIVIDE BY 16)          JZ        A4,$+2            . IS REMAINDER ZERO?          LMJ       X1,ABORT          .  NO, ABORT - SHOULD NEVER HAPPEN          LR        R1,A5             . R1 = WORD COUNT / 16          JGD       R1,$+1            . ADJUST FOR LOOPDC320 DO 16 ,  AA        A4,,*X9           . ADD NEXT 16 DATA WORDS IN BLOCK          JGD       R1,DC320          . LOOP BACK FOR REST OF DATA          AND       A4,(0777777)      . A5 = A4 LOWER          SSL       A4,18             . A4 = A4 UPPER          AH        A5,A4             . ADD, IGNORE OVERFLOW          SA        A5,THCKSM,A1      . STORE RESULT IN HEADER          OFF                         . END OF CONDITIONAL CODE          AA,U      A2,THLEN          . ADD TAPE HEADER LENGTH FOR OUTPUT          SZ        5,A0              . ZERO WORD 5 FOR TAPE WRITEDC350          SA,H1     A2,4,A0           . STORE WORD COUNT IN PACKET          SA,H2     A1,4,A0           . STORE BUFFER ADDRESS          AA        A12,SECCNT        . INCREMENT OUTPUT SECTOR ADDRESS          ER        IO$               . ISSUE I/O TO WRITE DATA BLOCK          SSC       A3,18             . EXCHANGE BUFFER POINTERS          LA        A1,TRKCNT         . INPUT TRACK COUNTER          SA        A1,TRKOUT         . STORE IN OUTPUT TRACK COUNTER          JNZ       A10,DC100         . BACK TO START IF MORE DATA TO COPY/..         COPY COMPLETE.DC400          TP        3,A0              .          ER        WAIT$             . WAIT FOR FINAL WRITE TO COMPLETE          LMJ       X9,STATUS         . CHECK STATUS          J         DC940             .  I/O ERROR          NOP                         .  EOT IS OK HERE          TNZ       FCTUNL,X4         . INPUT FROM FAS SAVE TAPE?          J         DC800             .  NO, SKIP          DL        A4,FCTUSE,X4      .  YES, GET INPUT FILENAME          DS        A4,,A0            . INTO I/O PACKET          LA,U      A4,0              .          LA        A5,(R$,0,0)       . SET UP FOR READ OPERATION          DS        A4,2,A0           .          LA        A1,SECPKT+4       . ACW FOR FAS-READ OPERATIONS          SA        A1,4,A0           .  INTO PACKET          LMJ       X11,RDSEC         . READ ONE LAST TIME - SHOULD FIND EOF          J         DC920             . ERROR DURING READ          J         DC800             . EOF - EXPECTED          P$RINT    (0100+ER29L,ERR29) . 'INPUT TAPE CONTAINS EXTRA BLOCKS'          J         DC920             .  RETURN ERROR..         NORMAL RETURN.DC800          LX        X11,DCSX11        . RESTORE RETURN ADDRESS          J         1,X11             . RETURN NORMAL COMPLETION..         ERROR RETURNS.DC900          LX        X11,DCSX11        . RESTORE RETURN          J         0,X11             . RETURN ERRORDC910          P$RINT    (0100+ER28L,ERR28) . 'PREMATURE EOF ENCOUNTERED'DC920          SP1       DSKERR            . SET DISK/INPUT ERROR FLAG          LX        X11,DCSX11        . RESTORE RETURN          J         0,X11             . RETURN ERRORDC940          TZ        FCTTAP,X5         . IS OUTPUT TAPE?          SP1       TAPERR            .  YES, SET TAPE ERROR FLAG          LX        X11,DCSX11        . RESTORE RETURN          J         0,X11             . RETURN ERROR/.. RETURN THE NEXT LOGICAL BLOCK FROM A SECURE OR FAS TAPE.RDSEC          SX        X11,RDSX11        . SAVE RETURN ADDRESS          SA        A2,RDSSA2         . SAVE A2RS050          LR        R1,SEBFCT         . GET REMAINING LOGICAL BLOCK COUNT          JGD       R1,RS100          . SKIP AHEAD IF NONZERO, DECREMENT          LMJ       X10,RDTAPE        . IF ZERO, READ THE NEXT TAPE BLOCK          J         RS900             .  ERROR READING TAPE          J         RS400             .  EOF ENCOUNTERED          LA,H2     A1,3,A0           . GET INPUT WORD COUNT          DSL       A1,36             . PREPARE FOR DIVIDE          DI,U      A1,1792+SEHDLN    . DIVIDE BY STANDARD FAS/SEC BLOCK SIZE          JZ        A2,$+2            . REMAINDER SHOULD BE ZERO          LMJ       X1,ABORT          .  IF NOT, ABORT          LR,U      R1,,A1            . LOAD LOGICAL BLOCK COUNT          LA,H2     A1,4,A0           . BEGINNING ADDRESS OF DATA          JGD       R1,RS200          . DECREMENT AND SKIP AHEAD          LMJ       X1,ABORT          .  ABORT IF INITIAL COUNT IS ZERORS100          LA        A1,SEBFAD         . GET PREVIOUS ADDRESS          AA,U      A1,1792+SEHDLN    . INCREMENT TO NEXT LOGICAL BLOCKRS200          SR        R1,SEBFCT         . SAVE REMAINING LOGICAL BLOCK COUNT          SA        A1,SEBFAD         . SAVE ADDRESS OF CURRENT LOGICAL BLK          LA        A2,SEHDW0,A1      . 1ST WORD OF HDR (BLOCK, TRACK)          TNE       A2,PRVHD0         . SAME AS PREVIOUS BLOCK?          J         RS050             .  YES, IGNORE THIS BLOCK          SA        A2,PRVHD0         .  NO, CONT - REPLACE PREV VALUE          LA        A2,RDSSA2         . RESTORE A2          LX        X11,RDSX11        . RESTORE RETURN          J         2,X11             . RETURN NORMAL STATUSRS400          LA        A2,RDSSA2         . RESTORE A2          LX        X11,RDSX11        . RESTORE RETURN          J         1,X11             . RETURN EOF STATUSRS900          LA        A2,RDSSA2         . RESTORE A2          LX        X11,RDSX11        . RESTORE RETURN          J         0,X11             . RETURN ERROR STATUS/.. READ A BLOCK FROM TAPE AND SWAP INPUT REELS IF NECESSARY.RDTAPE          SX        X10,SAVX10        . SAVE RETURN          ER        IOW$              . ISSUE IOW$ TO READ TAPE BLOCK          LMJ       X9,STATUS         . CHECK STATUS          J         RT920             .  I/O ERROR          J         $+2               .  SKIP AHEAD IF EOF          J         RT300             .  RETURN NORMAL IF NORMAL STATUS          SA        A2,SAVA2          . SAVE A2          DS        A3,SAVA34         . SAVE A3,A4          SZ,S1     3,A0              . ZERO STATUS          ER        IOW$              . READ TAPE AGAIN          LMJ       X9,STATUS         . CHECK STATUS          J         RT920             .  I/O ERROR          J         RT400             .  DOUBLE EOF (RETURN END OF FILE)          LA,H2     A4,3,A0           .  NORMAL: GET INPUT WORD COUNT          TE,U      A4,016            . IS THIS THE SIZE OF A TSWAP BLOCK?          J         RT400             .  NO, RETURN EOF          LA,H2     A1,4,A0           . GET ADDRESS OF DATA          DL        A4,,A1            . LOAD FIRST TWO WORDS          DTE       A4,($CAS('FAS CONT')) . IS THIS A FAS CONTINUATION?          TNE       A4,TSBLK          .   OR A NORMAL, NON-FAS CONTINUATION?          J         $+2               .    YES, SKIP          J         RT400             .    NO, RETURN EOF          TNZ       FCTUNL,X4         . READING FAS/SEC TAPES FOR UNLD FILE?          TZ        FCTRSA,X4         .  OR IS THIS A RESTORE ARCHIVE?          J         $+2               .   YES, PROCEED          J         RT100             .   NO, SKIP, DO STANDARD TSWAP          LA        A1,UNLRPT         . GET UNLOADED REEL POINTER          AA,U      A1,1              . INCREMENT          TLE       A1,UNLRCT         . MORE REEL NUMBERS IN TABLE?          J         $+2               .  YES, SKIP          LMJ       X1,ABORT          .  NO, ABORT          SA        A1,UNLRPT         . SAVE UPDATED REEL POINTER          LA        A1,BURTBL,A1      . GET NEXT REEL ID          SA        A1,2,A0           . STORE IN TSWAP PACKET          LXI,U     A0,2              . SET MODE 2 - SWAP TO SPECIFIC REELRT100          LA,U      A4,'IN'           . PRINT 'INPUT REEL SWAPPED'          LA        A5,TRKCNT         . PRINT CURRENT TRACK COUNT          LMJ       X10,TSWAP         . SWAP AND PRINT          J         RT920             . ERROR IN TSWAP, STOP HERE          TNZ       FCTUNL,X4         . IS INPUT FILE UNLOADED (FAS/SEC INP)?          J         RT150             .  NO, SKIP          LMJ       X10,SECRDH        .  YES, READ TAPE HEADER          J         RT920             . ERROR READING HEADER          LMJ       X10,SECRDF        . READ FILE HEADER          J         RT920             . ERROR READING FILE HEADER          J         RT200             . HEADERS ARE GOOD, READ FIRST BLOCKRT150          LA        A0,M0XXVN,X7      . ACP VERSION THAT CREATED INPUT TAPE          TLE,U     A0,01000          . AT VERSION 010 OR HIGHER?          J         RT200             .  NO, NO CONTINUATION HEADER ON REEL          DL        A0,FCTUSE,X4      .  YES, SETUP FOR HEADER READ          DS        A0,IOPKT          . STORE INPUT FILENAME IN PACKET          LA        A0,(R$,0,0)       .          LA        A1,(HBSIZE,HBUFF2) .          DS        A0,IOPKT+3        . READ INTO HBUFF2          I$OW      IOPKT             . READ HEADER          LMJ       X9,STATUS         . CHECK STATUS          J         RT920             . I/O ERROR          J         STATUSX           . EOF IS NOT NORMAL HERE, ABORT          LA,U      A2,HBUFF2         . BUFFER ADDRESS IN A2          LA        A0,M0XXLB,A2      . SOFTWARE LABEL          LA        A1,M0XXRS,X7      . SEQUENCE OF PREVIOUS REEL          AA,U      A1,1              . INCREMENT          TNE       A0,('*ACSV*')     . IS LABEL CORRECT,          TE        A1,M0XXRS,A2      .  AND IS SEQUENCE CORRECT?          J         RT900             .   NO, ERROR          SA        A1,M0XXRS,X7      .   YES, SAVE NEW SEQUENCE          DL        A0,M0QUAL,X7      . QUALIFIER          DTE       A0,M0QUAL,A2      . SAME AS CONTINUATION?          J         RT900             .  NO, ERROR          DL        A0,M0FILE,X7      . FILENAME          DTE       A0,M0FILE,A2      . SAME AS CONTINUATION?          J         RT900             .  NO, ERRORRT200          LA        A2,SAVA2          . RESTORE A2          DL        A3,SAVA34         . RESTORE A3,A4          LA        A0,PKTADR,A3      . RESTORE PACKET ADDRESS          SZ        2,A0              . ZERO WORD 2 OF PACKET          ER        IOW$              . ISSUE IOW$ TO READ DATA BLOCK          LMJ       X9,STATUS         . CHECK STATUS          J         RT920             .  I/O ERROR          J         STATUSX           .  EOF IS NOT OK AFTER TSWAP!RT300          LX        X10,SAVX10        . RESTORE RETURN          J         2,X10             . RETURN NORMAL STATUSRT400          LA        A2,SAVA2          . RESTORE A2-A4          DL        A3,SAVA34         .          LX        X10,SAVX10        . RESTORE RETURN          J         1,X10             . RETURN EOF STATUSRT900          P$RINT    (0100+ER22L,ERR22) . 'INVALID CONTINUATION HEADER'RT920          LX        X10,SAVX10        . RESTORE RETURN          J         0,X10             . RETURN ERROR STATUS/.. SWAP TAPE REELS AND PRINT MESSAGE.TSWAP          ER        TSWAP$            . PERFORM THE TSWAP          JN        A0,TS100          . SKIP IF ERROR          E$DIT     EPKT              . OPEN EDIT          E$FD1     A4                . 'IN' OR 'OUT'          E$MSG     TSWMSG            . 'PUT REEL SWAPPED - TRACK COUNT = '          E$DECV    A5                . CURRENT TRACK COUNT          P$RINT    (0114,LINE)       . PRINT INFO LINE          E$DITX                      . CLOSE EDIT          J         1,X10             . RETURN NORMALTS100          SA        A0,SAVA0          . SAVE ERROR STATUS          E$DIT     EPKT              . OPEN EDIT          E$MSG     TSWMSG1           . '*** '          E$FD1     A4                . 'IN' OR 'OUT'          E$MSGR                      . 'PUT REEL TSWAP$ ERROR '          E$DECV    SAVA0,,S2         . ERROR STATUS          E$MSGR                      . ' - TRACK COUNT = '          E$DECV    A5                . CURRENT TRACK COUNT          E$MSGR                      . ' ***'          P$RINT    (0116,LINE)       . PRINT ERROR MESSAGE          E$DITX                      .          J         0,X10             . RETURN ERROR.. WRITE EOF MARK(S) TO TAPE - R1 = COUNT.WRTEOF          DL        A0,FCTUSE,X5      . OUTPUT FILE INTERNAL NAME          DS        A0,WEFPKT         . INTO WRITE-EOF PACKET          JGD       R1,$+1            . DECREMENT FOR LOOPWE100          I$OW      WEFPKT            . WRITE EOF          LMJ       X9,STATUS         . CHECK STATUS          J         WE900             .  I/O ERROR          NOP                         .  EOT STATUS IS OK HERE          JGD       R1,WE100          . LOOP BACK IF SECOND EOF REQUIRED          J         1,X10             . RETURN NORMALWE900          J         0,X10             . RETURN ERROR/.. PRINT AND FLAG A BLOCK SEQUENCE ERROR.BSQERR          DS        A0,SAVE4          . SAVE A0-A3          DS        A2,SAVE4+2        .          E$DIT     EPKT              . OPEN EDIT          E$MSG     BSQMSG            . ERROR MESSAGE          E$DECV    A4                . EXPECTED SEQUENCE          E$MSGR                      .          E$DECV    A5                . RECEIVED SEQUENCE          E$MSGR                      .          TNZ       FCTUNL,X4         . UNLOADED INPUT FILE?          J         BS100             .  NO, SKIP          LA        A0,SEBFAD         .  YES, A0 = BUFFER POINTER          LA        A0,SEHDTR,A0      . TRACK NUMBER FROM FAS HEADER          J         BS120             .BS100          TNZ       FCTCPG,X4         . IS INPUT IN COPY,G FORMAT?          J         BS110             .  NO, SKIP          LA        A0,SAVE4+1        .  YES, A0 = BUFFER POINTER          LA        A0,CGHDSA,A0      . SECTOR NUMBER FROM COPY,G HEADER          SSL       A0,6              . CONVERT TO TRACK          J         BS120             .BS110          LA        A0,SAVE4+2        . A0 = BUFFER POINTER FOR ACP TAPE INPUT          LA        A0,THSECT,A0      . SECTOR NUMBER FROM ACP HEADER          SSL       A0,6              . CONVERT TO TRACKBS120          E$DECV                      . INSERT TRACK ADDRESS IN MESSAGE          E$MSGR                      .          P$RINT    (0116,LINE)       . PRINT MESSAGE          E$DITX                      .          LA        A0,('BLKSEQ')     . CONSOLE MESSAGE ERROR CODE          LMJ       X11,QRYCNS        . ASK OPERATOR IF COPY,G AND 'Q' SET          SP1       DCEFLG            . SET ERROR FLAG IF 'Q' NOT SET          DL        A0,SAVE4          . RESTORE A0-A3          DL        A2,SAVE4+2        .          J         0,X10             . RETURN/.. PRINT AND FLAG A CHECKSUM ERROR.CKSERR          DS        A0,SAVE4          . SAVE A0-A3          DS        A2,SAVE4+2        .          E$DIT     EPKT              . OPEN EDIT          E$MSG     CKSMSG            . ERROR MESSAGE          E$OCTF    12,A4             . EXPECTED CHECKSUM          E$MSGR                      .          E$OCTF    12,A5             . RECEIVED CHECKSUM          E$MSGR                      .          E$DECV    SAVE4+1           . BLOCK SEQUENCE NUMBER          E$MSGR                      .          TNZ       FCTUNL,X4         . UNLOADED INPUT FILE?          J         CK100             .  NO, SKIP          LA        A0,SEBFAD         .  YES, A0 = BUFFER POINTER          LA        A0,SEHDTR,A0      . TRACK NUMBER FROM FAS HEADER          J         CK120             .CK100          TNZ       FCTCPG,X4         . IS INPUT IN COPY,G FORMAT?          J         CK110             .  NO, SKIP          LA        A0,CGHDSA,X9      . SECTOR NUMBER FROM COPY,G HEADER          SSL       A0,6              . CONVERT TO TRACK          J         CK120             .CK110          LA        A0,SAVE4+2        . A0 = BUFFER POINTER FOR ACP TAPE INPUT          LA        A0,THSECT,A0      . SECTOR NUMBER FROM ACP HEADER          SSL       A0,6              . CONVERT TO TRACKCK120          E$DECV                      . INSERT TRACK ADDRESS IN MESSAGE          E$MSGR                      .          P$RINT    (0116,LINE)       . PRINT MESSAGE          E$DITX                      .          LA        A0,('CHKSUM')     . CONSOLE MESSAGE ERROR CODE          LMJ       X11,QRYCNS        . ASK OPERATOR IF COPY,G AND 'Q' SET          SP1       DCEFLG            . SET ERROR FLAG IF 'Q' NOT SET          DL        A0,SAVE4          . RESTORE A0-A3          DL        A2,SAVE4+2        .          J         0,X10             . RETURN/..         INFORM OPERATOR OF STATUS, ASK WHETHER OR NOT TO PROCEED.         IF COPY,G INPUT AND 'Q' OPTION IS SET.QRYCNS          TZ        FCTCPG,X4         . IS INPUT A COPY,G TAPE,          TOP,U     A15,1*/('Z'-'Q')  .  AND IS 'Q' OPTION SET?          J         0,X11             .  NO, RETURN ERROR EXIT          SX        X11,QCSX11        .  YES, SAVE RETURN          SA        A0,QCTYPE         . SAVE ERROR CODE          E$DIT     EPKT              . OPEN EDIT          E$FD1     QCTYPE            . INSERT ERROR CODE          E$MSG     QCMSG             . ' ERR ON FILE: '          E$FD2     FCTQUAL,X5        . OUTPUT QUALIFIER          E$MSGR                      . *          E$FD2     FCTFILE,X5        . OUTPUT FILENAME          E$MSGR                      . ' - CONTINUE?  AE'          E$COLN                      . A0 = COLUMN NUMBER          SA,H1     A0,COMPKT+1       . SAVE IMAGE LENGTH FOR COM$ REQ          E$DITX                      .          LA        A0,(1,QCREP)      . TYPE AND READ INPUT PARAMETER          SA        A0,COMPKT+2       . SAVE IN COM$ PACKETQC100          SZ        QCREP             . ZERO OPERATOR REPLY          C$OM      COMPKT            . ASK OPERATOR WHAT TO DO          LA,S1     A0,QCREP          . GET LETTER INPUT          TNE,U     A0,'E'            . ERROR THE RUN?          J         QC200             .  YES, SKIP          TE,U      A0,'A'            . CONTINUE PROCESSING?          J         QC100             .  NO, ASK AGAIN          SP1       QCEFLG            .  YES, SET CONTINUE-ERROR FLAG          LX        X11,QCSX11        . RESTORE RETURN          J         1,X11             . RETURN CONTINUE-PROCESSINGQC200          LA        A0,(0100+ER41L,ERR41) . 'COPY ABORTED BY OPERATOR'          J         ERRPR1            . PRINT MESSAGE AND ERROR EXIT/.. I/O COMPLETION AND STATUS CHECK ROUTINE.. A0 = I/O PACKET ADDR.. RETURNS 1,X9 IF EOF MARK ON A READ OR EOT ON A WRITE. RETURNS 2,X9 IF STATUS IS ZERO. IF STATUS OTHER, PRINTS AN ERROR MESSAGE AND RETURNS 0,X9.   (X11 IS SAVED AND RESTORED).STATUS          TNZ,S1    3,A0              . IS STATUS ZERO?          J         2,X9              .  YES, RETURN NORMAL STATUS          LA,S2     A1,3,A0           . PUT FUNCTION CODE IN A1          TE,U      A1,R$             .          TNE,U     A1,MR$            .          J         ST030             . SKIP IF READ OR MULTI-READ          TNE,U     A1,REW$           .          J         ST030             . SKIP IF REWIND          TE,U      A1,FSF$           .          TNE,U     A1,BSF$           .          J         $+2               . SKIP IF FORWARD OR BACKWARD SPACE          J         ST050             . GO CHECK FOR OUTPUT FUNCTIONSST030          LA,S1     A1,3,A0           . GET STATUS IN A1          TNE,U     A1,1              . EOF STATUS?          J         1,X9              .  YES, RETURN EOF          J         STATUSX           .  NO, OTHER ERRORST050          TE,U      A1,W$             .          TNE,U     A1,WEF$           .          J         $+2               . SKIP IF WRITE OR WRITE-EOF          J         STATUSX           .  OTHERWISE, TREAT AS NONSTANDARD ERROR          LA,S1     A1,3,A0           . GET STATUS CODE          TNE,U     A1,2              . EOT STATUS?          J         1,X9              .  YES, RETURN EOT..         ERROR STATUS OR JUMP FROM CODE THAT DOES NOT HANDLE EOF/EOT.STATUSX          SX        X4,SAVX4          . SAVE X4          SX        X8,STAX8          .  AND X8          SX        X11,STAX11        .  AND X11          SA        A3,STAA3          .  AND A3          LX,U      X8,,A0            . X8 = PACKET ADDRESS          SZ        AFERR             . CLEAR ARCHIVE FILE ERROR FLAG          DL        A0,,X8            . OFFENDING INTERNAL FILENAME          LX,U      X4,FCTTBL         . ADDR OF INPUT FCT          DTE       A0,FCTUSE,X4      . IS ERROR ON INPUT FILE?          J         $+2               .  NO          J         ST100             .  YES, SKIP          AX,U      X4,FCTLEN         . ADDR OF OUTPUT FCT          DTE       A0,FCTUSE,X4      . IS ERROR ON OUTPUT FILE?          J         $+2               .  NO          J         ST100             .  YES, SKIP          DTE       A0,AHBFPK         . IS ERROR ON ARCHIVE HISTORY FILE?          LMJ       X1,ABORT          .  NO, UNRECOGNIZED NAME IN IOPKT, ABORT          SP1       AFERR             .  YES, SET AHF ERROR FLAGST100          E$DIT     EPKT              . OPEN EDIT          E$MSG     IOERRM            . 'I/O STATUS '          E$OCTV    3,X8,S1           . EDIT STATUS CODE          E$MSGR                      . ' ON '          LA,S2     A1,3,X8           . GET FUNCT CODE          LA        A0,('??????')     . START WITH UNKNOWN MNEMONIC          TE,U      A1,R$             . LOAD APPROPRIATE CHARACTER MNEMONIC          TNE,U     A1,MR$            .  BASED ON INTERNAL CODE          LA        A0,('READ')       .          TNE,U     A1,W$             .          LA        A0,('WRITE')      .          TNE,U     A1,EACQ$          .          LA        A0,('EACQ$')      .          TNE,U     A1,WEF$           .          LA        A0,('WEF$  ')     .          TNE,U     A1,REW$           .          LA        A0,('REW$  ')     .          TNE,U     A1,FSF$           .          LA        A0,('FSF$  ')     .          TNE,U     A1,BSF$           .          LA        A0,('BSF$  ')     .          TNE,U     A1,MB$            .          LA,U      A0,'MB$'          .          TNE,U     A1,MF$            .          LA,U      A0,'MF$'          .          TNE,U     A1,RDL$           .          LA        A0,('RD-LOK')     .          TNE,U     A1,FSAFE$         .          LA        A0,('FSAFE$')     .          E$FD1                       . EDIT FUNCTION MNEMONIC          E$MSGR                      . ' OF '          TZ        AFERR             . ERROR ON ARCHIVE HISTORY FILE?          J         ST200             .  YES, SKIP          TNZ       FCTUNL,X4         . UNLOADED FILE, OR          TZ        FCTRSA,X4         .  RESTORE ARCHIVE?          J         ST200             .   YES, SKIP          E$FD2     FCTQUAL,X4        .   NO, EDIT QUALIFIER          E$CHAR    '*'               .          E$FD2     FCTFILE,X4        . EDIT FILENAME          E$CHAR    '('               .          E$DECV    FCTCYC,X4         . EDIT CYCLE          E$CHAR    ')'               .          J         ST220             .ST200          E$FD2     0,X8              . EDIT INTERNAL FILENAME ONLYST220          TNZ       ARCFLG            . TEST FOR ARCHIVE OPERATION          J         ST240             .  IF NOT, SKIP          E$MSGR                      .  IF SO, APPEND LINE OF ASTERISKSST240          P$RINT    (0116,LINE)       . PRINT ERROR MESSAGE          E$CLEAR                     . RESTART EDIT          E$MSG     IOERM2            . 'SECTOR: '          E$DECV    5,X8              . EDIT SECTOR ADDRESS          E$MSGR                      . 'WORD COUNT: '          E$DECV    4,X8,H1           . EDIT REQUESTED WORD COUNT          E$DITX                      .          P$RINT    (0114,LINE)       . PRINT SECOND ERROR MESSAGE          LA,S1     A0,3,X8           . GET STATUS AGAIN          TNE,U     A0,013            . DOWNED UNIT?          J         ABORT1            .  YES, ABORT RIGHT NOW          TNZ       AFERR             . TEST FOR ERROR ON READ OF          TNZ       FCTUNL,X4         .  INPUT TAPE FROM UNLOADED FILE          J         ST300             .   NO, SKIP          DL        A0,FCTUSE,X4      .   YES, GET INTERNAL FILE NAME          DS        A0,STAFAC         . PUT IN STATUS-FITEM$ PACKET          LA        A0,(12,STAFAC)    .          ER        FITEM$            . DO 12-WORD FITEM$ REQUEST ON THIS GUY          LA        A0,STAFAC+11      . PICK UP REEL-ID          TE        A0,ERRTAP         . HAVE WE HAD PREV ERRORS ON THIS TAPE?          SZ        ERRTPC            .  NO, CLEAR TAPE ERROR COUNT          SA        A0,ERRTAP         . SAVE ERRORING REEL-ID          INC       ERRTPC            . INCREMENT ERROR COUNT          NOP                         .ST300          LX        X4,SAVX4          . RESTORE REGISTERS          LX        X8,STAX8          .          LX        X11,STAX11        .          LA        A3,STAA3          .          J         0,X9              . RETURN ERROR STATUS/..         READ AND VALIDATE A SECURE/FAS TAPE HEADER..         RETURNS 0,X10 IF VERIFICATION FAILURE.                 1,X10 IF VALID HEADER.SECRDH          I$OW      SECPKT            . READ THE FIRST BLOCK          LMJ       X9,STATUS         . CHECK STATUS          J         SE990             .  I/O ERROR          J         STATUSX           .  EOF NOT ALLOWED HERE          LA,H2     A0,SECPKT+4       . ADDRESS OF DATA BUFFER          DL        A0,,A0            . GET FIRST TWO WORDS          LA,H2     A2,SECPKT+3       . WORDS READ          TE,U      A2,64             . IS THIS CORRECT COUNT FOR SECURE?          J         SE100             .  NO, CHECK FOR FAS          DTE       A0,('SECURE*TAPE*') .  YES, VERIFY BLOCK HEADER          J         SE900             . THIS IS NOT A SECURE HEADER          J         SE800             . THIS IS A SECURE HEADER - RET OK STATUSSE100          TE,U      A2,14             . IS THIS CORRECT COUNT FOR FAS?          J         SE900             .  NO, HEADER ERROR          DTE       A0,($CAS('FAS TAPE')) .  YES, VERIFY BLOCK HEADER          J         SE900             . THIS IS NOT A FAS HEADERSE800          J         1,X10             . RETURN HEADER VERIFICATION SUCCESSFULSE900          P$RINT    (0100+ER9L,ERR9)  . 'INVALID HEADER BLOCK'          LA,U      A2,2              . SET ERROR COUNT TO 2, SO THAT          LMJ       X9,MRKBAD         .   THIS TAPE WILL NOT BE READ AGAINSE990          J         0,X10             . RETURN ERROR STATUS/..         READ AND VALIDATE A SECURE/FAS FILE HEADER BLOCK..         RETURNS 0,X10 IF VERIFICATION FAILURE.                 1,X10 IF VALID FILE HEADER.SECRDF          I$OW      SECPKT            . READ FIRST BLOCK OF FILE          LMJ       X9,STATUS         . CHECK STATUS          J         SH990             .  I/O ERROR          J         STATUSX           .  EOF IS ABNORMAL HERE          LA,H2     A5,SECPKT+3       . COUNT OF WORDS READ          ANA,U     A5,8              . SUBTRACT 8 FOR HEADER          DSL       A5,36             . PREPARE FOR DIVIDE          DI,U      A5,28             . COMPUTE SECTOR COUNT OF BUFFER          JNZ       A6,SH900          . ERROR IF NOT EVENLY DIV BY 28          ANA,U     A5,1              . DECREMENT FOR LOOP          JN        A5,SH900          . ERROR IF NO DATA IN BUFFER          LX,H2     X6,SECPKT+4       . ADDRESS OF DATA BUFFER          DL        A0,,X6            . GET FIRST TWO WORDS OF HEADER          DTE       A0,('SECURE*FILE*'). IS THIS A SECURE HEADER?          J         SH050             .  NO, CHECK FOR FAS          SZ        FASIN             .  YES, CLEAR FAS FLAG          J         SH080             . CONTINUESH050          DTE       A0,($CAS('FAS FILE')) . IS THIS A FAS HEADER?          J         SH900             .   NO, ERROR          SP1       FASIN             .   YES, SET FAS FLAG          LA,H2     A0,5,X6           . GET TRACKS PER BLOCK USED FOR FAS SAVE          TG,U      A0,1              .          TG,U      A0,16+1           .          J         SH900             . ERROR IF 1 > TRACKS > 16          SA        A0,FASBCT         . SAVE FAS BLOCK COUNTSH080          ANX,U     X6,28-8           . SUBT 28 FOR INDEX, ADD 8 TO SKIP HDR          LXI,U     X6,28             . LOOP INCREMENT          LA,U      A3,0              . INIT ADDRESS OF LEAD ITEMSH100          LA,S1     A0,28,*X6         . GET DIR BITS FROM NEXT ITEM          AND,U     A0,034            . WE WANT ONLY BITS 34-32          TE,U      A1,010            . IS THIS A LEAD ITEM?          J         SH140             .  NO, CONTINUE          JNZ       A3,SH900          .  YES, ERROR IF LEAD ITEM ALREADY FOUND          LA,U      A3,,X6            . LOAD LEAD ITEM ADDRESS          J         SH150             . CONTINUE LOOPSH140          TNE,U     A1,020            . IS THIS A MAIN ITEM?          J         SH200             .  YESSH150          JGD       A5,SH100          . LOOP BACK FOR MORE          J         SH900             . ERROR IF MAIN, LEAD NOT FOUNDSH200          JZ        A3,SH900          . ERROR IF LEAD ITEM NOT FOUND BEF MAIN          DL        A0,M0QUAL,X6      . GET QUALIFIER          DTE       A0,M0QUAL,X7      . IS THIS EXPECTED QUAL?          J         SH920             .  NO, ERROR          DL        A0,M0FILE,X6      . GET FILENAME          DTE       A0,M0FILE,X7      . IS THIS EXPECTED FILENAME?          J         SH920             .  NO, ERROR          LA        A1,M0CYCW,X6      . GET CYCLE WORD          AND,U     A1,07777          . ONLY WANT BITS 11-0          LA        A0,M0CYCW,X7      . SAME FOR EXPECTED CYCLE          AND,U     A0,07777          .          TE        A1,A2             . IS THIS EXPECTED CYCLE?          J         SH920             .  NO, ERROR          J         1,X10             . RETURN GOOD STATUSSH900          P$RINT    (0100+ER7L,ERR7)  . 'INVALID FILE HEADER BLOCK'          LA,U      A2,1              .          LMJ       X9,MRKBAD         . MARK INPUT TAPE WITH 1 ERROR          J         SH990             . RETURN ERROR STATUSSH920          P$RINT    (0100+ER8L,ERR8)  . 'FILENAME NOT EQUAL TO EXPECTED'SH990          J         0,X10             . RETURN ERROR..         MARK THE CURRENT INPUT REEL IN ERROR.MRKBAD          DL        A0,SECPKT         . INTERNAL NAME OF INPUT TAPE          DS        A0,STAFAC         . INTO FITEM$ PACKET          LA        A0,(12,STAFAC)    .          ER        FITEM$            . DO FITEM$ REQ FOR INPUT TAPE          LA        A0,STAFAC+11      . GET REEL NUMBER          TE        A0,ERRTAP         . SAME TAPE NUMBER AS BEFORE?          SZ        ERRTPC            .  NO, ZERO ERROR COUNTER          SA        A0,ERRTAP         . SAVE TAPE NUMBER          AA        A2,ERRTPC         . UPDATE ERROR COUNT          SA        A2,ERRTPC         .          J         0,X9              . RETURN/.. OPEN A FILE FOR INPUT OR OUTPUT.. A0 = FILE NUMBER (1 OR 2). A14 = FILE CONTROL BITS.       BIT 0=0 INPUT FILE.             1 OUTPUT FILE.       BIT 1=1 REQUIRES EXCLUSIVE ASSIGN (SAVE INPUT).       BIT 2=1 SPECIAL SCRATCH FILE (MOVE OUTPUT PASS 1, INPUT PASS 2).       BIT 3=1 FILE MAY BE TAPE.       BIT 4=1 FILE MUST BE TAPE (ARCHIVE OUTPUT).       BIT 5=1 ARCHIVE RESTORE - READ INFOR AND ASSIGN IBACKUP ONLY.       BIT 6=1 SPECIFY DIRECTORY-ID WHEN FORMING @USE FOR FILE.OPNFILE          SX        X11,SAVX11        . SAVE RETURN          SA        A0,FILNUM         . SAVE FILE NUMBER          ANU,U     A0,1              . MAKE 0-RELATIVE IN A1          TG,U      A1,0              .          TG,U      A1,MAXFIL         .          LMJ       X1,ABORT          . ERROR IF 1 > NUMBER > MAX          MSI,U     A1,FCTLEN         . MULT BY LENGTH OF FCT          LX,U      X4,FCTTBL,A1      . LOAD APPROPRIATE FCT ADDR FOR THIS FILE          SZ        FCTFLGS,X4        . CLEAR FCT-FLAGS          SZ        FCTFL2,X4         . CLEAR ADDITIONAL FLAGS          SZ        CSFSTAT           . CLEAR CSF$ STATUS          SA        A0,SPCNUM         . SAVE SPEC NUMBER FOR POSSIBLE ERR PRT          TOP,U     A14,1*/2          . SPECIAL SCRATCH FILE?          J         FL100             .  NO, SKIP          DL        A0,('ACP$SCRATCH$') .  YES, USE EXT NAME FOR ALL I/O          DS        A0,FCTUSE,X4      . SAVE IN PACKET          J         FL110             . SKIP AHEAD A LITTLEFL100          LMJ       X11,SELT$         . SET UP ELT$ FOR THIS SPECIFICATION          J         FL900             . ERROR IN INFOR - STOP HERE          TNZ,S2    ELT$              . FILENAME SPECIFIED?          J         FL920             .  NO, ERROR          TNZ,S1    ELT$+1            . ELEMENT NAME OR          TZ,S2     ELT$+1            .  VERSION NAME SPECIFIED?          J         FL930             .   YES, ERROR          TOP,U     A14,1*/5          . ARCHIVE RESTORE?          J         FL102             .  NO, SKIP AHEAD          TZ,S1     ELT$              . IF RESTORE THEN QUALIFIER AND CYCLE          TNZ,S3    ELT$              .  MUST ALSO BE PRESENT          J         FL935             .   OTHERWISE ERROR          LA        A0,ELT$+6         . PICK UP FILE CYCLE          LA,U      A1,0              . ONLY USE ONE WORD          LMJ       X11,FDTOBN        . CONVERT TO BINARY          J         FL935             . CONVERSION ERROR          SA        A4,ELT$+6         . BACK INTO ELT$ BUFFER          DL        A0,ELT$+2         . INPUT QUALIFIER          DTE       A0,AHQUAL,X8      . COMPARE W/QUAL IN ARCHIST$          J         FL936             .  ERROR IF NOT EQUAL          DL        A0,ELT$+4         . INPUT FILENAME          LA        A2,ELT$+6         . INPUT CYCLE (BINARY)          TNE       A2,AHCYCL,X8      . COMPARE W/CYCLE IN ARCHIST$          DTE       A0,AHFILE,X8      .  AND FILENAME IN ARCHIST$          J         FL936             .   ERROR IF EITHER NOT THE SAME          SP1       FCTTAP,X4         . SET TAPE FLAG FOR RESTORE          SP1       FCTRSA,X4         . SET ARCHIVE-RESTORE FLAG          LA        A0,AHFLGS,X8      . FLAGS FROM HISTORY ENTRY          LA,U      A2,0              . ASSUME REEL TAPE (A2 = 0)          TEP,U     A0,AHFHIC         . CARTRIDGE TAPE?          LA,U      A2,1              . YES, A2 = 1 (CARTRIDGE)          J         FL150             . SKIP MOST ADDTL CHECKING ON INPUT TAPEFL102          DL        A0,('ACP$FILE$$$A'-1) . GENERAL FORMAT OF INTERNAL NAME          AA        A1,FILNUM         . FORM SPECIFIC NAME BASED ON FILE NBR          DS        A0,FCTUSE,X4      . STORE IN FCT          TEP,U     A14,1*/6          . SPECIFY DIRECTORY-ID,          TNZ       MHFCFG            .  AND MHFS CONFIGURED?          J         $+2               .   NO, STANDARD DUSE$          J         FL103             .   YES, SPECIAL REQUEST          LMJ       X11,DUSE$         . ATTACH USE NAME TO NON-SPEC EXT FILE          J         FL109             .FL103          E$DIT     EPKT              . OPEN EDIT          E$COPY    5,('@USE  ')      . FORM @USE IMAGE FOR CSF$          E$FD2     FCTUSE,X4         . INTERNAL NAME          E$CHAR    ','               .          LA,U      A0,'STD'          . ASSUME STD DIRECTORY          TEP,U     A15,1*/('Z'-'U')  .  UNLESS 'U' OPTION SET          LA        A0,('SHARED')     .   IN WHICH CASE USE SHARED DIR          E$FD1                       . EDIT DIR-ID INTO IMAGE          E$CHAR    '#'               . REQUIRED SEPARATOR          TZ,S1     ELT$              . WAS QUALIFIER GIVEN?          J         FL104             .  YES, SKIP          TZ,S6     ELT$              .  NO, IMPLIED-QUAL SET?          J         FL105             .   YES          J         FL106             .   NOFL104          E$FD2     ELT$+2            . EDIT QUALIFIER INTO IMAGEFL105          E$CHAR    '*'               .FL106          E$FD2     ELT$+4            . EDIT FILENAME INTO IMAGE          TNZ,S3    ELT$              . WAS CYCLE GIVEN?          J         FL108             .  NO, SKIP          E$CHAR    '('               .  YES          E$FD1     ELT$+6            . EDIT CYCLE NUMBER INTO IMAGE          E$CHAR    ')'               .FL108          E$COPY    3,(' .    ')      . IMAGE TERMINATOR          LA,U      A0,LINE           .          ER        CSF$              . ATTACH USE NAME W/SPECIFIC DIR-IDFL109          LA,U      A0,1              . SET FREE STATUS TO 1          SA        A0,FCTSTAT,X4     .  (WILL CAUSE @FREE,A <FILE>)          DL        A0,FCTUSE,X4      . PICK UP GENERATED NAME FOR FURTHER USEFL110          DS        A0,FCTUEX,X4      . USE NAME FOR EXTERNAL FILE          DS        A0,FACPKT         . FITEM$ PACKET          DS        A0,ASG+2          . CSF-SUBMITTED @ASG          DS        A0,IOPKT          . GENERAL I/O PACKET          LA        A0,(12,FACPKT)    .          ER        FITEM$            . PICK UP INFO ON FILE          LA,S1     A0,FACPKT+6       . EQUIPMENT CODE          JZ        A0,FL112          . SKIP IF FILE IS NOT ASSIGNED          LA,S2     A1,FACPKT+6       . GET ASG MODE          TEP,U     A1,1*/5           . EXCLUSIVELY ASSIGNED?          J         FL138             .  YES, SKIP          TOP,U     A14,1*/0          . OUTPUT FILE,          TEP,U     A14,1*/1          .  OR INPUT WITH X-USE REQUIRED?          J         $+2               .   YES, CONTINUE          J         FL140             .   NO, SKIP          LA,U      A0,'X  '          . ASSIGNMENT OPTION          LA,U      A1,2              . SET UP FCTSTAT FOR @FREE,AX          TEP,U     A14,1*/2          . SPECIAL SCRATCH FILE?          LA,U      A1,0              .  YES, DO NOT FREE AT TERMINATION          J         FL130             . GO ASSIGN FILE EXCLUSIVELYFL112          TOP,U     A14,1*/2          . SPECIAL SCRATCH FILE?          J         FL118             .  NO, SKIP          LA,U      A0,ASGSCR         . NORMAL ASSIGN (ON FIXED)          LA        A1,(0100+ASL,ASGSCR) . CONTROL WORD TO PRINT IMAGE          ER        CSF$              . ISSUE @ASG,T ACP$SCRATCH$          JN        A0,FL915          . ERROR IF ASSIGN WAS NOT ACCEPTED          SA        A0,CSFSTAT        . KEEP CSF$ STATUS CODE          P$RINT    (0100+SAL,SCRASG) . '*TEMP SCRATCH FILE ASSIGNED:'          LA        A0,A1             . CONTROL WORD FOR ASG IMAGE          ER        PRINT$            . PRINT ACTUAL @ASG IMAGE          SP1       AUTOSCR           . SET AUTO-ASG FOR SCRATCH FILE          J         FL135             . GO GET FITEM$ INFO AGAINFL118          LA,U      A1,3              . THIS IS CODE FOR @FREE,AR          TEP,U     A14,1*/1          . IS X-USE REQUIRED?          J         FL120             .  YES          LA,U      A0,'   '          .  NO, LOAD DEF ASG OPTS (OTHER THAN 'A')          TEP,U     A14,1*/0          . OUTPUT FILE?          LA,U      A0,'X  '          .  YES, X-USE REQUIRED          J         FL130             . GO ISSUE @ASGFL120          LA,U      A0,'X  '          . LOAD X-OPTION          TNZ       DEMAND            . DEMAND RUN?          LA,U      A0,'XZ '          .  NO, NO WAITING FOR FILE          TZ        ARCFLG            . ARCHIVE OPERATION?          LA,U      A0,'XZQ'          .  YES, DON'T CAUSE RELOAD OF FILEFL130          SA,H1     A0,ASG+1          . STORE OPTIONS IN IMAGE          LA        A0,(4,ASG)        .          ER        CSF$              . ASSIGN FILE          JN        A0,FL940          . SKIP IF ERROR ASSIGNING FILE          SA        A0,CSFSTAT        . KEEP STATUS FOR LATER USE          SA        A1,FCTSTAT,X4     . STORE @FREE STATUS          SZ        UNLFLG            . CLEAR UNLOAD-FLAG SINCE FILE ASG'D HERE          TOP,U     A14,1*/1          . IS X-USE REQUIRED?          J         FL135             .  NO          TZ        ARCFLG            .  YES, NON-ARCHIVE OPERATION OR          TEP       A15,(1*/('Z'-'D')) .   ARCHIVE AND DELETE?          J         $+2               .    YES          J         FL135             .    NO, SKIP          TEP,U     A0,1*/15          . READ-ONLY FILE ASG'D TO ANOTHER RUN?          J         FL910             .  YES, ERRORFL135          LA        A0,(12,FACPKT)    .          ER        FITEM$            . ISSUE FITEM$ AFTER ASSIGNING FILE          LA,S1     A0,FACPKT+6       . GET EQUIP CODE          J         FL140             . SKIP AHEADFL138          TEP,U     A14,1*/0          . OUTPUT FILE?          J         FL140             .  YES, SKIP          TZ        ARCFLG            . ARCHIVE OPERATION,          TOP       A15,(1*/('Z'-'B')) .  WITH BACKUP OPTION?          J         FL140             .   NO, SKIP          LA        A1,STASAV         .   YES, LOAD SAVED ASSIGNMENT STATUS          JZ        A1,FL140          . SKIP IF ZERO          SA        A1,FCTSTAT,X4     .  IF NOT, REPLACE IN CURRENT STATUSFL140          SA        A0,FCTEQP,X4      . SAVE EQUIP CODE IN FCT          TG,U      A0,020            . CHECK FOR DISC EQUIP          TG,U      A0,040            .          J         FL170             .  NO, SKIP          TEP,U     A14,1*/4          . TAPE REQUIRED?          J         FL945             .  YES, ERROR          TG,U      A0,024+1          . WORD-ADDRESSIBLE FILE?          J         FL142             .  NO, SKIP          TOP,U     A14,1*/0          . INPUT FILE,          TNZ       ARCFLG            .  AND ARCHIVE OPERATION?          J         FL955             .   NO, ERROR - NOT SUPPORTED BY ACP          TOP,U     A15,1*/('Z'-'N')  .   YES, PURGE REQUEST?          J         FL955             .    NO, ERROR - NOT SUPPORTED BY ACPFL142          LA,S1     A0,FACPKT+7       . PICK UP FLAG BITS          TEP,U     A0,1*/1           . IS BIG FILE BIT SET?          J         FL956             .  YES, ERR - CANNOT PROCESS          AND,U     A0,1*/2           . SHARED-FILE BIT TO A1          SSL       A1,2              . SHIFT TO BIT ZERO          TNZ       MHFCFG            . IS MHFS CONFIGURED?          LA,U      A1,0              .  NO, ALWAYS USE LOCAL          SA        A1,FCTSHR,X4      . SAVE IN FCT FOR LATER USE          LA        A0,CSFSTAT        . LOAD PREVIOUS CSF$ STATUS          AND       A0,(1*/8++1*/18)  .          JNZ       A1,FL940          . ERROR IF DISABLED OR WAIT STATUS          TEP       A0,(1*/19)        . IS THIS AN UNLOADED FILE?          J         FL145             .  YES, SKIP          TZ        UNLFLG            . WAS UNLOAD SET FOR PREVIOUS ASG,          TOP       A15,(1*/('Z'-'B')) .  AND IS THIS BACKUP COPY OF SAME FILE?          J         FL190             .   NO, SKIP - FILE IS ONLINEFL145          TEP,U     A14,1*/1          . IS X-USE REQUIRED AND          TNZ       ARCFLG            .  IS THIS AN ARCHIVE?          J         FL958             .   NO, ERROR - FILE IS UNLOADED          TZ,H1     FACPKT+9          . UNLOADED FILE MUST HAVE ZERO TRACKS          LMJ       X1,ABORT          .  IF NOT, ABORT          SP1       FCTUNL,X4         . SET UNLOADED STATUS IN FCT          LA,U      A2,M$TMFAS=M$TMHIC . A2 = 0 (REEL) OR 1 (CARTRIDGE)FL150          LA,U      A3,015            . REEL TAPE EQUIPMENT CODE          JZ        A2,$+2            . CARTRIDGE TAPE INPUT?          LA,U      A3,017            .  YES, LOAD CARTRIDGE EQUIP CODE          DL        A0,('IBACKUP     ') . USE LITERAL 'IBACKUP' FOR ARCHIVE-          DS        A0,FCTUSE,X4      .    UNLOAD OR RESTORE-ARCHIVE OPERATION          DS        A0,FACPKT         . ALSO IN FITEM$ PACKET          LA        A0,(12,FACPKT)    .          ER        FITEM$            . GET INFO ON IBACKUP FILE          LA,S1     A0,FACPKT+6       . EQUIP CODE          JZ        A0,FL160          . SKIP IF NOT ASSIGNED          TNE,U     A0,,A3            . ASSIGNED ON CORRECT EQUIPMENT?          J         FL300             .  YES, RETURN SUCCESSFUL          LA,U      A0,IBKFREE        . NO, FREE IBACKUP          ER        CSF$              .FL160          LA        A0,IBKASG,A2      . LOAD @ASG IMAGE FOR CORRECT EQUIP          ER        CSF$              .  ISSUE @ASG,TNF IBACKUP,<EQUIP>          JN        A0,FL965          . ERROR IF BAD STATUS          LA        A0,(12,FACPKT)    .          ER        FITEM$            . GET INFO AFTER ASSIGNMENT          LA,S1     A0,FACPKT+6       . EQUIP CODE          TNE,U     A0,,A3            . BETTER BE CORRECT EQUIPMENT NOW          J         FL300             .  IF SO, CONTINUE          J         FL965             .  IF NOT, ERRORFL170          TOP,U     A14,1*/3          . CHECK FOR TAPE ALLOWED          TEP,U     A14,1*/4          .  OR TAPE REQUIRED          J         $+2               .   YES, CONTINUE          J         FL950             .   NO, ERROR          TE,U      A0,015            . REEL TAPE, OR          TNE,U     A0,017            .  CARTRIDGE TAPE?          J         $+2               .   YES, CONTINUE          J         FL950             .   NO, ERROR          SP1       FCTTAP,X4         . SET TAPE FLAG          LA        A0,FACPKT+7       . GET ASSIGNMENT OPTIONS          TEP,U     A0,1*/('Z'-'R')   . IS TAPE ASSIGNED WITH R-OPTION?          SP1       FCTTPR,X4         .  YES, SET FLAG IN FCTFL190          LA,S2     A0,FACPKT+6       . GET FILE MODES          AND,U     A0,022            . READ-PROT OR READ KEY REQUIRED          TEP,U     A14,1*/1          . IS X-USE REQUIRED?          AND,U     A0,032            . YES, ALSO CHECK WRITE KEY REQUIRED          TEP,U     A14,1*/0          . OUTPUT FILE?          AND,U     A0,036            . YES, ALSO CHECK ALL WRITE INHIBITS          JNZ       A1,FL960          . ERROR IF CANNOT READ/WRITE FILE          TEP,U     A14,1*/0          . IS THIS AN OUTPUT FILE          TEP,U     A0,1*/5           .  WITHOUT EXCLUSIVE ASSIGN?          J         $+2               .   NO          J         FL910             .   YES, ERROR          DL        A0,FACPKT+2       . FILENAME          DL        A2,FACPKT+4       . QUALIFIER          LA        A4,FACPKT+6       .          AND,U     A4,07777          . CYCLE (TO A5)          DS        A0,FCTFILE,X4     . STORE FILENAME IN FCT          DS        A2,FCTQUAL,X4     .  AND QUALIFIER          SA        A5,FCTCYC,X4      .  AND CYCLE          LA,S3     A0,FACPKT+6       . GRANULARITY (IF DISC)          TNZ       FCTTAP,X4         .          SA        A0,FCTPOS,X4      . STORE POS-GRAN FLAG IF DISC          TOP,U     A14,1*/0          . IS THIS AN OUTPUT FILE, OR          TEP,U     A14,1*/1          .  INPUT WITH X-USE REQUIRED?          J         FL300             .   YES, ALL DONE          TNZ       FCTTAP,X4         . IS THIS A TAPE INPUT?          J         FL200             .  NO, SKIP          LA        A0,FACPKT+10      .          AND,U     A0,07777          . GET BLOCKS EXTENDED          JZ        A1,FL220          . SKIP IF ZEROFL193          DL        A0,FCTUSE,X4      . OTHERWISE,          DS        A0,BSFPKT         .  SETUP BACKSPACE PACKET          DS        A0,FSFPKT         .  AND FORWARD-SPACE PACKET          SP1       RPFLAG            . SET REPOSITION-ATTEMPTED FLAG          I$OW      BSFPKT            . BACK SPACE TAPE          LA,S1     A1,BSFPKT+3       . GET STATUS          TLE,U     A1,2              . ZERO OR EOF?          J         FL195             .  YES, FORWARD SPACE          TNE,U     A1,2              .  NO, BOT?          J         FL220             .   YES, CONTINUE          LMJ       X9,STATUSX        .   NO, ERROR          J         FL990             .    AND EXITFL195          I$OW      FSFPKT            . FORWARD SPACE TAPE          LMJ       X9,STATUS         . CHECK STATUS          J         FL990             .  I/O ERROR          NOP                         .  EOF IS OK HERE          J         FL220             . CONTINUEFL200          TOP,U     A15,1*/('Z'-'R')  . RESTORE OPERATION?          J         FL300             .  NO, NO NEED TO READ HEADERFL220          LA        A0,(R$,0,0)       . SET UP GENERAL I/O PACKET          LA        A1,(HBSIZE,HBUFF) .  FOR BASIC READ          DS        A0,IOPKT+3        .          SZ        IOPKT+5           . SECTOR ZERO          I$OW      IOPKT             . ISSUE I/O          LMJ       X9,STATUS         . CHECK STATUS          J         FL990             .  I/O ERROR          J         $+2               .  CONTINUE HERE IF EOF FOUND          J         FL230             .  SKIP IF NORMAL STATUS          LA,S3     A1,IOPKT+3        . PREVIOUS READ SUBSTATUS          TE,U      A1,3              . END OF RECORDED AREA?          J         STATUSX           .  NO, ERROR WITH I/O STATUS 1          J         FL968             .  YES, ERROR WITH APPROPRIATE MESSAGEFL230          TNZ       FCTTAP,X4         . GOOD STATUS - IS INPUT TAPE?          J         FL300             .  NO, SKIP          LA,H2     A1,IOPKT+3        .  YES, GET WORD COUNT          TLE,U     A1,HBSIZE         . IS BLOCK >= ACP HEADER SIZE?          J         FL240             .  NO, SKIP          TEP,U     A15,1*/('Z'-'Q') .    YES, IS COPYG CONS VERIFICATION ON,          TZ        RPFLAG            .    AND IS THIS THE FIRST TIME THROUGH?          J         FL300             .     NO, RETURN WITHOUT FURTHER CHECKING          LA        A1,HBUFF+M0XXLB   . A1 = HEADER LABEL          TE        A1,('*ACSV*')     . TEST FOR STANDARD LABEL          TNE       A1,('*SCSV*')     .  AND EARLY FORMAT LABEL          J         FL300             .   NO FURTHER CHECKING IF MATCH                                      . THIS TAPE WILL GENERATE ERROR AS IS.          J         FL193             .  TRY REPOSITIONING BEFORE GIVING UP...FL240          TZ        ARCFLG            . IS THIS ARCHIVE RESTORE?          J         FL970             .  YES, 'NOT SAVE FORMAT'          TNE,U     A1,28             . POSSIBLE COPY,G HEADER?          J         FL250             .  YES, SKIP          TE,U      A1,016            . IS THIS SIZE OF TSWAP BLOCK?          J         FL970             .  NO, 'NOT SAVE FORMAT'          DL        A1,HBUFF          .  YES, GET 1ST 2 WORDS OF BLOCK          DTE       A1,TSBLK          . IS THIS TSWAP BLOCK?          J         FL970             .  NO, 'NOT SAVE FORMAT'          LA,U      A4,'IN'           .  YES, PREPARE TO SWAP REELS          LA,U      A5,0              . BLOCK COUNT = 0          LMJ       X10,TSWAP         . SWAP INPUT REELS          J         FL990             .  SKIP IF ERROR RETURNED FROM TSWAP          I$OW      IOPKT             . READ 1ST BLOCK FROM NEXT TAPE          LMJ       X9,STATUS         . CHECK STATUS          J         FL990             .  I/O ERROR          J         STATUSX           .  EOF IS NOT ALLOWED HERE          LA,H2     A1,IOPKT+3        . WORDS READ          TG,U      A1,HBSIZE         . SHORTER THAN STD ACP HEADER?          J         FL300             .  NO, SKIP          TE,U      A1,28             . SIZE OF COPY,G HEADER?          J         FL970             .  NO, 'NOT SAVE FORMAT'FL250          TEP,U     A15,1*/('Z'-'R')  . IS THIS RESTORE OPERATION?          J         FL970             .  YES, 'NOT SAVE FORMAT'          DL        A1,HBUFF          . FIRST TWO WORDS OF HEADER          DTE       A1,('COPYG BLKSEQ') . IS THIS COPY,G HEADER?          J         FL970             .  NO, 'NOT SAVE FORMAT'          SP1       FCTCPG,X4         .  YES, SET COPY,G FORMAT FLAGFL300          LX        X11,SAVX11        . RESTORE X11          J         1,X11             . RETURN GOOD STATUSFL900          LX,U      X9,ERM1           . MISSING SPEC <N>          J         FL975             .FL910          TZ        ARORMV            . ARCHIVE OR MOVE?          SZ        BOMB              .  YES, DO NOT ABORT RUN          LX,U      X9,ERM2           . X-USE REQUIRED          J         FL975             .FL915          LX,U      X9,ERM2A          . ERROR ASSIGNING ACP$SCRATCH$          J         FL975             .FL920          LX,U      X9,ERM3           . FILE NAME REQUIRED          J         FL975             .FL930          LX,U      X9,ERM4           . ELEMENT/VERSION ILLEGAL          J         FL975             .FL935          LX,U      X9,ERM4A          . QUAL AND CYCLE REQUIRED FOR RELOAD          J         FL975FL936          LX,U      X9,ERM4B          . QUAL, FILE +/OR CYC DON'T MATCH ARCHIST$          J         FL975             .FL940                                 .          TEP,U     A14,1*/0          . INPUT FILE?          J         FL942             .  NO, SKIP          TZ        ARORMV            .  YES, ARCHIVE OR MOVE?          SZ        BOMB              .   YES, DO NOT ABORT RUN          TEP       A0,(1*/21)        . NOT CATALOGUED OR ASSIGNED?          SP1       NOERRF            .  YES, NOT ARCHIVE ERROR          TEP       A0,(1*/18)        . WAIT STATUS?          SP1       NOERRF            .  YES, NOT ARCHIVE ERROR          TEP,U     A0,1*/16          . EXCLUSIVE USE TO ANOTHER RUN?          SP1       NOERRF            .  YES, NOT ARCHIVE ERRORFL942          LA        A4,A0             . SAVE CSF$ STATUS          LMJ       X10,EDTSPC        . 'SPEC <N>'          E$MSG     ERM5              . 'BAD CSF$ STATUS:'          E$OCTF    12,A4             . EDIT STATUS          J         FL980             . PRINT MESSAGEFL945          LX,U      X9,ERM5A          . ARCHIVE OUTPUT MUST BE TAPE          J         FL975             .FL950          LX,U      X9,ERM6           . INVALID EQUIPMENT TYPE          J         FL975             .FL955          LX,U      X9,ERM6A          . CANNOT PROCESS WAD FILES          J         FL957             .FL956          LX,U      X9,ERM6C          . CANNOT PROCESS FILES > 262KFL957          TOP,U     A14,1*/0          . INPUT FILE, AND          TNZ       ARORMV            .  ARCHIVE OR MOVE?          J         $+2               .   NO          SZ        BOMB              .   YES, DO NOT ABORT RUN          J         FL975             .FL958          LX,U      X9,ERM6B          . FILE IS UNLOADED          J         FL975             .FL960          TOP,U     A14,1*/0          . INPUT FILE, AND          TNZ       ARORMV            .  ARCHIVE OR MOVE?          J         $+2               .   NO          SZ        BOMB              .   YES, DO NOT ABORT RUN          LMJ       X10,EDTSPC        . 'SPEC <N>'          E$MSG     ERM7              . 'IS READ'          TOP,U     A14,1*/0          . OUTPUT FILE, OR          TEP,U     A14,1*/1          .  X-USE REQUIRED?          E$MSGR                      .   YES, 'AND/OR WRITE'          E$FD2     ('PROTECTED.')    .          J         FL980             .FL965          LX,U      X9,ERM7A          . IBACKUP COULD NOT BE ASSIGNED          J         FL975             .FL968          LX,U      X9,ERM21          . POS AT END OF RECORDED AREA          J         FL975             .FL970          LX,U      X9,ERM22          . INPUT FILE NOT IN SAVE FORMATFL975          LMJ       X10,EDTSPC        . 'SPEC <N>'          E$MSG     0,X9              . EDIT SPECIFIC ERROR MESSAGE TEXTFL980          E$DITX                      .          P$RINT    (0116,LINE)       . PRINT ERROR MESSAGEFL990          LX        X11,SAVX11        . RESTORE X11          J         0,X11             . RETURN ERROR STATUS...         FREE INTERNAL USE NAME (AND FILE IF NOT PREVIOUSLY ASG'D)..         X4 = FCT ADDRESS.FREFILE          LA        A0,FCTSTAT,X4     . GET @FREE STATUS FROM FCT          JZ        A0,FF100          . SKIP IF ZERO (NO NAME ASSIGNED)          LA,U      A1,' '            . DEFAULT - @FREE,A          TNE,U     A0,2              .          LA,U      A1,'X'            .  @FREE,AX          TNE,U     A0,3              .          LA,U      A1,'R'            .  @FREE,AR          SA,S2     A1,FREE+1         . STORE SECOND OPTION IF REQUIRED          DL        A0,FCTUEX,X4      . USE NAME FOR EXTERNAL FILE          DS        A0,FREE+2         . INTO @FREE IMAGE          LA        A0,(4,FREE)       .          ER        CSF$              . ISSUE @FREE REQUEST          SZ        FCTSTAT,X4        . ZERO STATUS IN FCTFF100          J         0,X11             . RETURN TO CALLER...         THE FOLLOWING ROUTINE IS ACTIVATED (VIA FORK$) WHEN DOING AN.         ARCHIVE RESTORE REQUESTED BY THE FETCH PROCESSOR.  ITS PURPOSE.         IS TO CONTINUOUSLY UPDATE THE CELL 'RCRSAS' IN THE STATUS RECORD.         IN MRCBNK SO THAT FETCH KNOWS THAT THE RELOAD IS STILL ACTIVE..         UPON COMPLETION, THE CELL IS SET TO EITHER 'RCASCM' (COMPLETE).         OR 'RCASER' (ERROR TERMINATION)..PULSER          LA        A0,RCRSAS,A3      . GET STATUS          AA,U      A0,1              . INCREMENT (WE'RE STILL BUSY)          TG,U      A0,077            . TOO LARGE FOR SIXTH WORD?          LA,U      A0,RCASIN+1       .  IF SO, RESET TO SMALL VALUE          SA        A0,RCRSAS,A3      . REPLACE NEW STATUS          LA,U      A1,2000           .          ER        TWAIT$            . SLEEP FOR 2 SECONDS          TZ        PLSACT            . SHOULD WE REMAIN ACTIVE?          J         PULSER            .  YES, BACK TO BEGINNING          LA        A0,PLSSTA         . NO, GET COMPLETION STATUS          SA        A0,RCRSAS,A3      . STORE IN STATUS RECORD          ER        EXIT$             . ALL DONE/.        EXPAND PROGRAM D-BANK IF NECESSARY FOR REQUIRED I/O BUFFER SPACE.EXPAND          LA,U      A2,,A0            . WORD COUNT OF DESIRED BUFFER(S)          DSL       A0,36             . PREPARE FOR DIVIDE          DI,U      A0,28             . CONVERT TO SECTORS          JZ        A1,$+2            .          LMJ       X1,ABORT          . ABORT IF NOT EVENLY DIV BY 28          SA        A0,SECCNT         . STORE SECTOR COUNT OF EACH BUFFER          LR,U      R1,NBUFF-1        . LOOP COUNT          LA        A0,(1,0)          . POINTER TO <BUFADR> LIST          LA,U      A1,BUFF           . STARTING ADDRESS OF BUFFERSEX100          SA        A1,BUFADR,*A0     . STORE ADDRESS OF NEXT BUFFER          AA,U      A1,THLEN,A2       . ADD BUFFER SIZE + TAPE HEADER LENGTH          JGD       R1,EX100          . LOOP BACK FOR REST          LA,U      A0,1              . DEFAULT SECURE/FAS BUFFER SIZE (TRACKS)          TZ        FASIN             . FAS INPUT?          LA        A0,FASBCT         .  YES, LOAD FAS BUFFER SIZE          MSI,U     A0,1792+SEHDLN    . MULT BY TRK SIZE + HEADER LENGTH          AA,U      A0,2              . ASK FOR MORE THAN WE NEED TO CHECK          SA,H1     A0,SECPKT+4       .  FOR OVERSIZE BLOCKS          SA,H2     A1,SECPKT+4       . STORE BUFFER ADDRESS IN PACKET          AA,U      A1,,A0            . ADD FAS/SECURE BUFFER SIZE TO TOTAL          ANA,U     A1,1              . DECR FOR ADDRESS OF LAST WORD REQ          LA,H2     A0,EXPWRD         . GET PREVIOUS LAST ADDRESS          TG,U      A0,,A1            . IS THIS LESS THAN REQ NOW?          J         EX200             .  NO, SKIP          SA,H2     A1,EXPWRD         .  YES, STORE NEW LAST ADDRESS          LA        A0,EXPWRD         . MCORE$ PARAMETERS          ER        MCORE$            . GET THE STORAGE NOWEX200          J         0,X11             . RETURN.. FDTOBN - CONVERT FIELDATA (A0,A1) TO BINARY (A4).          RETURN 0,X11 IF ERROR    1,X11 IF OK.FDTOBN          LA,U      A4,0              . ZERO ACCUMULATOR          LR,U      R1,12-1           . LOOP COUNTFB100          LDSC      A0,6              . SHIFT NEXT DIGIT TO A1-S6          AND,U     A1,077            . INTO REGISTER A2          TG,U      A2,'0'            .          TG,U      A2,'9'+1          .          J         FB120             . DON'T CONTINUE UNLESS NUMERIC          MSI,U     A4,10             . MULT ACCUM BY TEN          ANA,U     A2,'0'            . CONVERT DIGIT TO BINARY          AA,U      A4,,A2            . ADD TO ACCUMULATOR          JGD       R1,FB100          . LOOP FOR REST OF DIGITS          J         FB200             . ALL DONEFB120          JZ        A2,FB200          . RETURN NORMAL IF NEXT CHAR = 0          TE,U      A2,' '            . IS TERMINATOR A SPACE?          J         0,X11             .  NO, ERRORFB200          J         1,X11             . RETURN NORMAL STATUS/..         THIS ROUTINE CAPTURES ERROR MODE CONTINGENCIES...         ONLY TYPE 1 CODE 20 (USUALLY TAPE LABELING) AND TYPE 4 CODE 37.         (TSWAP$) ERRORS ARE RECOGNIZED.  IN THESE CASES CONTROL IS SIMPLY.         RETURNED TO NEXT ADDRESS AND THE ERROR IS PROCESSED BY ACP.  IN ALL.         OTHER CASES, AN ERROR MESSAGE IS PRINTED VIA ERRPR$, FOLLOWED BY.         ERROR TERMINATION (ERR$)..CGYRTN          SA        A0,SAVA0          . SAVE A0          LA        A0,CGYPKT         . GET ERROR CODES          SSL       A0,24             . BITS 35-24          TE,U      A0,0120           . IS THIS AN I/O 020?          J         CG100             .  NO, SKIP          LA        A0,SAVA0          .  YES, GET PACKET ADDRESS          LA,S1     A0,3,A0           . STATUS RETURNED BY IO$/IOW$          TE,U      A0,020            . BETTER BE 020          J         CG300             .  IF NOT, NO CAPTURE          LA,H2     A0,CGYPKT         . ERROR ADDRESS          LA,H2     A0,,A0            . GET ER CODE          TE,U      A0,IOW$           . VERIFY THIS IS AN I/O REQUEST          TNE,U     A0,IO$            .          J         CG200             .  OK, RECOVER          TNE,U     A0,WAIT$          . OR A WAIT I/O REQUEST          J         CG200             .  OK, RECOVER          J         CG300             .  NOPE, DO NOT RECOVERCG100          TE,U      A0,0437           . TEST FOR TSWAP$ ERROR          J         CG300             .  NO, DO NOT RECOVER          LA,H2     A0,CGYPKT         . ERROR ADDRESS          LA,H2     A0,,A0            . GET ER CODE          TNE,U     A0,TSWAP$         . BETTER BE TSWAP$          TN        SAVA0             .  AND STATUS SHOULD BE NEGATIVE          J         CG300             .   IF NOT, DO NOT RECOVERCG200          LA,H2     A0,CGYPKT         . ERROR ADDRESS          AA,U      A0,1              . PLUS ONE = NEXT INSTRUCTION          SA        A0,CGYRET         . SAVE IN RETURN WORD          LA        A0,SAVA0          . RESTORE A0          J         *CGYRET           . CONTINUE AS IF NOTHING HAD HAPPENEDCG300          LA,U      A0,CGYPKT         .          ER        ERRPR$            . PRINT THIS ERROR          J         ABORT1            .  AND ABORT RUN/..         MISCELLANEOUS NON-RECOVERABLE ERRORS COME HERE.ER003          LA        A0,(0100+ER30L,ERR30) . 'CANNOT COMBINE U,Y OPTS'          J         ERBOMB            .ER004          LA        A0,(0100+ER31L,ERR31) . 'U,Y ALLOWED ONLY W/S,R,M'          J         ERBOMB            .ER005          LA        A0,(0100+ER32L,ERR32) . U,Y USE INCONSISTENT W/MARS CONFIG          J         ERBOMB            .ER006          LA        A0,(0100+ER33L,ERR33) . 'U,Y ILLEGAL - MHFS NOT SYS-CONFIG'          J         ERBOMB            .ER007          LA        A0,(0100+ER34L,ERR34) . 'U OPT NOT ALLOWED - MHFS NOT AVAIL'          J         ERBOMB            .ER008          LA        A0,(0100+ER35L,ERR35) . 'INVALID HOST-ID'          J         ERBOMB            .ER010          LA        A0,(0100+ER1L,ERR1) . CONTROL OPTION CONFLICTERBOMB          TNZ       DEMAND            . DEMAND RUN?          SP1       BOMB              .  NO, FORCE ABORT EVEN IF 'C' SET          SP1       NOERRF            . DON'T UPDATE AHF W/ERROR STATUS          J         ERRPR1            .ER130          LA        A4,A0             . SAVE BAD STATUS          LMJ       X10,EDTSPC        . 'SPEC <N>'          E$MSG     ERM13             . 'INVALID MSCON$ STATUS'          E$OCTV    A4                . EDIT STATUS          J         ERRPRT            .ER135          LMJ       X10,EDTSPC        . 'SPEC <N>'          E$MSG     ERM13A            . 'FILE IS UNLOADED - NO BACKUP INFO'          J         ERRPRT            .ER136          LMJ       X10,EDTSPC        . 'SPEC <N>'          E$MSG     ERM13E            . 'UNLOADED FILE HAS > 262K TRACKS'          J         ERRPRT            .ER137          LMJ       X10,EDTSPC        . 'SPEC <N>'          E$MSG     ERM13B            . 'OPERATION ABORTED, INPUT TAPE ERR(S)'          J         ERRPRT            .ER138          LA        A4,A0             . SAVE STATUS          LMJ       X10,EDTSPC        . 'SPEC <N>'          E$MSG     ERM13C            . 'TSWAP$ ERROR ON SAVE TAPE'          LSSL      A4,6              . EDIT STATUS          SSL       A4,30             .          E$DECV    A4                . STATUS IS RETURNED IN A0 (S5)          J         ERRPRT            .ER139          LMJ       X10,EDTSPC        . 'SPEC <N>'          E$MSG     ERM13D            . 'FILE IS UNLOADED - 0 TRACKS ON BACKUP'          J         ERRPRT            .ER140          LA        A0,(0100+ER5L,ERR5) . ERROR PROCESSING PCT-RESIDENT DADT'S          J         ERRPR1            .ER160          LMJ       X10,EDTSPC        . 'SPEC <N>'          E$MSG     ERM8              . 'INPUT FILE IS EMPTY'          J         ERRPRT            .ER170          TEP,U     A15,1*/('Z'-'M')  . MOVE OPERATION?          J         ER175             .  YES, STD MESSAGE          LMJ       X10,EDTSPC        .  NO, 'SPEC <N>'          E$MSG     ERM17             . 'FILE MAX IS TOO SMALL ...'          J         ERRPRT            .ER172          LA        A0,(0100+ER42L,ERR42) . FILENAME VERIFICATION ERROR          J         ERRPR1            .ER175          LA        A0,(0100+ER6L,ERR6) . SCRATCH FILE IS TOO SMALL...          J         ERRPR1            .ER180          LA        A0,(0100+ER10L,ERR10) . ARCHIVE HISTORY FILE HAS BAD HDR          J         ERBOMB            . FATAL ERRORER185          LA        A0,(0100+ER11L,ERR11) . HISTORY FILE LOC OUT OF RANGE          J         ERRPR1            .ER190          SA        A0,A4             . SAVE STATUS          E$DIT     EPKT              .          E$MSG     ERM19             . 'BAD CSF$ STAT ON @FREE,D OF ORIG FILE'          E$OCTF    12,A4             . EDIT STATUS          E$MSGR                      .          J         ERRPRT            .ER204          LMJ       X10,EDTSPC        . 'SPEC <N>'          E$MSG     ERM20             . 'CANNOT SAVE A (C,U) OPT FILE'          J         ERRPRT            .ER205          LA        A0,(0100+ER36L,ERR36) . 'FITEM$ RETURNED INVALID DIR-ID'          J         ERRPR1            .ER206          LA        A0,(0100+ER37L,ERR37) . 'FITEM$ - LI DIR-ID AMBIGUITY'          J         ERRPR1            .ER207          LA        A0,(0100+ER38L,ERR38) . 'N-OPTION ONLY ALLOWED FOR ARCHIVE'          J         ERRPR1            .ER210          LA        A0,(0100+ER2L,ERR2) . MUST BE PRIV TO SAVE, RESTORE, MOVE          J         ERRPR1            .ER211          LA        A0,(0100+ER26L,ERR26) . CANNOT SAVE IF PACK COUNT > PCKMAX          J         ERRPR1            .ER212          LA        A0,(0100+ER24L,ERR24) . ERROR IN FETCH SYNCH PARAMS/MRCBNK          J         ERRPR1            .ER214          LA        A0,(0100+ER25L,ERR25) . MUST BE PRIV TO READ ARCHIVE TAPE          J         ERRPR1            .ER215          LA        A0,(0100+ER12L,ERR12) . MISSING OR INVALID AHF-LOCATION          J         ERRPR1            .ER216          LA        A0,(0100+ER23L,ERR23) . POS AT START OF CONTINUED FILE          J         ERRPR1            .ER217          LA        A0,(0100+ER7L,ERR7) . INVALID FILE HDR BLK (RESTORE-ARCHIVE)          J         ERRPR1            .ER218          LA        A0,(0100+ER21L,ERR21) . QUAL AND CYC REQ FOR RESTORE SPEC 2          J         ERRPR1            .ER220          LA        A0,(0100+ER4L,ERR4) . SAVE INPUT MUST BE CATALOGUED          J         ERRPR1            .ER225          LA        A0,(0100+ER40L,ERR40) . FORMAT ERROR IN COPY,G HEADER BLOCK          J         ERRPR1            .ER230          LMJ       X10,EDTSPC        . 'SPEC <N>'          E$MSG     ERM23             . 'OUTPUT FILE NUST BE EMPTY'          J         ERRPRT            .ER240          LMJ       X10,EDTSPC        . 'SPEC <N>'          E$MSG     ERM24             . 'OUTPUT PACK IS NOT AVAILABLE'          J         ERRPRT            .ER250          LMJ       X10,EDTSPC        . 'SPEC <N>'          E$MSG     ERM25             . 'EQUIP TYPE NOT FOUND IN EQPTAB'          E$FD1     A5                . EDIT EQUIP TYPE          E$MSGR                      . FINISH MSG          J         ERRPRT            .ER270          LMJ       X10,EDTSPC        . 'SPEC <N>'          E$MSG     ERM27             . 'DAD TABLES NOT RESIDENT IN PCT'          J         ERRPRT            ..EDTSPC          E$DIT     EPKT              .          E$MSG     ERMSPC            . 'SPECIFICATION'          E$DECV    SPCNUM            . EDIT SPEC NUMBER          E$MSGR                      . '.  '          J         0,X10             . RETURN/..         FINAL ERROR TERMINATION PROCESSING.ERRPRT          LA        A0,(0114,LINE)    . PREPARE TO PRINT EDITED ERROR MSGERRPR1          ER        PRINT$            . PRINT ERROR MESSAGEERREXT          TZ        ARCFLG            . TEST FOR SAVE-ARCHIVE          TOP,U     A15,1*/('Z'-'S')  .   OPERATION          J         ERREX1            .    NOPE          TEP       A15,(1*/('Z'-'F')) . IS THIS FIRST OF A CRIT-BACKUP SET?          SP1       SKPNXT            .  YES, SET SKIP-NEXT FLAG          TZ        NOERRF            . IS THIS ERROR TO BE IGNORED?          J         ERREX1            .   YES          LA        A0,(RDL$,0,0)     .   NO, PREPARE TO READ/LOCK AHF HEADER          SA        A0,AHHDPK+3       .          I$OW      AHHDPK            . ISSUE I/O          TZ,S1     AHHDPK+3          .          J         ERREX1            . SKIP IF BAD STATUS RETURNED          LX,U      X4,AHFHDR         . ADDRESS OF HEADER BUFFER          LA        A0,AHHLBL,X4      . GET LABEL WORD          TE        A0,('*AHFL*')     . IS LABEL VALID?          J         ERREX1            .  NO, SKIP          INC       AHHERC,X4         .  YES, UPDATE ERROR COUNT          NOP                         .          LA        A0,(W$,0,0)       .          SA        A0,AHHDPK+3       .          I$OW      AHHDPK            . WRITE HEADER BACK TO HISTORY FILEERREX1          LX,U      X4,FCTTBL+FCTLEN  . ADDRESS OF 2ND FCT          LMJ       X11,FREFILE       . GO FREE FILE, USE NAME          LX,U      X4,FCTTBL         . ADDRESS OF 1ST FCT          LMJ       X11,FREFILE       . GO FREE FILE, USE NAME          TZ        BOMB              . HAS ERROR ABORT BEEN REQUESTED?          J         ABORT1            .  YES, GO DO IT          LA        A0,(0100+14,ASTRSKS) . SET UP TO PRINT ROW OF STARS          TZ        ARCFLG            .          ER        PRINT$            . ONLY PRINT IF ARCHIVE OPERATION          SZ        AUTOSCR           . CLEAR AUTO-ASG OF ACP$SCRATCH$          J         NRMEX1            . NORMAL TERMINATION FROM HERE ON..         ERROR RETURNED FROM RINF$.INFERR          TNE,U     A1,2              . ABNORMAL RETURN FROM READ$,          TZ        PASS1             .  AND NOT THE FIRST TIME THROUGH?          J         $+2               .   NO          J         EXIT              .   YES, THAT'S ALL FOLKS          ER        PRINT$            . PRINT INFOR$ ERROR MESSAGE          TNZ       DEMAND            .          J         ABORT1            . ABORT RIGHT NOW IF BATCH RUN          TNE,U     A1,2              . ABNORMAL RETURN FROM READ$?          J         EXIT              .  YES, WE'RE DONE          J         NRMEX2            .  NO, CONTINUE THE REUSABILITY THING/..         EXIT PROCESSING - FREE FILE, RESTART IF ANOTHER @ACP CALL FOLLOWS.NRMEXT          LX,U      X4,FCTTBL+FCTLEN  . ADDRESS OF 2ND FCT          LMJ       X11,FREFILE       . GO FREE FILE AND USE NAME          LX,U      X4,FCTTBL         . ADDRESS OF 1ST FCT          LMJ       X11,FREFILE       . GO FREE FILE AND USE NAMENRMEX1          LA        A0,RDSTAT         . STATUS FROM ARCHIVE PARAM READ          JN        A0,EXIT           . ALL DONE IF EOF ENCOUNTERED          TEP       A0,(1*/32)        . IS INFOR FORTHCOMING?          J         RESTART           .  YES, GO RESTART NOWNRMEX2          LA,U      A2,1              . FLAG TO PRINT DATA IGNORED MSGNRMEX3          R$EAD     (NRMEX4,INFBUFF)  . READ THE NEXT IMAGE          JZ        A2,NRMEX3         . DATA - SKIP IF MSG ALREADY PRINTED          P$RINT    (0100+ER17L,ERR17) . DATA IGNORED - IN CONTROL MODE          LA,U      A2,0              . DON'T PRINT MSG AGAIN THIS GO-AROUND          J         NRMEX3            . DO ANOTHER READ NOWNRMEX4          JN        A0,EXIT           . ALL DONE IF NO MORE INFOR          TEP       A0,(1*/32)        . IS INFOR FORTHCOMING?          J         RESTART           .  YES, RESTART NOW          P$RINT    (0100+ER18L,ERR18) . @EOF IGNORED - IN CONTROL MODE          J         NRMEX2            . BACK FOR MOREEXIT          LA,U      A0,0              .          ER        IALL$             . DE-REGISTER ALL CONTINGENCIES          LA        A0,(1,CLISTT)     .          ER        CLIST$            . TERMINATE CLIST$ MODE          TNZ       PLSACT            . IS PULSER ACTIVE?          J         EXIT2             .  NO , SKIP          LA,U      A0,RCASIN+1       .  YES, LOAD CONTINUATION STATUS          TEP       A15,(1*/('Z'-'F')) . PROCESSING LAST FILE?          LA,U      A0,RCASCM         .  YES, LOAD NORM COMPLETION STATUS          SA        A0,PLSSTA         . STORE STATUS FOR PULSER          SZ        PLSACT            . TELL PULSER TO QUIT NOW          LA,U      A1,3000           .          ER        TWAIT$            . WAIT 3 SEC TO BE SURE HE'S FINISHEDEXIT2          TNZ       AUTOSCR           . WAS ACP$SCRATCH$ AUTO-ASG'D?          J         EXIT3             . NO, SKIP          LA,U      A0,FRESCR         .          ER        CSF$              .  YES, ISSUE @FREE ACP$SCRATCH$          P$RINT    (0100+SFL,SCRFRE) . '*SCRATCH FILE RELEASED*'EXIT3          LA,U      A0,1              . SETC-VALUE IF COPY,G ERROR(S) OCCURRED          TZ        QCEFLG            . ANY ERROR(S) FROM COPY,G INPUT?          ER        SETC$             .  YES, SET CONDITION WORD NOW          ER        EXIT$             . ALL DONE!..         ABORT PROCESSING.ABORT          SA        A0,SAVA0          . SAVE A0          ANX,U     X1,START+1        . MAKE X1 RELATIVE (EASIER TO DEBUG!)          P$RINT    (0100+ER19L,ERR19) . UNRECOVERABLE ERR ABORT, X1 = ADDRABORT1          LA,U      A0,0              .          ER        IALL$             . DE-REGISTER CONTINGENCIES          LA        A0,(1,CLISTT)     .          ER        CLIST$            . TERMINATE CLIST$          TNZ       PLSACT            . IS PULSER ACTIVE?          J         ABORT2            .  NO, SKIP          LA,U      A0,RCASER         .  YES, LOAD ERROR TERMINATION STATUS          SA        A0,PLSSTA         . STORE STATUS FOR PULSER          SZ        PLSACT            .  AND TELL HIM TO STOP          LA        A0,A1             . SAVE A1          LA,U      A1,3000           .          ER        TWAIT$            . WAIT 3 SEC TO BE SURE PULSER IS DONE          LA        A1,A0             . RESTORE A1ABORT2          LA        A0,SAVA0          . RESTORE A0          ER        ERR$              .  AND DIE/.ERMSPC    'SPECIFICATION &.  &'ERM1      'MISSING - REQUIRED&'ERM2      'EXCLUSIVE ASSIGN REQUIRED&'ERM2A     'SCRATCH FILE (ACP$SCRATCH$) MUST BE PREASSIGNED FOR MOVE&'ERM3      'FILE NAME REQUIRED&'ERM4      'ELEMENT AND/OR VERSION ILLEGAL&'ERM4A     'QUALIFIER AND CYCLE REQUIRED - MISSING OR INVALID FORMAT&'ERM4B     'QUAL, FILE AND/OR CYCLE DO NOT MATCH AT GIVEN AHF LOCATION&'ERM5      'BAD CSF$ STATUS ON @ASG: &'ERM5A     'ARCHIVE OUTPUT MUST BE TAPE&'ERM6      'INVALID EQUIPMENT TYPE&'ERM6A     'CANNOT PROCESS WORD-ADDRESSABLE FILES&'ERM6B     'FILE IS UNLOADED&'ERM6C     'CANNOT PROCESS FILES WITH MORE THAN 262K TRACKS&'ERM7      'IS READ &AND/OR WRITE &'ERM7A     'IS UNLOADED - IBACKUP COULD NOT BE ASSIGNED OR IS NOT TAPE&'ERM8      'INPUT FILE IS EMPTY&'ERM11     '*SECURITY ATTRIBUTE COMPARISON FAILURE - SATTCP$ STATUS: &'ERM12     '*ER SUMOD$ ERROR DURING RESTORE - TYPE: &  CODE:&'ERM13     'INVALID MSCON$ STATUS: &'ERM13A    'FILE IS UNLOADED - BACKUP INFO NOT RECORDED IN MFD&'ERM13B    'OPERATION ABORTED DUE TO INPUT TAPE ERROR(S)&'ERM13C    'TSWAP$ ERROR ON SAVE TAPE - CODE: &'ERM13D    'FILE IS UNLOADED - ZERO TRACKS ON BACKUP&'ERM13E    'UNLOADED FILE HAS MORE THAN 262K TRACKS&'ERM17     'FILE MAXIMUM IS TOO SMALL TO CONTAIN OUTPUT&'ERM19     'BAD CSF$ STATUS: & ON @FREE,D OF ORIGINAL FILE&'ERM20     'CANNOT SAVE A (C,U) OPTION FILE&'ERM21     'POSITIONED AT END OF RECORDED AREA&'ERM22     'INPUT FILE IS NOT IN SAVE FORMAT&'ERM23     'OUTPUT FILE MUST BE EMPTY&'ERM24     'OUTPUT PACK IS NOT AVAILABLE, OR TOO FEW AVAIL TRACKS&'ERM25     'EQUIPMENT TYPE & IS NOT CONFIGURED IN EQPTAB&'ERM26     'CANNOT MOVE TO REQUIRED TAPE POSITION&'ERM27     'DAD TABLES ARE NOT RESIDENT IN THE PCT&'USEMSG    '@USE ACP$FILE$$$Z,&'IOERRM    'I/O STATUS & ON & OF & ******************************************&'IOERM2    'SECTOR: &  WORD COUNT: &'ADRERR    '*ERROR: NEXT SECTOR ADDRESS OF & PRECEDES MINIMUM OF &'BSQMSG    '*** BLOCK SEQUENCE ERR, EXP: & REC: & TRACK: & **********&'CKSMSG    '*** CKSUM ERR, EXP: & REC: & BLK: & TRK: & **********&'QCMSG     ' ERR ON FILE: &*& - CONTINUE?  AE&'TSWMSG    'PUT REEL SWAPPED - TRACK COUNT = &'TSWMSG1   '*** &PUT REEL TSWAP$ ERROR & - TRACK COUNT = & ***&'REELID    ' REEL ID = &'TFMSG     ' (TEMP FILE)&'FILMSG    'ED ON & AT &'COPMSG    ' TRACKS COPIED&'TSFMSG    ' TO SCRATCH FILE&'FSFMSG    ' FROM SCRATCH FILE&'IBKFREE   '@FREE IBACKUP . 'IBKASG    +         IBKREEL          +         IBKCARTIBKREEL   '@ASG,TNF IBACKUP,':$CFS(M$TMSTD):' . 'IBKCART   '@ASG,TNF IBACKUP,':$CFS(M$TMHIC):' . 'PURMSG    '*INPUT FILE HAS CURRENT BACKUP - WILL BE PURGED*'PURL      EQU       $-PURMSGDELMSG    '*INPUT FILE WILL BE DELETED*'DELL      EQU       $-DELMSGNOPMSG    '*INPUT FILE DOES NOT HAVE CURRENT BACKUP - NO ACTION TAKEN*'NOPL      EQU       $-NOPMSGUNLMSG    '*INPUT FILE IS UNLOADED - COPYING FROM REEL:& POS:& *&'AHFMSG    'ARCHIVE HISTORY FILE HAS BEEN UPDATED'AHL       EQU       $-AHFMSGREMMSG    '*INPUT FILE REMOVED*'RML       EQU       $-REMMSGRPMSG     'STARTING FILE RESTORE OPERATION'RPL       EQU       $-RPMSGCPGMSG    'INPUT TAPE IS COPY,G FORMAT'CGL       EQU       $-CPGMSGPOSRMSG   ' AT POS & REEL &'RSDMSG    '*MHFS IS DOWN OR NOT CONFIGURED - RESTORING TO <STD> DIRECTORY*'RSDL      EQU       $-RSDMSGCNRMSG    '*CANNOT RESTORE & - FILE ALREADY EXISTS*&'CNPMSG    '*CANNOT RESTORE TO PACK(S): & - USING FIXED*&'RSTMSG    '*FILE RESTORED*'RSTL      EQU       $-RSTMSGRSTMSG2   '*FILE CONTENTS RESTORED TO: &. *&'ERR1      'CONTROL OPTION CONFLICT - SEE DOCUMENTATION'ER1L      EQU       $-ERR1ERR2      'RUN MUST BE PRIVILEGED TO SAVE, RESTORE OR MOVE A FILE'ER2L      EQU       $-ERR2ERR3      'ORIGINAL FILE WAS G-OPTION; ACCT/PROJ NOT RESTORED'ER3L      EQU       $-ERR3ERR4      'INPUT FILE FOR SAVE MUST BE CATALOGUED'ER4L      EQU       $-ERR4ERR5      'ERROR WHILE PROCESSING PCT-RESIDENT DAD TABLES'ER5L      EQU       $-ERR5ERR6      'SCRATCH FILE IS TOO SMALL TO CONTAIN OUTPUT'ER6L      EQU       $-ERR6ERR7      'INVALID FILE HEADER BLOCK AT DESIGNATED POSITION OF IBACKUP'ER7L      EQU       $-ERR7ERR8      'FILENAME DOES NOT EQUAL EXPECTED AT DESIGNATED POSITION OF IBACKUP'ER8L      EQU       $-ERR8ERR9      'INVALID SECURE/FAS TAPE HEADER BLOCK AT START OF IBACKUP'ER9L      EQU       $-ERR9ERR10     'ARCHIVE HISTORY FILE HAS BAD HEADER'ER10L     EQU       $-ERR10ERR11     'AHF LOCATION OUT OF RANGE - RECHECK'ER11L     EQU       $-ERR11ERR12     'SPECIFICATION 4. MISSING OR INVALID AHF-LOCATION'ER12L     EQU       $-ERR12ERR13     'ERROR IN PCT DADT CHAIN FOR INPUT FILE - ATTEMPTING CORRECTION'ER13L     EQU       $-ERR13ERR14     'ARCHIVE MATCHING INFO IS MISSING OR WRONG LENGTH - IGNORED'ER14L     EQU       $-ERR14ERR15     '*OUTPUT TAPE IS NOT POSITIONED FOLLOWING EOF*'ER15L     EQU       $-ERR15ERR16     '*OUTPUT REEL ABANDONED DUE TO WRITE ERROR(S)*'ER16L     EQU       $-ERR16ERR17     'DATA IGNORED - IN CONTROL MODE'ER17L     EQU       $-ERR17ERR18     '@EOF IGNORED - IN CONTROL MODE'ER18L     EQU       $-ERR18ERR19     '**** UNRECOVERABLE ERROR ABORT, X1 = ERROR ADDRESS ****'ER19L     EQU       $-ERR19ERR20     'ORIGINAL FILE WAS G-OPTION; UNABLE TO RESTORE KEY(S)'ER20L     EQU       $-ERR20ERR21     'QUALIFIER AND ABS F-CYCLE REQUIRED FOR MOVE/RESTORE SPEC 2'ER21L     EQU       $-ERR21ERR22     'INVALID ACP CONTINUATION HEADER AT START OF INPUT REEL'ER22L     EQU       $-ERR22ERR23     'POSITIONED AT START OF CONTINUED FILE - CANNOT BEGIN COPY HERE'ER23L     EQU       $-ERR23ERR24     'FETCH-SYNCHRONIZATION PARAMETERS IN ERROR OR MRCBNK CORRUPTED'ER24L     EQU       $-ERR24ERR25     'MUST BE PRIVILEGED TO READ ARCHIVE TAPE'ER25L     EQU       $-ERR25ERR26     'CANNOT SAVE A FILE THAT SPANS MORE THAN <PCKMAX> PACKS'ER26L     EQU       $-ERR26ERR27     'OUTPUT REEL TABLE OVERFLOW, EXCEEDS <AHBRMX>'ER27L     EQU       $-ERR27ERR28     'PREMATURE END OF FILE ENCOUNTERED ON INPUT TAPE'ER28L     EQU       $-ERR28ERR29     'INPUT TAPE HAS ADDITIONAL BLOCK(S) BEYOND EXPECTED EOF'ER29L     EQU       $-ERR29ERR30     'CANNOT COMBINE U, Y OPTIONS'ER30L     EQU       $-ERR30ERR31     'U, Y OPTIONS ALLOWED ONLY WITH S, R OR M OPTION'ER31L     EQU       $-ERR31ERR32 DO M$MHFSHARED=0 , 'U, Y OPTIONS ILLEGAL - MARS NOT CONFIG FOR MHFS/SHARED' DO M$MHFSHARED>0 , 'U OR Y OPTION REQUIRED FOR MHFS/SHARED SAVE-ARCHIVE'ER32L     EQU       $-ERR32ERR33     'U, Y OPTIONS ILLEGAL - MHFS IS NOT CONFIGURED IN THIS SYSTEM'ER33L     EQU       $-ERR33ERR34     'U OPTION NOT ALLOWED - FILE SHARING IS DOWN OR NOT AVAILABLE'ER34L     EQU       $-ERR34ERR35     'INVALID OR OUT OF RANGE HOST-ID RETURNED BY MSCON$-DIRID$'ER35L     EQU       $-ERR35ERR36     'FITEM$ RETURNED INVALID DIRECTORY-ID FOR INPUT FILE'ER36L     EQU       $-ERR36ERR37     'FITEM$ - LEAD ITEM DIRECTORY-ID AMBIGUITY FOR INPUT FILE'ER37L     EQU       $-ERR37ERR38     'N-OPTION IS LEGAL FOR ARCHIVE OPERATION ONLY'ER38L     EQU       $-ERR38ERR39     '*COMMAND BYPASSED DUE TO PREVIOUS ERROR*'ER39L     EQU       $-ERR39ERR40     'FORMAT ERROR IN COPY,G HEADER BLOCK'ER40L     EQU       $-ERR40ERR41     'COPY ABORTED BY OPERATOR'ER41L     EQU       $-ERR41ERR42     'INPUT QUALIFIER AND/OR FILENAME DOES NOT MATCH OUTPUT'ER42L     EQU       $-ERR42SCRASG    '*TEMPORARY SCRATCH FILE ASSIGNED:'SAL       EQU       $-SCRASGSCRFRE    '*SCRATCH FILE RELEASED*'SFL       EQU       $-SCRFREASGSCR    '@ASG,T ACP$SCRATCH$,F/1000//50000 . 'ASL       EQU       $-ASGSCRFRESCR    '@FREE ACP$SCRATCH$ . 'SACUSE    '@USE SACIN$,&*& . &'SACASG    '@ASG,AY SACIN$ . 'SACFREE   '@FREE SACIN$ . 'ASTRSKS DO 14 ,  '******'EQPTAB          'D7053 F53   '          'D8470 F70M  '          'D8481 F81   '          'D8480 F80M  '          'D9494 F94   '          'D9614 F14D  '  . M9740-30          'D8450 F50M  '          'D8433 F33   '          'D8434 F34   '          'D8436 F36   '          'D8451 F51   '          'D8459 F59M  '          'D8463 F63M  '          'MDISK FMD   '          'SSDISKFSSD  '          'SCDISKFSCSI '  . SCSI DISK          'MEMFL FMEM  '              . MEMORY FILEEQTLEN    EQU       ($-EQPTAB)/2EOFBLK    'EOFEOF' DO 020-1 ,  +      0TSBLK     +         0541600000000 DO 015 ,  +        0CLIST     +         0100          'ACP'          +         0CLISTT    +         0500          +         0/.$(0).         THIS STATIC DBANK AREA IS NEVER REINITIALIZED.PASS1     +         1                 . SET IF FIRST TIME PROCESSOR CALLEDERRTAP    +         0                 . REEL-ID OF BACKUP REEL CAUSING PROBSERRTPC    +         0                 . NUMBER OF ERRORS ON THIS REELQCEFLG    +         0                 . SET IF ERROR(S) DURING COPY,G INPUTDEMAND    +         1                 . SET IF DEMAND RUNGENRUN    +         0                 . GENERATED RUNIDSKPNXT    +         0                 . SET IF ERROR IN 1ST COPY OF CRIT-BACKUPPRVSTA    +         0                 . PREVIOUS ASG STATUS (COPY 1 OF CRIT-BU)PRVUNL    +         0                 . SET IF 1ST COPY OF CRIT-B/U WAS UNLOADEDPLSACT    +         0                 . SET IF PULSER ACTIVEPLSSTA    +         RCASIN+1          . FINAL PULSER STATUSPRVFLG    +         0                 . SET IF RUN IS PRIVILEGEDEX41R7    +         0                 . SET IF EXEC LEVEL => 41R7AUTOSCR   +         0                 . SET IF ACP$SCRATCH$ IS AUTO ASG'DEXPWRD    +         BDI$,LASTD$       . MCORE$ CONTROL WORD, H2 = CURR LAST-DSAVA0     +         0                 . CONTINGENCY A0-SAVECGYPKT    +         0D                . CONTINGENCY PACKET          J         CGYRTN            .CGYRET    +         0                 . CONTINGENCY RETURN ADDRESS..         THIS DBANK AREA IS REINITIALIZED WITH THE VALUES PRESET AT.         ASSEMBLY TIME EACH TIME THE PROCESSOR IS REUSED..DBANK1.BOMB      +         0                 . SET IF PROG IS TO ABORT UPON ERRORARCFLG    EQUF      $,,S1             . SET IF ARCHIVE OPERATIONMOVFLG    EQUF      $,,S2             . SET IF MOVE OPERATIONARORMV    EQUF      $,,H1             . SET IF EITHER ARCHIVE OR MOVE          +         0                 .PURFLG    +         0                 . SET IF FILE WILL BE PURGED / DELETEDMHFCFG    +         0                 . SET IF MHFS CONFIGURED ON SYSTEMHOSTID    +         0                 . HOST-ID, IF MHFS CONFIG AND U,Y OPT SETORGSHR    +         0                 . INPUT FILE DIRECTORY-IDRSTSHR    +         0                 . RESTORED FILE DIRECTORY-IDAHMFLG    +         0                 . SET IF MATCHING INFO IN AHMBUFFSTASAV    +         0                 . COPY OF <PRVSTA> FOR PREVIOUS FILEUNLFLG    +         0                 . SET IF <PRVUNL> SET FOR PREVIOUS FILECSFSTAT   +         0                 . SAVE AREA FOR CSF$ STATUSNOERRF    +         0                 . SET IF ERROR IS NOT TO INCR AHHERCRDSTAT    +         0                 . SAVE STATUS FROM AHM INFO READ$SAVX4     +         0                 . MISC. REGISTER SAVESSAVX10    +         0                 .SAVX11    +         0                 .SAVA2     +         0                 .SAVA34    +         0D                .STAX8     +         0                 . STATUS ROUTINE - SAVE X8STAX11    +         0                 . STATUS ROUTINE - SAVE X11STAA3     +         0                 . STATUS ROUTINE - SAVE A3SAVE4     RES       4                 .QCSX11    +         0                 . X11 SAVE FOR QRYCNSQCTYPE    +         0                 . INPUT ERROR CODE FOR QRYCNSQCREP     +         0                 . CONSOLE REPLY FROM QRYCNS MESSAGEDCSX11    +         0                 . DCOPY RETURNDCEFLG    +         0                 . SET IF CHECKSUM OR BLOCK SEQ ERROR(S)AFERR     +         0                 . USED BY STATUS TO IND ERROR ON AHFFILNUM    +         0                 . FILE NUMBER BEING PROCESSED BY OPNFILESPCNUM    +         0                 . SPEC NUMBER, USED FOR PRINTING ERRORSNEWQL     +         0D                . REPLACEMENT QUALIFIER FOR RESTORENEWFL     +         0D                . REPLACEMENT FILENAME FOR RESTORENEWCY     +         0                 . REPLACEMENT F-CYCLE FOR RESTOREMNMFLG    +         0                 . SET IF EQUIP MNEMONIC SPEC ON PROC CALLPCKFLG    +         0                 . SET IF PACKID SPEC ON PROC CALLTOTAVL    +         0                 . TOTAL AVAILABILITY ON OUTPUT PACK(S)RSTCYC    +         0                 . 1 = NO F-CYCLES EXIST, LIM CAN BE RSTRDTRKCNT    +         0                 . CURR INPUT TRACK COUNTTRKOUT    +         0                 . CURRENT OUTPUT TRACK COUNTTRACKS    +         0                 . COMPUTED INPUT NON-HOLE TRACK COUNTTOTGRN    +         0                 . TOTAL ALLOCATED GRANULE CT, CAT FILESCATPCT    +         0                 . SET IF READING CAT-FILE PCT DADT'SFASIN     +         0                 . SET IF FAS BACKUP TAPE USED FOR INPUTFASBCT    +         0                 . TRACKS/BLOCK IN CURR FAS INPUT TAPERDSX11    +         0                 . SAVES FOR RDSEC ROUTINERDSSA2    +         0                 .DSKERR    +         0                 . SET IF INPUT DISK ERROR HAS OCCURREDTAPERR    +         0                 . SET IF OUTPUT TAPE ERROR HAS OCCURREDSEBFCT    +         0                 . REM LOGICAL BLK COUNT IN FAS/SEC BUFFERSEBFAD    +         0                 . CURR LOGICAL BLK ADDR IN FAS/SEC BUFFSECADR    +         0                 . NEXT SECTOR ADDRESS IN FAS/SEC BUFFERSECBLK    +         0                 . BLOCK SEQ NUMBER OF FAS/SEC LOGICAL BLKNXTSEC    +         0                 . NEXT SEQ SECTOR TO PROC FROM F/S BUFFPRVHD0    +         (-2,-1)           . PREVIOUS SECURE/FAS BLOCK WD 0RPFLAG    +         0                 . SET IF REPOSITIONING WAS ATTEMPTEDCPGADR    -         1                 . SECTOR ADDR OF COPY,G CONTINUATION BLKCPGBLK    +         0                 . COPY,G BLOCK SEQUENCE NUMBERCPGSTA    +         0                 . STATUS FROM LAST COMPLETED READCPGACP    +         CPGACW+CPGBFC,CPGACW . CIRCULAR ACW LIST POINTERCPGBFP    +         0                 . POINTER TO CURRENT INPUT BUFFERCPGREM    +         0                 . REMAINING WORDS FROM LAST COMPLETE REQCPGSAV    +         0D                . REGISTER SAVE OVER TSWAP/STATUS.INPEXP    +         0                 . EXPECTED WORD CT, TAPE/ACP/ACW INPUTSECCNT    +         BUFSIZ//28        . SECTOR SIZE OF MAIN I/O BUFFERSBLKSEQ    +         0                 . BLOCK SEQUENCE NUMBER OF CURR BLOCKUNLRCT    +         0                 . REEL COUNT OF INPUT FROM TAPEUNLRPT    +         0                 . POINTER TO NEXT INPUT REEL-IDBURTBL    RES       22                . REEL TABLEINFPKT    +         INFILE$,0,0       . INFO$ PACKET          +         2,FACPKT          .          +         FFILEX$,0,0       . RETURN FILES EXTENDED          +         1,FILPOS          .FILPOS    +         0                 .COMPKT    +         0                 . COM$ PACKET          +         0,LINE            .          +         0                 .          +         0D                .FACPKT    RES       12                . FITEM$ PACKETSTAFAC    RES       12                . FITEM$ PKT USED BY STATUS ROUTINEEPKT      E$PKT     14,LINE           . EDIT$ PACKETIDBUFF*   'ACP 3R2E '                 . DO 5 , ' '                           .LINE      RES       22                . DO ALL EDIT$ OUTPUT HEREIOPKT     +         0D                . GENERAL I/O PKT, USED FOR MISC. THINGS          +         0                 .          +         R$,0,0            .          +         0D                .SECPKT    +         0D                . READS HDR DATA FROM FAS/SEC SAVE TAPES          +         0                 .  (ALSO USED FOR SOME COPY,G OPERATIONS)          +         R$,0,0            .          +         2000,BUFF         . ALT BY 'EXPAND', POINTS TO CORRECT BUFF          +         0                 .MRPKT     +         0D                . COPY,G MAIN INPUT PACKET          +         0                 .          +         MR$,0,0           .          +         CPGBFC/2,CPGACW   .          +         0                 .          +         3,0,0             . TRANSFER IN 8-BIT PACKED          +         0D                .TLBPKT    +         2                 . ER TLBL$ REQUEST PACKET - READ TRLR          RES       18                .FSFPKT    +         0D                . FORWARD SPACE FILE PACKET          +         0                 .          +         FSF$,0,0          .          +         0D                .REWPKT    +         0D                . REWIND PACKET          +         0                 .          +         REW$,0,0          .          +         0D                .MBPKT     +         0D                . MOVE BACKWARD PACKET          +         0                 .          +         MB$,0,0           .          +         0D                .MFPKT     +         0D                . MOVE FORWARD PACKET          +         0                 .          +         MF$,0,0           .          +         0D                .WEFPKT    +         0D                . WRITE-EOF PACKET          +         0                 .          +         WEF$,0,0          .          +         0D                .WTSPKT    +         0D                . WRITE TSWAP-BLOCK PACKET          +         0                 .          +         W$,0,0            .          +         016,TSBLK         .          +         0                 .BSFPKT    +         0D                . BACK SPACE FILE PACKET          +         0                 .          +         BSF$,0,0          .          +         0D                .EAQPKT    +         0D                . ACQUIRE MASS STORAGE PACKET          +         0                 .          +         EACQ$,0,0         . DO 5 ,   +         0                 .AHHDPK    I$OD      'ACP$ARCHIST$',R$  28,AHFHDR  0 . AHF HEADER PACKETAHBFPK    I$OD      'ACP$ARCHIST$',R$  28,AHFBUF  $-$ . AHF FILE-BUFFER PACKETAHSFPK    I$OD      'ACP$ARCHIST$',FSAFE$  0,0  0 . AHF CACHE-UPDATE WAITPKTADR    EQUF      $,,H1             . ADDRESS OF DCOPY I/O PKT, POINT BY A3BUFADR    EQUF      $,,H2             . ADDRESS OF DCOPY I/O BUFF, POINT BY A3I DO NBUFF ,  +     PKTLOC+(I-1)*6,BUFF+(I-1)*(BUFSIZ+THLEN) . INIT VALUESPKTLOC    RES       6*NBUFF           . DCOPY I/O PACKETSDIDPKT    +         DIRID$            . MSCON$ - DIRID$ PACKET          +         0D                .          +         3,DIDBUF          .DIDBUF    RES       3                 . BUFFER FOR RETURNED MHFS INFODREAD     +         DREAD$            . DREAD$ FUNCTION PACKET          +         0D                .          +         (28*5)*/6+0,BUFF  . RETURN UP TO 5 ITEMS, ST WITH LEAD          +         0                 .EXPKT     +         EXIST$            . MSCON$-EXIST$ FUNCTION PACKET DO 4 ,   +         0                 .          +         28,0,$-$          .          +         BUFF              .          +         1*/6              .MSAPKT    +         MSALL$            . MSALL$ PACKET          +         BUFSIZ*2,BUFF     .          RES       3                 .DREG      +         DREG$             . DREG$ FUNCTION PACKET          'ACP$FILE$$$Z'              .          RES       7                 .DCYC      +         DCYC$             . MSCON$-DCYC$ FUNCTION PACKET          'ACP$FILE$$$Z'              .          +         0                 .SACPTR    +         BDI$,SACPKT       . ER SATTCP$ PARAMETERSACPKT    +         0                 . ER SATTCP$ FUNCTION PACKET          +         BDI$,$-$          . POINTER TO LEAD ITEM (FILLED)          $ASCII          'SACIN$      '              . FILE NAME MUST BE IN ASCII          $FDATASUMPKT    RES       32                . ER SUMOD$ FUNCTION PACKETASG       '@ASG,A      '              . GENERAL @ASG IMAGE          +         0D                . INTERNAL FILENAMEFREE      '@FREE,A     '              . GENERAL @FREE IMAGE          +         0D                . INTERNAL FILENAMEFREED     '@FREE,D     '              . IMAGE TO DELETE FILE          +         0D                . INTERNAL FILENAME.DB1SIZ    EQU       $-DBANK1          . SIZE OF NONZERO DBANK AREA.DB1SAV    RES       DB1SIZ            . SAVE AREA FOR DBANK 1/..         THIS DBANK AREA IS INITIALIZED TO ZERO EACH TIME THE PROCESSOR.         IS REUSED..DBANK2.FCTTBL    RES       MAXFIL*FCTLEN     . INPUT/OUTPUT FCTSAHFHDR    RES       28                . AHF HEADER BUFFERAHFBUF    RES       28                . AHF FILE BUFFERAHMBUFF   RES       22                . MATCHING INFO BUFFERINFBUFF   RES       50                . INFOR BUFFERCPGHDR    RES       28                . COPY,G HEADER BUFFERCPGACW    RES       CPGBFC*2          . LIST OF ACWS FOR MR$ I/O FUNCTIONHBUFF     RES       HBSIZE            . ACP HEADER BUFFERHBUFF2    RES       HBSIZE            . CONTINUATION HEADER BUFFER.DB2SIZ    EQU       $-DBANK2          . SIZE OF CLEARABLE DBANK AREA.$(2),BUFF DO NBUFF ,  RES    BUFSIZ+THLEN      . INIT RES FOR WORKING I/O BUFFERS          RES       1792+SEHDLN+2     . INIT RES FOR FAS/SECURE TAPE BUFFER          END       START@ELT,SIP MARSREL$.MAP/ACP,,,035663061733,006IBANK,M I$1,01000IN MARS$.ACP,.CERU$/MARSNOT TPF$.EQU       SATTCP$/0303EQU       DIRID$/050DBANK,MC D$1,040000FORM I$1DBANK,UX MRCBNKEND@ELT,SIP MARSREL$.ARCHIVE$-CVT,,,220267101533,023.         PROGRAM TO CONVERT THE FAS/SECURE ARCHIVE HISTORY FILE (SYS$*ARCHIVE$).         TO PSEUDO-MFDDB FORMAT.  THE RESULTING FILE (SORTED BY Q/F/C/AR-DATE).         IS INPUT TO THE REBUILD PROGRAM FOR MERGING WITH SYS$*SAVHIST$.  ONCE.         THIS IS DONE, MARS CAN BE USED TO INTERACTIVELY RELOAD ALL PREVIOUSLY.         FAS- OR SECURE-ARCHIVED FILES...         WHEN EXECUTED IN A NON-SHARED HISTORY FILE SYSTEM (M$MHFSHARED=0).         THIS PROGRAM USES NO OPTIONS.  WHEN EXECUTED IN A SHARED-HF SYSTEM,.         THIS PROGRAM MUST BE EXECUTED WITH ONE AND ONLY ONE OF THE FOLLOWING.         OPTIONS WHICH WILL INDICATE THE DIRECTORY OF ORIGIN OF FILES FROM.         THE MERGED FAS/SECURE ARCHIVE HISTORY FILE:..           A,B,C,D - <STD> DIRECTORY, HOST A THROUGH D.           S       - <SHARED> DIRECTORY.$(1)      AXR$          $LIT          MGPDEF          MFDDEF          D$BDEFMAXRLR    EQU       4                 . MAX BACKUP REELS (MUST = <RCBRMX>)..         DEFINITION OF FIELDS FROM SYS$*ARCHIVE$.SAQUAL    EQUF      0                 . QUALIFIERSAFILE    EQUF      2                 . FILE NAMESACATD    EQUF      4                 . CATALOG DATE/TIME (TDATE$)SAARCD    EQUF      5                 . ARCHIVE DATE/TIME (TDATE$)SAPOS     EQUF      6,,T1             . POSITION ON ARCHIVE TAPESARLCT    EQUF      6,,S3             . REEL COUNTSACYCL    EQUF      6,,T3             . ABS F-CYCLESAREEL1   EQUF      7                 . FIRST BACKUP REEL-ID..         EXTENSION RECORD DEFINITION.SAREELN   EQUF      0                 . BACKUP REEL NUMBERS FOR REELS 2-N..         SORT RECORD DEFINITIONS.SRQUAL    EQUF      0                 . QUALIFIERSRFILE    EQUF      2                 . FILE NAMESRCYCL    EQUF      4,,H1             . ABS F-CYCLESRADJL    EQUF      4,,H2             . ARCHIVE DATE (JULIAN)SRARCT    EQUF      5,,H1             . ARCHIVE TIME (TDATE$ H2)SRRLCT    EQUF      5,,S4             . REEL COUNTSRPOS     EQUF      5,,T3             . POSITION ON ARCHIVE TAPESRCATD    EQUF      6                 . CATALOG DATE/TIME (TDATE$)SRRLTB    EQU       7                 . TABLE OF BACKUP REELS.SRSIZE    EQU       SRRLTB+MAXRLR     . SIZE OF SORT RECORD/.START          AND       A5,(0360000200)   . A,B,C,D,S OPTIONS TO A6          $IF       M$MHFSHARED=0     . THIS CODE FOR NON-SHARED ONLY          JZ        A6,SA020          . SKIP IF NO OPTIONS SET          P$RINT    ERRPRT(4)         . 'HOST/DIRECTORY OPTION ILLEGAL'          ER        ERR$              .  ABORT          $ELSE                       . THIS CODE FOR SHARED-ONLY          JNZ       A6,SA010          . SKIP IF OPTION SET          P$RINT    ERRPRT(5)         . 'HOST/DIRECTORY OPTION REQUIRED'          ER        ERR$              .  ABORTSA010          LA,U      A0,0              . INIT DIRID/HOST TO ZERO          TNE       A6,(1*/('Z'-'A')) . CHECK FOR <STD> DIR, HOST A          LA,U      A0,1              . IF SO SET DIRID=0, HOST=1          TNE       A6,(1*/('Z'-'B')) . CONTINUE CHECK FOR OTHER HOSTS          LA,U      A0,2              .          TNE       A6,(1*/('Z'-'C')) .          LA,U      A0,3              .          TNE       A6,(1*/('Z'-'D')) .          LA,U      A0,4              .          TNE,U     A6,1*/('Z'-'S')   . CHECK FOR SHARED DIRECTORY          LA        A0,(1,1)          . IF SO SET DIRID=1, HOST=1          SA        A0,DIRHOST        . SAVE DIRID, HOSTID          JNZ       A0,SA020          . SKIP IF NONZERO, IF ZERO MULT OPTS GIVEN          P$RINT    ERRPRT(6)         . 'ONLY ONE HOST/DIR OPTION ALLOWED'          ER        ERR$              .  ABORT          $ENDF                       . END OF CONDITIONAL CODESA020          E$DIT     EPKT              . OPEN EDIT          DSL       A10,72            . ZERO TOTAL, PROCESSED FILE COUNTS          D$BIO     SARPKT            . OPEN I/O FROM SYS$*ARCHIVE$          R$OPN     RP                . OPEN SORT..         READ THE NEXT RECORD FROM THE INPUT SYS$*ARCHIVE$.SA100          D$BI      SARPKT  SA980,SA980  . READ THE NEXT ARCHIVE$ RECORD          LX,U      X4,,A1            . X4 = ADDRESS OF ARCHIVE$ RECORD          DL        A0,SAQUAL,X4      . GET QUAL FIELD          JZ        A0,SA100          . IF ZERO, SKIP DELETED RECORD          DTE       A0,('EOFEOF//////') . END OF FILE SENTINAL?          J         $+2               .  NO, CONTINUE          J         SA200             .  YES, DONE WITH INPUT          AA,U      A10,1             .  NO, INCREMENT TOTAL FILE COUNT          LA        A6,SARLCT,X4      . A6 = BACKUP REEL COUNT          TLE,U     A6,MAXRLR+1       . MORE THAN FOUR,          TLE,U     A6,1              .  OR LESS THAN ONE?          J         SA110             .   YES, DON'T PROCESS THIS ONE          TZ        SAREEL1,X4        .   NO, IS FIRST REEL-ID = 0?          J         SA130             .    NO, THIS ENT CAN BE PROCESSEDSA110          E$CLEAR                     . CLEAR EDIT          E$MSG     BADINP            . '*FILE: '          E$FD2     SAQUAL,X4         . QUALIFIER          E$MSGR                      . *          E$FD2     SAFILE,X4         . FILE NAME          E$MSGR                      . (          E$DECV    SACYCL,X4         . F-CYCLE          E$MSGR                      . ') ARCHIVED '          E$DAY1    SAARCD,X4         . DATE OF ARCHIVE          E$MSGR                      . ' REEL CT >4 OR <1, NOT PROCESSED*'          P$RINT    (0120,LINE)       . PRINT ERROR MESSAGESA120          TLE,U     A6,2              . IS THE NEXT RECORD A CONTINUATION?          J         SA150             .  NO, GO GET NEXT FILE          D$BI      SARPKT  SA980,SA980  . YES, READ IT AND BYPASS          ANA,U     A6,8              . REDUCE REMAINING REEL COUNT BY EIGHT          J         SA120             . CHECK FOR MORE CONT RECORDSSA130          AA,U      A11,1             . INCREMENT 'GOOD' FILE COUNT          LX,U      X5,RECORD         . X5 = SORT RECORD ADDRESS          DL        A0,SAQUAL,X4      . QUALIFIER          DL        A2,SAFILE,X4      . FILE NAME          DS        A0,SRQUAL,X5      .  STORE IN SORT RECORD          DS        A2,SRFILE,X5      .          LA        A0,SAARCD,X4      . ARCHIVE DATE (TDATE$)          LMJ       X11,JULOUT        . CONVERT TO JULIAN FOR SORT SEQUENCING          LA,U      A4,1              . ASSUME 1/1/64 IF ERROR          LA        A0,SAARCD,X4      . GET ARCHIVE DATE AGAIN          AND       A0,(0777777)      . A1 = TIME PORTION (TDATE$ H2)          LA        A0,SACYCL,X4      . F-CYCLE          LA        A2,SACATD,X4      . CATALOG DATE/TIME (TDATE$)          SA        A0,SRCYCL,X5      .  STORE IN SORT RECORD          SA        A1,SRARCT,X5      .          SA        A2,SRCATD,X5      .          SA        A4,SRADJL,X5      .          LA        A0,SAPOS,X4       . POSITION ON FIRST REEL          LA        A1,SAREEL1,X4     . FIRST REEL-ID          SA        A6,SRRLCT,X5      .  STORE REEL COUNT          SA        A0,SRPOS,X5       .   AND POSITION, REEL1 IN SORT REC          SA        A1,SRRLTB,X5      .          TLE,U     A6,2              . MORE THAN ONE BACKUP REEL?          J         SA140             .  NO, SKIP          D$BI      SARPKT  SA980,SA980 .  YES, GET CONTINUATION RECORD          LA,U      A0,SAREELN,A1     . ADDRESS OF REEL TABLE          LXI,U     A0,1              .          LA,U      A1,SRRLTB+1,X5    . ADDRESS TO RECIEVE REELS 2-N          LXI,U     A1,1              .          LR,U      R1,MAXRLR-1       . MAX REELS TO TRANSFER          BT        A1,,*A0           . MOVE TO SORT RECORDSA140          R$REL     (SRSIZE,RECORD)   . RELEASE RECORD TO SORTSA150          J         SA100             . GET THE NEXT INPUT RECORD..         FINISHED WITH INPUT PHASE, SORT AND BEGIN OUTPUT.SA200          JNZ       A11,SA210         . SKIP IF FILE(S) WERE PROCESSED          P$RINT    ERRPRT(1)         .  IF NOT, 'NO FILES TO PROCESS'          ER        ERR$              .   BLOW UPSA210          D$BIC     SARPKT            . CLOSE INPUT FROM ARCHIVE$          R$SORT                      . SORT THE DATA..         WRITE THE NEXT RECORD TO THE OUTPUT EXTRACT FILE.SA220          R$RET     SA300             . RETURN THE NEXT RECORD IN SORTED SEQ          LX,U      X4,,A0            . X4 = SORT RECORD ADDRESS          D$BO      MFWPKT  SA990,SA990 . GET ADDRESS OF NEXT OUTPUT RECORD          LX,U      X5,,A1            . X5 = OUTPUT RECORD ADDRESS          LXI,U     A1,1              . INCREMENT FOR TRANSFER          LA,U      A0,(0)            . MOVE ZEROES          LR,U      R1,28             . 28 WORDS/RECORD          BT        A1,,*A0           . CLEAR THE OUTPUT RECORD          DL        A0,SRQUAL,X4      . QUALIFIER          DL        A2,SRFILE,X4      . FILE NAME          LA        A4,SRCYCL,X4      . F-CYCLE          DS        A0,MFQUAL,X5      .  STORE IN OUTPUT RECORD          DS        A2,MFFILE,X5      .          SA        A4,MFCYCL,X5      .          DL        A0,('            ') . FIELDATA SPACES          DS        A0,MFACCT,X5      . SPACEFILL ACCOUNT          DS        A0,MFPROJ,X5      .  AND PROJECT-ID          SA        A0,MFRKEY,X5      .  AND READ KEY          SA        A0,MFWKEY,X5      .  AND WRITE KEY          LA,U      A0,MMFIXD         .          SA        A0,MFTYPE,X5      . SET FILE TYPE = FIXED DISC          LA,U      A0,MMBKUP         .          SA        A0,MFDESC,X5      . MARK AS BACKED UP          LA        A4,SRADJL,X4      . JULIAN ARCHIVE DATE          LMJ       X11,JULIN         . CONVERT BACK TO TDATE$          LXM       A0,SRARCT,X4      . ADD IN TIME PORTION          LA        A1,SRCATD,X4      . CATALOG DATE/TIME          SA        A0,MFBKUT,X5      .  STORE BACKUP DATE = ARCHIVE DATE          SA        A1,MFCATT,X5      .  STORE CAT DATE/TIME          LA        A0,DIRID          . ORIGINATION DIRECTORY-ID          SA        A0,MFDRID,X5      . STORE IN OUTPUT          LA        A0,SRRLCT,X4      . BACKUP REEL COUNT          LA        A1,SRPOS,X4       . POSITION ON FIRST REEL          SA        A0,MFBUNO,X5      .  STORE IN OUTPUT RECORD          SA        A1,MFSTFP,X5      .          LA,U      A1,SRRLTB,X4      . ADDRESS OF REEL TABLE FROM SORT REC          LXI,U     A1,1              .          LA,U      A2,MFBRST,X5      . DESTINATION ADDRESS OF REEL DATA          LXI,U     A2,1              .          LR,U      R1,,A0            . BACKUP REEL COUNT          BT        A2,,*A1           . MOVE REEL TABLE TO OUTPUT RECORD          J         SA220             . GO GET NEXT SORT RECORD..         FINISHED WITH RECORD CREATION, WRITE EXTRACT HEADER AND EXIT.SA300          D$BOC     MFWPKT  SA990,SA990 . CLOSE OUTPUT TO $MFDB$          LX,U      X5,MFDHDR         . X5 = $MFDB$ HEADER ADDRESS          ER        TDATE$            . GET CURRENT DATE/TIME          LA        A1,('*SADB*')     . USE UNIQUE LABEL FOR CONVERSION FILE          LA,U      A2,64             . DATA BEGINS AT SECTOR 64          SA        A0,MFTDAT,X5      . STORE DATE/TIME OF FILE CREATION          SA        A1,MFLABL,X5      .  AND CONVERSION FILE LABEL          SA        A2,MFFLAD,X5      .  AND MASS STORAGE ADDR OF DATA          SA        A11,MFFLCT,X5     .  AND OUTPUT FILE COUNT          LA        A0,DIRID          . ORIGINATION DIRECTORY-ID          LA        A1,HOSTID         .  AND HOST-ID          SA        A0,MFHDID,X5      .  STORE IN HEADER          SA        A1,MFHHID,X5      .          I$OW      WRHDR             . WRITE HEADER          TZ,S1     WRHDR+3           . GOOD STATUS?          J         SA990             .  NO, SKIP          E$CLEAR                     .  YES, CLEAR EDIT          E$MSG     ENDMS1            . 'ARCHIVE$ CONVERSION COMPLETED'          E$DAY1    MFTDAT,X5         . CURR DATE          E$MSGR                      . ' AT '          E$TIME    MFTDAT,X5         . CURR TIME          P$RINT    (0214,LINE)       . PRINT 1ST STATUS LINE          E$CLEAR                     . CLEAR EDIT          E$DECV    A11               . PROCESSED FILE COUNT          E$MSG     ENDMS2            . ' OF '          E$DECV    A10               . TOTAL FILE COUNT          E$MSGR                      . ' FILES WERE PROCESSED.'          P$RINT    (0114,LINE)       . PRINT 2ND STATUS LINE          ER        EXIT$             . ALL DONE..         AN I/O ERROR HAS OCCURRED WHILE READING SYS$*ARCHIVE$.SA980          LR        R1,A0             . SAVE PACKET ADDR          P$RINT    ERRPRT(2)         . 'ERROR READING ARCHIVE$'          LA        A0,R1             . RESTORE ADDRESS          ER        ERR$              .  AND ERROR EXIT..         AN I/O ERROR HAS OCCURRED WHILE WRITING THE EXTRACT FILE.SA990          LR        R1,A0             . SAVE PACKET ADDR          P$RINT    ERRPRT(3)         . 'ERROR WRITING EXTRACT FILE'          LA        A0,R1             . RESTORE ADDRESS          ER        ERR$              .  AND ERROR EXIT..ERR(1)    'NO FILES WERE FOUND TO PROCESS'ERR(2)    'I/O ERROR READING SYS$*ARCHIVE$ - A0 = PACKET ADDR'ERR(3)    'I/O ERROR WRITING EXTRACT FILE - A0 = PACKET ADDR'ERR(4)    'HOST/DIRECTORY-ID OPTION ILLEGAL WHEN <M$MHFSHARED>=0'ERR(5)    'HOST/DIRECTORY-ID OPTION REQUIRED WHEN <M$MHFSHARED>=1'ERR(6)    'CANNOT SPECIFY MULTIPLE HOST/DIRECTORY-ID OPTIONS'ERR(7)I DO 6 ,ERRPRT(I)  +  0100+ERR(I+1)-ERR(I),ERR(I)BADINP    '*FILE: &*&(&) ARCHIVED &, REEL CT > 4 OR < 1, NOT PROCESSED*&'ENDMS1    'SYS$*ARCHIVE$ CONVERSION COMPLETED & AT &'ENDMS2    ' OF & FILES WERE PROCESSED.&'/.$(0)DIRID     EQUF      $,,H1             . USER-SPECIFIED DIRECTORY-IDHOSTID    EQUF      $,,H2             . USER-SPECIFIED HOST-IDDIRHOST   +         0                 . DIRECTORY, HOST IDSSARPKT    D$BRP     'ARCHIVE$'  8,1792*4,0,DBBUFF . PKT FOR D-B READ OF ARCHIVE$MFWPKT    D$BWP     '$MFDB$'  28,1792*4,64,DBBUFF . PKT FOR D-B WRITE OF $MFDB$WRHDR     I$OD      '$MFDB$',W$  28,MFDHDR  0  . PKT FOR WRITE OF $MFDB$ HEADERRP        R$FILE    ;                 . SORT PACKET          'RSZW',SRSIZE               ;          'FILES','XA'                ;          'KEY',1,33,'A','A'          ;          'DELLOG'  ;          'DELCON'  ;          'FPOC',SA100                ;          'LPOC',SA220EPKT      E$PKT     16,LINE           . EDIT$ PACKETLINE      RES       16                . EDIT$ OUTPUT BUFFERRECORD    RES       SRSIZE            . SORT RECORDMFDHDR    RES       28                . EXTRACT FILE HEADER BUFFERDBBUFF    RES       1792*8            . I/O BUFFER(S) FOR READ, WRITE          END       START@ELT,SIP MARSREL$.MAP/ARCHIVE$-CVT,,,125240113232,006IN MARS$.JULDATE,.ARCHIVE$-CVTNOT TPF$.@ELT,SIP MARSREL$.ARSTAT,,,166003123137,023.         PRINT/CLEAR ARCHIVE STATISTICS PROGRAM              WRC 6/89.             ALSO USED TO LIST ARCHIVE TAPES..         ARSTAT HAS 4 OPTIONS:..         Z - ZERO STATISTIC COUNTERS AFTER PRINTING..         T - PRINT LIST OF ACTIVE TAPES..         V - VERIFY ACTIVE TAPES WITH TMS (MUST BE USED WITH 'T').             IF ERROR(S) DETECTED, CONDITION WORD (T3) = 1 AT EXIT..         H - SYSTEM-ID PARAMETER FOLLOWS, DISPLAY IN HEADING.$(1)      AXR$          $LIT          MGPDEF          AHFDEF          D$BDEF.MAXEXP    EQU       4095              . MAXIMUM EXPIRATION PERIODMAXTAP    EQU       2500              . MAXIMUM TAPES IN USE.SRREEL    EQUF      0                 . REEL NUMBERSRCRJL    EQUF      1,,H1             . CREATED DATE (JULIAN)SREXP     EQUF      1,,H2             . EXPIRATION (DAYS)SRFLCT    EQUF      2                 . FILE COUNTSRSIZE    EQU       3                 . SIZE OF SORT RECORD.TMS       EQU       0                 . TURN OFF TMS CODE.TMSREEL   EQUF      0                 . REEL IDTMSSTAT   EQUF      5,,S4             . STATUS RETURNED BY TMS$TMSFUNC   EQUF      5,,S6             . FUNCTION SUPPLIED TO TMS$.TMSFETCH  EQU       1                 . THIS IS THE ONLY FUNCTION USED.TMSEXP    EQUF      8                 . EXPIRATION YY/MM/DDTMSRUN    EQUF      18                . CREATING RUNIDTMSRFR    EQUF      30                . REFERENCING RUNID.TMSSIZ    EQU       150               . SIZE OF TMS$ REQUEST PACKET/.START          SA        A5,A15            . SAVE OPTIONS          SR        R2,CURDAT         . SAVE CURRENT TDATE$ WORD          LA        A0,R2             . A0 = CURRENT DATE          LMJ       X11,JULOUT        . CONVERT TO JULIAN          ER        ERR$              . BLOW UP IF ERROR, SHOULD NEVER HAPPEN          SA        A4,CURJUL         . SAVE CURRENT JULIAN DATE          TOP       A15,(1*/('Z'-'H')) . IS SYSTEM-ID CARD SUPPLIED?          J         AS090             .  NO, SKIP          R$EAD     (AS080,SITCOD)    .  YES, READ IT IN          J         AS090             .AS080          P$RINT    ERRPRT(6)         . 'SYSTEM-ID CARD MISSING, REQUIRED'          ER        ERR$              .  ABORTAS090          I$OW      AHHDPK            . READ AND LOCK ARCHIST$ HEADER          LMJ       X9,STATUS         . CHECK STATUS          J         AS920             .  I/O ERROR, ABORT          LX,U      X4,AHHDBF         . X4 = POINTER TO HEADER BUFFER          LA        A0,AHHLBL,X4      . SOFTWARE LABEL          TE        A0,('*AHFL*')     . IS IT CORRECT LABEL WORD?          J         AS100             .  NO, ABORT          LA        A0,AHHSTB,X4      . STARTING SECTOR OF HISTORY ENTRIES          SA        A0,AHRDPK+5       . SAVE FOR SEQ READ OF FILE          LA        A1,AHHNXB,X4      . NEXT AVAIL SECTOR          ANA,U     A1,,A0            . SUBTRACT START = ENTRY COUNT OF FILE          LR,U      R5,,A1            . INTO R5 FOR LOOP COUNTER          JGD       R5,AS110          . DECREMENT FOR LOOP AND SKIPAS100          P$RINT    ERRPRT(1)         . 'HIST FILE IS EMPTY OR HAS BAD HEADER'          J         AS920             .  ABORTAS110          TZ        AHHARR,X4         . ANY CURRENT ARCHIVE RUNS RECORDED?          J         AS120             .  YES, SKIP          LA,U      A0,AHHSAB,X4      .  NO, MOVE PREV DATA INTO CURR SLOTS          LXI,U     A0,1              .          LA,U      A1,AHHSAS,X4      .          LXI,U     A1,1              .          LR,U      R1,AHHSAL         .          BT        A0,,*A1           .  MOVE <AHHSAL> WDS FROM SAS TO SAB          LA        A0,AHHSTD,X4      . TIME OF LAST STAT AREA INIT          SA        A0,CURDAT         .  THIS WILL BE ENDING TIME          LA        A0,AHHSAD,X4      . TIME OF PREVIOUS INIT          SA        A0,AHHSTD,X4      .  THIS WILL BE STARTING TIME          J         AS130             . UNLOCK HEADER, DO NOT UPDATEAS120          TEP,U     A15,1*/('Z'-'T')  . TAPE REPORT?          J         AS130             .  YES, IGNORE 'Z' EVEN IF SET          TEP,U     A15,1*/('Z'-'Z')  . ARE WE ZEROING COUNTERS?          J         AS150             .  YES, SKIPAS130          LA        A0,(UNL$,0,0)     .          SA        A0,AHHDPK+3       .          I$OW      AHHDPK            . UNLOCK AHF HEADER          J         AS180             .  SKIP, DO NOT UPDATE..         CLEAR STATUS COUNTERS, MOVE TO BACKUP AREA IF 'Z' OPT IS SET.AS150          LA,U      A0,AHHSAB,X4      . START ADDR OF STAT AREA          LXI,U     A0,1              . INCREMENT FOR TRANSFER          LA,U      A1,AHHSAS,X4      . START ADDR OF PREV STAT AREA          LXI,U     A1,1              . INCREMENT          LR,U      R1,AHHSAL         . LENGTH OF STAT AREA          BT        A1,,*A0           . MOVE CURRENT TO PREVIOUS          LA        A0,AHHSTD,X4      . DATE/TIME OF CURR INIT          SA        A0,AHHSAD,X4      .  MOVE TO D/T OF PREVIOUS INIT          LA,U      A0,AHHSAB,X4      .          LXI,U     A0,1              .          LA,U      A1,(0)            .          LR,U      R1,AHHSAL         .          BT        A0,,*A1           . ZERO CURRENT STAT AREA          LA        A0,CURDAT         . CURRENT DATE/TIME          SA        A0,AHHSTD,X4      .  SAVE AS CURR INIT TIME          LA        A0,(W$,0,0)       .          SA        A0,AHHDPK+3       . SET UP TO WRITE UPDATED HEADER          I$OW      AHHDPK            .  WRITE AND UNLOCK          LMJ       X9,STATUS         . CHECK STATUS          J         AS920             .  I/O ERROR, ABORT          LA,U      A0,AHHSAB,X4      .          LXI,U     A0,1              .          LA,U      A1,AHHSAS,X4      .          LXI,U     A1,1              .          LR,U      R1,AHHSAL         . FOR REPORTING PURPOSES,          BT        A0,,*A1           .  MOVE PREV AREA BACK TO CURR AREA          LA        A0,AHHSAD,X4      .          SA        A0,AHHSTD,X4      .  RESTORE PREV STAT AREA INIT DATE/TIME/..         READ HISTORY FILE SEQUENTIALLY TO GATHER TAPE, USAGE STATS.AS180          D$BIO     AHRDPK            . OPEN DOUBLE-BUFFERED INPUT FROM AHFAS200          D$BI      AHRDPK  AS900,AS900 . READ THE NEXT HISTORY SECTOR          LX,U      X5,,A1            . X5 = ADDRESS OF ENTRY IN BUFFER          LA        A3,AHEXP,X5       . EXP PERIOD OF THIS ENTRY          JNZ       A3,AS205          . SKIP IF NONZERO          LA        A0,AHRLDF,X5      . IF ZERO, LOAD RELOAD / PURGE FLAG          TG,U      A0,2              . WAS FILE PURGED OR DELETED?          J         AS250             .  YES, SKIP THIS ENTRYAS205          TLE,U     A3,MAXEXP+1       . IS EXP LARGER THAN MAX CONFIGURED?          J         AS210             .  NO, CONTINUE          P$RINT    ERRPRT(2)         . 'REBUILD WITH NEW MAX EXP VALUE'          J         AS920             .   ABORTAS210          INC       FILTAB,A3         . INCREMENT FILE CT WITH THIS EXPIRATION          NOP                         .          LA        A1,AHTKCT,X5      . TRACK COUNT OF THIS FILE          TZ        AHPKID,X5         . IS FILE ON R-DISC?          J         AS214             .  YES, SKIP          AA        A1,FTRTAB,A3      .  NO, UPDATE FIXED TOTALS          SA        A1,FTRTAB,A3      .          J         AS215AS214          AA        A1,RTRTAB,A3      . UPDATE REMOVABLE TOTALS          SA        A1,RTRTAB,A3      .AS215          LA        A0,AHARCT,X5      . DATE/TIME OF ARCHIVE          LMJ       X11,JULOUT        . CONVERT DATE PORTION TO JULIAN IN A4          ER        ERR$              .  BLOW UP IF ERROR (PROB FILE CORRUPTED)          LA        A3,AHEXP,X5       . A3 = EXP PERIOD OF ENTRY          LA,U      A2,AHBRST,X5      . A2 = ADDRESS OF REEL TABLE FOR ENTRY          LXI,U     A2,1              . LOOP INCREMENT          LR        R2,AHBRCT,X5      . BACKUP REEL COUNT          JGD       R2,AS220          . DECR FOR JGD AND SKIP          P$RINT    ERRPRT(3)         . 'FILE ENCOUNTERED WITH ZERO REEL COUNT'          J         AS920             .  ABORTAS220          LA        A0,,*A2           . GET NEXT REEL NUMBER          LR        R1,TAPECT         . COUNT OF ACTIVE REELS SO FAR          LA        A1,(SRSIZE,SRTTBL-SRSIZE) . SORT TABLE POINTERAS222          SE        A0,SRSIZE+SRREEL,*A1 . SEARCH SORT TABLE FOR REEL MATCH          J         AS225             .  NO MATCH          TNE       A4,SRCRJL,A1      . MATCH - SAME CREATION DATE AND          TE        A3,SREXP,A1       .   SAME EXPIRATION PERIOD?          J         AS222             .    NO, CONTINUE SEARCH          J         AS240             .    YES, UPDATE RECORD AND CONTINUEAS225          LA        A5,TAPECT         . COUNT OF ACTIVE TAPES          TLE,U     A5,MAXTAP         . HAVE WE REACHED MAX ALLOWED?          J         AS230             .  NO, CONTINUE          P$RINT    ERRPRT(4)         .  YES, 'TABLE OVERFLOW, INCR <MAXTAP>'          J         AS920             .   ABORTAS230          AA,U      A5,1              . INCREMENT TAPE COUNT          SA        A5,TAPECT         .  AND SAVE NEW VALUE          AA,U      A1,SRSIZE         . A1 = PTR TO NEXT AVAIL SORT TBL ENTRY          SA        A0,SRREEL,A1      . SAVE REEL NUMBER          SA        A4,SRCRJL,A1      .  AND CREATION DATE (JULIAN)          SA        A3,SREXP,A1       .  AND EXPIRATION PERIOD          SZ        SRFLCT,A1         . ZERO FILE COUNT          INC       TPCTAB,A3         . INCREMENT CT OF TAPES W/THIS EXPIRATION          NOP                         .AS240          INC       SRFLCT,A1         . INCREMENT FILE COUNT FOR THIS REEL          NOP                         .          JGD       R2,AS220          . BACK FOR NEXT BACKUP REEL FOR THIS FILEAS250          JGD       R5,AS200          . BACK FOR NEXT HISTORY ENTRY          E$DIT     EPKT              . OPEN EDIT          TEP,U     A15,1*/('Z'-'T')  . TAPE REPORT?          J         AS340             .  YES, SKIP/..         PRINT STATISTICS REPORT.          E$MSG     HDGMSG            . '*** ARCHIVE STATISTICS FOR '          E$DAY1    AHHSTD,X4         . CURRENT STAT INIT DATE          E$MSGR                      . '-'          E$TIME    AHHSTD,X4         . CURRENT STAT INIT TIME          E$SKIP    -3                . DON'T EDIT SECONDS PORTION          E$MSGR                      . ' THRU '          E$DAY1    CURDAT            . CURRENT DATE          E$MSGR                      . '-'          E$TIME    CURDAT            . CURRENT TIME          E$SKIP    -3                . BACK UP OVER SECONDS AGAIN          E$MSGR                      . ' ***'          P$RINT    (0777716,LINE)    . SKIP TO NEW PAGE, PRINT HEADER          TOP       A15,(1*/('Z'-'H')) . WAS SYSTEM-ID CARD SUPPLIED?          J         AS260             .  NO, SKIP          E$CLEAR                     . CLEAR EDIT          E$MSG     SITMSG            . '  SYSTEM-ID: '          E$COPY    12,SITCOD         . USER-SUPPLIED SYSTEM-ID          P$RINT    (0214,LINE)       . PRINT SYSTEM-IDAS260          P$RINT    (0400+H1L,HDG1)   . FIRST HEADING LINE          P$RINT    (0100+H1L,DASHES) . FOLLOW WITH LINE OF DASHES          P$RINT    (0100,$)          . SKIP A LINE FOR READABILITY          E$CLEAR                     . CLEAR EDIT          E$FD2     ('ARCHIVE')       . EDIT ARCHIVE STATISTICS:          E$DECF    10,AHHARR,X4      .  RUN COUNT          E$DECF    13,AHHARF,X4      .  FILE COUNT          E$DECF    15,AHHART,X4      .  TRACK COUNT          P$RINT    (0112,LINE)       .          ON        M$EXPZERO>0       . THIS CODE FOR EXP-ZERO ONLY          E$CLEAR                     .          E$FD2     ('PURGE/DELETE')  . EDIT PURGE/DELETE STATISTICS          E$SKIP    5                 .  NO RUN COUNT          E$DECF    13,AHHPUF,X4      .  FILE COUNT          LXI       A0,AHHPT1,X4      .          LXM       A0,AHHPT2,X4      .          E$DECF    15                .  TRACK COUNT          P$RINT    (0112,LINE)       .          OFF       M$EXPZERO>0       . END OF EXP-ZERO CODE          E$CLEAR                     .          E$FD1     ('EXPIRE')        . EDIT EXPIRE STATISTICS:          E$SKIP    11                .  (NO RUN COUNT)          E$DECF    13,AHHEXF,X4      .  FILE COUNT          E$DECF    15,AHHEXT,X4      .  TRACK COUNT          P$RINT    (0112,LINE)       .          E$CLEAR                     .          E$FD1     ('RELOAD')        . EDIT RELOAD STATISTICS:          E$DECF    11,AHHRLR,X4      .  RUN COUNT          E$DECF    13,AHHRLF,X4      .  FILE COUNT          E$DECF    15,AHHRLT,X4      .  TRACK COUNT          P$RINT    (0112,LINE)       .          P$RINT    (0600+H2L,HDG2)   . PRINT SECOND HEADING LINES          P$RINT    (0200+H3L,HDG3)   .          P$RINT    (0100+H3L,DASHES) . FOLLOW WITH DASHES, BLANK LINE          P$RINT    (0100,$)          .          DSL       A5,72             . ZERO EXPIRE PERIOD, TAPE COUNT          DSL       A7,72             . ZERO FILE CT, FIXED TRACK CT          LA,U      A9,0              . ZERO REMOV TRACK COUNT          LX,U      X5,0              . ZERO POINTER TO ACCUMULATOR TABLES          LR,U      R5,MAXEXP         . LOOP <MAXEXP>+1 TIMESAS300          TNZ       FILTAB,X5         . ANY ENTRIES FOR THIS EXP PERIOD?          J         AS320             .  NO, SKIP          E$CLEAR                     .  YES, CLEAR EDIT          E$DECF    10,A5             . EDIT EXP PERIOD (DAYS)          E$DECF    10,TPCTAB,X5      .  TAPES FOR THIS EXP PERIOD          E$DECF    13,FILTAB,X5      .  FILES FOR THIS EXP PERIOD          E$DECF    15,FTRTAB,X5      .  FIXED TRACKS FOR THIS EXP PERIOD          E$DECF    15,RTRTAB,X5      .  REMOV TRACKS FOR THIS EXP PERIOD          P$RINT    (0114,LINE)       . PRINT STATUS LINE          AA        A6,TPCTAB,X5      . UPDATE TOTALS          AA        A7,FILTAB,X5      .          AA        A8,FTRTAB,X5      .          AA        A9,RTRTAB,X5      .AS320          AA,U      A5,1              . INCR EXP PERIOD          AX,U      X5,1              .  AND POINTER          JGD       R5,AS300          . LOOP BACK FOR OTHER EXP PERIODS          P$RINT    (0100,$)          . ALL DONE - SKIP A LINE          E$CLEAR                     .  CLEAR EDIT          E$COPY    10,('  *TOTALS*  ') . SET UP TOTAL LINE          E$DECF    10,A6             . TOTAL TAPES          E$DECF    13,A7             . TOTAL FILES          E$DECF    15,A8             . TOTAL FIXED TRACKS          E$DECF    15,A9             . TOTAL REMOV TRACKS          P$RINT    (0114,LINE)       . PRINT TOTAL LINE          J         AS800             . ALL DONE/..         PRINT LISTING OF ACTIVE ARCHIVE TAPES IF 'T' OPTION IS SET..         SORT REEL TABLEAS340          LR        R3,TAPECT         .  YES - SET UP LOOP COUNTER FOR SORT          JGD       R3,$+2            . DECR AND SKIP          ER        ERR$              .  BLOW UP IF ZEROAS350          JGD       R3,$+2            . DECREMENT OUTER LOOP BY ONE EACH PASS          J         AS390             .  EXIT WHEN FINISHED          LR        R2,R3             . R2 = INNER LOOP COUNT = NEW OUTER CT          LA        A0,(SRSIZE,SRTTBL-SRSIZE) . INIT REEL TBL PTR FOR THIS PASS          LA,U      A1,0              . CLEAR EXCHANGE FLAGAS360          LA        A4,SRSIZE+SRREEL,*A0 . GET REEL NUMBER FROM FIRST RECORD          TLE       A4,SRSIZE+SRREEL,A0 . IS IT GTR OR EQUAL TO NEXT REEL?          J         AS380             .    NO, DO NOT EXCHANGE          TE        A4,SRSIZE+SRREEL,A0 .  YES, IS IT EQUAL TO NEXT REEL?          J         AS365             .     NO, EXCHANGE          LA        A4,SRSIZE+SRCRJL,A0 .   YES, COMPARE CREATION DATES          TG        A4,SRCRJL,A0      . IS FIRST LESS THAN NEXT?          J         AS380             .  NO, DO NOT EXCHANGEAS365          LA,U      A1,,A0            . ADDRESS OF 1ST RECORD          LXI,U     A1,1              . LOOP INCREMENT          LR,U      R1,SRSIZE-1       . EXCHANGE <SRSIZE> WORDSAS370          LA        A4,,A1            . NEXT WORD FROM 1ST RECORD          LA        A5,SRSIZE,A1      .  AND FROM 2ND RECORD          SA        A5,,A1            . EXCHANGE WORDS          SA        A4,SRSIZE,*A1     .  AND INCREMENT POINTER          JGD       R1,AS370          . LOOP FOR REST OF RECORDSAS380          JGD       R2,AS360          . LOOP FOR NEXT COMPARISON          JNZ       A1,AS350          . BACK TO START IF EXCHANGE WAS MADE..         SORT COMPLETE, PRINT REPORT.AS390          LX        X5,(SRSIZE,SRTTBL-SRSIZE) . POINTER TO REEL TABLE          LR        R5,TAPECT         . REEL COUNT          JGD       R5,$+1            . DECREMENT FOR LOOP          DSL       A10,72            . ZERO LINE, PAGE COUNTAS400          JGD       A10,AS420         . LOOP AHEAD UNTIL BOTTOM OF PAGE          AA,U      A11,1             . INCREMENT PAGE COUNT          E$CLEAR                     . CLEAR EDIT          E$COL     62-$SL(M$SITENM)/2 . MOVE OVER          E$MSG     HDG4M             . FULL NAME OF SITE          P$RINT    (0777722,LINE)    . PRINT 1ST TAPE REPORT HEADING LINE          E$CLEAR                     . CLEAR EDIT          E$COL     30                . SKIP OVER          E$COPY    12,SITCOD         . USER-SUPPLIED SYSTEM-ID OR SPACES          E$MSG     HDG5M             . 'LISTING OF ACT ARC TAPES ... DATE'          E$DAY1    CURDAT            . CURRENT DATE          E$MSGR                      . '  PAGE '          E$DECV    A11               . PAGE NUMBER          P$RINT    (0126,LINE)       . PRINT 2ND HEADING LINE          P$RINT    (0100,$)          . SKIP          P$RINT    (0100+H6L,HDG6)   . FILL OUT REMAINDER OF HEADING          P$RINT    (0100+H6L,DASH2)  .          P$RINT    (0100,$)          .          LA,U      A10,M$LPP-9       . INIT LINE COUNTERAS420          LA,U      A8,' '            . INIT REEL-FLAG = BLANK          LA        A4,SRSIZE+SRCRJL,*X5 . CREATION DATE (JULIAN)          AA        A4,SREXP,X5       . ADD EXPIRATION = EXP DATE          LMJ       X11,JULIN         . CONVERT TO TDATE$          LA        A9,A0             . A9 = TDATE$ FMT EXPIRATION DATE          ON        TMS               . ** BEGIN TMS CODE **          SZ        TMSVFY            . ZERO TMS-VERIFY FLAG          TOP,U     A15,1*/('Z'-'V')  . DO WE WANT TO VERIFY EACH TAPE?          J         AS450             .  NO, SKIP          LA        A0,SRCRJL,X5      . JULIAN CREATION DATE          AA        A0,SREXP,X5       . + EXPIRATION PERIOD = EXP DATE          ANA,U     A0,1              . SUBTRACT ONE FOR COMPARISON          TLE       A0,CURJUL         . DOES TAPE EXPIRE AFTER TODAY?          J         AS450             .  NO, DO NOT VERIFY WITH TMS          SP1       TMSVFY            .  YES, VERIFY THIS TAPE          LA        A0,(1,TMSPKT)     . SET UP TMS REQUEST PACKET          LA,U      A1,(0)            .          LR,U      R1,TMSSIZ         .          BT        A0,,*A1           . ZEROFILL, <TMSSIZ> WORDS          LX,U      X6,TMSPKT         . X6 = PACKET ADDRESS          LA        A0,SRREEL,X5      . CURRENT REEL NUMBER          SA        A0,TMSREEL,X6     . STORE IN PACKET          LA,U      A0,TMSFETCH       . TMS FETCH FUNCTION (REEL LOOKUP)          SA        A0,TMSFUNC,X6     . STORE IN PACKET          LA,U      A0,TMSARG         . ADDRESS OF TMS ARGUMENT LIST          LXI,U     X11,0             . INDICATE CALL VIA LMJ          LMJ       X11,TMS$          . CALL TMS$ TO RETRIEVE INFO ON REEL          LA,U      A8,'*'            . SET TAPE FLAG = ERROR          TZ        TMSSTAT,X6        . GOOD STATUS FROM TMS?          J         AS450             .  NO, REEL IS IN ERROR          LA,H1     A0,TMSEXP,X6      .  YES, GET TMS EXPIRATION          LSSL      A0,6              . CONVERT TO TDATE$ FORMAT          AA,S1     A0,TMSEXP,X6      .          LSSL      A0,18             . MOVE TO H1 OF A0          SA        A0,TMSEXP,X6      . REPLACE IN PACKET          TE        A0,A9             . SAME AS EXP FROM HISTORY FILE?          J         AS450             .  NO, REEL IS IN ERROR          LA        A0,TMSRUN,X6      .  YES, GET CREATION RUNID          SSL       A0,12             . WE ONLY CARE ABOUT FIRST 4 CHARS          TNE       A0,('@@ARCH')     . WAS REEL CREATED BY ARCHIVE RUN?          LA,U      A8,' '            .  YES, REEL HAS GOOD STATUSAS450          TE,U      A8,' '            . GOOD STATUS?          SP1       TMSERR            .  NO, SET ERROR FLAG          OFF                         . ** END TMS CODE **          E$CLEAR                     . CLEAR EDIT          E$COL     37                . MOVE TO COL 37 TO CENTER ON PAGE          E$CHAR    A8,,W             . EDIT REEL STATUS CHAR          E$COPY    6,SRREEL,X5       . EDIT REEL NUMBER          E$SKIP    4                 .          LA        A4,SRCRJL,X5      . CREATION DATE (JULIAN)          LMJ       X11,JULIN         . CONVERT TO TDATE$          E$DAY1                      . EDIT IN OUTPUT          E$SKIP    4                 .          ON        M$EXPPERM>0       . THIS CODE FOR PERM-EXP ONLY          LA        A0,SREXP,X5       . ORIGINAL EXPIRATION          TE,U      A0,M$EXPPERM      . PERMANENT EXP?          J         AS455             .  NO, SKIP          E$COPY    8,('--------    ') .  YES, INDICATE NO EXP DATE          J         AS460             . SKIP EDIT OF EXP DATEAS455          OFF       M$EXPPERM>0       . END OF PERM-EXP CODE          E$DAY1    A9                . EDIT EXPIRATION DATEAS460          E$DECF    8,SREXP,X5        .  AND EXP PERIOD          E$DECF    10,SRFLCT,X5      .  AND FILE COUNT ON REEL          ON        TMS               . ** BEGIN TMS CODE **          TNZ       TMSVFY            . VERIFY THIS TAPE?          J         AS500             .  NO, SKIP          E$SKIP    4                 .  YES, CONTINUE EDITING LINE          TNZ       TMSSTAT,X6        . GOOD TMS STATUS?          J         AS470             .  YES, SKIP          E$MSG     TMSBDS            .  NO, 'TMS-STATUS='          E$OCTV    TMSSTAT,X6        .   EDIT TMS RETURN STATUS          J         AS500             .    AND THAT'S ALLAS470          TNE       A9,TMSEXP,X6      . IS EXP DATE CORRECT?          J         AS480             .  YES, SKIP          E$MSG     TMSBDE            .  NO, 'TMS-EXP='          E$DAY1    TMSEXP,X6         .   EDIT TME EXPIRE DATE          E$SKIP    2                 .          J         AS485             . GO EDIT RUN, ALSOAS480          LA        A0,TMSRUN,X6      . GET CREATING RUNID          SSL       A0,12             . ISOLATE 1ST 4 CHARS          TNE       A0,('@@ARCH')     . ARCHIVE RUN?          J         AS490             .  YES, REEL IS GOODAS485          E$MSG     TMSBDR            . EDIT 'TMS-RUN='          E$FD1     TMSRUN,X6         . EDIT TMS CREATION RUNIDAS490          LA        A0,TMSRFR,X6      . REFERENCING RUNID          SSL       A0,12             . 1ST 4 CHARS          TNE       A0,('@@ARCH')     . ARCHIVE RUN?          J         AS500             .  YES, THAT'S ALL          JZ        A0,AS500          . ALSO SKIP IF ZERO          E$COL     124               .  NOT ZERO          E$FD1     TMSRFR,X6         .   PUT REF RUNID IN CC 124-130AS500          OFF                         . ** END TMS CODE **          P$RINT    (0126,LINE)       . PRINT INFO LINE FOR REEL          JGD       R5,AS400          . BACK FOR NEXT REELAS800          ON        TMS               . THIS CODE FOR TMS ONLY          LA        A0,TMSERR         . THIS FLAG = 1 IF ANY ERRORS DETECTED          TEP,U     A15,1*/('Z'-'V')  . IS VERIFICATION REQUESTED?          ER        SETC$             .  YES, COND WORD (T3) = ERR STATUS          OFF       TMS               . END OF TMS CODE          ER        EXIT$             . ALL DONE/..         ERROR RETURNED FROM DOUBLE-BUFFERED READ ROUTINE.AS900          LMJ       X9,STATUS         . PRINT I/O ERROR STATUS          NOP                         ...         GENERAL ERROR EXIT.AS920          ER        ERR$              . ABORT HERE..         I/O STATUS CHECK ROUTINE.STATUS          TNZ,S1    3,A0              . IS STATUS = 0 (GOOD?)          J         1,X9              .  YES, RETURN GOOD STATUS          LX,U      X4,,A0            .  NO, X4 = PACKET ADDRESS          LXI,U     X4,1              . LOOP INCREMENT          P$RINT    ERRPRT(5)         . 'BAD I/O STATUS - PACKET DUMP FOLLOWS:'          E$DIT     EPKT              . OPEN EDIT          LA,U      A4,5              . DUMP 6 WORDSST100          E$OCTF    12,,*X4           . EDIT NEXT WORD INTO IMAGE (OCTAL)          E$SKIP    1                 .          JGD       A4,ST100          . LOOP BACK FOR REST          P$RINT    (0116,LINE)       . PRINT I/O PACKET DUMP          J         0,X9              . RETURN ERROR STATUS/.ERR(1)    'ARCHIVE HISTORY FILE IS EMPTY OR HAS BAD HEADER'ERR(2)    'EXPIRATION TABLE OVERFLOW, REBUILD WITH NEW MAX VALUE'ERR(3)    'FILE ENCOUNTERED WITH ZERO REEL COUNT'ERR(4)    'INTERNAL TABLE OVERFLOW, INCREASE <MAXTAP>'ERR(5)    'BAD I/O STATUS - PACKET DUMP FOLLOWS:'ERR(6)    '*ERROR* SYSTEM-ID PARAMETER CARD MISSING, REQUIRED'NERR      EQU       6ERR(NERR+1)I DO NERR ,ERRPRT(I)  +  0100+ERR(I+1)-ERR(I),ERR(I).HDGMSG    '*** ARCHIVE STATISTICS FOR &-& THRU &-& ***&'SITMSG    '  SYSTEM-ID: &'HDG1      'ACTIVITY      RUN CT     FILE CT      TRACK CT'H1L       EQU       $-HDG1HDG2      '      SUMMARY OF CURRENT ARCHIVE STORAGE:'H2L       EQU       $-HDG2HDG3      '  EXPIRATION    TAPE CT     FILE CT   FIXED TRK CT   REMOV TRK CT'H3L       EQU       $-HDG3DASHES DO H3L , '- - - 'HDG4M     '':$CFS(M$SITENM):'&'HDG5M     '    LISTING OF ACTIVE ARCHIVE TAPES         DATE &    PAGE &'HDG6 DO 6 ,   ' '          '  REEL      CREATED     EXPIRES   EXP-DAYS  FILE CT'H6L       EQU       $-HDG6DASH2 DO 6 ,   ' ' DO H6L-6 ,  '- - - '          ON        TMSTMSBDS    'TMS-STATUS=&'TMSBDE    'TMS-EXP=&'TMSBDR    'TMS-RUN=&'.                                     . TMS$ ARGUMENT LIST (ACOB FORMAT)TMSARG    +         1                 . ARGUMENT COUNT          +         TMSPKT            . ADDRESS OF REQUEST PACKET          OFF/.$(0)CURDAT    +         0                 . CURRENT DATE/TIME (TDATE$)CURJUL    +         0                 . CURRENT DATE (JULIAN)TAPECT    +         0                 . COUNT OF TAPE REEL TABLEEPKT      E$PKT     22,LINE           . EDIT$ PACKETSITCOD    '            '              . SYSTEM-IDLINE      RES       22                . EDIT$ OUTPUT BUFFERAHHDPK    I$OD      'ARCHIST$',RDL$  28,AHHDBF  0 . I/O PKT TO READ AHF HEADERAHRDPK    D$BRP     'ARCHIST$'  28,1792*2,$-$ . D-B I/O PKT TO READ HIST ENTRIES          ON        TMS               .TMSERR    +         0                 . THIS FLAG = 1 IF ANY ERRS DETECTEDTMSVFY    +         0                 . SET IF REEL IS TO BE VERIFIED W/TMSTMSPKT    RES       TMSSIZ            . TMS$ REQUEST PACKET          OFF                         .AHHDBF    RES       28                . AHF HEADER BUFFERTPCTAB    RES       MAXEXP+1          . TAPE COUNT INDEXED BY EXPIRATIONFILTAB    RES       MAXEXP+1          . FILE COUNT INDEXED BY EXPIRATIONFTRTAB    RES       MAXEXP+1          . FIXED TRACK COUNT INDEXED BY EXPIRATIONRTRTAB    RES       MAXEXP+1          . REMOV TRACK COUNT INDEXED BY EXPIRATIONSRTTBL    RES       MAXTAP*SRSIZE     . TAPE REEL TABLE          END       START@ELT,SIP MARSREL$.MAP/ARSTAT,,,202707112332,006IN MARS$.ARSTAT,.JULDATENOT TPF$.@ELT,SIP MARSREL$.CNSRLD,,,205270132334,023.         PROGRAM TO RELOAD ONE OR MORE FILES VIA CONS COMMAND - WRC 3/89..         IF THIS PROGRAM IS EXECUTED WITH THE 'A' OPTION, FILES CAN BE.         RELOADED FROM THE ARCHIVE HISTORY FILE (SYS$*ARCHIST$).  IF IT.         IS EXECUTED WITH THE 'F' OPTION, FILES CAN BE RELOADED FROM THE.         FAS SAVE-HISTORY FILE (SYS$*SAVHIST$).  IF NEITHER OR BOTH OPTIONS.         ARE GIVEN, THE OPERATOR IS QUERIED FOR THE TYPE OF RELOAD..$(1)      AXR$          $LIT          $ASCII          CHRDEF          MGPDEF          AHFDEF          RCBDEF..         SORT RECORD DEFINITIONS.SREQIP    EQUF      0,,H1             . EQUIP CODE (0=REEL, >0=CARTRIDGE)SRRLH1    EQUF      0,,H2             . CHARS 1-3 OF FIRST REELIDSRRLH2    EQUF      1,,H1             . CHARS 4-6 OF FIRST REELIDSRSEQ     EQUF      1,,H2             . SEQUENCE (POSITION ON TAPE)SRQUAL    EQUF      2                 . QUALIFIERSRFILE    EQUF      4                 . FILENAMESRCYCL    EQUF      6,,H1             . CYCLESRBRCT    EQUF      6,,S4             . COUNT OF BACKUP REELSSRFLGS    EQUF      6,,S5             . RELOAD FLAGSSRHFLK    EQUF      7                 . ARCHIST$ LINKSRMRTB    EQU       8                 . TABLE FOR BACKUP REELS 2-N.SRSIZE    EQU       SRMRTB+RCBRMX-1   . SORT RECORD SIZEMAXSRT    EQU       M$RELDMAX         . MAX NUMBER OF RECORDS TO SORT.START          SA        A5,A15            . SAVE OPTIONS          SPD       A0                . PSR D-BITS          OR,U      A0,010            . SET QUARTER WORD MODE BIT          LPD       0,A1              . BACK TO PSR W/QWM SET          LA,U      A10,'0'-1         . SET UP REGISTERS FOR CHAR SCAN ROUTINE          LA,U      A11,'9'           .          LA,U      A12,'A'-1         .          LA,U      A13,'Z'           .          ON        M$MHFSHARED>0     . THIS CODE FOR SHARED-ONLY          LA,U      A0,DIDPKT         .          ER        MSCON$            . PERFORM MSCON$-DIRID$ REQUEST          JN        A0,CR020          . SKIP IF NEG STATUS RETURNED          LA,S6     A0,DIDBUF         . GET MHFS STATUS BITS          TEP,U     A0,1              . IS MHFS CONFIG ON SYSTEM?          J         CR025             .  YES, SKIPCR020          P$RINT    (0100+ER12L,ERR12) . 'MHFS NOT CONFIG, <M$MHFSHARED> MUST=0'          ER        ERR$              .  ABORTCR025          LA,S5     A1,DIDBUF         . GET HOSTID          TG,U      A1,1              . TEST FOR VALID RANGE, 1-4          TG,U      A1,4+1            .          J         $+2               . OUT OF RANGE, ERROR          J         CR030             . WITHIN RANGE, CONTINUE          P$RINT    (0100+ER13L,ERR13) . 'INVALID HOSTID RET BY DIRID$'          ER        ERR$              .  ABORTCR030          SA        A1,HOSTID         . SAVE HOST-ID FOR LATER USE          LA,S1     A0,DIDBUF         . PICK UP DEFAULT DIRECTORY          SA        A0,DEFDIR         . SAVE FOR LATER          OFF       M$MHFSHARED>0     . END OF SHARED-ONLY CODE          LA,U      A0,GENRUN         . ADDR OF GENERATED RUNID          LA        A1,(1,1)          . PCT$ PARAMETER TO RETRIEVE IT          ER        PCT$              . GET GENERATED RUNID          TOP       A15,(1*/('Z'-'A')) . ARCHIVE RELOAD REQUESTED?          J         CR040             .  NO, CHECK FOR FAS RELOAD          TEP       A15,(1*/('Z'-'F')) .  YES, FAS RELOAD REQUESTED ALSO?          J         CR050             .    YES, ASK OPERATOR FOR TYPE          J         CR070             .    NO, PROCESS ARCHIVE RELOAD(S)CR040          TEP       A15,(1*/('Z'-'F')) . FAS RELOAD REQUESTED?          J         CR060             .  YES, PROCESS FAS RELOAD(S)CR050          SZ        IMAGE             . CLEAR PREVIOUS ANSWER          C$OM      COMQ1PKT          . 'RELOAD FROM ARCHIVE OR SAVE TAPE?'          TZ,S1     COMQ1PKT          . GOOD COM STATUS?          ER        ERR$              .  NO, ABORT          LA,S1     A0,IMAGE          . GET RESPONSE          TNE,U     A0,$CFS('A')      . ARCHIVE RELOAD?          J         CR070             .  YES, GO PROCESS          TE,U      A0,$CFS('F')      . FAS RELOAD?          J         CR050             .  NO, ASK AGAINCR060          LA        A0,($CFS('*SHFL*')) . SAVE HISTORY FILE LABEL WORD          SA        A0,HSTLBL         . STORE FOR USE BY FINDFILE ROUTINE          SP1       SAVMOD            . SET FAS SAVE-HIST MODE          LA,U      A0,USESHF         .  @USE HISTIN$,SYS$*SAVHIST$          J         CR080             . REMAINDER OF INIT IS COMMON CODECR070          LA        A0,($CFS('*AHFL*')) . ARCHIVE HISTORY FILE LABEL WORD          SA        A0,HSTLBL         . STORE FOR USE BY FINDFILE ROUTINE          LA,U      A0,USEAHF         .  @USE HISTIN$,SYS$*ARCHIST$CR080          ER        CSF$              . ATTACH USE NAME TO DESIRED HF          LA,U      A0,ASGHST         .  @ASG,A HISTIN$          ER        CSF$              . ASSIGN FILE          JP        A0,CR090          . SKIP IF GOOD STATUS          LA        A4,A0             .  BAD STATUS - SAVE IN A4          E$DIT     EPKT              . OPEN EDIT          E$MSG     ASGERR            . 'UNABLE TO ASSIGN HIST FILE - STAT: '          E$OCTF    12,A4             . EDIT OCTAL STATUS          P$RINT    (0114,LINE)       . PRINT ERROR MESSAGE          ER        ERR$              .  AND ABORTCR090          LA        A0,(9,AHFFAC)     . FITEM$ PACKET FOR HIST FILE          ER        FITEM$            . RETRIEVE INFO: F-CYC WILL BE USED LATER          I$OW      HDRPKT            . READ AHF HEADER          TNZ,S1    HDRPKT+3          . IS STATUS GOOD?          J         CR100             .  YES, SKIP          P$RINT    (0100+ER7L,ERR7)  .  NO, 'I/O ERROR READING HIST FILE HDR'          ER        ERR$              .   BLOW UP...         SOLICIT THE NEXT FILENAME (OR GO, ABORT) FROM THE OPERATOR.CR100          LA        A0,(1,IMAGE)      . POINTER TO COMMAND LINE          LA,U      A1,($CFS('      ')) . SET UP TO SPACEFILL          LR,U      R1,8              . LINE IS 8 WORDS LONG          BT        A0,,*A1           . SPACEFILL COMMAND LINE          C$OM      COMQ2PKT          . SOLICIT FILENAME/GO/ABORT FROM OPERATOR          TZ,S1     COMQ2PKT          . GOOD COM STATUS?          ER        ERR$              .  NO, ABORT          LX,U      X5,IMAGE          .  YES, SETUP FOR CHAR SCAN          LR,U      R4,8              . IMAGE IS UP TO 8 WORDS LONG          LMJ       X11,SETUPF        . SETUP FOR FIELDATA SCAN          GNCHNB,CR290,CR290  'A1',CR110  'EN',CR100 . FIRST FIELD MUST BE ALPHACR110          DS        A4,TQUAL          . STORE QUALIFIER OR GO/ABORT          LA        A0,DEFDIR         . DEFAULT DIRECTORY ID (077=BOTH)          SA        A0,TDIR           . USE FOR TARGET DIR IF NONE GIVEN          JUMP,,CR280  '*',CR120  '#',CR112  . BRANCH ON SEP CHARCR112          LA,U      A0,0              . ASSUME DIR = STANDARD          LA        A1,TQUAL          . FIRST WORD OF DIR NAME          TNE       A1,($CFS('STD   ')) . STANDARD DIR GIVEN?          J         CR115             .  YES, SKIP          ON        M$MHFSHARED>0     . THIS CODE FOR SHARED-ONLY          LA,U      A0,1              . CODE FOR SHARED DIRECTORY          TNE       A1,($CFS('SHARED')) . SHARED DIR GIVEN?          J         CR115             .  YES, SKIP          OFF       M$MHFSHARED>0     . END OF SHARED-ONLY CODE          J         CR290             . INVALID DIRECTORY NAME GIVENCR115          SA        A0,TDIR           . SAVE TARGET DIRECTORY ID          GNCH,CR290,CR290  'A1',CR118 . NEXT FIELD MUST BE QUALCR118          DS        A4,TQUAL          . STORE QUALIFIER          JUMP,,CR290  '*',CR120      . ASTERISK MUST FOLLOW QUALIFIERCR120          GNCH,CR290,CR290  'A1',CR130 . FILENAME REQUIRED HERECR130          DS        A4,TFILE          . STORE FILENAME          JUMP,,CR290  '(',CR140      . CYCLE SYNTAX REQUIRED NEXTCR140          GNCH,CR290,CR290  'NU',CR150 . GET CYCLE NUMBERCR150          TG,U      A5,1              . CYCLE MUST BE > 0, < 4096          TG,U      A5,4096           .          J         CR290             .  IF NOT, ERROR          SA        A5,TCYC           . STORE BINARY F-CYCLE          JUMP,,CR290  ')',CR160      . CONTINUE SYNTAX CHECKCR160          GNCH,,CR170  '.',CR165      . PERIOD NOT REQUIRED, IGNORE IF IT ISCR165          GNCH                        . EAT PERIOD CHARACTERCR170          SZ        TJARC             . ZERO ARCHIVE TIME          JUMPNB,,CR180  '<',CR175  'EN',CR300 . SKIP OVER '<' CHAR IF GIVENCR175          GNCHNB                      . EAT '<' CHARACTERCR180          JUMP,,CR290  ',',CR190      . COMMA IS REQUIRED HERECR190          GNCHNB,,CR290  'NU',CR200   . NEXT FIELD MUST BE ARCHIVE DATECR200          TG        A5,(890101)       . CHECK FOR LEGAL DATE RANGE          TG        A5,(991231+1)     .          J         CR290             .  IF NOT LEGAL, ERROR          LA        A0,A5             . MOVE DATE TO A0          DSL       A0,36             . PREPARE FOR DIVIDE          DI,U      A0,10000          . ISOLATE YEAR          DSL       A1,36             . PREPARE FOR 2ND DIVIDE          DI,U      A1,100            . ISOLATE MONTH (A1), DAY(A2)          ANA,U     A0,64             . CONVERT YEAR TO MOD-64          LSSL      A1,12             . SHIFT MONTH TO PROPER TDATE$ POSITION          LSSL      A2,6              . SHIFT DAY TO PROPER TDATE$ POSITION          AA,U      A0,,A1            . ADD IN MONTH          AA,U      A0,,A2            .  AND DAY          LSSL      A0,18             . SHIFT RESULT TO A0 UPPER          LMJ       X11,JULOUT        . CONVERT TO JULIAN DATE          J         CR290             .  SKIP IF ERROR IN CONVERSION          SA        A4,TJARC          . STORE JULIAN ARCHIVE DATE          JUMPNB,,CR290  '>',CR250  'EN',CR300 . SKIP OVER '>' CHAR IF GIVENCR250          GNCHNB,,CR290  'EN',CR300   . THAT MUST BE ALL, IF NOT, ERROR..         ASTERISK DID NOT FOLLOW FIRST INPUT FIELD - CHECK FOR COMMAND.CR280          LA        A0,TQUAL          . GET INPUT FIELD          LA,U      A8,1              . 'GO' FLAG          TNE       A0,($CFS('GO    ')) . IS THIS THE 'GO' COMMAND?          J         CR285             .  YES, SKIP          LA,U      A8,0              . 'ABORT' FLAG          TE        A0,($CFS('ABORT ')) . IS THIS THE 'ABORT' COMMAND?          J         CR290             .  NO, ERRORCR285          JUMPNB,,CR290  'EN',CR400   . PROCESS CMD IF NOTHING ELSE IN INPUT..         ERROR IN OPERATOR-SUPPLIED RELOAD SPECIFICATION OR COMMAND.CR290          LA        A0,(ER1L*6,ERR1)  . 'DATA SPECIFICATION ERROR - RETRY'          SA        A0,COMPKT+1       . SET UP FOR COM MESSAGE          C$OM      COMPKT            . ISSUE ERROR MESSAGE          J         CR100             . TRY, TRY AGAIN/..         PROCESS VALID RELOAD SPECIFICATION.          $FDATA    . REMAINDER OF ASSEMBLY IS IN FIELDATA.CR300          DL        A0,TQUAL          . TARGET QUALIFIER,          DL        A2,TFILE          .  FILENAME,          LA        A4,TCYC           .  CYCLE          DS        A0,EXPKT+1        . STORE IN EXIST$ PACKET          DS        A2,EXPKT+3        .          SA,H2     A4,EXPKT+5        .          SZ        EXPKT+7           . ZERO START SECTOR, COUNT, START ITEM          LA        A0,TDIR           . TARGET DIRECTORY-ID          TNE,U     A0,1              . SHARED-SPECIFIC REQUEST?          J         CR310             . YES, SKIP          SZ,H1     EXPKT             . NO, DO STANDARD SEARCH FIRST          LA,U      A0,EXPKT          .          ER        MSCON$            . PERFORM MSCON$-EXIST$ REQUEST          AND       A0,(077*/18)      . S3 = STATUS          SSL       A1,18             . SHIFT TO A1 LOWER          JN        A0,CR305          . SKIP IF NEG STATUS RETURNED          TG,U      A1,3              . IS SUBSTATUS > 2?          J         CR320             .  YES, ERROR          SZ        TDIR              .  NO, FIND - MARK DIR = STD          J         CR325             .CR305          TE,U      A1,043            . IS ERROR = FILE NOT EXIST?          J         CR320             .  NO, DON'T KNOW WHAT THIS IS          TNZ       TDIR              .  YES, WAS MULTI-DIR SEARCH REQ?          J         CR340             .   NO, THIS IS NO-FINDCR310          SP1,H1    EXPKT             . SET PACKET FOR SHARED-DIR SEARCH          LA,U      A0,EXPKT          .          ER        MSCON$            . PERFORM MSCON$-EXIST$ REQUEST          AND       A0,(077*/18)      . S3 = STATUS          SSL       A1,18             . SHIFT TO A1 LOWER          JN        A0,CR315          . SKIP IF NEG STATUS RETURNED          TG,U      A1,3              . IS SUBSTATUS > 2?          J         CR320             .  YES, ERROR          SP1       TDIR              .  NO, FIND - MARK DIR = SHARED          J         CR325             .CR315          TNE,U     A1,043            . IS ERROR = FILE NOT EXIST?          J         CR340             .  YES, NO FIND - FILE MAY BE RELOADEDCR320          LA        A1,A0             . SAVE STATUS          P$RINT    (0100+ER14L,ERR14) . 'MSCON$-EXIST$ ERROR, A0=STATUS'          LA        A0,A1             . RESTORE STATUS          ER        ERR$              . ABORTCR325          TG,U      A1,2              . DOES SPECIFIC F-CYC EXIST?          J         CR330             .  NO, GO DO RANGE CHECK          LA        A0,(ER2L*6,ERR2)  . 'SPECIFIED FILE IS ALREADY CATALOGUED'          SA        A0,COMPKT+1       . SET UP TO SEND COM MESSAGE          C$OM      COMPKT            . SEND MESSAGE TO CONSOLE          J         CR100             . GO TRY AGAINCR330          LA        A1,LIBUFF+9       . GET HIGHEST CURRENT CYCLE          AND,U     A1,07777          .  INTO A2          AU,S3     A2,LIBUFF+9       . ADD MAX RANGE, TO A3          ANA,S4    A3,LIBUFF+9       . SUBTRACT CURRENT RANGE          ANA,S3    A2,LIBUFF+9       . SUBTRACT MAX RANGE FROM A2          TG,U      A3,1000           . IS MAX CYCLE OVER 999?          ANA,U     A3,999            .  YES, ADJUST FOR CYCLE WRAP          TLE,U     A2,0              . IS MIN CYCLE LESS THAN 1?          AA,U      A2,999            .  YES, ADJUST FOR CYCLE WRAP          TLE,U     A4,1,A3           . IS CYCLE >= HIGH+MAX-CUR+1 ?          J         CR332             .  NO, JUMP          TG        A3,A2             .  YES, IS CYCLE WRAP POSSIBLE?          J         CR335             .   NO, ERROR          J         CR333             .   YES, CHECK AGAINST MINIMUMCR332          TG        A2,A3             . IS CYCLE WRAP POSSIBLE?          J         CR340             .  YES, THIS IS LEGAL F-CYCLECR333          TG,U      A4,1,A2           . IS CYCLE < HIGH-MAX+1 ?          J         CR340             .  NO, THIS IS LEGAL F-CYCLECR335          LA        A0,(ER8L*6,ERR8)  . 'FILE OUTSIDE ALLOWABLE F-CYCLE RANGE'          SA        A0,COMPKT+1       . SET UP FOR COM MESSAGE          C$OM      COMPKT            . SEND MESSAGE TO CONSOLE          J         CR100             . GO TRY AGAINCR340          LMJ       X11,FFINIT        . TELL FINDFILE TO BEGIN NEW SEARCH          LA,U      A8,0              . INIT LINK = 0 (NO FIND)          LA        A0,TDIR           . DIR-ID FOR LOOKUP          LA        A7,HOSTID         . FIRST SEARCH WILL BE <STD>, LOCAL HOST          TNE,U     A0,1              .  UNLESS SHARED-SPECIFIC REQUEST          LA,U      A7,077            .  IN WHICH CASE SEARCH <SHARED> ONLYCR350          DL        A0,TQUAL          . LOAD TARGET QUALIFIER,          DL        A2,TFILE          .  FILENAME,          LA        A4,TCYC           .  F-CYCLE          LA        A5,A7             . HOST-ID FOR REQUEST          LSSL      A5,18             .  TO A5 UPPER, LOWER = 0 (NO BACKUP)          LMJ       X11,FINDFILE      . SEARCH AHF POINTER AREA FOR MATCH          ER        ERR$              . ABORT IF ERROR RET FROM FINDFILE          J         CR360             . SKIP IF NO MORE MATCHES          LA        A0,TJARC          . MATCH FOUND - LOAD SPECIFIED DATE          JZ        A0,CR355          . USE THIS ENTRY IF NO TARGET DATE          TE        A0,APFEAD,X4      . DATE WAS GIVEN - SAME AS SAVE/ARC DATE?          J         CR350             .  NO, SKIP THIS ENTRYCR355          LA        A8,APFECL,X4      . LOAD CYCLE, AHF SECTOR FOR ENTRY          LSSL      A8,12             .          SSL       A8,12             . SHIFT OFF CYCLE PORTION, A8 = LINK          AA        A8,AHFHDR+AHHSTB  . MAKE ABSOLUTE          J         CR350             . CONT SEARCH IN CASE MORE RECENT ENTRYCR360          JNZ       A8,CR370          . SKIP IF LINK FOUND (USE MOST RECENT)          TZ        TDIR              . NO MATCH - ONLY SEARCH <STD>,          TNE,U     A7,077            .  OR HAS <SHARED> ALREADY BEEN SEARCHED?          J         CR365             .   YES, THIS IS NO-FIND          LA,U      A7,077            .   NO, SETUP TO SEARCH <SHARED>          J         CR350             . TRY AGAINCR365          LA        A0,(ER3L*6,ERR3)  . NO FIND, 'SPEC FILE NOT IN ARCHIVE'          SA        A0,COMPKT+1       . SET UP FOR COM MESSAGE          C$OM      COMPKT            . SEND MESSAGE TO CONSOLE          J         CR100             . GO TRY AGAINCR370          SZ        TDIR              . SET TARGET DIR-ID = 0 (STD)          TNE,U     A7,077            . FIND FROM SHARED DIR?          SP1       TDIR              .  YES, SET TARGET DIR-ID = 1 (SHARED)          SA        A8,HSTPKT+5       . STORE SECTOR ADDR IN HIST FILE I/O PKT          I$OW      HSTPKT            . READ HISTORY ENTRY FOR FILE          TZ,S1     HSTPKT+3          . CHECK STATUS          LMJ       X1,CR390          .  BLOW UP IF NONZERO I/O STATUS          LX,U      X6,AHBUFF         . X6 = HIST ENTRY ADDRESS          DL        A2,AHQUAL,X6      . QUALIFIER FROM HIST ENTRY          DTE       A2,TQUAL          . BETTER EQUAL TARGET QUALIFIER          LMJ       X1,CR390          . IF NOT, ERROR          DL        A4,AHFILE,X6      . FILENAME FROM HIST ENTRY          LA        A1,AHCYCL,X6      . F-CYCLE FROM HIST ENTRY          TNE       A1,TCYC           . DO CYCLE AND          DTE       A4,TFILE          .  FILENAME MATCH TARGET?          LMJ       X1,CR390          .   NO, ERROR          LA,U      A0,LINE           .   YES, A0 = SORT RECORD ADDRESS          DS        A2,SRQUAL,A0      . STORE QUALIFIER          DS        A4,SRFILE,A0      .  FILENAME          SA        A1,SRCYCL,A0      .  CYCLE          LA        A5,AHBRCT,X6      . COUNT OF BACKUP REELS          TLE,U     A5,RCBRMX+1       . TOO MANY REELS FOR RELOAD?          J         CR375             .  NO, CONTINUE          LA        A0,(ER11L*6,ERR11) .  YES, PREPARE ERROR MESSAGE          SA        A0,COMPKT+1       . 'TOO MANY BACKUP REELS'          C$OM      COMPKT            . SEND MESSAGE TO OPERATOR          J         CR100             . GO TRY AGAINCR375          LA        A2,AHFLGS,X6      . HISTORY ENTRY FLAG BITS          LA,U      A6,0              . ZERO RELOAD FLAG BITS          TEP,U     A2,AHFHIC         . SAVED ON CARTRIDGE?          LA,U      A6,RCFBCT         .  YES, SET CARTRIDGE FLAG          LA        A2,AHBRST,X6      . FIRST BACKUP REEL          DSL       A2,18             . SHIFT CHARS 1-3 TO A2 LOWER          SSL       A3,18             .  AND 4-6 TO A3 LOWER          LA        A4,AHSTFP,X6      . STARTING FILE POSITION ON TAPE          SA        A6,SREQIP,A0      . H1 OF SORT REC WILL BE >0 IF CARTRIDGE          SA        A2,SRRLH1,A0      . SAVE 1ST REEL CHARS 1-3 IN SORT RECORD          SA        A3,SRRLH2,A0      .  AND 1ST REEL CHARS 4-6          SA        A4,SRSEQ,A0       .  AND STARTING FILE POSITION          SA        A5,SRBRCT,A0      .  AND COUNT OF BACKUP REELS          SA        A8,SRHFLK,A0      . STORE LINK TO HIST SECT          TLE,U     A5,2              . MORE THAN ONE BACKUP REEL?          J         CR380             .  NO, SKIP          LA,U      A2,AHBRST+1,X6    .  YES, SET UP FOR TRANSFER          LXI,U     A2,1              .          LA,U      A3,SRMRTB,A0      . ADDRESS OF ADDITIONAL REEL TABLE          LXI,U     A3,1              .          ANA,U     A5,1              . COUNT OF REMAINING REELS          LR        R1,A5             . INTO R1 FOR TRANSFER          BT        A3,,*A2           . MOVE REMAINING REEL DATACR380          LA        A4,AHPKID,X6      . PACKID IF REMOVABLE          JZ        A4,CR388          . SKIP PACK-CHECK IF ORIG=FIXED          LA        A0,TDIR           . DIR-ID FOR RELOADED FILE          SA,H1     A0,MSAPKT         .  STORE IN MSCON$-MSALL$ PKT          LA,U      A0,MSAPKT         .          ER        MSCON$            . PERFORM MSCON$-MSALL$ FUNCTION          JN        A0,CR381          . SKIP IF NEG STATUS RETURNED          LR,H2     R1,MSABUF         . COUNT OF EQUIP TYPES          JGD       R1,CR382          . DECR FOR LOOP, SKIP IF NONZEROCR381          LA        A1,A0             . SAVE STATUS          P$RINT    (0100+ER15L,ERR15) . 'ERROR PROCESSING MSALL$ DATA'          LA        A0,A1             . RESTORE STATUS          ER        ERR$              .  ABORTCR382          LA        A3,(1,0)          . POINTER TO EQUIP INDEX TABLE          LXI,U     A2,10             . UNIT TABLE SIZE INCREMENTCR383          LXM,H1    A2,MSABUF+1,A3    . ADDRESS OF NEXT UNIT TABLE          LA,H2     A0,MSABUF+1,*A3   . ADDRESS OF EQUIP SUMMARY TABLE          LA        A0,MSABUF,A0      . WORD ZERO OF EQUIP SUMMARY TABLE          SSL       A0,24             . UNIT COUNT (T1) TO A0 LOWER          LR,U      R2,,A0            . INTO R2 FOR LOOP          JGD       R2,CR384          . SKIP FORWARD, DECR FOR JGD          J         CR386             . SKIP, NO UNITS OF THIS TYPE AVAILCR384          DL        A0,MSABUF+2,A2    . WORDS 2,3 OF UNIT TABLE          TE        A4,MSABUF+7,*A2   . DOES PACKID MATCH THIS UNIT?          J         CR385             .  NO, SKIP          TEP,U     A1,02             .  YES, IS THIS UNIT CONFIG AS FIXED?          J         CR385             .   YES, SKIP THIS UNIT          AND,U     A0,074            . A1 = DN, RV, SU, NOT AVAIL          JZ        A1,CR388          . SKIP IF ZERO, THIS IS GOOD PACK-IDCR385          JGD       R2,CR384          . LOOP BACK FOR OTHER UNITSCR386          JGD       R1,CR383          . LOOP BACK FOR OTHER EQUIP TYPES          AA,U      A6,RCFBFX         . NO FIND FOR PACK, MARK FOR FIXED-RLDCR388          TNE,U     A7,077            . IS THIS A SHARED-FILE RELOAD?          AA,U      A6,RCFBOS++RCFBRS .  YES, SET FLAGS FOR SHARED FILE          LA,U      A0,LINE           . RESTORE POINTER TO SORT RECORD          SA        A6,SRFLGS,A0      . SAVE RELOAD FLAGS IN SORT RECORD          LMJ       X11,SRTREL        . RELEASE RECORD TO SORT          ER        ERR$              . SORT OVERFLOW - SHOULD NOT HAPPEN          LA        A0,RELCNT         . COUNT OF FILES TO RELOAD          AA,U      A0,1              . INCREMENT          SA        A0,RELCNT         . AND STORE UPDATED COUNT          TG,U      A0,M$RELDMAX      . ARE WE AT MAXIMUM?          J         CR420             .  YES, GO RELOAD FILES          J         CR100             .  NO, SOLICIT NEXT COMMANDCR390          P$RINT    (0100+ER5L,ERR5)  . 'BAD LINK TO HIST FILE'          ER        ERR$              .  ABORT/..         'GO' OR 'ABORT' COMMAND WAS GIVEN.CR400          JNZ       A8,CR410          . SKIP IF COMMAND WAS 'GO'          LA        A0,(ER4L*6,ERR4)  . IF NOT, 'RELOAD ABORTED'          SA        A0,COMPKT+1       .          C$OM      COMPKT            . SEND MESSAGE TO CONSOLE          J         CR800             .  AND EXITCR410          TNZ       RELCNT            . 'GO' GIVEN - ANY FILES TO RELOAD?          J         CR800             .   NO, EXITCR420          LMJ       X11,SRTRTN        . SORT POINTER RECS BY REEL, POSITION          LX,U      X7,RCADDR         . X7 = BASE ADDR OF RELOAD CONTROL BANKCR430          TS        RCHDTS,X7         . LOCK CONTROL BANK          ER        TIME$             . GET SYSTEM TIME          ANA       A0,RCHDTM,X7      . SUBTRACT TIME CELL FROM RCB          JP        A0,CR440          . OK IF POSITIVE          AA        A0,(24*60*60000)  .  IF NOT, ADJ FOR PAST MIDNIGHT?          JN        A0,CR450          .   ERROR IF STILL NEGCR440          TG,U      A0,20000          . UPDATED LESS THAN 20 SEC AGO?          J         CR450             .  NO, RELOAD CONTROLLER IS NOT RUNNING          LA        A0,RCHDLV,X7      . GET BANK SW LEVEL (2R1 = UNDEFINED)          TNE,U     A0,RCLEVL         . IS THIS CORRECT LEVEL?          J         CR445             .  YES, CONTINUE          C$TS      RCHDTS,X7         .  NO, UNLOCK RCB          P$RINT    (0100+ER10L,ERR10) . 'SOFTWARE LEVEL INCOMPATIBILITY'          ER        ERR$              . ABORTCR445          LA        A0,RCHDFL,X7      .  YES, LOAD FLAG WORD          TNE       A0,('*READY')     . IS CONTROLLER IDLE?          J         CR500             .  YES, GO SET UP RELOAD DATA          TE        A0,('*DATA*')     .  NO, WORKING FOR SOMEONE ELSE?          J         CR450             .   NO, NOT RUNNING OR BANK CORRUPTED          C$TS      RCHDTS,X7         .   YES, UNLOCK AND WAIT          LA,U      A1,5000           .          ER        TWAIT$            . WAIT FIVE SECONDS          J         CR430             .  AND TRY AGAINCR450          C$TS      RCHDTS,X7         . UNLOCK RCB          C$OM      COMQ3PKT          . 'RLDCTL INOPER, RESOLVE AND ANS A'          J         CR430             . TRY AGAIN AFTER OPERATOR ANSWERSCR500          LX,U      X6,RCFEBG,X7      . X6 = START ADDRESS OF FILE ENTRIESCR520          LMJ       X11,SRTRET        . RETURN THE NEXT RECORD          J         CR600             . ALL DONE WHEN FINISHED          DL        A1,SRQUAL,A0      . QUALIFIER          DS        A1,RCFEQL,X6      . STORE IN RELOAD BANK RECORD          DL        A1,SRFILE,A0      . FILENAME          DS        A1,RCFEFL,X6      .  STORE IN RECORD          LA        A1,SRCYCL,A0      . CYCLE          SA        A1,RCFECY,X6      .  STORE IN RECORD          LA        A1,SRHFLK,A0      . AHF SECTOR LINK ADDRESS          LXI       A2,SRRLH1,A0      . CHARS 1-3 OF REEL 1          LXM       A2,SRRLH2,A0      . CHARS 4-6 OF REEL 1          SA        A1,RCFELW,X6      .  STORE LINK IN RELOAD BANK RECORD          SA        A2,RCFEBS,X6      .   AND REEL 1 ID          LA        A1,SRBRCT,A0      . COUNT OF BACKUP REELS          LA        A2,SRFLGS,A0      . RELOAD FLAG BITS          SA        A1,RCFEBC,X6      .  STORE IN RELOAD RECORD          SA        A2,RCFEFB,X6      .          TLE,U     A1,2              . MORE THAN ONE BACKUP REEL?          J         CR550             .  NO, SKIP          LA,U      A2,SRMRTB,A0      .  YES, SET UP FOR TRANSFER          LXI,U     A2,1              .          LA,U      A3,RCFEBS+1,X6    . ADDRESS OF REMAINING REEL DATA          LXI,U     A3,1              .          TG,U      A1,RCBRMX+1       . MORE THAN MAX ALLOWED?          LA,U      A1,RCBRMX         .  YES, LOAD MAXIMUM (SHOULD NEVER HAPPEN)          ANA,U     A1,1              . DECREMENT FOR REEL ALREADY TRANSFERRED          LR,U      R1,,A1            . INTO R1 FOR TRANSFER          BT        A3,,*A2           . MOVE REEL DATA TO BANK RECORDCR550          SZ        RCFEQ2,X6         . ZERO 2ND QUAL (NO RELOAD TO DIFF NAME)          AX,U      X6,RCFESZ         . POINT X6 TO NEXT FILE ENTRY          J         CR520             . BACK FOR NEXT FILECR600          LA        A0,RCHDAC,X7      . ACCESS COUNT          DSL       A0,36             . PREPARE FOR DIVIDE          DI,U      A0,RCRSMX         . DIVIDE BY MAX STATUS RECORDS          MSI,U     A1,RCRSSZ         . MULT REMAINDER BY REC SIZE          LX,U      X6,RCRSBG,X7      . X6 = START ADDR OF STAT RECORDS          AX,U      X6,,A1            .  ADD OFFSET, X6 = PTR TO OUR STAT REC          LA        A0,GENRUN         . CONSOLE RELOAD RUNID          SA        A0,RCRSGR,X6      .  STORE IN STATUS RECORD          LA,U      A1,RCSTWT         . WAIT STATUS          SA        A1,RCRSST,X6      .  STORE IN STATUS RECORD          SZ        RCRSAS,X6         . ZERO ACP/FETCH STATUS          LA        A0,AHFFAC+6       . CYCLE NUMBER OF HISTORY FILE          AND,U     A0,07777          . ISOLATE CYCLE IN A1          SA        A1,RCHDHC,X7      . STORE IN RCB HEADER          LA        A0,RELCNT         . RELOAD COUNT          LA        A1,SAVMOD         . FAS SAVE-HIST FLAG          LA        A2,('CONS')       . USERID WILL BE 'CONS'          SA        A0,RCHDFC,X7      .  STORE IN RCB HEADER          SA        A1,RCHDFA,X7      .   .          SA        A2,RCHDU4,X7      .   .          SZ        RCHDFE,X7         . ZERO FETCH-REQUEST FLAG          SZ        RCHDKL,X7         . ZERO LEYIN LENGTH          SZ        RCHDNT,X7         . ZERO NOTIFICATION TYPE          LA        A4,RCHDAC,X7      . ACCESS COUNT          AA,U      A4,1              . A4 = ACC COUNT AFTER OUR REQ PROCESSED          LA        A0,('*DATA*')     . DATA-READY FLAG          SA        A0,RCHDFL,X7      . STORE IN RCB HEADER          C$TS      RCHDTS,X7         . ALL DONE - UNLOCK HEADERCR620          LA,U      A1,2000           .          ER        TWAIT$            . WAIT 2 SECONDS          TS        RCHDTS,X7         . LOCK RELOAD CONTROL BANK          LA        A0,RCHDAC,X7      . ACCESS COUNT          LA        A1,RCRSGR,X6      . GENERATED RUNID FROM OUR STAT RECORD          LA        A2,RCRSST,X6      . STATUS FROM OUR RECORD          C$TS      RCHDTS,X7         . UNLOCK RCB          TLE       A0,A4             . HAS ACCESS COUNT BEEN UPDATED?          J         CR620             .  NO, CONTINUE WAITING          TE        A1,GENRUN         . YES, DOES RUNID STILL = US?          J         CR700             .  NO, ERROR          TE,U      A2,RCSTCM         . COMPLETION STATUS?          J         CR700             .  NO, ERROR          LA        A0,(MS1L*6,MSG1)  . '<RLCONS> HAS BEEN STARTED...'          SA        A0,COMPKT+1       .          C$OM      COMPKT            . NOTIFY OPERATOR OF GOOD STATUS          J         CR800             .  AND EXITCR700          LA        A0,(ER9L*6,ERR9)  . 'ERROR STATUS FROM RCB - NOTIFY SYST'          SA        A0,COMPKT+1       .          C$OM      COMPKT            . NOTIFY OPERATOR OF ERROR STATUSCR800          ER        EXIT$             . ALL DONE WITH COMMAND INPUT PHASE/..         SORT ROUTINES...         SRTREL - RELEASE RECORD TO SORT..         ENT: A0 = RECORD ADDRESS..         RETURNS: 0,X11 IF SORT TABLE OVERFLOW.                  1,X11 NORMAL.SRTREL          TZ        SRTCNT            . SORT COUNT SHOULD BE 0 WHILE RELEASING          ER        ERR$              .  IF NOT, ABORT          LA        A1,SRTPTR         . POINTER TO NEXT SORT RECORD          AU,U      A1,SRSIZE         . A2 = POINTER TO NEXT AFTER THIS RELEASE          TG,U      A2,MAXSRT*SRSIZE+1 . TEST FOR SORT TABLE OVERFLOW          J         SRL90             .   SKIP IF OVERFLOW          SA        A2,SRTPTR         .   IF NOT, STORE NEW POINTER          LXI,U     A0,1              . INCREMENT FOR BT          AH        A1,(1,SRTTBL)     . A1 = ABS ADDRESS OF SORT RECORD          LR,U      R1,SRSIZE         . SORT RECORD SIZE          BT        A1,,*A0           . TRANSFER TO SORT RECORD TABLE          J         1,X11             . RETURN GOOD STATUSSRL90          P$RINT    (0100+ER6L,ERR6)  . 'SORT TABLE OVERFLOW'          J         0,X11             . RETURN ERROR STATUS...         SRTRTN - SORT ALL RECORDS (ASCENDING)..         RETURNS: 0,X11 ALWAYS.SRTRTN          LA        A0,SRTPTR         . POINTER TO NEXT SORT RECORD          DSL       A0,36             . PREPARE FOR DIVIDE          DI,U      A0,SRSIZE         . DIV BY REC SIZE TO OBTAIN REC COUNT          SA        A0,SRTCNT         . STORE COMPUTED COUNT          ANA,U     A0,1              . DECREMENT FOR LOOP          LR        R3,A0             . OUTER LOOP COUNTSR100          JGD       R3,$+2            . DECR OUTER LOOP BY ONE EACH PASS          J         SR800             .  EXIT WHEN FINISHED          LR        R2,R3             . INNER LOOP COUNT = NEW OUTER LOOP COUNT          LA        A0,(SRSIZE,SRTTBL-SRSIZE) . INIT SORT TBL PTR FOR THIS PASS          LA,U      A1,0              . CLEAR EXCHANGE FLAGSR200          DL        A4,SRSIZE,*A0     . GET COMPARISON DATA FROM 1ST RECORD          JP        A4,SR250          . SKIP IF POSITIVE          TN        SRSIZE,A0         .  IF NOT, IS SECOND REC NEG?          J         SR400             .   NO, EXCHANGE RECORDS          J         SR300             .   YES, TREAT BOTH AS POSITIVESR250          TP        SRSIZE,A0         . FIRST REC POS, IS SECOND POS?          J         SR500             .  NO, RECORDS ARE IN CORRECT ORDERSR300          DAN       A4,SRSIZE,A0      . SUBTRACT 2ND VALUE FROM 1ST          JN        A4,SR500          . IF RESULT IS NEG, RECS ARE IN ORDER          DJZ       A4,SR500          . DO NOT EXCH IF RECS ARE EQUAL, EITHERSR400          LA,U      A1,,A0            . ADDRESS OF 1ST RECORD          LXI,U     A1,1              . INCREMENT, EXCHANGE ONE WORD AT A TIME          LR,U      R1,SRSIZE-1       . LOOP COUNT - 1SR450          LA        A4,,A1            . PICK UP NEXT WORD FROM 1ST RECORD          LA        A5,SRSIZE,A1      .  AND NEXT FROM 2ND RECORD          SA        A5,,A1            . EXCHANGE WORDS          SA        A4,SRSIZE,*A1     .  AND INCREMENT POINTER          JGD       R1,SR450          . LOOP FOR REST OF DATASR500          JGD       R2,SR200          . LOOP FOR NEXT COMPARISON          JNZ       A1,SR100          . BACK TO START IF EXCHANGE WAS MADESR800          LA,U      A0,SRTTBL-SRSIZE  . INIT ADDRESS FOR SRTRET ROUTINE          SA        A0,SRTPTR         .          J         0,X11             . RETURN...         SRTRET - RETURN A RECORD..         EXIT: A0 = NEXT RECORD ADDRESS..         RETURNS: 0,X11 NO MORE RECORDS.                  1,X11 NORMAL.SRTRET          LR        R1,SRTCNT         . REMAINING COUNT OF SORTED RECORDS          JGD       R1,$+2            . DECREMENT AND SKIP          J         SRT90             .  SKIP IF NO MORE RECORDS TO RETURN          SR        R1,SRTCNT         . OTHERWISE, STORE REMAINING COUNT          LA        A0,SRTPTR         . LOAD PREVIOUS POINTER          AA,U      A0,SRSIZE         . PLUS REC SIZE = POINTER TO NEXT RECORD          SA        A0,SRTPTR         . REPLACE POINTER          J         1,X11             . RETURN NORMAL STATUSSRT90          SZ        SRTPTR            . ZERO POINTER          SZ        SRTCNT            .  AND COUNT          J         0,X11             . RETURN EOF (NO MORE RECS IN TABLE)/.ERR1      'DATA SPECIFICATION ERROR - RETRY'ER1L      EQU       $-ERR1ERR2      'SPECIFIED FILE IS ALREADY CATALOGUED'ER2L      EQU       $-ERR2ERR3      'NOT ABLE TO LOCATE SPECIFIED FILE'ER3L      EQU       $-ERR3ERR4      'RELOAD ABORTED'ER4L      EQU       $-ERR4ERR5      'BAD LINK TO HISTORY FILE: X1 = ERROR ADDR, A8 = LINK'ER5L      EQU       $-ERR5ERR6      'SORT TABLE OVERFLOW (INTERNAL ERROR)'ER6L      EQU       $-ERR6ERR7      'I/O ERROR READING HEADER OF HISTORY FILE'ER7L      EQU       $-ERR7ERR8      'FILE OUTSIDE OF ALLOWABLE F-CYCLE RANGE'ER8L      EQU       $-ERR8ERR9      'ERROR STATUS FROM RLDCTL - NOTIFY SYSTEMS'ER9L      EQU       $-ERR9ERR10     'RLDCTL SOFTWARE LEVEL INCOMPATIBLE WITH THIS VERSION OF <CNSRLD>'ER10L     EQU       $-ERR10ERR11     'FILE HAS TOO MANY BACKUP REELS - USE DIRECT FAS REQUEST'ER11L     EQU       $-ERR11          ON        M$MHFSHARED>0ERR12     'MHFS IS NOT CONFIGURED, <M$MHFSHARED> MUST = 0'ER12L     EQU       $-ERR12ERR13     'INVALID HOSTID RETURNED BY MSCON$-DIRID$'ER13L     EQU       $-ERR13          OFF       M$MHFSHARED>0ERR14     'MSCON$-EXIST$ UNRECOGNIZED ERROR, A0 = STATUS'ER14L     EQU       $-ERR14ERR15     'ERROR PROCESSING MSCON$-MSALL$ INFORMATION'ER15L     EQU       $-ERR15MSG1      '<RLCONS> HAS BEEN STARTED TO RELOAD FILE(S)'MS1L      EQU       $-MSG1.COMMSG1   'RELOAD FROM ARCHIVE OR FAS SAVE TAPE?  AF'CQ1L      EQU       $-COMMSG1COMMSG2   'ENTER QUAL*FILE(CYCLE)<,YYMMDD>  OR  GO, ABORT'CQ2L      EQU       $-COMMSG2COMMSG3   'RELOAD CONTROLLER INOPERATIVE, RESOLVE AND ANS A'CQ3L      EQU       $-COMMSG3.          $IF       M$MHFSHARED=0SYMDID    EQU       'STD#'            . REQUIRED DIR-ID FOR NON-SHARED SYS          $ELSESYMDID    EQU       'SHARED#'         . REQUIRED DIR-ID FOR SHARED SYS          $ENDFUSEAHF    '@USE HISTIN$,':SYMDID:'SYS$*ARCHIST$/':$CFS(M$HFRK):' . 'USESHF    '@USE HISTIN$,':SYMDID:'SYS$*SAVHIST$/':$CFS(M$HFRK):' . 'ASGHST    '@ASG,AIZ HISTIN$ . 'ASGERR    'UNABLE TO ASSIGN HISTORY FILE - STATUS: &'/.$(0)HSTLBL*   +         0                 . HISTORY FILE LABEL WORDSAVMOD    +         0                 . SET TO ONE FOR FAS-SAVE RELOADHOSTID    +         0                 . HOSTID OF SYSTEM, 0 = NON-MHFSDEFDIR    +         0                 . DEFAULT DIR-ID RET BY DIRID$GENRUN    +         0                 . GENERATED RUNID OF CONSOLE RELOAD RUNTQUAL     +         0D                . TARGET QUALIFIERTFILE     +         0D                . TARGET FILENAMETDIR      +         0                 . TARGET DIRECTORY-IDTCYC      +         0                 . TARGET CYCLETJARC     +         0                 . TARGET ARCHIVE DATE (JULIAN) OR ZERORELCNT    +         0                 . COUNT OF FILES TO RELOADSRTCNT    +         0                 . SORT RECS REMAINING TO RETURNSRTPTR    +         0                 . SORT TABLE POINTERCOMQ1PKT  C$OMPK    CQ1L*6,COMMSG1,1,IMAGE . TYPE OF RELOAD REQ COM$ PKTCOMQ2PKT  C$OMPK    CQ2L*6,COMMSG2,48,IMAGE . INPUT SOLICIT COM$ PACKETCOMQ3PKT  C$OMPK    CQ3L*6,COMMSG3,1,IMAGE . RLDCTL ERROR NOTIFICATION PKTCOMPKT    C$OMPK    $-$,$-$           . OUTPUT MESSAGE COM$ PACKETDIDPKT    +         DIRID$            . MSCON$ - DIRID$ PACKET          +         0D                .          +         3,DIDBUF          .DIDBUF    RES       3                 . BUFFER FOR RETURNED DIRID$ INFOMSAPKT    +         $-$,MSALL$        . MSCON$-MSALL$ PACKET          +         3000,MSABUF       .          RES       3                 .EPKT      E$PKT     14,LINE           . EDIT$ PACKETLINE      RES       14                . EDIT$ OUTPUT BUFFERIMAGE     RES       8                 . INPUT COMMAND BUFFERHDRPKT    I$OD      'HISTIN$',R$  28,AHFHDR  0 . HIST FILE HDR READ PACKETHSTPKT    I$OD      'HISTIN$',R$  28,AHBUFF  $-$ . HIST FILE DATA READ PACKETAHFFAC    'HISTIN$  '                 . ARCHIST$ FITEM$ PACKET          RES       8                 . ABS F-CYC IS T3 OF WORD 6EXPKT     +         EXIST$            . MSCON$-EXIST$ PACKET          RES       4                 .          +         28,0,$-$          . READ LEAD-SECT ZERO ONLY          +         LIBUFF            .          +         0,0,0             .AHFHDR*   RES       28                . AHF HEADER BUFF (ALSO USED BY FINDFILE)AHBUFF    RES       28                . AHF HIST ENTRY BUFFERLIBUFF    RES       28                . MSCON$-EXIST$ LEAD ITEM BUFFERSRTTBL    RES       MAXSRT*SRSIZE     . SORT RECORD TABLEMSABUF    RES       3000              . MSCON$-MSALL$ BUFFER          END       START@ELT,SIP MARSREL$.MAP/CNSRLD,,,010642070533,006IBANK,M I$1,01000IN MARS$.CNSRLD,.FINDFILE,.CHRCON,.JULDATE,.CERU$/MARSEQU DIRID$/050NOT TPF$.DBANK,MC D$1,040000FORM I$1DBANK,UX MRCBNKEND@ELT,SIP MARSREL$.EXPRPT,,,116244132037,023.         PROGRAM TO PRODUCE A LIST OF ARCHIVED FILES, SORTED BY.         ACCOUNT OWNER, DAYS REMAINING BEFORE EXPIRATION, Q/F/C..         ONLY FILES WITH DAYS-BEFORE-EXP OF 0-35 ARE LISTED.    WRC 4/89..         INPUT: ARCCTL$ (SYS$*ARCCTL$).                ARCHIST$ (SYS$*ARCHIST$).                ACCOUNT GROUP PARAMETER CARDS (ADDED)..         OUTPUT: PRINTED REPORT..         IF THE 'H' OPTION IS GIVEN, THE FIRST PARAMETER IS A 12-CHAR.         SYSTEM-ID THAT IS PRINTED AS PART OF EACH PAGE HEADING...         IF THE 'N' OPTION IS GIVEN, ONLY FILES WITH ACCOUNTS THAT ARE.         EXPLICITLY NAMED IN THE ACCOUNT GROUP PARAMETER CARDS WILL BE.         INCLUDED IN THE EXPIRATION REPORT.  THERE WILL BE NO NOTIFICATION.         FOR FILES WITH OTHER ACCOUNTS..$(1)      AXR$          $LIT          MGPDEF          AHFDEF          D$BDEF..         SORT RECORD DEFINITIONS.SRGRP     EQUF      0,,S1             . OWNER GROUP NUMBER.SRFLGS    EQUF      0,,S2             . FLAG BITSSRFASQ    EQU       1*/0              . SET IF QUALIFIER-ASSIGNED ACCOUNT NBRSRFRLD    EQU       1*/1              . SET IF FILE WAS RELOADED.SREXRM    EQUF      0,,S3             . DAYS REMAINING BEFORE EXPIRATIONSREXSK    EQUF      0,,H2             . EXP SORT KEY: 0 IF < 8, 1 IF >= 8SRQUAL    EQUF      1                 . QUALIFIERSRFILE    EQUF      3                 . FILENAMESRHCB     EQUF      5,,H1             . HOSTID (35-33)                                      . ABS F-CYCLE (32-19)                                      . BACKUP FLAG (18)SRADJL    EQUF      5,,H2             . DATE ARCHIVED (JULIAN)SRCATD    EQUF      6,,H1             . DATE CATALOGUED (TDATE$ H1)SRREFD    EQUF      6,,H2             . LAST REFERENCE DATE (TDATE$ H1)SRTKCT    EQUF      7,,H1             . TRACK COUNTSREXP     EQUF      7,,H2             . EXPIRATIONSRACCT    EQUF      8                 . ACCOUNT NUMBERSRMIST    EQU       10                . BEGINNING OF MATCHING INFO                                      .   (DEFINITIONS IN AHFDEF)SRSIZE    EQU       SRMIST+AHMICT     . SIZE OF SORT RECORD/..START          SA        A5,A15            . SAVE OPTIONS          ER        TDATE$            . GET CURRENT DATE          SA        A0,CURTDA         . SAVE FOR LATER REFERENCE          LMJ       X11,JULOUT        . CONVERT TO JULIAN          ER        ERR$              .  BLOW UP IF ERROR IN CONVERSION          SA        A4,CURJUL         . SAVE TODAY'S JULIAN DATE          TOP       A15,(1*/('Z'-'H')) . IS SITE-ID CARD SUPPLIED?          J         AR100             .  NO, SKIP          R$EAD     (AR080,SITCOD)    .  YES, READ IT IN          J         AR100             .AR080          P$RINT    ERRPRT(6)         . 'SYSTEM-ID CARD MISSING, REQUIRED'          ER        ERR$              .  ABORTAR100          LMJ       X11,ARSETUP       . READ AND SORT REG QUALS, OWN ACCTS          LA,U      A1,GRPTBL         . ADDRESS OF GROUP-ID TABLE          LA        A2,(2,0)          . POINTER TO ACTLST TABLE          LA,U      A3,0              . ACCT COUNT/PTR TO ACTPTR TABLE          LNA,U     A4,1              . FLAG, NO GROUP-ID FOUND YET          LR        R1,('      ')     . ACCOUNT WORD 2 SPACEFILLAR260          SR        R1,1,A1           . SET WORD 2 OF READ$ IMAGE = SPACES          LA,U      A0,,A1            . READ INTO NEXT ADDR OF GRPTBL          LXI,U     A0,AR270          . EOF ADDRESS          ER        READ$             . READ THE NEXT IMAGE          LA,U      A0,,A0            . A0 = WORD COUNT          JZ        A0,AR260          . SKIP IF NOTHING THERE          LA,S1     A6,,A1            . FIRST CHAR OF IMAGE          TNE,U     A6,'.'            . COMMENT LINE?          J         AR260             .  YES, IGNORE IT          TE,U      A6,'>'            . IS THIS A GROUP-ID?          J         AR265             .  NO, SKIP          AA,U      A4,1              .  YES, INCREMENT GROUP COUNTER          TLE,U     A4,M$GROUPMAX     . HAVE WE READ TOO MANY GROUPS?          J         AR263             .  NO, CONTINUE          P$RINT    ERRPRT(2)         .  YES, 'TOO MANY GRPS, INCR <M$GROUPMAX>'          J         AR920             .   ABORTAR263          TG,U      A0,4+1            .          LA,U      A0,4              . MAX GROUP WORD CT = 4          SA,S1     A0,,A1            . STORE WORD COUNT IN S1 OF GROUP-ID          LA,U      A5,,A1            . A5 = ADDRESS OF CURRENT GROUP-ID          AA,U      A1,,A0            . INCREMENT TO NEXT AVAIL GROUP-ID ADDR          J         AR260             . READ NEXT IMAGEAR265          TE,U      A6,' '            . ERROR IF FIRST CHAR IS A SPACE          JP        A4,AR266          . NO, CONT IF A GROUP NAME HAS BEEN READ          P$RINT    ERRPRT(5)         . 'ERROR IN GROUP PARAM FILE - SEE DOC'          ER        ERR$              .AR266          AA,U      A3,1              .  YES, INCREMENT ACCT COUNT          TLE,U     A3,M$ACCTMAX+1    . WITHIN RANGE?          J         AR268             .  YES, CONTINUE          P$RINT    ERRPRT(4)         .  NO, 'TOO MANY ACCTS, INCR <M$ACCTMAX>'          J         AR920             .   ABORTAR268          DL        A6,,A1            . GET ACCOUNT NBR FROM BUFFER          DS        A6,ACTLST,*A2     . STORE IN ACCOUNT LIST          SA,H1     A4,ACTPTR-1,A3    . STORE ACCT GROUP NUMBER          SA,H2     A5,ACTPTR-1,A3    .  AND POINTER TO GROUP-ID TEXT          J         AR260             . GO READ NEXT IMAGEAR270          JNZ       A3,AR275          . DONE - SKIP IF ACCT(S) HAVE BEEN READ          P$RINT    ERRPRT(5)         . 'ERROR IN GROUP PARAM FILE - SEE DOC'          ER        ERR$              .  ABORTAR275          SA        A3,ACTCNT         . STORE ACCT COUNT          I$OW      RDHSTH            . READ HISTORY FILE HEADER          LMJ       X9,STATUS         . CHECK STATUS          J         AR920             .  I/O ERROR, ABORT          LX,U      X4,AHHDBF         . X4 = ADDRESS OF HEADER BUFFER          LA        A0,AHHLBL,X4      . SOFTWARE LABEL          TE        A0,('*AHFL*')     . IS LABEL VALID?          J         AR285             .  NO, ERROR          LA        A0,AHHNXB,X4      . GET ADDR OF NEXT AVAIL HIST SECTOR          ANA       A0,AHHSTB,X4      .  SUBTRACT ADDR OF FIRST SECTOR          JGD       A0,AR290          .  DECREMENT AND SKIP, VALUE MUST BE > 0AR285          P$RINT    ERRPRT(1)         . 'AHF IS EMPTY OR HAS A BAD LABEL'          J         AR920             .  ABORTAR290          LR,U      R4,,A0            . LOOP COUNT          LA,U      A4,1,A0           . A4 = ENTRY COUNT          LA        A0,AHHSTB,X4      . SECTOR ADDRESS OF FIRST ENTRY          SA        A0,RDHIST+5       . STORE IN D-B I/O PACKET          D$BIO     RDHIST            . OPEN DOUBLE-BUFFERED INPUT FROM AHF          DL        A0,RDHIST         . INPUT USE NAME (ARCHIST$)          DS        A0,FACPKT         . INTO FITEM$ PACKET          LA        A0,(9,FACPKT)     .          ER        FITEM$            . GET INFO ON INPUT FILE          E$DIT     EPKT              . OPEN EDIT          E$MSG     INPMSG            . 'READING '          E$FD2     FACPKT+4          . QUALIFIER          E$MSGR                      . *          E$FD2     FACPKT+2          . FILENAME          E$MSGR                      . (          LA        A0,FACPKT+6       . F-CYCLE          LSSL      A0,24             .  ADJUST          SSL       A0,24             .          E$DECV                      . EDIT INTO IMAGE          E$MSGR                      . ') LAST UPDATED '          E$DAY1    AHHUPT,X4         . LAST UPDATE DATE          E$MSGR                      . ' AT '          E$TIME    AHHUPT,X4         . LAST UPDATE TIME          E$MSGR                      . ', WITH '          E$DECV    A4                . ENTRY COUNT          E$MSGR                      . ' ENTRIES.'          P$RINT    (0216,LINE)       . PRINT STATUS OF INPUT FILE          LA,U      A0,RCASG          .          ER        CSF$              . @ASG,T R$CORE,///50          JP        A0,$+2            . CHECK CSF STATUS          ER        ERR$              . ABORT IF ERROR - SHOULD NOT HAPPEN          DL        A0,('XA          ') . SORT WORKFILE NAME          DS        A0,FACPKT         .  INTO FITEM$ PKT          SZ        FACPKT+6          . CLEAR STATUS WORD IN PKT          LA        A0,(9,FACPKT)     .          ER        FITEM$            . GET ASSIGNMENT INFO FOR 'XA' FILE          TZ,S1     FACPKT+6          . WAS FILE ALREADY CREATED?          J         AR295             .  YES, SKIP - HOPE IT IS THE RIGHT SIZE!          MSI,U     A4,SRSIZE         . A4 = TOTAL WORDS TO SORT          DSL       A4,36             . PREPARE FOR DIVIDE          DI,U      A4,(1792*9)/10    . A4 = TRACKS REQ * 110%          AA,U      A4,10             . ADD 10 TRACKS FOR FUDGE FACTOR          E$CLEAR                     . CLEAR EDIT          E$MSG     XAASG             . '@ASG,T XA,F/'          E$DECV    A4                . COMPUTED INITIAL RESERVE          E$MSGR                      . '/TRK/'          E$DECV    A4                . USE SAME VALUE FOR MAXIMUM          E$MSGR                      . ' . '          LA,U      A0,LINE           .          ER        CSF$              . ASSIGN XA WITH CORRECT (WE HOPE) SIZE          JP        A0,$+2            . CHECK CSF$ STATUS          ER        ERR$              . ABORT IF ERROR - SHOULD NOT HAPPENAR295          R$OPN     RP                . OPEN SYSTEM SORT ROUTINEAR300          D$BI      RDHIST  AR900,AR900 . READ NEXT HISTORY SECTOR          LX,U      X4,,A1            . ADDRESS OF HISTORY ENTRY          TZ        AHEXP,X4          . IS EXPIRATION = ZERO?          J         AR305             .  NO, SKIP          LA        A0,AHRLDF,X4      .  YES, GET RELOAD / PURGE FLAG          TG,U      A0,2              . WAS THIS FILE PURGED OR DELETED?          J         AR390             .  YES, SKIP - DO NOT PROCESSAR305          LA        A0,AHARCT,X4      . ARCHIVE DATE          LMJ       X11,JULOUT        . CONVERT TO JULIAN          ER        ERR$              .  BLOW UP IF ERROR, PROB BAD DATA          AU        A4,AHEXP,X4       . A5 = JULIAN EXPIRE DATE          ANA       A5,CURJUL         . DAYS REMAINING BEFORE EXPIRE          TG,U      A5,0              . ALREADY EXPIRED, OR          TG,U      A5,36             .  MORE THAN 35 DAYS TO GO?          J         AR390             .   YES, SKIP THIS ENTRY          ON        M$EXPPERM>0       . THIS CODE FOR PERM-EXP ONLY          LA        A0,AHEXP,X4       . EXPIRATION PERIOD          TNE,U     A0,M$EXPPERM      . PERMANENT RETENTION?          J         AR390             .  YES, SKIP THIS ENTRY          OFF       M$EXPPERM>0       . END OF PERM-ONLY CODE          LX,U      X5,AHMIST,X4      . POINT X5 TO START OF MATCHING INFO          LA        A0,AHMIVF,X5      . VERSION INDICATOR          TE,U      A0,AHMIV2         . IS THIS VERSION 2R2+ FORMAT?          J         AR310             .  NO, SKIP          LA        A0,AHMFLG,X5      .  YES, GET FLAG BITS          TEP,U     A0,AHMFDN         . IS DO-NOT-NOTIFY SET FOR FILE?          J         AR390             .  YES, SKIP - DO NOT PROCESSAR310          LX,U      X5,SRTREC         . X5 = SORT RECORD ADDRESS          SA        A4,SRADJL,X5      . SAVE JULIAN ARCHIVE DATE          SA        A5,SREXRM,X5      .  AND DAYS REMAINING BEFORE ARCHIVE          LA,U      A0,0              . EXP GROUP ZERO (0-7 DAYS)          TG,U      A5,8              . MORE THAN 7 DAYS REMAINING?          LA,U      A0,1              .  YES, EXP GROUP 1 (8-35 DAYS)          SA        A0,SREXSK,X5      . STORE EXP GROUP SORT KEY          DL        A4,AHQUAL,X4      . QUALIFIER OF ARCHIVED FILE          LMJ       X11,ARSRCH        . SEARCH FOR REGISTERED QUAL          LA,U      A7,0              . INIT SRFLGS = 0          JNZ       A4,AR320          . SKIP IF ACCOUNT MATCH WAS FOUND          DL        A4,AHACCT,X4      .  IF NOT, USE ACCT FROM HIST ENTRY          J         AR330             .   AND SKIP AHEADAR320          DTE       A4,AHACCT,X4      . IS OWNER ACCT SAME AS CATALOG ACCT?          LA,U      A7,SRFASQ         .  NO, SET QUALIFIER-ASSIGNED FLAGAR330          LA        A2,(2,0)          . FOR SEARCHING ACTLST          LR        R1,ACTCNT         . COUNT OF ENTRIES IN ACTLST TABLE          JGD       R1,$+1            . DECREMENT FOR LOOPAR370          DTE       A4,ACTLST,*A2     . DOES ACCOUNT MATCH THIS TABLE ENTRY?          J         $+2               .  NO          J         AR375             .  YES, SKIP          JGD       R1,AR370          . BACK FOR NEXT ACTLST ENTRY          TEP,U     A15,1*/('Z'-'N')  . INCLUDE UNLISTED ACCOUNTS?          J         AR390             .  NO, SKIP          LA,U      A2,2              . NO FIND, ASSUME MATCH OF FIRST ENTRYAR375          ANA,U     A2,2              . A2 = POINTER TO ACTLST ENTRY          SSL       A2,1              . DIVIDE BY TWO, NOW PTR TO ACTPTR TABLE          LA,H1     A0,ACTPTR,A2      . GET GROUP-ID NUMBER          SA        A0,SRGRP,X5       .  STORE IN SORT RECORD          DS        A4,SRACCT,X5      . STORE ACCOUNT NUMBER          TZ        AHRLDF,X4         . WAS FILE RELOADED?          AA,U      A7,SRFRLD         .  YES, SET RELOAD FLAG          SA        A7,SRFLGS,X5      . STORE FLAGS IN SORT RECORD          DL        A0,AHQUAL,X4      . QUALIFIER          DL        A2,AHFILE,X4      . FILENAME          DS        A0,SRQUAL,X5      .  STORE IN SORT RECORD          DS        A2,SRFILE,X5      .          LA        A0,AHHOST,X4      . HOSTID          LA        A1,AHCYCL,X4      . ABS F-CYCLE          LA        A2,AHFLGS,X4      . MISC FLAG BITS          LSSL      A1,1              . SHIFT CYCLE ONE BIT LEFT          TEP,U     A2,AHFCFB         . IS THIS CRIT-BACKUP COPY?          AA,U      A1,1              .  YES, SET BACKUP BIT          LSSL      A1,18+3           . PREPARE FOR COMB W/HOSTID          LDSL      A0,18-3           . A0 LOWER = HOST, CYCLE, BACKUP FLG          SA        A0,SRHCB,X5       .  STORE IN SORT RECORD          LA        A0,AHCATT,X4      . CATALOG DATE/TIME          LA        A1,AHREFT,X4      . REFERENCE DATE/TIME          DSL       A0,18             . SHIFT DATE PORTION TO A0,A1 LOWER          SA        A0,SRCATD,X5      .  STORE DATES IN SORT RECORD          SA        A1,SRREFD,X5      .          LA        A0,AHTKCT,X4      . TRACK COUNT          LA        A1,AHEXP,X4       . EXP PERIOD (DAYS)          SA        A0,SRTKCT,X5      .  STORE IN SORT RECORD          SA        A1,SREXP,X5       .          LA,U      A0,AHMIST,X4      . START OF MATCHING INFO          LXI,U     A0,1              . INCREMENT FOR BT          LA,U      A1,SRMIST,X5      . MATCHING INFO ADDR IN SORT REC          LXI,U     A1,1              . INCREMENT          LR,U      R1,AHMICT         . WORD COUNT OF MATCHING INFO BUFFER          BT        A1,,*A0           . MOVE TO SORT RECORD          R$REL     (SRSIZE,SRTREC)   .  ALL DONE - RELEASE TO SORTAR390          JGD       R4,AR300          . BACK FOR NEXT HIST ENTRY          R$SORT                      .  ALL DONE W/INPUT PHASE - SORT SEL DATAAR400          R$RET     AR600             . RETURN NEXT RECORD FROM SORT          LX,U      X4,,A0            . X4 = ADDRESS OF SORT RECORD          LA        A4,SRGRP,X4       . GET GROUP-ID NUMBER          TNE       A4,CURGRP         . SAME AS CURRENT GROUP?          J         AR420             .  YES, SKIP          SA        A4,CURGRP         .  NO, SAVE NEW CURRENT GROUP          DSL       A10,72            .  INIT LINE, PAGE COUNTS          DSL       A12,72            .  INIT EXP-CAT FLAG, EXP-CAT MESSAGEAR420          TZ        SREXSK,X4         . IS THIS FILE IN EXP-CAT 1 (0-7 DAYS)?          J         AR425             .  NO, SKIP          TNE,U     A12,1             .  YES, PROCESSING EXP-CAT 1 ALREADY?          J         AR435             .   YES, SKIP          LA,U      A12,1             .   NO, SET FLAG          LA        A13,(0126,EXM1)   .    AND SETUP TO PRINT EXP-CAT 1 HEADING          J         AR430             .AR425          TNE,U     A12,2             . PROCESSING EXP-CAT 2 (>7 DAYS) ALREADY?          J         AR435             .  YES, SKIP          LA,U      A12,2             .  NO, SET FLAG          LA        A13,(0126,EXM2)   .   AND SETUP TO PRINT EXP-CAT 2 HEADINGAR430          TLE,U     A10,10            . NEW EXP-CAT, >10 LINES REMAINING?          LA,U      A10,0             .  NO, SKIP TO NEW PAGEAR435          JGD       A10,AR440         . DECR LINE COUNT, SKIP IF LINES REM          AA,U      A11,1             .  IF NOT, INCREMENT PAGE COUNT          E$CLEAR                     . CLEAR EDIT          E$SKIP    6                 .          LA        A1,(1,0)          . POINTER TO ACTPTR TABLE          LR        R1,ACTCNT         . LENGTH OF ACTPTR (ACCT COUNT)          SE,H1     A4,ACTPTR,*A1     . SEARCH FOR GROUP-ID NUMBER          ER        ERR$              .  NO MATCH, ABORT          LA,H2     A0,ACTPTR-1,A1    . GET ADDRESS OF GROUP-ID TEXT          LA,S1     A1,,A0            . WORD COUNT OF GROUP-ID TEXT          MSI,U     A1,6              . CONVERT TO CHAR COUNT          E$COPY                      . EDIT INTO MESSAGE          LA,U      A0,'*'            . PLACE '*' OVER          SA,S1     A0,LINE+1         .  PART OF MESSAGE CONTAINING WORD COUNT          E$COL     66-$SL(M$SITENM)/2 . SKIP OVER A LITTLE          E$MSG     HDG1MSG           . FULL SITE NAME          E$COL     108               .          E$MSGR                      . 'DATE '          E$DAY5    CURTDA            . CURRENT DATE          E$MSGR                      . '   PAGE'          E$DECF    4,A11             . PAGE NUMBER          P$RINT    (0777700+22,LINE) . PRINT HDG, SKIP TO NEW PAGE          E$CLEAR                     . CLEAR EDIT          E$MSG     HDG2MSG           . 'MASTER LIST - SOON-TO-EXPIRE FILES'          E$SKIP    5                 . MOVE OVER A LITTLE          E$COPY    12,SITCOD         . EDIT IN SYSTEM-ID          P$RINT    (0100+22,LINE)    . PRINT 2ND HEADING LINE          P$RINT    (0100+H2AL,HDG2A) .  AND OTHER HEADING LINES          P$RINT    (0200+H3L,HDG3)   .          P$RINT    (0100+H4L,HDG4)   .          P$RINT    (0100+H4L,DASHES) . FOLLOW WITH LINE OF DASHES          P$RINT    (0100,$)          .  AND BLANK LINE          LA,U      A10,M$LPP-10      . INIT REM LINE COUNTAR440          JZ        A13,AR450         . SKIP IF NO EXP-CAT MESSAGE TO PRINT          TNE,U     A10,M$LPP-10      . ARE WE AT TOP OF PAGE?          J         AR445             .  YES, SKIP          P$RINT    (0100,$)          .  NO, SEPARATE WITH ONE BLANK LINE          ANA,U     A10,1             .   AND DECREMENT LINE COUNTAR445          LA        A0,A13            . PCW FOR EXP-CAT MESSAGE (1 OR 2)          ER        PRINT$            . PRINT STATUS OF REM FILES          P$RINT    (0100,$)          . FOLLOW WITH BLANK LINE          ANA,U     A10,2             .  DECREMENT LINE COUNT BY 2          LA,U      A13,0             . CLEAR EXP-CAT MESSAGE FLAGAR450          E$CLEAR                     . CLEAR EDIT          ON        M$MHFSHARED>0     . THIS CODE FOR SHARED-ONLY          LA        A1,SRHCB,X4       . HOST, CYCLE, BACKUP FLAG          SSL       A1,15             . HOSTID ONLY TO A1 LOWER          LA,U      A0,'A'-1,A1       . FORM PRINTABLE HOSTID, A-D          TG,U      A1,1              . IN CORRECT RANGE (1-4)?          TG,U      A1,4+1            .          LA,U      A0,'?'            .  NO, INDICATE UNKNOWN HOSTID          TNE,U     A1,7              . CODE 7 MEANS SHARED DIRECTORY          LA,U      A0,'S'            .  USE LETTER 'S' IN THIS CASE          E$CHAR                      . EDIT INTO OUTPUT          E$CHAR    ' '               . SKIP OVER ONE POSITION          OFF       M$MHFSHARED>0     . END OF SHARED-ONLY CODE          E$COPY    12,SRQUAL,X4      . QUALIFIER          E$SKIP    1                 .          E$COPY    12,SRFILE,X4      . FILENAME          LA        A4,SRFLGS,X4      . GET FLAG BITS          LA,U      A0,' '            . ASSUME NOT RELOADED          TEP,U     A4,SRFRLD         . IS RELOAD FLAG SET?          LA,U      A0,'*'            .  YES, INDICATE RELOAD STATUS          E$CHAR                      . EDIT CHAR INTO OUTPUT          LA        A0,SRHCB,X4       . HOST, CYCLE, BACKUP FLAG          LSSL      A0,18+3           . REMOVE HOSTID          SSL       A0,18+3+1         . CYCLE ONLY TO A0 LOWER          E$DECF    4-(M$MHFSHARED>0) . EDIT ABS F-CYCLE          E$DECF    6,SRTKCT,X4       . TRACK COUNT DO M$MHFSHARED=0 ,  E$SKIP  1        .          LA,U      A0,' '            . ASSUME ORIGINAL ACCOUNT          TEP,U     A4,SRFASQ         . WAS ACCOUNT SUB W/OWNER ACCOUNT?          LA,U      A0,'*'            .  YES, INDICATE QUALIFIER-ASSIGNED ACCT          E$CHAR                      . EDIT CHAR INTO OUTPUT          E$COPY    12,SRACCT,X4      . EDIT ACCOUNT NUMBER          E$SKIP    1                 .          LXI       A0,SRCATD,X4      . CATALOG DATE          E$DAY5                      . EDIT INTO OUTPUT          E$SKIP    1                 .          LXI       A0,SRREFD,X4      . REFERENCE DATE          E$DAY5                      . EDIT INTO OUTPUT          E$SKIP    1                 .          LA        A4,SRADJL,X4      . ARCHIVE DATE (JULIAN)          LMJ       X11,JULIN         . CONVERT TO TDATE$          E$DAY5                      . EDIT INTO OUTPUT          LA        A0,SREXP,X4       . EXPIRATION (DAYS)          TLE,U     A0,3800           . MORE THAN 3799?          J         AR460             .  NO, SKIP          E$DECF    7                 .  YES, EDIT 'RAW' EXPIRATION          E$SKIP    5                 .          J         AR470             .   SKIP PRT OF DATE EXP, DAYS REMAR460          E$SKIP    1                 .          LA        A4,SREXRM,X4      . REMAINING DAYS BEFORE EXPIRATION          AA        A4,CURJUL         . ADD CURRENT JULIAN DATE = EXP DATE          LMJ       X11,JULIN         . CONVERT TO TDATE$          E$DAY5                      . EDIT INTO OUTPUT          LA,U      A0,' '            . ASSUME SHORT EXPIRATION          LA        A1,SREXP,X4       .          TG,U      A1,500            . IS EXP > 499 DAYS?          LA,U      A0,'*'            .  YES, IND LONG EXPIRATION FILE          E$CHAR                      . EDIT CHAR INTO OUTPUT          E$DECF    3,SREXRM,X4       . EDIT DAYS REM BEFORE EXPIRATIONAR470          E$SKIP    2                 .          LX,U      X9,SRMIST,X4      . ADDR OF MATCHING INFO IN SORT RECORD          DL        A0,('DEFAULT     ') . ASSUME DEFAULT CLASS          LA        A5,AHMIVF,X9      . VERSION TYPE OF MI RECORD          TNE,U     A5,AHMIV2         . IS THIS ENTRY FROM 2R2+?          LA        A0,AHMCLS,X9      .  YES, LOAD REAL CLASS-ID          TE        A0,('DEFAUL')     . DEFAULT CLASS?          LA        A1,('      ')     .  NO, LIMIT TO 6 CHARS          DS        A0,IMAGE          . INTO TEMP STORAGE AREA          E$COPY    7,IMAGE           . EDIT CLASS-ID INTO OUTPUT          E$SKIP    1                 .          LA        A0,SRHCB,X4       . HOST, CYCLE, BACKUP FLAG          TOP,U     A0,1              . IS THIS CRIT-BACKUP COPY?          J         AR475             .  NO, SKIP          E$MSG     BCKMSG            .  YES, EDIT   *** BACKUP COPY ***          J         AR495             . SKIP OTHER INFOAR475          LA        A4,AHMTYPE,X9     . GET REASON FOR ARCHIVE          JZ        A4,AR495          . SKIP IF ZERO          TNE,U     A5,AHMIV2         . IS MI RECORD IN 2R2+ FORMAT?          J         AR476             .  YES, SKIP          E$COPY    12,AHMQUAL,X9     . EDIT MATCHING QUALIFIER (2R1)          E$SKIP    1                 .          E$COPY    12,AHMFILE,X9     . MATCHING FILENAME (2R1)          J         AR478             .AR476          DL        A0,SRQUAL,X4      . FULL QUALIFIER OF ARCHIVED FILE          LA        A5,AHMQWC,X9      . WILDCARD COUNT OF MATCHING ACF ENTRY          LMJ       X10,FMTMAT        . FORMAT AND OUTPUT          E$SKIP    1                 .          DL        A0,SRFILE,X4      . FULL QUALIFIER OF ARCHIVED FILE          LA        A5,AHMFWC,X9      . WILDCARD COUNT OF MATCHING ACF ENTRY          LMJ       X10,FMTMAT        . FORMAT AND OUTPUTAR478          E$SKIP    1                 .          TE,U      A4,'R'            . ARCHIVED FOR REF LIMIT EXCEEDED?          J         AR480             .  NO, SKIP          E$FD1     ('DSR=')          .  YES, EDIT APPROPRIATE INDICATOR          E$DECV    AHMVLF,X9         . DAYS SINCE REFERENCE          E$COL     126               .          LA,U      A0,'RL='          .          E$FD1                       .          J         AR490             . GO EDIT AHMVLC (REF LIMIT)AR480          E$FD1     ('RCN=')          . REL CYCLE LIMIT INDICATOR          LA,U      A0,1              .          ANA       A0,AHMVLF,X9      . COMPUTE REL CYCLE NUMBER = 1-AHMVLF          E$DECV                      . EDIT INTO OUTPUT          E$COL     126               .          E$FD1     'CL=',,U          .AR490          E$DECV    AHMVLC,X9         . EDIT CYCLE OR REF LIMIT, AS APPROPRIATEAR495          P$RINT    (0100+22,LINE)    . PRINT STATUS LINE FOR SOON-TO-EXP FILE          J         AR400             . BACK FOR NEXT FILE..         NORMAL EXIT.AR600          P$RINT    (0777700,$)       . ALL DONE - SKIP TO NEW PAGE          ER        EXIT$             .  AND EXIT..         ERROR RETURN FROM D-B READ OF INPUT AHF.AR900          LMJ       X9,STATUS         . DISPLAY I/O ERROR AND PACKET DUMP          NOP                         ...         GENERAL ERROR EXIT.AR920          ER        ERR$              . ERROR EXIT...         FORMAT AND EDIT A MATCHING QUAL/FILE.           A0,A1 = ORIGINAL NAME, A5 = WILDCARD COUNT.FMTMAT          DS        A0,IMAGE          . STORE QUAL OR FILE NAME          LA,U      A1,12             .          ANA       A1,A5             . A1 = IDENTICAL CHAR COUNT          JZ        A1,FM200          . SKIP IF ZERO          LA,U      A0,IMAGE          .          E$COPY                      . IF NOT, COPY THIS MANY TO OUTPUT          JZ        A5,FM300          . SKIP IF NO WILDCARDS TO COPYFM200          LA,U      A0,('############') . WHERE TO GET THE REST          LA        A1,A5             . WILDCARD COUNT          E$COPY                      . APPEND APPROPRIATE AMOUNTFM300          J         0,X10             . RETURN...         I/O STATUS CHECK ROUTINE.STATUS          TNZ,S1    3,A0              . IS I/O COMPL STATUS = 0 (NORMAL)?          J         1,X9              .  YES, RETURN NORMAL COMPLETION          LX,U      X4,,A0            .  NO, SET UP FOR PACKET DUMP          LXI,U     X4,1              . X4 = POINTER TO I/O PACKET          P$RINT    ERRPRT(3)         . 'BAD I/O STATUS - PACKET DUMP FOLLOWS:'          E$CLEAR                     . CLEAR EDIT          LA,U      A4,5              . DUMP 6 WORDSST100          E$OCTF    12,,*X4           . EDIT NEXT WORD INTO OUTPUT          E$SKIP    1                 .          JGD       A4,ST100          . LOOP BACK FOR MORE          P$RINT    (0116,LINE)       . PRINT PACKET DUMP          J         0,X9              . RETURN ERROR..INPMSG    'READING &*&(&) LAST UPDATED & AT &, WITH & ENTRIES.&'RCASG     '@ASG,T R$CORE,///50 . 'XAASG     '@ASG,T XA,F/&/TRK/& . &'.HDG1MSG   '':$CFS(M$SITENM):'&DATE &   PAGE&'HDG2MSG DO 7 ,   ' '          '   MASTER ARCHIVE LIST - SOON-TO-EXPIRE FILES&'HDG2A     'SORTED BY: ACCT OWNER/DAYS REM/QUAL/FILE/CYCLE'H2AL      EQU       $-HDG2AHDG3          $IF       M$MHFSHARED=0          '                               TRACK  ACCOUNT       DATE   DATE   '          $ELSE          '                                TRACK ACCOUNT       DATE   DATE   '          $ENDF          'DATE   DATE DAYS  ----- MATCHING PARAMETERS -------               'H3L       EQU       $-HDG3HDG4          $IF       M$MHFSHARED=0          'QUALIFIER    FILENAME   RL CYC COUNT  NUMBER         CAT    REF   '          $ELSE          'H QUALIFIER    FILENAME  RL CYC COUNT NUMBER         CAT    REF   '          $ENDF          ' ARC    EXP  REM  CLASS   QUALIFIER    FILENAME      WHY-ARCHIVED 'H4L       EQU       $-HDG4DASHES DO H4L ,  '- - - 'EXM1 DO 7 ,   '******'          '**** FILES WHICH WILL EXPIRE WITHIN 7 DAYS *****' DO 7 ,   '******'EXM2 DO 7 ,   '******'          '*** FILES WHICH WILL EXPIRE WITHIN 8-35 DAYS ***' DO 7 ,   '******'BCKMSG    '   *** BACKUP COPY ***&'.ERR(1)    'ARCHIVE HISTORY FILE IS EMPTY OR HAS BAD LABEL'ERR(2)    'TOO MANY OWNER GROUPS, INCREASE <M$GROUPMAX>'ERR(3)    'BAD I/O STATUS - PACKET DUMP FOLLOWS:'ERR(4)    'TOO MANY UNIQUE ACCOUNT NUMBERS, INCREASE <M$ACCTMAX>'ERR(5)    'FORMAT ERROR IN GROUP PARAMETER FILE - SEE DOCUMENTATION'ERR(6)    '*ERROR* SYSTEM-ID PARAMETER CARD MISSING, REQUIRED'NERR      EQU       6ERR(NERR+1)I DO NERR ,ERRPRT(I) + 0100+ERR(I+1)-ERR(I),ERR(I)/.$(0)CURTDA    +         0                 . CURRENT DATE (TDATE$)CURJUL    +         0                 . CURRENT DATE (JULIAN)ACTCNT    +         0                 . COUNT OF ACCOUNT NUMBERS IN <ACTLST>CURGRP    +         9999              . GROUP-ID NUMBER, INIT FOR NO MATCHRDHSTH    I$OD      'ARCHIST$',R$  28,AHHDBF  0 . PACKET FOR READING AHF HEADERRDHIST    D$BRP     'ARCHIST$'  28,1792*2,$-$ . PACKET FOR D-B READ OF AHFRP        R$FILE    ;                 . SORT PACKET          'RSZW',SRSIZE               ;          'FILES','XA'                ;          'KEY',1,1,'A','A'           ;          'KEY',4,30,'A','A'          ;          'DELCON'  ;          'DELLOG'  ;          'FPOC',AR300                ;          'LPOC',AR400FACPKT    RES       12                . FITEM$ PACKET FOR STATUS OF INPUT FILEEPKT      E$PKT     22,LINE           . EDIT$ PACKETSITCOD    '            '              . USER-SUPPLIED SYSTEM IDLINE      RES       23                . EDIT$ OUTPUT BUFFERIMAGE     RES       2                 . TEMP STORAGE AREA FOR E$COPYSRTREC    RES       SRSIZE            . SORT RECORDAHHDBF    RES       28                . AHF HEADER BUFFERGRPTBL    RES       M$GROUPMAX*4+18   . GROUP-ID TEXT TABLEACTLST    RES       M$ACCTMAX*2       . ACCOUNT NUMBER LISTACTPTR    RES       M$ACCTMAX         . PTR TABLE, H1=NUMBER, H2=TEXT POINTER          END       START@ELT,SIP MARSREL$.MAP/EXPRPT,,,116533112332,006IN MARS$.EXPRPT,.GETOWN,.JULDATENOT TPF$.@ELT,SIP MARSREL$.FAS$ARC-CVT,,,220335101533,023.         PROGRAM TO CONVERT THE FAS ARCHIVE HISTORY FILE (SYS$*FAS$ARCHIVE).         TO PSEUDO-MFDDB FORMAT.  THE RESULTING FILE (SORTED BY Q/F/C/AR-DATE).         IS INPUT TO THE REBUILD PROGRAM FOR MERGING WITH SYS$*SAVHIST$.  ONCE.         THIS IS DONE, MARS CAN BE USED TO INTERACTIVELY RELOAD ALL PREVIOUSLY.         FAS-ARCHIVED FILES...         WHEN EXECUTED IN A NON-SHARED HISTORY FILE SYSTEM (M$MHFSHARED=0).         THIS PROGRAM USES NO OPTIONS.  WHEN EXECUTED IN A SHARED-HF SYSTEM,.         THIS PROGRAM MUST BE EXECUTED WITH ONE AND ONLY ONE OF THE FOLLOWING.         OPTIONS WHICH WILL INDICATE THE DIRECTORY OF ORIGIN OF FILES FROM.         THE MERGED FAS ARCHIVE HISTORY FILE:..           A,B,C,D - <STD> DIRECTORY, HOST A THROUGH D.           S       - <SHARED> DIRECTORY.$(1)      AXR$          $LIT          MGPDEF          MFDDEF          D$BDEFMAXRLR    EQU       4                 . MAX BACKUP REELS (MUST = <RCBRMX>)..         DEFINITION OF FIELDS FROM SYS$*FAS$ARCHIVE..         HEADER DEFINITIONS.FAHDLB    EQUF      0,,H1             . LABELFAHDCD    EQUF      25                . CREATION DATE/TIMEFAHDUD    EQUF      26                . LAST UPDATE DATE/TIMEFAHDPC    EQUF      28,,H1            . POINTER ENTRY COUNTFAHDPW    EQUF      28,,H2            . POINTER WORD COUNTFAPEBG    EQU       29                . START OF POINTER ENTRIES.FAPETP    EQUF      0,,S1             . DATA TYPEFAPEWC    EQUF      0,,S2             . WORD COUNT OF ENTRYFAPEAD    EQUF      1                 . START ADDRESS OF STRUCTURE..         DATA RECORD DEFINITIONS.FATYPE    EQUF      0,,S1             . RECORD TYPEFASECT    EQUF      0,,S2             . SECTOR COUNT OF RECORDFASTATUS  EQUF      0,,S3             . STATUS OF RECORDFAQUAL    EQUF      2                 . QUALIFIER (ASCII)FAFILE    EQUF      5                 . FILENAME (ASCII)FACYCL    EQUF      8                 . ABS F-CYCLEFAPROJ    EQUF      9                 . PROJECT-ID (ASCII)FAACCT    EQUF      12                . ACCOUNT NUMBER (ASCII)FANOTR    EQUF      15                . TRACK COUNTFACATT    EQUF      28                . CATALOG DATE/TIME (TDATE$)FAREFT    EQUF      29                . REFERENCE DATE/TIME (TDATE$)FABKUT    EQUF      30                . BACKUP DATE/TIME (TDATE$)FADBIT    EQUF      35                . DESCRIPTOR BITS FOR FILE.FBREMD    EQU       1*/32             . FILE FROM R-DISCFBGOPT    EQU       1*/30             . G-OPTIONFBVOPT    EQU       1*/29             . V-OPTIONFBPRVT    EQU       1*/28             . PRIVATEFBWOLY    EQU       1*/24             . WRITE ONLYFBROLY    EQU       1*/23             . READ ONLYFBPOGR    EQU       1*/21             . POSITION GRANULARITYFBWAD     EQU       1*/20             . WORD ADDRESSIBLEFBSTRT    EQU       1*/19             . STORE THROUGH.FARLCT    EQUF      44,,H1            . REEL COUNTFAPOS     EQUF      44,,H2            . POSITION ON 1ST BACKUPFAREEL1   EQUF      46                . FIRST BACKUP REELID (ASCII)FAREEL2   EQUF      48                . SECOND BACKUP REELID (ASCII)FAREEL3   EQUF      50                . THIRD BACKUP REELID (ASCII)FAREEL4   EQUF      52                . FOURTH BACKUP REELID (ASCII)..         SORT RECORD DEFINITIONS.SRQUAL    EQUF      0                 . QUALIFIERSRFILE    EQUF      2                 . FILE NAMESRCYCL    EQUF      4,,H1             . ABS F-CYCLESRADJL    EQUF      4,,H2             . ARCHIVE DATE (JULIAN)SRARCT    EQUF      5,,H1             . ARCHIVE TIME (TDATE$ H2)SRRLCT    EQUF      5,,H2             . REEL COUNTSRPOS     EQUF      6,,H1             . POSITION ON ARCHIVE TAPESRNOTR    EQUF      6,,H2             . TRACK COUNT OF FILESRPROJ    EQUF      7                 . PROJECT-IDSRACCT    EQUF      9                 . ACCOUNT NUMBERSRCATT    EQUF      11                . CATALOG DATE/TIMESRREFT    EQUF      12                . LAST REFERENCE DATE/TIMESRDBIT    EQUF      13                . DESCRIPTOR BITSSRRLTB    EQU       14                . TABLE OF BACKUP REEL IDS.SRSIZE    EQU       SRRLTB+MAXRLR     . SIZE OF SORT RECORD/.START          AND       A5,(0360000200)   . A,B,C,D,S OPTIONS TO A6          $IF       M$MHFSHARED=0     . THIS CODE FOR NON-SHARED ONLY          JZ        A6,SA020          . SKIP IF NO OPTIONS SET          P$RINT    ERRPRT(5)         . 'HOST/DIRECTORY OPTION ILLEGAL'          ER        ERR$              .  ABORT          $ELSE                       . THIS CODE FOR SHARED-ONLY          JNZ       A6,SA010          . SKIP IF OPTION SET          P$RINT    ERRPRT(6)         . 'HOST/DIRECTORY OPTION REQUIRED'          ER        ERR$              .  ABORTSA010          LA,U      A0,0              . INIT DIRID/HOST TO ZERO          TNE       A6,(1*/('Z'-'A')) . CHECK FOR <STD> DIR, HOST A          LA,U      A0,1              . IF SO SET DIRID=0, HOST=1          TNE       A6,(1*/('Z'-'B')) . CONTINUE CHECK FOR OTHER HOSTS          LA,U      A0,2              .          TNE       A6,(1*/('Z'-'C')) .          LA,U      A0,3              .          TNE       A6,(1*/('Z'-'D')) .          LA,U      A0,4              .          TNE,U     A6,1*/('Z'-'S')   . CHECK FOR SHARED DIRECTORY          LA        A0,(1,1)          . IF SO SET DIRID=1, HOST=1          SA        A0,DIRHOST        . SAVE DIRID, HOSTID          JNZ       A0,SA020          . SKIP IF NONZERO, IF ZERO MULT OPTS GIVEN          P$RINT    ERRPRT(7)         . 'ONLY ONE HOST/DIR OPTION ALLOWED'          ER        ERR$              .  ABORT          $ENDF                       . END OF CONDITIONAL CODESA020          E$DIT     EPKT              . OPEN EDIT          DSL       A10,72            . ZERO TOTAL, PROCESSED FILE COUNTS          I$OW      RDFASH            . READ FAS$ARCHIVE HEADER (2 SECTORS)          TZ,S1     RDFASH+3          . TEST FOR GOOD STATUS          J         SA030             .  SKIP IF I/O ERROR          LX,U      X4,FASHDR         . X4 = HEADER ADDRESS          LA        A0,FAHDLB,X4      . GET HEADER LABEL WORD          TE,U      A0,0500226        . IS IT CORRECT LABEL?          J         SA030             .  NO, ERROR          LA        A0,FAHDPW,X4      . WORD COUNT OF POINTER ENTRIES          TG,U      A0,28             . LESS THAN 28?          J         SA030             .  NO, ERROR          LA        A0,FAHDPC,X4      . ENTRY TABLE COUNT          TG,U      A0,1              . LESS THAN ONE,          TG,U      A0,8              .  OR GREATER THAN 7?          J         SA030             .   YES, ERROR          ANA,U     A0,1              . DECREMENT FOR LOOP          LR,U      R6,,A0            . R6 = LOOP COUNTER          LX,U      X6,FAPEBG,X4      . X6 = ADDRESS OF NEXT POINTER ENTRY          E$MSG     FASMSG            . 'INPUT FILE CREATED '          E$DAY1    FAHDCD,X4         . CREATION DATE          E$MSGR                      . ' AT '          E$TIME    FAHDCD,X4         . CREATION TIME          E$MSGR                      . '. LAST UPDATE '          E$DAY1    FAHDUD,X4         . LAST UPDATE DATE          E$MSGR                      . ' AT '          E$TIME    FAHDUD,X4         . LAST UPDATE TIME          P$RINT    (0116,LINE)       . PRINT STATUS OF INPUT FAS$ARCHIVE          J         SA050             .SA030          P$RINT    ERRPRT(4)         . 'INVALID SYS$*FAS$ARCHIVE HEADER'          ER        ERR$              .  BLOW UPSA050          R$OPN     RP                . OPEN SORT..         GET THE NEXT POINTER TABLE, PROCESS RECORDS IF <DATA> TYPE.SA100          LA        A0,FAPETP,X6      . DATA TYPE DESCRIBED BY TABLE          LA        A4,FAPEAD,X6      . SECTOR ADDRESS OF STRUCTURE          AX        X6,FAPEWC,X6      . POINT X6 TO NEXT ENTRY          TE,U      A0,020            . IS THIS A DATA TYPE STRUCTURE?          J         SA190             .  NO, SKIP          LA        A0,(1,RPINIT)     .  YES, SET UP D-B READ PACKET          LA        A1,(1,FARPKT)     . MOVE TEMPLATE TO FARPKT          LR,U      R1,RPSIZE         . SIZE OF D-B READ PACKET          BT        A1,,*A0           . TRANSFER          D$BIO     FARPKT  A4        . OPEN I/O AT START OF DATA ADDRESS..         READ THE NEXT DATA RECORD FROM THE INPUT SYS$*FAS$ARCHIVE.SA110          D$BI      FARPKT  SA980,SA980 . READ 1ST SECTOR OF NEXT RECORD          LA        A0,FATYPE,A1      . GET RECORD TYPE          TNE,U     A0,077            . IS THIS AN END OF FILE RECORD?          J         SA185             .  YES, DONE WITH THIS GROUP          AA,U      A10,1             .  NO, INCREMENT TOTAL RECORD COUNT          LA        A3,(1,FASREC)     . PREPARE TO TRANSFER 1ST SECTOR          LXI,U     A1,1              .          LR,U      R1,28             .          BT        A3,,*A1           . MOVE 1ST SECTOR TO START OF <FASREC>          LX,U      X4,FASREC         . X4 = RECORD ADDRESS          LA        A6,FASECT,X4      . A6 = SECTOR COUNT          ANA,U     A6,2              . DECREMENT FOR LOOP          JN        A6,SA135          . ERROR IF NOT AT LEAST 2 SECTORS          D$BI      FARPKT  SA980,SA980 . READ THE SECOND SECTOR          LXI,U     A1,1              .          LR,U      R1,28             .          BT        A3,,*A1           . APPEND 2ND SECTOR TO <FASREC>SA120          JGD       A6,$+2            . MORE SECTORS IN THIS RECORD?          J         SA130             .  NO, SKIP          D$BI      FARPKT  SA980,SA980 . YES, READ DATA + IGNORE IT!          J         SA120             . CONTINUE WITH THIS NONSENSESA130          LA        A0,FATYPE,X4      . GET RECORD TYPE          TE,U      A0,020            . IS THIS A DATA RECORD?          J         SA135             .  NO, DON'T KNOW WHAT IT IS          LA        A0,FASTATUS,X4    .  YES, GET RECORD STATUS          JZ        A0,SA140          . IF ZERO, THIS IS GOOD DATA          TNE,U     A0,077            . IS THIS A DELETED RECORD?          J         SA180             .  YES, IGNORE IT (DON'T PRINT ERROR)SA135          E$CLEAR                     . CLEAR EDIT          E$MSG     FARCERR           . '*RECORD HAS UNRECOGNIZABLE CTL WORD: '          E$OCTF    12,,X4            . EDIT OCTAL VALUE OF 1ST WORD OF REC          P$RINT    (0114,LINE)       . PRINT ERROR MESSAGE          J         SA180             . GET THE NEXT RECORDSA140          LX,U      X5,RECORD         . X5 = SORT RECORD ADDRESS          LA,U      A0,3              . TRANSLATE 3 WORDS          LA,U      A1,FAQUAL,X4      .  FROM INPUT QUALIFIER (ASCII)          LA,U      A2,SRQUAL,X5      .  TO OUTPUT QUALIFIER (FIELDATA)          LMJ       X11,ASCFD$        .          LA,U      A0,3              .          LA,U      A1,FAFILE,X4      . DO THE SAME THING FOR THE          LA,U      A2,SRFILE,X5      .   FILE NAME          LMJ       X11,ASCFD$        .          LA        A6,FARLCT,X4      . A6 = COUNT OF BACKUP REELS          TLE,U     A6,MAXRLR+1       . MORE THAN FOUR,          TLE,U     A6,1              .  OR LESS THAN ONE?          J         SA145             .   YES, DON'T PROCESS THIS ONE          TZ        FAREEL1,X4        .   NO, IS FIRST REEL-ID = 0?          J         SA150             .    NO, THIS ENT CAN BE PROCESSEDSA145          E$CLEAR                     . CLEAR EDIT          E$MSG     BADINP            . '*FILE: '          E$FD2     SRQUAL,X5         . QUALIFIER          E$MSGR                      . *          E$FD2     SRFILE,X5         . FILE NAME          E$MSGR                      . (          E$DECV    FACYCL,X4         . F-CYCLE          E$MSGR                      . ') ARCHIVED '          E$DAY1    FABKUT,X4         . DATE OF ARCHIVE          E$MSGR                      . ' REEL CT >4 OR <1, NOT PROCESSED*'          P$RINT    (0120,LINE)       . PRINT ERROR MESSAGE          J         SA180             . GET NEXT RECORDSA150          AA,U      A11,1             . INCREMENT 'GOOD' FILE COUNT          LA        A0,FABKUT,X4      . ARCHIVE DATE (TDATE$)          LMJ       X11,JULOUT        . CONVERT TO JULIAN FOR SORT SEQUENCING          LA,U      A4,1              . ASSUME 1/1/64 IF ERROR          LA        A0,FABKUT,X4      . GET ARCHIVE DATE AGAIN          AND       A0,(0777777)      . A1 = TIME PORTION (TDATE$ H2)          LA        A0,FACYCL,X4      . F-CYCLE          LA        A2,FACATT,X4      . CATALOG DATE/TIME (TDATE$)          SA        A0,SRCYCL,X5      .  STORE IN SORT RECORD          SA        A1,SRARCT,X5      .          SA        A2,SRCATT,X5      .          SA        A4,SRADJL,X5      .          LA,U      A0,3              . TRANSLATE 3 WORDS          LA,U      A1,FAPROJ,X4      .  FROM INPUT PROJECT-ID (ASCII)          LA,U      A2,SRPROJ,X5      .  TO OUTPUT PROJECT-ID (ASCII)          LMJ       X11,ASCFD$        .          LA,U      A0,3              . DO THE SAME FOR THE          LA,U      A1,FAACCT,X4      .   ACCOUNT NUMBER          LA,U      A2,SRACCT,X5      .          LMJ       X11,ASCFD$        .          LA        A0,FANOTR,X4      . NUMBER OF TRACKS IN FILE          LA        A1,FAREFT,X4      . REFERENCE DATE/TIME (TDATE$)          LA        A2,FADBIT,X4      . DESCRIPTOR BITS FOR FILE          SA        A0,SRNOTR,X5      .  STORE IN SORT RECORD          SA        A1,SRREFT,X5      .          SA        A2,SRDBIT,X5      .          LA        A0,FAPOS,X4       . POSITION ON FIRST REEL          SA        A6,SRRLCT,X5      .  STORE REEL COUNT          SA        A0,SRPOS,X5       .   AND POSITION IN SORT REC          LA,U      A0,2              . TRANSLATE 2 WORDS (6 CHARS)          LA,U      A1,FAREEL1,X4     .  FROM INPUT REEL-1 (ASCII)          LA,U      A2,SRRLTB,X5      .  TO OUTPUT REEL-1 (FIELDATA)          LMJ       X11,ASCFD$        .          TLE,U     A6,2              . MORE THAN ONE BACKUP REEL?          J         SA170             .  NO, SKIP          LA,U      A0,2              .  YES, TRANSLATE REEL-2          LA,U      A1,FAREEL2,X4     .   THE SAME WAY          LA,U      A2,SRRLTB+1,X5    .          LMJ       X11,ASCFD$        .          TLE,U     A6,3              . MORE THAN TWO BACKUP REELS?          J         SA170             .  NO, SKIP          LA,U      A0,2              .  YES, TRANSLATE REEL-3          LA,U      A1,FAREEL3,X4     .   THE SAME WAY          LA,U      A2,SRRLTB+2,X5    .          LMJ       X11,ASCFD$        .          TLE,U     A6,4              . MORE THAN THREE BACKUP REELS?          J         SA170             .  NO, SKIP          LA,U      A0,2              .  YES, TRANSLATE REEL-4          LA,U      A1,FAREEL4,X4     .   THE SAME WAY          LA,U      A2,SRRLTB+3,X5    .   (EXCESS CHARS AT THE END OF SORT          LMJ       X11,ASCFD$        .    RECORD WILL BE IGNORED)SA170          R$REL     (SRSIZE,RECORD)   . RELEASE RECORD TO SORTSA180          J         SA110             . GO GET NEXT RECORDSA185          D$BIC     FARPKT            . CLOSE D-B INPUT FOR THIS DATA GROUPSA190          JGD       R6,SA100          . BACK FOR NEXT POINTER ENTRY..         FINISHED WITH INPUT PHASE, SORT AND BEGIN OUTPUT.          JNZ       A11,SA210         . SKIP IF FILE(S) WERE PROCESSED          P$RINT    ERRPRT(1)         .  IF NOT, 'NO FILES TO PROCESS'          ER        ERR$              .   BLOW UPSA210          R$SORT                      . SORT THE DATA..         WRITE THE NEXT RECORD TO THE OUTPUT EXTRACT FILE.SA220          R$RET     SA300             . RETURN THE NEXT RECORD IN SORTED SEQ          LX,U      X4,,A0            . X4 = SORT RECORD ADDRESS          D$BO      MFWPKT  SA990,SA990 . GET ADDRESS OF NEXT OUTPUT RECORD          LX,U      X5,,A1            . X5 = OUTPUT RECORD ADDRESS          LXI,U     A1,1              . INCREMENT FOR TRANSFER          LA,U      A0,(0)            . MOVE ZEROES          LR,U      R1,28             . 28 WORDS/RECORD          BT        A1,,*A0           . CLEAR THE OUTPUT RECORD          DL        A0,SRQUAL,X4      . QUALIFIER          DL        A2,SRFILE,X4      . FILE NAME          LA        A4,SRCYCL,X4      . F-CYCLE          DS        A0,MFQUAL,X5      .  STORE IN OUTPUT RECORD          DS        A2,MFFILE,X5      .          SA        A4,MFCYCL,X5      .          DL        A0,SRACCT,X4      . ACCOUNT NUMBER          DL        A2,SRPROJ,X4      . PROJECT-ID          DS        A0,MFACCT,X5      .  STORE IN OUTPUT RECORD          DS        A2,MFPROJ,X5      .          LA        A0,('      ')     . FIELDATA SPACES          SA        A0,MFRKEY,X5      . SPACEFILL READ KEY          SA        A0,MFWKEY,X5      .  AND WRITE KEY          LA,U      A0,MMBKUP         .          SA        A0,MFDESC,X5      . MARK AS BACKED UP          LA        A4,SRADJL,X4      . JULIAN ARCHIVE DATE          LMJ       X11,JULIN         . CONVERT BACK TO TDATE$          LXM       A0,SRARCT,X4      . ADD IN TIME PORTION          LA        A1,SRCATT,X4      . CATALOG DATE/TIME          SA        A0,MFBKUT,X5      .  STORE BACKUP DATE = ARCHIVE DATE          SA        A1,MFCATT,X5      .  STORE CAT DATE/TIME          LA        A0,SRNOTR,X4      . TRACK COUNT OF FILE          LA        A1,SRREFT,X4      . LAST REF DATE/TIME          SA        A0,MFNOTR,X5      .  STORE IN OUTPUT RECORD          SA        A1,MFREFT,X5      .          LA,U      A0,0              . INIT INHIBIT BITS = 0          LA        A1,SRDBIT,X4      . LOAD FAS-ARCHIVE DESCRIPTOR BITS          TEP       A1,(FBGOPT)       .  SET INHIBIT BITS AS APPROPRIATE          AA,U      A0,MMGOPT         .        .          TEP       A1,(FBVOPT)       .        .          AA,U      A0,MMVOPT         .        ...         NOTE: FAS SEEMS TO BE SETTING THE 'PRIVATE' BIT FOR ALL FILES.         LOGGED IN SYS$*FAS$ARCHIVE.  SINCE THAT WOULD UNREASONABLY.         RESTRICT RELOAD OF FILES CATALOGUED AS PUBLIC, IT IS BETTER TO.         IGNORE THE SETTING OF THE PRIVATE BIT.  THE FOLLOWING TWO LINES.         OF CODE ARE COMMENTED OUT FOR THAT REASON...         TEP       A1,(FBPRVT)       ..         AA,U      A0,MMPRVT         ..          TEP       A1,(FBWOLY)       .  CONTINUE SETTING INHIBIT BITS          AA,U      A0,MMWOLY         .          TEP       A1,(FBROLY)       .          AA,U      A0,MMROLY         .          SA        A0,MFINHI,X5      . STORE INHIBIT BITS IN OUTPUT REC          LA,U      A0,0              . INIT PCHAR-FLAGS = 0          TEP       A1,(FBPOGR)       .          AA,U      A0,MMPOGR         . SET POSITION GRANULARITY IF INDICATED          TEP       A1,(FBWAD)        .          AA,U      A0,MMWAD          .  AND/OR WORD ADDRESSABLE          SA        A0,MFPCHR,X5      . STORE PCHAR-FLAGS IN OUTPUT          LA,U      A0,0              . INIT FILE-FLAGS = 0          TEP       A1,(FBSTRT)       .          AA,U      A0,MMSTRT         . SET STORE-THROUGH IF INDICATED          SA        A0,MFFILF,X5      . STORE FILE-FLAGS IN OUTPUT          LA,U      A0,MMFIXD         . ASSUME TYPE = FIXED DISC          LA,U      A2,0              . INIT PACKID = 0          TOP       A1,(FBREMD)       . FILE ARCHIVED FROM R-DISC?          J         SA250             .  NO, SKIP          LA,U      A0,MMREMD         .  YES, LOAD TYPE = REMOVABLE          LA        A2,('??????')     . DON'T KNOW THE PACK-IDSA250          SA        A0,MFTYPE,X5      . SAVE FILE TYPE          SA        A2,MFPKID,X5      . AND PACKID (0=FIXED)          LA        A0,DIRID          . ORIGINATION DIRECTORY-ID          SA        A0,MFDRID,X5      . STORE IN OUTPUT          LA        A0,SRRLCT,X4      . BACKUP REEL COUNT          LA        A1,SRPOS,X4       . POSITION ON FIRST REEL          SA        A0,MFBUNO,X5      .  STORE IN OUTPUT RECORD          SA        A1,MFSTFP,X5      .          LA,U      A1,SRRLTB,X4      . ADDRESS OF REEL TABLE FROM SORT REC          LXI,U     A1,1              .          LA,U      A2,MFBRST,X5      . DESTINATION ADDRESS OF REEL DATA          LXI,U     A2,1              .          LR,U      R1,,A0            . BACKUP REEL COUNT          BT        A2,,*A1           . MOVE REEL TABLE TO OUTPUT RECORD          J         SA220             . GO GET NEXT SORT RECORD..         FINISHED WITH RECORD CREATION, WRITE EXTRACT HEADER AND EXIT.SA300          D$BOC     MFWPKT  SA990,SA990 . CLOSE OUTPUT TO $MFDB$          LX,U      X5,MFDHDR         . X5 = $MFDB$ HEADER ADDRESS          ER        TDATE$            . GET CURRENT DATE/TIME          LA        A1,('*SADB*')     . USE UNIQUE LABEL FOR CONVERSION FILE          LA,U      A2,64             . DATA BEGINS AT SECTOR 64          SA        A0,MFTDAT,X5      . STORE DATE/TIME OF FILE CREATION          SA        A1,MFLABL,X5      .  AND CONVERSION FILE LABEL          SA        A2,MFFLAD,X5      .  AND MASS STORAGE ADDR OF DATA          SA        A11,MFFLCT,X5     .  AND OUTPUT FILE COUNT          LA        A0,DIRID          . ORIGINATION DIRECTORY-ID          LA        A1,HOSTID         .  AND HOST-ID          SA        A0,MFHDID,X5      .  STORE IN HEADER          SA        A1,MFHHID,X5      .          I$OW      WRHDR             . WRITE HEADER          TZ,S1     WRHDR+3           . GOOD STATUS?          J         SA990             .  NO, SKIP          E$CLEAR                     .  YES, CLEAR EDIT          E$MSG     ENDMS1            . 'FAS$ARCHIVE CONVERSION COMPLETED'          E$DAY1    MFTDAT,X5         . CURR DATE          E$MSGR                      . ' AT '          E$TIME    MFTDAT,X5         . CURR TIME          P$RINT    (0214,LINE)       . PRINT 1ST STATUS LINE          E$CLEAR                     . CLEAR EDIT          E$DECV    A11               . PROCESSED FILE COUNT          E$MSG     ENDMS2            . ' OF '          E$DECV    A10               . TOTAL FILE COUNT          E$MSGR                      . ' FILES WERE PROCESSED.'          P$RINT    (0114,LINE)       . PRINT 2ND STATUS LINE          ER        EXIT$             . ALL DONE..         AN I/O ERROR HAS OCCURRED WHILE READING SYS$*FAS$ARCHIVE.SA980          LR        R1,A0             . SAVE PACKET ADDR          P$RINT    ERRPRT(2)         . 'ERROR READING FAS$ARCHIVE'          LA        A0,R1             . RESTORE ADDRESS          ER        ERR$              .  AND ERROR EXIT..         AN I/O ERROR HAS OCCURRED WHILE WRITING THE EXTRACT FILE.SA990          LR        R1,A0             . SAVE PACKET ADDR          P$RINT    ERRPRT(3)         . 'ERROR WRITING EXTRACT FILE'          LA        A0,R1             . RESTORE ADDRESS          ER        ERR$              .  AND ERROR EXIT..ERR(1)    'NO FILES WERE FOUND TO PROCESS'ERR(2)    'I/O ERROR READING SYS$*FAS$ARCHIVE - A0 = PACKET ADDR'ERR(3)    'I/O ERROR WRITING EXTRACT FILE - A0 = PACKET ADDR'ERR(4)    'INVALID SYS$*FAS$ARCHIVE HEADER FORMAT'ERR(5)    'HOST/DIRECTORY-ID OPTION ILLEGAL WHEN <M$MHFSHARED>=0'ERR(6)    'HOST/DIRECTORY-ID OPTION REQUIRED WHEN <M$MHFSHARED>=1'ERR(7)    'CANNOT SPECIFY MULTIPLE HOST/DIRECTORY-ID OPTIONS'ERR(8)I DO 7 ,ERRPRT(I)  +  0100+ERR(I+1)-ERR(I),ERR(I)FASMSG    'INPUT FILE CREATED & AT &, LAST UPDATE & AT &'FARCERR   '*DATA RECORD HAS UNRECOGNIZABLE CONTROL WORD: &'BADINP    '*FILE: &*&(&) ARCHIVED &, REEL CT > 4 OR < 1, NOT PROCESSED*&'ENDMS1    'SYS$*FAS$ARCHIVE CONVERSION COMPLETED & AT &'ENDMS2    ' OF & FILES WERE PROCESSED.&'/.$(0)DIRID     EQUF      $,,H1             . USER-SPECIFIED DIRECTORY-IDHOSTID    EQUF      $,,H2             . USER-SPECIFIED HOST-IDDIRHOST   +         0                 . DIRECTORY, HOST IDSRDFASH    I$OD      'FAS$ARCHIVE',R$  56,FASHDR  0RPINIT    D$BRP     'FAS$ARCHIVE'  28,1792*4,$-$,DBBUFF . D-B READ TEMPLATERPSIZE    EQU       $-RPINITFARPKT    RES       RPSIZE            . PKT FOR D-B READ OF FAS$ARCHIVEMFWPKT    D$BWP     '$MFDB$'  28,1792*4,64,DBBUFF . PKT FOR D-B WRITE OF $MFDB$WRHDR     I$OD      '$MFDB$',W$  28,MFDHDR  0  . PKT FOR WRITE OF $MFDB$ HEADERRP        R$FILE    ;                 . SORT PACKET          'RSZW',SRSIZE               ;          'FILES','XA'                ;          'KEY',1,33,'A','A'          ;          'DELLOG'  ;          'DELCON'  ;          'FPOC',SA100                ;          'LPOC',SA220EPKT      E$PKT     16,LINE           . EDIT$ PACKETLINE      RES       16                . EDIT$ OUTPUT BUFFERRECORD    RES       SRSIZE+1          . SORT RECORDFASHDR    RES       56                . FAS$ARCHIVE HEADER BUFFERFASREC    RES       56                . CURRENT FAS$ARCHIVE DATA RECORDMFDHDR    RES       28                . EXTRACT FILE HEADER BUFFERDBBUFF    RES       1792*8            . I/O BUFFER(S) FOR READ, WRITE          END       START@ELT,SIP MARSREL$.MAP/FAS$ARC-CVT,,,204701113332,006IN MARS$.JULDATE,.FAS$ARC-CVTNOT TPF$.@ELT,SIP MARSREL$.FETCH,,,163345123137,023.         M. A. R. S.   BATCH RELOAD PROCESSOR                WRC 1/91.$(1)      AXR$          $LIT          MGPDEF          AHFDEF          RCBDEF.MAXSRT    EQU       M$RELDMAX         . MAXIMUM SORT RECORDS..         SORT RECORD DEFINITIONS.SREQIP    EQUF      0,,H1             . EQUIP CODE (0=REEL, 1=CARTRIDGE)SRRLH1    EQUF      0,,H2             . CHARS 1-3 OF FIRST REELIDSRRLH2    EQUF      1,,H1             . CHARS 4-6 OF FIRST REELIDSRSEQ     EQUF      1,,H2             . STARTING FILE POSITIONSRLINK    EQUF      2,,H1             . LINK TO CORRESPONDING RELOAD RECORDSRSIZE    EQU       3                 . SIZE OF SORT RECORD..         RELOAD RECORD DEFINITIONS.RRQUAL    EQUF      0                 . QUALIFIERRRFILE    EQUF      2                 . FILENAMERRCYC     EQUF      4,,H1             . ABS F-CYCLERRBRCT    EQUF      4,,S4             . COUNT OF BACKUP REELSRRWAIT    EQUF      4,,S5             . SET IF WAIT ON FILE (PROCESS IN PASS 2)RRFCL     EQUF      4,,S6             . SET IF USER SPECIFIED F-CYCLERRRKEY    EQUF      5                 . READ KEYRRWKEY    EQUF      6                 . WRITE KEYRROPTS    EQUF      7                 . @FETCH OPTIONS FOR THIS FILERRDIR     EQUF      7,,S1             . DIR-ID (0=STD, 1=SHR, 077=BOTH)RRHFLK    EQUF      8                 . LINK TO ARCHIST$ HISTORY SECTORRRMRTB    EQU       9                 . TABLE FOR BACKUP REELS 2-NRRSIZE    EQU       RRMRTB+RCBRMX-1   . RELOAD RECORD SIZE..         MFD AND ELT$ DEFINITIONS.M0DSCW    EQUF      12                . WORD CONTAINING DESCRIPTOR BITS (T1)M0CYCW    EQUF      17                . WORD CONTAINING ABS F-CYCLE (T3)M0REFT    EQUF      18                . LAST REFERENCE DATE/TIMEM0CATT    EQUF      19                . CATALOG DATE/TIME.FQL       EQUF      ELT$,,S1          . LENGTH OF QUALIFIERFNL       EQUF      ELT$,,S2          . LENGTH OF FILENAMEFCL       EQUF      ELT$,,S3          . LENGTH OF F-CYCLERKL       EQUF      ELT$,,S4          . LENGTH OF READ KEYWKL       EQUF      ELT$,,S5          . LENGTH OF WRITE KEYIQF       EQUF      ELT$,,S6          . IMPLIED QUALIFIER FLAGFQUAL     EQUF      ELT$+2            . QUALIFIERFNAME     EQUF      ELT$+4            . FILENAMEFCYC      EQUF      ELT$+6            . F-CYCLE (FIELDATA)RKEY      EQUF      ELT$+7            . READ KEYWKEY      EQUF      ELT$+8            . READ KEY/.START          TE,U      A4,4              . DEMAND RUN?          SZ        DEMAND            .  NO, CLEAR DEMAND FLAG          TOP       15,(1*/34)        . IS USER BREAKPOINTED?          SZ        BRKPT             .  NO, CLEAR BREAKPOINT FLAG          LA,U      A0,USRACC         . ADDR OF USER ACCOUNT NUMBER          LA        A1,(2,023)        .          ER        PCT$              . PICKUP ACCOUNT NUMBER FROM PCT          LA        A0,(6,LINE)       .          ER        PCT$              . RETRIEVE 1ST 6 WORDS OF PCT          LA        A0,LINE+1         .          SA        A0,GENRUN         . SAVE GENERATED RUNID          LA,U      A0,USRPROJ        . ADDRESS OF PROJECT-ID          LA        A1,(2,1)          . PCT$ PARAMETER          AA,H1     A1,LINE+5         . ADD OFFSET OF PROJECT-ID PCT BUFFER          ER        PCT$              . RETRIEVE PROJECT-ID          LA,S2     A0,LINE+4         . GET PRIVILEGED INDICATOR          SA        A0,PRIV           . SET DLOC-PRIVILEGED FLAG          LA        A0,(2,CLIST)      .          ER        CLIST$            . REGISTER @FETCH WITH EXEC          LA        A0,R2             . CURRENT DATE/TIME (TDATE$)          LMJ       X11,JULOUT        . CONVERT TO JULIAN          LMJ       X1,RF900          . ABORT IF ERROR RETURN HERE          SA        A4,CURJUL         . SAVE CURRENT JULIAN DATE          LX,U      X6,RRBUFF         . X6 = ADDRESS OF NEXT RELOAD RECORD..         SUBSEQUENT EXECUTIONS IN SUCCESSION BEGIN HERE.RF100          E$DIT     EPKT              . OPEN EDIT          SZ        INFOR$            . CLEAR POINTER FOR RINF$          LA        A0,(50,INFBUFF)   . WHERE TO PUT THE INFOR          LMJ       X11,RINF$         . READ NEXT INFOR          J         RF190             .  SKIP IF ERROR          LA        A14,INFBUFF       . PROCESSOR CALL OPTIONS          AND       A14,(1*/26-1)     . RIGHTMOST 26 BITS TO A15          SZ        BOMB              . ZERO ABORT-IF-ERROR FLAG          TOP       A15,(1*/('Z'-'C')) . TEST FOR C-OPTION SET,          TZ        DEMAND            .  OR DEMAND RUN          TEP,U     A15,1*/('Z'-'T')  .   IF SO, DON'T SET FLAG UNLESS 'T' SET          SP1       BOMB              .          SZ        QFLAG             . ZERO QUERY-YES FLAG          TNZ       FRSTCL            . FIRST TIME THROUGH?          J         RF110             .  NO, SKIP          SZ        FRSTCL            .  YES, CLEAR FIRST CALL FLAG          I$D       IDPKT             . FORMAT AND PRINT ID LINE          ER        ERR$              .  ABORT IF ERROR FROM ID$RF110          TEP,U     A15,1*/('Z'-'Q')  . IS QUERY OPTION SET,          TZ        DEMAND            .  AND IS THIS A BATCH RUN?          J         RF115             .   NO, SKIP          P$RINT    ERRPRT(16)        .   YES, 'Q OPTION IGNORED IN BATCH'RF115          SA        A15,RROPTS,X6     . SAVE PROCESSOR CALL OPTIONS          LNA,U     A4,1              . FLAG - NEITHER Y,U SPECIFIED          TOP,U     A15,1*/('Z'-'Y')  . RELOAD FROM STD DIRECTORY?          J         RF120             .  NO, SKIP          LA,U      A4,0              .  YES, SET FLAG = STD          TOP,U     A15,1*/('Z'-'U')  . TEST FOR CONFLICTING OPTIONS          J         RF122             . BOTH NOT SPECIFIED, SKIP          P$RINT    ERRPRT(17)        . 'CANNOT SPECIFY Y,U TOGETHER'          J         RF185             .  ERROR THIS INPUTRF120          TEP,U     A15,1*/('Z'-'U')  . RELOAD FROM SHARED DIRECTORY?          LA,U      A4,1              .  YES, SET FLAG = SHAREDRF122          SZ        HOSTID            . ZERO HOSTID          LA,U      A0,DIDPKT         .          ER        MSCON$            . PERFORM MSCON$-DIRID$ REQUEST          JN        A0,RF125          . SKIP IF NEG STATUS, NO MHFS          LA,S6     A0,DIDBUF         . GET MHFS STATUS BITS          TEP,U     A0,1*/0           . IS MHFS CONFIGURED ON THIS SYSTEM?          J         RF128             .  YES, SKIPRF125          $IF       M$MHFSHARED>0     . THIS CODE FOR SHARED-ONLY          P$RINT    ERRPRT(18)        . 'MHFS NOT CONFIG, <M$MHFSHARED> MUST=0'          ER        ERR$              .  ABORT IMMEDIATELY IF THIS HAPPENS          $ELSE                       . THIS CODE FOR NON-SHARED ONLY          JP        A4,RF132          . SKIP IF Y,U OPTION SET          LA,U      A4,0              .  IF NOT, SET FOR STD DIRECTORY          J         RF135             . SKIP REST OF MHFS CODE          $ENDF                       . END OF CONDITIONAL CODERF128          LA,S5     A1,DIDBUF         . HOSTID FOR THIS SYSTEM          SA        A1,HOSTID         . SAVE FOR LATER REF          TG,U      A1,1              . CHECK WITHIN LEGAL RANGE, 1-4          TG,U      A1,4+1            .          J         $+2               . NOT IN RANGE, ERROR          J         RF130             . RANGE CHECK WAS OK          P$RINT    ERRPRT(19)        . 'INVALID HOSTID RETURNED BY DIRID$'          ER        ERR$              .  ABORT RIGHT NOW IF THIS HAPPENSRF130          JP        A4,$+2            . SKIP IF USER SPECIFIED DIRECTORY          LA,S1     A4,DIDBUF         .  IF NOT, LOAD CURRENT DEFAULT DIR          ON        M$MHFSHARED>0     . THIS CODE FOR SHARED-ONLY          AND,U     A0,1*/4++1*/5     . A1 = MHFS DOWN, UNAVAIL BITS          JZ        A1,RF135          . FINISHED MHFS CHECK IF UP, AVAIL          OFF       M$MHFSHARED>0     . END OF SHARED-ONLY CODERF132          JZ        A4,RF135          . FINISHED IF STD RELOAD WAS REQUESTED          TE,U      A4,1              . WAS SHARED RELOAD SPECIFIED?          J         RF133             .  NO, MUST BE DOUBLE-MFD REQ          P$RINT    ERRPRT(20)        . 'CANNOT RELOAD FROM SHARED'          J         RF185             . ERROR THIS INPUTRF133          P$RINT    ERRPRT(21)        . 'ONLY STD DIR WILL BE ASG/RELOADED'          LA,U      A4,0              . SET FLAG = STD SEARCH ONLYRF135          SA        A4,RRDIR,X6       . SAVE DIRECTORY TYPE FOR LATER REF          LX,U      X9,ERM11          . ' MISSING - REQUIRED'          LA,U      A0,1              .          LMJ       X11,SELT$         . PICKUP SPEC 1 FROM INFOR          J         RF170             .  ERROR IF NO FIND          LX,U      X9,ERM12          . ' FILE NAME REQUIRED'          TNZ       FNL               . WAS FILENAME GIVEN?          J         RF180             .  NO, ERROR          DL        A0,FQUAL          . QUALIFIER FROM INFOR          TZ        FQL               . WAS QUAL SUPPLIED BY USER?          J         RF140             .  YES, SKIP          DL        A0,USRPROJ        .  NO, USE PROJECT-ID          TNZ       IQF               . WAS IMPLIED QUALIFIER USED?          J         RF140             .  NO, SKIP          LA,U      A0,DBUFF          .  YES, RETRIEVE FROM PCT          LA        A1,(1,0336)       . PCTNAM (0241) + 075 = NS EXT LINK          ER        PCT$              . GET NAME SECTION EXT LINK          LA,U      A0,DBUFF          .          LA,H1     A1,DBUFF          . A1 = LINK          AA,U      A1,01000+1        . ADJ FOR PCT-BASED ADDR, + TABLE OFFSET          LXI,U     A1,2              . RETRIEVE 2 WORDS FROM NS EXT WD 1,2          ER        PCT$              . GET IMPLIED QUALIFIER          DL        A0,DBUFF          .  INTO A0,A1RF140          DS        A0,RRQUAL,X6      . STORE QUALIFIER IN RELOAD RECORD          DL        A0,FNAME          . FILENAME          DS        A0,RRFILE,X6      . STORE IN RELOAD RECORD          LA,U      A4,0              . ASSUME CYCLE = 0 (NOT GIVEN)          LA        A0,FCL            . CHARS IN SPECIFIED F-CYCLE          SA        A0,RRFCL,X6       . STORE AS FLAG FOR LATER USE          JZ        A0,RF150          . SKIP IF NO CYCLE GIVEN          LX,U      X9,ERM13          .  YES, PREPARE 'REL CYC NOT ALLOWED' MSG          LA,S1     A0,FCYC           . FIRST CHAR OF F-CYCLE          TE,U      A0,'-'            .          TNE,U     A0,'+'            .          J         RF180             .  ERROR IF CHARS '+' OR '-'          LX,U      X9,ERM14          . ' F-CYCLE FORMAT ERROR'          LA        A0,FCYC           . GET FIELDATA CYCLE          LMJ       X11,FDTOBN        . CONVERT TO BINARY          J         RF180             .  SKIP IF ERROR IN CONVERSION          TG,U      A4,1              . MUST BE WITHIN RANGE 1-999          TG,U      A4,1000           .          J         RF180             .  IF NOT, ERRORRF150          SA        A4,RRCYC,X6       . STORE BINARY F-CYCLE          DL        A0,('            ') . ASSUME BOTH KEYS ARE BLANK          TZ        RKL               . WAS READ KEY GIVEN?          LA        A0,RKEY           .  YES, LOAD FROM ELT$          TZ        WKL               . WAS WRITE KEY GIVEN?          LA        A1,WKEY           .  YES, LOAD FROM ELT$          SA        A0,RRRKEY,X6      . STORE KEYS IN RELOAD RECORD          SA        A1,RRWKEY,X6      .          SZ        AGELMT            . ASSUME MAX-DAYS-OLD = 0 (NOT GIVEN)          LA,U      A0,010206         . SPEC 2 ELTNAME (AGE LIMIT)          LMJ       X11,SINF$         . SEARCH INFOR FOR IT          J         RF160             .  NO FIND, SKIP          LX,U      X9,ERM15          . PREPARE MSG ' AGE LIMIT ERROR'          LMJ       X11,FDTOBN        . CONVERT AGE-LIMIT (A0) TO BINARY (A4)          J         RF180             .  SKIP IF ERROR IN CONVERSION          TG,U      A4,1              . VALUE MUST BE BETWEEN 1-999 DAYS          TG,U      A4,1000           .          J         RF180             .  IF NOT, ERROR          SA        A4,AGELMT         . STORE AGE LIMIT FOR LATER USERF160          LMJ       X11,CHKFIL        . CALL <CHKFIL> FOR THIS FILE, PASS 1          J         RF290             .  ERROR STATUS          J         RF200             .  NO FIND - SEARCH ARCHIVE NEXT          J         RF260             .  UNLOAD/WAIT STATUS          J         RF300             .  FILE HAS BEEN VERIFIED/ASSIGNED/..         ERROR OR MISSING USER FILE SPECIFICATION(S).RF170          TZ        PRIV              . PRIVILEGED RUN,          TZ        RELCNT            .  AND NO FILES REQUESTED?          J         RF180             .   NO, SKIP          LX,U      X7,RCADDR         . X7 = BASE ADDRESS OF MRCBNK          TE,U      A15,1*/('Z'-'S')  . IS 'S' OPTION SET?          J         RF172             .  NO, SKIP          SP1       RCHDAP,X7         .  YES, SET ARCHIVE-IN-PROGRESS FLAG          P$RINT    ERRPRT(12)        . 'ARCHIVE-IN-PROGRESS SET IN MRCBNK'          J         RF800             . EXITRF172          TE,U      A15,1*/('Z'-'Z')  . IS 'Z' OPTION SET?          J         RF180             .  NO, SKIP          SZ        RCHDAP,X7         .  YES, CLEAR ARCHIVE-IN-PROGRESS FLAG          P$RINT    ERRPRT(13)        . 'ARCHIVE-IN-PROGRESS CLEARED IN MRCBNK'          J         RF800             . EXITRF180          E$CLEAR                     . CLEAR EDIT          E$MSG     SPCMSG            . 'SPECIFICATION 1.  '          E$MSG     0,X9              . EDIT SPECIFIC ERROR MESSAGE          P$RINT    (0112,LINE)       . PRINT ERROR STATUSRF185          TNZ       BOMB              . DO WE CONTINUE AFTER ERROR?          J         RF320             .  YES, GET NEXT SPEC          J         RF920             .  NO, ABORT..         ERROR RETURNED FROM RINF$.RF190          TNE,U     A1,2              . PRINT IF NOT ABNORMAL RETURN FROM READ$          TZ        FRSTCL            .  OR THIS IS THE FIRST TIME THROUGH          ER        PRINT$            .          J         RF400             . TERMINATE PROCESSING IF RINF$ ERROR/..         FILE IS NOT CURRENTLY CATALOGED - SEARCH ARCHIVE FOR IT.RF200          LMJ       X10,AHFASG        . ASSIGN THE HISTORY FILE          J         RF920             .  ERROR ASSINGING SYS$*ARCHIST$          LMJ       X11,FFINIT        . TELL FINDFILE TO START AT THE TOP          LA,U      A8,0              . INIT HIST SECTOR = 0          LA        A0,RRDIR,X6       . DIR-ID FOR LOOKUP          LA        A7,HOSTID         . FIRST SEARCH WILL BE <STD>, LOCAL HOST          TNE,U     A0,1              . UNLESS SHARED-SPECIFIC REQ MADE          LA,U      A7,077            .  IN WHICH CASE DO <SHARED> SEARCH ONLYRF210          DL        A0,RRQUAL,X6      . GET QUALIFIER,          DL        A2,RRFILE,X6      .  FILENAME,          LA        A4,RRCYC,X6       .  CYCLE (OR ZERO) FROM RELOAD RECORD          LA        A5,A7             . HOST-ID FOR REQUEST          LSSL      A5,18             . TO A5 UPPER, LOWER=0 (NO BACKUP)          LMJ       X11,FINDFILE      . SEARCH ARCHIVE FOR THE FILE          J         RF920             .  ERROR FROM FINDFILE - ABORT          J         RF220             .  NO MORE MATCHES          LA        A8,APFECL,X4      .  MATCH - LOAD CYCLE, LINK          LSSL      A8,12             . SHIFT OFF CYCLE PORTION          SSL       A8,12             . A8 = LINK          AA        A8,AHFHDR+AHHSTB  .  MAKE ABSOLUTE          J         RF210             . BACK FOR NEXT (RELOAD LAST MATCH)RF220          LA,U      A5,0              . SET ERROR CODE = 0          JNZ       A8,RF230          . SKIP IF A MATCH WAS FOUND          TZ        RRDIR,X6          . NO MATCH - ONLY SEARCH STANDARD,          TNE,U     A7,077            .  OR HAS SHARED ALREADY BEEN SEARCHED?          J         RF225             .   YES, RET NO FIND          LA,U      A7,077            .   NO, SETUP FOR SHARED SEARCH          J         RF210             . TRY, TRY AGAINRF225          LX,U      X9,ERM9           . 'NOT CATALOGED, NOT FOUND IN ARCHIVE'          J         RF280             .  PRINT ERROR FOR THIS FILERF230          SZ        RRDIR,X6          . SET DIRECTORY = STANDARD          TNE,U     A7,077            . FIND FROM SHARED DIRECTORY?          SP1       RRDIR,X6          .  YES, SET DIR = SHARED          TNZ       RELCNT            . ANY FILES IN RELOAD LIST YET?          J         RF232             .  NO, SKIP          LA        A0,(RRSIZE,RRBUFF) .  YES, LOAD POINTER TO LIST          LR        R1,RELCNT         . COUNT OF EXISTING ENTRIES          SE        A8,RRHFLK,*A0     . SEARCH FOR SAME-FILE ALREADY MATCHED          J         RF232             .  NO FIND, CONTINUE          LX,U      X9,ERM10          .  FIND, 'HAS ALREADY BEEN SELECTED'          J         RF280             .   PRINT ERROR FOR THIS FILERF232          SA        A8,AHRDPK+5       . STORE SECTOR LINK IN AHF-READ PACKET          I$OW      AHRDPK            . READ HISTORY SECTOR FOR FILE          LMJ       X9,STATUS         . CHECK I/O STATUS          J         RF290             .  I/O ERROR, ABORT          LX,U      X5,AHBUFF         . X5 = ADDRESS OF HIST ENTRY          LX,U      X9,ERM7           . IF ERROR, 'BAD LINK TO HIST SECTOR'          LA        A5,AHRDPK+5       . ERROR CODE = AHF ADDRESS          DL        A0,AHQUAL,X5      . QUALIFIER FROM HIST SECTOR          DTE       A0,RRQUAL,X6      . SAME AS REQUESTED?          J         RF280             .  NO, ERROR          DL        A0,AHFILE,X5      . FILENAME FROM HIST SECTOR          DTE       A0,RRFILE,X6      . SAME AS REQUESTED?          J         RF280             .  NO, ERROR          LA        A0,AHCYCL,X5      . CYCLE FROM HIST SECTOR          TNZ       RRCYC,X6          . WAS CYCLE GIVEN BY USER?          SA        A0,RRCYC,X6       .  NO, STORE CYCLE THAT MATCHED          TE        A0,RRCYC,X6       . SAME AS REQUESTED CYCLE IF GIVEN?          J         RF280             .  NO, ERROR          LA        A0,AHINHI,X5      . GET INHIBIT BITS          TEP,U     A0,1*/3           . IS THIS A PRIVATE FILE,          TZ        PRIV              .  AND IF SO, IS USER NON-PRIVILEGED?          J         RF234             .   NO, SKIP PRIVATE CHECK          LA,U      A5,0              .   YES, INIT STATUS CODE = 0          LX,U      X9,ERM20          . IF ERR, 'INCORRECT ACCT<PROJ> FOR P.F.'          ON        M$PVTACC>0        . THIS CODE IS FOR PRIVATE-BY-ACCT          DL        A0,AHACCT,X5      . ACCOUNT NUMBER OF ARCHIVED FILE          DTE       A0,USRACC         . SAME AS USER'S ACCOUNT?          J         RF280             .  NO, CAN'T RELOAD          OFF       M$PVTACC>0        .          ON        M$PVTACC=0        . THIS CODE IS FOR PRIVATE-BY-PROJ          DL        A0,AHPROJ,X5      . PROJECT-ID OF ARCHIVED FILE          DTE       A0,USRPROJ        . SAME AS USER'S PROJECT-ID?          J         RF280             .  NO, CAN'T RELOAD          OFF       M$PVTACC=0        .RF234          LA        A5,AGELMT         . GET MAX AGE (DAYS) PERMITTED FOR RELOAD          JZ        A5,RF235          .  SKIP IF NONE SPECIFIED          LA        A0,AHCATT,X5      . CATALOG DATE (TDATE$)          LMJ       X11,JULOUT        . CONVERT TO JULIAN          LA,U      A4,1              . ASSUME 1/1/64 IF ERROR          AU        A5,A4             . A6 = LAST DATE THAT FILE CAN BE USED          TG        A6,CURJUL         . EARLIER THAN CURR DATE?          J         RF235             .  NO, CONTINUE          E$CLEAR                     .  YES, CLEAR EDIT FOR ERR MSG          E$SKIP    3                 . SKIP OVER 3          LMJ       X10,EDFILE        . EDIT Q*F(C)          E$MSG     ERM16             . ' ARCHIVED FILE IS MORE THAN '          E$DECV    A5                . AGE LIMIT          E$MSGR                      . ' DAYS OLD'          J         RF285             .  PRINT ERR MSG FOR THIS FILERF235          LA        A5,AHBRCT,X5      . COUNT OF BACKUP REELS          TLE,U     A5,RCBRMX+1       . MORE THAN MAX ALLOWED?          J         RF240             .  NO, CONTINUE          LX,U      X9,ERM8           .  YES, ' TOO MANY BACKUP REELS'          LA,U      A5,0              . ERR CODE = 0          J         RF280             . GO FORMAT MSG AND PRINT FOR THIS FILERF240          LA        A0,RELCNT         . COUNT OF FILES ON RELOAD LIST          TLE,U     A0,M$RELDMAX      . ALREADY AT MAXIMUM?          J         RF245             .  NO, SKIP          P$RINT    ERRPRT(4)         .  YES, 'TOO MANY FILES SELECTED'          J         RF920             .   ERROR ABORTRF245          SA        A5,RRBRCT,X6      . SAVE COUNT OF BACKUP REELS          LA        A0,AHCATT,X5      . SAVE CATALOG DATE/TIME          LA        A1,AHREFT,X5      .  AND REFERENCE DATE/TIME          SA        A0,CATTIM         .          SA        A1,REFTIM         .          TEP,U     A15,1*/('Z'-'Q')  . IS QUERY SET,          TNZ       DEMAND            .  AND IS THIS FROM DEMAND?          J         RF248             .   NO, SKIP          E$CLEAR                     . CLEAR EDIT          E$SKIP    3                 .          LMJ       X10,EDFILE        . EDIT Q*F(C)          E$MSG     MSG3              . ' WAS ARCHIVED ON '          E$DAY5    AHARCT,X5         . ARCHIVE DATE          E$MSG     MSG3A             . '  ('          E$DECV    AHTKCT,X5         . TRACK COUNT          E$MSGR                      . ' TRACKS)'          P$RINT    (0100,$)          . SKIP A LINE          P$RINT    (0114,LINE)       . PRINT ARCHIVE STATUS          LMJ       X10,DATPRT        . PRINT CAT AND REF DATE/TIMERF246          P$RINT    (0100,$)          . SKIP A LINE          LA,U      A0,RLDASK         . 'RELOAD THIS FILE? (Y,N)'          ER        TREAD$            .  ASK THE USER          LA,U      A0,,A0            . WORD COUNT          TE,U      A0,1              . MUST BE ONE WORD          J         RF246             . ASK AGAIN IF NOT          LA,S1     A0,LINE           . FIRST CHAR OF RESPONSE          TNE,U     A0,'Y'            . YES RESPONSE?          J         RF247             .  YES, MARK FOR RELOAD          TE,U      A0,'N'            . NO RESPONSE?          J         RF246             .  NO, ASK AGAIN          P$RINT    ERRPRT(14)        .  YES, 'NO ACTION TAKEN'          P$RINT    (0100,$)          . SKIP A LINE          J         RF320             . GO LOOK FOR NEXT SPECIFICATIONRF247          P$RINT    ERRPRT(15)        . 'REQUESTED FILE WILL BE RELOADED'          P$RINT    (0100,$)          . SKIP A LINE          SP1       QFLAG             . SET QUERY-YES FLAGRF248          INC       RELCNT            . INCREMENT RELOAD COUNT          NOP                         .          SA        A8,RRHFLK,X6      . SAVE AHF-SECTOR          LA,U      A0,LINE           . ADDRESS OF TEMP SORT RECORD          LA,U      A1,0              . INIT EQUIP TYPE = O          LA        A2,AHFLGS,X5      . ARCHIVE FLAG BITS          TEP,U     A2,AHFHIC         . IS FILE ARCHIVED ON CARTRIDGE?          LA,U      A1,1              .  IF SO, SET EQUIP = 1          LA        A2,AHBRST,X5      . FIRST BACKUP REEL ID          DSL       A2,18             . SHIFT, A2 = FIRST 3 CHARS          SSL       A3,18             .  AND A3 = LAST 3 CHARS          LA        A4,AHSTFP,X5      . STARTING POSITION OF FILE ON BACKUP          SA        A1,SREQIP,A0      . STORE IN SORT RECORD          SA        A2,SRRLH1,A0      .   .          SA        A3,SRRLH2,A0      .   .          SA        A4,SRSEQ,A0       .   .          SX        X6,SRLINK,A0      . STORE LINK TO RELOAD RECORD          LMJ       X11,SRTREL        . RELEASE SORT RECORD          LMJ       X1,RF900          .  ABORT IF ERROR RETURNED FROM SRTREL          TLE,U     A5,2              . MORE THAN ONE BACKUP REEL?          J         RF250             .  NO, SKIP          LA,U      A0,AHBRST+1,X5    .  YES, TRANSFER REMAINING REEL IDS          LXI,U     A0,1              .   TO <RRMRTB> IN RELOAD RECORD          LA,U      A1,RRMRTB,X6      .          LXI,U     A1,1              .          ANA,U     A5,1              . DECREMENT COUNT FOR ID ALREADY SAVED          LR        R1,A5             .          BT        A1,,*A0           .  AND DO THE TRANSFERRF250          TZ        QFLAG             . WAS USER ALREADY GIVEN FILE STATS?          J         RF252             .  YES, DON'T PRINT AGAIN          E$CLEAR                     . CLEAR EDIT          E$SKIP    3                 . SKIP OVER          LMJ       X10,EDFILE        . EDIT Q*F(C)          E$MSG     MSG3              . ' WAS ARCHIVED ON '          E$DAY5    AHARCT,X5         . ARCHIVE DATE          E$MSGR                      . ' - WILL BE RELOADED'          P$RINT    (0220,LINE)       . PRINT RELOAD STATUSRF252          INC       ARRCNT            . INCREMENT COUNT OF ARCHIVE-RELOAD FILES          NOP                         .          SZ        RRWAIT,X6         . CLEAR WAIT FLAG FOR RELOAD ENTRY          TOP       A15,(1*/('Z'-'A')) . WILL FILE BE ASSIGNED (A)          TEP,U     A15,1*/('Z'-'X')  .   OR (AX) AFTER RELOAD?          J         RF255             .    YES, SET WAIT FOR THIS FILE          TOP,U     A15,1*/('Z'-'W')  . USER REQUESTED WAIT-FOR RELOAD?          J         RF270             .  NO, DONE WITH THIS FILERF255          SP1       RRWAIT,X6         . SET WAIT FLAG IN RELOAD RECORD          SP1       ARCWT             . SET FLAG TO SYNC W/RELOAD RUN          J         RF270             . DONE WITH THIS FILE FOR NOW..         WAIT STATUS FROM @ASG, OR UNLOADED FILE.RF260          TOP       A15,(1*/('Z'-'A')) . WILL FILE BE ASSIGNED (A)          TEP,U     A15,1*/('Z'-'X')  .   OR (AX) AFTER RELOAD/WAIT RELEASE?          J         RF262             .    YES, SET WAIT FOR THIS FILE          TOP,U     A15,1*/('Z'-'W')  . DID USER REQUEST WAIT?          J         RF300             .  NO, DONE FOR NOWRF262          LA        A0,RELCNT         . COUNT OF FILES ON RELOAD LIST          TLE,U     A0,M$RELDMAX      . IS COUNT AT MAXIMUM?          J         RF265             .  NO, CONTINUE          P$RINT    ERRPRT(4)         .  YES, 'TOO MANY FILES SELECTED'          J         RF920             .   PRINT ERR MESSAGE AND ABORTRF265          AA,U      A0,1              . INCREMENT LIST COUNT          SA        A0,RELCNT         .  AND STORE FOR LATER          SZ        RRHFLK,X6         . ZERO HIST LINK (NOT ARCHIVE RELOAD)          SP1       RRWAIT,X6         . SET WAIT FLAG..         FINISHED WITH THIS FILE - INCREMENT RELOAD LIST POINTER.RF270          AX,U      X6,RRSIZE         . INCREMENT LIST POINTER          J         RF300             . GO PRINT CAT AND REF DATE/TIME..         FORMAT AND PRINT ERROR MESSAGE FOR FILE.RF280          E$CLEAR                     . CLEAR EDIT          E$SKIP    3                 . SKIP OVER          LMJ       X10,EDFILE        . EDIT Q*F(C)          E$MSG     0,X9              . APPEND APPROPRIATE ERROR MESSAGE          JZ        A5,RF285          . SKIP IF NO ERROR STATUS          E$OCTF    12,A5             . EDIT STATUS CODE (OCTAL)RF285          P$RINT    (0220,LINE)       . PRINT ERROR MESSAGERF290          TNZ       BOMB              . ABORT-IF-ERROR SET?          J         RF320             .  NO, CONTINUE          J         RF920             .  YES, ABORT/..         FILE WAS CATALOGED OR WILL BE RELOADED.RF300          TNZ       QFLAG             . WAS USER ALREADY GIVEN FILE STATS?          LMJ       X10,DATPRT        .  NO, PRINT CAT, REF DATE/TIME..         GET NEXT @FETCH COMMAND FROM INFOR.RF320          LA        A0,RELCNT         . COUNT OF FILES ON RELOAD LIST          TG,U      A0,M$RELDMAX       . ARE WE AT MAXIMUM?          J         RF400             .  YES, STOP HERE          TNZ       ARRCNT            . ANY FILES WAITING FOR RELOAD?          J         RF330             .  NO, SKIP MESSAGE          TZ        DEMAND            . DEMAND USER,          TZ        BRKPT             .  AND NOT BREAKPOINTED?          J         RF330             .   NO, SKIP          P$RINT    (0100,$)          .   YES, PRINT INFO MESSAGE          P$RINT    ERRPRT(22)        . 'SPEC ANOTHER FILE OR XMIT TO RELOAD'          P$RINT    (0100,$)          .RF330          R$EAD     (RF370,INFBUFF)   . READ NEXT IMAGE          J         RF400             . DATA MEANS WE'RE FINISHEDRF370          JN        A0,RF400          . IF A0 IS NEG, NO MORE TO READ          TEP       A0,(1*/32)        . IS INFOR FORTHCOMING?          J         RF100             .  IF SO, PROCESS NEXT COMMAND LINE/..         ALL FILE NAMES HAVE BEEN PROCESSED.RF400          LA,U      A0,FREAHF         . CSF$ IMAGE, @FREE SYS$*ARCHIST$          TZ        AHFOPN            . WAS HIST FILE ASSIGNED?          ER        CSF$              .  YES, FREE IT NOW          SZ        AHFOPN            . CLEAR HIST-OPEN FLAG          TNZ       ARRCNT            . ANY FILES TO ARCHIVE RELOAD?          J         RF750             .  NO, SKIP COMM W/RLDCTL          LMJ       X11,SRTRTN        . SORT POINTER RECS BY REEL, POSITION          LX,U      X7,RCADDR         . X7 = BASE ADDR OF RELOAD CONTROL BANKRF430          TS        RCHDTS,X7         . LOCK CONTROL BANK          ER        TIME$             . GET SYSTEM TIME          ANA       A0,RCHDTM,X7      . SUBTRACT TIME CELL FROM RCB          JP        A0,RF440          . OK IF POSITIVE          AA        A0,(24*60*60000)  .  IF NOT, ADJ FOR PAST MIDNIGHT?          JN        A0,RF450          .   ERROR IF STILL NEGRF440          TG,U      A0,20000          . UPDATED LESS THAN 20 SEC AGO?          J         RF450             .  NO, RELOAD CONTROLLER IS NOT RUNNING          LA        A0,RCHDLV,X7      . GET BANK SW LEVEL (2R1 = UNDEFINED)          TNE,U     A0,RCLEVL         . IS THIS CORRECT LEVEL?          J         RF445             .  YES, CONTINUE          C$TS      RCHDTS,X7         .  NO, UNLOCK RCB          P$RINT    ERRPRT(5)         . 'SOFTWARE LEVEL INCOMPATIBILITY'          LMJ       X1,RF900          . ABORTRF445          LA        A0,RCHDFL,X7      . LOAD FLAG WORD          TNE       A0,('*READY')     . IS CONTROLLER IDLE?          J         RF500             .  YES, GO SET UP RELOAD DATA          TE        A0,('*DATA*')     .  NO, WORKING FOR SOMEONE ELSE?          J         RF450             .   NO, NOT RUNNING OR BANK CORRUPTED          C$TS      RCHDTS,X7         .   YES, UNLOCK AND WAIT          LA,U      A1,5000           .          ER        TWAIT$            . WAIT FIVE SECONDS          J         RF430             .  AND TRY AGAINRF450          C$TS      RCHDTS,X7         . UNLOCK RCB          C$OM      COMQ1PKT          . 'RLDCTL INOPERATIVE, RESOLVE AND ANS A'          J         RF430             . TRY AGAIN AFTER OPERATOR ANSWERSRF500          LX,U      X6,RCFEBG,X7      . X6 = START ADDRESS OF FILE ENTRIESRF520          LMJ       X11,SRTRET        . RETURN THE NEXT RECORD          J         RF600             . ALL DONE WHEN FINISHED          LX        X4,SRLINK,A0      . X4 = ADDRESS OF MATCHING RELOAD RECORD          DL        A1,RRQUAL,X4      . QUALIFIER          DS        A1,RCFEQL,X6      . STORE IN RELOAD BANK RECORD          DL        A1,RRFILE,X4      . FILENAME          DS        A1,RCFEFL,X6      .  STORE IN RECORD          LA        A1,RRCYC,X4       . CYCLE          SA        A1,RCFECY,X6      .  STORE IN RECORD          LA        A1,RRHFLK,X4      . AHF SECTOR LINK ADDRESS          LXI       A2,SRRLH1,A0      . CHARS 1-3 OF REEL 1          LXM       A2,SRRLH2,A0      . CHARS 4-6 OF REEL 1          SA        A1,RCFELW,X6      .  STORE LINK IN RELOAD BANK RECORD          SA        A2,RCFEBS,X6      .   AND REEL 1 ID          LA,U      A1,0              . INIT RELOAD FLAGS = 0          TZ        SREQIP,A0         . RELOAD FROM CARTRIDGE?          LA,U      A1,RCFBCT         .  YES, SET FLAG          TZ        RRDIR,X4          . RELOAD FROM SHARED DIRECTORY?          AA,U      A1,RCFBOS         .  YES, SET ORIGINAL-SHARED FLAG          SA        A1,RCFEFB,X6      . STORE FLAG BITS          LA        A1,RRBRCT,X4      . COUNT OF BACKUP REELS          SA        A1,RCFEBC,X6      .  STORE IN RELOAD RECORD          TLE,U     A1,2              . MORE THAN ONE BACKUP REEL?          J         RF550             .  NO, SKIP          LA,U      A2,RRMRTB,X4      .  YES, SET UP FOR TRANSFER          LXI,U     A2,1              .          LA,U      A3,RCFEBS+1,X6    . ADDRESS OF REMAINING REEL DATA          LXI,U     A3,1              .          TG,U      A1,RCBRMX+1       . MORE THAN MAX ALLOWED?          LA,U      A1,RCBRMX         .  YES, LOAD MAXIMUM (SHOULD NEVER HAPPEN)          ANA,U     A1,1              . DECREMENT FOR REEL ALREADY TRANSFERRED          LR,U      R1,,A1            . INTO R1 FOR TRANSFER          BT        A3,,*A2           . MOVE REEL DATA TO BANK RECORDRF550          SZ        RCFEQ2,X6         . ZERO 2ND QUAL (NO RELOAD TO DIFF NAME)          AX,U      X6,RCFESZ         . POINT X6 TO NEXT FILE ENTRY          J         RF520             . BACK FOR NEXT FILERF600          LA        A0,RCHDAC,X7      . ACCESS COUNT          DSL       A0,36             . PREPARE FOR DIVIDE          DI,U      A0,RCRSMX         . DIVIDE BY MAX STATUS RECORDS          MSI,U     A1,RCRSSZ         . MULT REMAINDER BY REC SIZE          LX,U      X6,RCRSBG,X7      . X6 = START ADDR OF STAT RECORDS          AX,U      X6,,A1            .  ADD OFFSET, X6 = PTR TO OUR STAT REC          LA        A0,GENRUN         . USE GENERATED RUNID          SA        A0,RCRSGR,X6      .  STORE IN STATUS RECORD          LA,U      A1,RCSTWT         . WAIT STATUS          SA        A1,RCRSST,X6      .  STORE IN STATUS RECORD          LA,U      A1,RCASIN         . ACP STATUS INITIALIZE          SA        A1,RCRSAS,X6      . SET IN STATUS RECORD          LA        A0,AHFFAC+6       . CYCLE NUMBER OF HISTORY FILE          AND,U     A0,07777          . ISOLATE CYCLE IN A1          SA        A1,RCHDHC,X7      . STORE IN RCB HEADER          LA        A0,ARRCNT         . ARCHIVE RELOAD FILE COUNT          LA        A1,GENRUN         . GENERATED RUNID          SSL       A1,12             . USE FIRST 4 CHARS OF RUNID AS USER-4          SA        A0,RCHDFC,X7      .  STORE IN RCB HEADER          SA        A1,RCHDU4,X7      .   .          SZ        RCHDFA,X7         . THIS IS ARCHIVE (NOT FAS) REQUEST          SZ        RCHDFE,X7         . ZERO FETCH-WAITING FLAG          TZ        ARCWT             . WAIT FOR ANY FILES TO BE RELOADED?          SP1       RCHDFE,X7         .  YES, SET FETCH-WAITING FLAG          SZ        RCHDKL,X7         . ZERO KEYIN LENGTH          SZ        RCHDNT,X7         . ZERO NOTIFICATION TYPE          LA        A4,RCHDAC,X7      . ACCESS COUNT          AA,U      A4,1              . A4 = ACC COUNT AFTER OUR REQ PROCESSED          LA        A0,('*DATA*')     . DATA-READY FLAG          SA        A0,RCHDFL,X7      . STORE IN RCB HEADER          C$TS      RCHDTS,X7         . ALL DONE - UNLOCK HEADERRF620          LA,U      A1,2000           .          ER        TWAIT$            . WAIT 2 SECONDS          TS        RCHDTS,X7         . LOCK RELOAD CONTROL BANK          LA        A0,RCHDAC,X7      . ACCESS COUNT          LA        A2,RCRSST,X6      . STATUS FROM OUR RECORD          C$TS      RCHDTS,X7         . UNLOCK RCB          TLE       A0,A4             . HAS ACCESS COUNT BEEN UPDATED?          J         RF620             .  NO, CONTINUE WAITING          TE,U      A2,RCSTCM         . COMPLETION STATUS?          J         RF650             .  NO, ERROR          E$CLEAR                     .  YES, CLEAR EDIT          E$MSG     MSG5              . '*RUNID: <RL'          LA        A0,GENRUN         . GENERATED RUNID          SSL       A0,12             . SHIFT OFF RIGHTMOST 2 CHARS          E$FD1                       . EDIT INTO IMAGE          E$MSGR                      . '> STARTED AT '          ER        TDATE$            . GET CURRENT DATE/TIME          E$TIME                      . EDIT TIME HH:MM:SS          E$MSGR                      . ' TO RELOAD FILE(S)'          P$RINT    (0216,LINE)       . PRINT RELOAD-STARTED MESSAGE          J         RF700             . BEGIN WAIT FOR RUN IF NECESSARYRF650          P$RINT    ERRPRT(3)         . 'ERROR STATUS FROM <RLDCTL>'          LMJ       X1,RF900          .  ABORT/..         RELOAD HAS BEEN STARTED.RF700          TNZ       ARCWT             . WAIT ON ANY FILE TO BE RELOADED?          J         RF750             .  NO, SKIP          LA        A0,ERRPRT(1)      .  YES, '  WAITING...'          TZ        DEMAND            .          ER        PRINT$            . PRINT STATUS MESSAGE IF DEMANDRF710          LA        A4,RCRSAS,X6      . LOAD NEW ARCHIVE RELOAD STATUS          LR,U      R1,300/5          . DEFAULT WAIT TIME = 5 MINUTES          TNZ       DEMAND            . IS THIS DEMAND,          TE,U      A4,RCASIN         .  OR IS THE STATUS NOT INIT VALUE?          LR,U      R1,120/5          .   YES, WAIT ONLY 2 MINUTESRF715          LA,U      A1,5000           .          ER        TWAIT$            . WAIT 5 SECONDS          LA        A0,RCRSAS,X6      . GET ARCHIVE RELOAD STATUS          TNE,U     A0,RCASCM         . NORMAL COMPLETION?          J         RF740             .  YES, RESUME PROCESSING          TNE,U     A0,RCASER         . ERROR COMPLETION?          J         RF730             .  YES, PRINT ERR MESAGE AND ABORT          TE        A0,A4             . SAME AS PREVIOUS STATUS?          J         RF710             .  NO, GET NEW STATUS AND INIT WAIT TIME          JGD       R1,RF715          .  YES, LOOP UNTIL WAIT TIME EXCEEDED          E$CLEAR                     . CLEAR EDIT          E$MSG     COMMSG2           . 'WAITING ON RUN - <'          LA        A0,RCRSGR,X6      . GET RELOAD RUNID          TE        A0,GENRUN         . SAME AS THE ONE WE PUT THERE?          J         RF720             .  NO, SKIP          SSL       A0,12             .  YES, FORMAT RUNID WE USED          AA        A0,('RL'*/24)     . APPEND 'RL' TO 1ST 4 CHARS OUR RUNIDRF720          E$FD1                       . EDIT RELOAD RUNID          E$MSGR                      . '> - CONTINUE?  AE'          E$COLN                      . GET COLUMN NUMBER          SA,H1     A0,COMQ2PKT+1     . SAVE CHAR COUNT IN COM PKTRF725          SZ        IMAGE             . CLEAR RETURNED MSG FROM OPERATOR          SZ,S1     COMQ2PKT          .  AND COM$ STATUS          C$OM      COMQ2PKT          . SEND T/R MESSAGE TO CONSOLE          TZ,S1     COMQ2PKT          . CHECK STATUS          LMJ       X1,RF900          .  ABORT IF ERROR STATUS          LA,S1     A0,IMAGE          . GET OPERATOR REPLY          TNE,U     A0,'A'            . CONTINUE WAITING?          J         RF710             .  YES, BACK TO START          TE,U      A0,'E'            . ABORT RUN?          J         RF725             .  NO, ASK AGAINRF730          P$RINT    ERRPRT(2)         . '*RELOAD RUN TERMINATED IN ERROR*'          J         RF920             .  ABORTRF740          E$CLEAR                     . CLEAR EDIT          E$MSG     MSG6              . '*RELOAD RUN COMPLETED SUCESSFULLY AT '          ER        TDATE$            . CURRENT DATE/TIME          E$TIME                      . EDIT TIME, HH:MM:SS          P$RINT    (0114,LINE)       . PRINT STATUS MESSAGERF750          SZ        PASS1             . ZERO PASS1 FLAG (THIS IS 2ND PASS)          LX,U      X6,RRBUFF         . X6 = ADDRESS OF FIRST RELOAD RECORD          LR        R6,RELCNT         . COUNT OF RELOAD RECORDS          JGD       R6,$+2            . DECREMENT FOR LOOP AND SKIP          J         RF800             .  IF ZERO, WE'RE ALL DONERF755          TNZ       RRWAIT,X6         . WAIT ON THIS FILE?          J         RF770             .  NO, SKIP          LA        A15,RROPTS,X6     .  YES, LOAD ORIGINAL PROCESSOR OPTIONS          SZ        BOMB              . ZERO ABORT-IF-ERROR FLAG          TOP       A15,(1*/('Z'-'C')) . TEST FOR C-OPTION SET,          TZ        DEMAND            .  OR DEMAND RUN          TEP,U     A15,1*/('Z'-'T')  .   IF SO, DON'T SET FLAG UNLESS 'T' SET          SP1       BOMB              .          LMJ       X11,CHKFIL        . CHECK STATUS OF FILE, SECOND TIME          J         RF760             .  ERROR STATUS          LMJ       X1,RF900          .  NO FIND - SHOULD NEVER HAPPEN          LMJ       X1,RF900          .  WAIT/UNLOADED IS INTERNAL ERROR          J         RF770             .  NORMAL STATUS, BACK FOR NEXT FILERF760          TZ        BOMB              . ERROR RETURNED, IS ABORT FLAG SET?          J         RF920             .  YES, STOP PROCESSINGRF770          AX,U      X6,RRSIZE         . INCREMENT POINTER TO NEXT FILE ENTRY          JGD       R6,RF755          . CONTINUE UNTIL ALL FILES PROCESSED..         ALL DONE.RF800          LA        A0,(1,CLISTT)     .          ER        CLIST$            . TERMINATE CLIST FOR @FETCH          P$RINT    (0202,('END FETCH.  ')) . NORMAL EXIT MESSAGE          ER        EXIT$             . THAT'S ALL FOLKSRF900          SA        A0,SAVA0          . SAVE A0 FOR LATER          P$RINT    ERRPRT(6)         . 'INTERNAL ERROR, X1 = ADDRESS'RF920          LA,U      A0,FREAHF         .          TZ        AHFOPN            . WAS SYS$*ARCHIST$ ASSIGNED?          ER        CSF$              .  IF SO, FREE IT NOW          LA        A0,(1,CLISTT)     .          ER        CLIST$            . TERMINATE CLIST MODE FOR @FETCH          LA        A0,SAVA0          . RESTORE A0 (IF ENTRY FROM RF900)          ER        ERR$              . BLOW UP NOW/..         CHKFIL IS CALLED FROM ABOVE TO VERIFY STATUS OF A FILE..         LMJ       X11,CHKFIL        . X6 = ADDR OF RELOAD REC, A15 = OPTIONS.         <ERROR RETURN>              . A MESSAGE IS PRINTED.         <NO FIND RETURN>            ..         <WAIT/UNLOADED RETURN>      ..         <FIND RETURN>               . FILE IS ASSIGNED IF A,X OPTION(S) SET.CHKFIL          SX,H2     X11,CFSX11        . SAVE RETURN          LA,U      A5,0              . SET ERROR STATUS = 0          TNZ       PASS1             . FIRST PASS,          TNZ       RRFCL,X6          .  OR USER WANTS HIGHEST CYCLE?          J         CF100             .   YES, ALWAYS DO EXIST$ TEST FIRST          TOP       A15,(1*/('Z'-'A')) .   NO, CHECK FOR USER WANTS @ASG,A OR X          TEP,U     A15,1*/('Z'-'X')  .          J         CF200             .  IF SO, DO ASSIGN WITHOUT CHECKINGCF100          DL        A0,RRQUAL,X6      . QUALIFIER          DL        A2,RRFILE,X6      . FILENAME          DS        A0,EXPKT+1        .  STORE IN EXIST$ PACKET          DS        A2,EXPKT+3        .          LA        A0,RRCYC,X6       . ABS F-CYCLE          TNZ       RRFCL,X6          . DID USER SPECIFY F-CYCLE?          LA,U      A0,0              .  NO, USE ZERO (GET HIGHEST)          SA,H2     A0,EXPKT+5        .  INTO EXIST$ PACKET          SZ        EXPKT+7           . ZERO RETURNED INFO          LA        A0,RRDIR,X6       . DIRECTORY TYPE FOR ASG/RELOAD          TNE,U     A0,1              . SHARED-SPECIFIC REQUEST?          J         CF110             . YES, SKIP          SZ,H1     EXPKT             . NO, DO STANDARD SEARCH FIRST          LA,U      A0,EXPKT          .          ER        MSCON$            . PERFORM MSCON$-EXIST$ REQUEST          AND       A0,(077*/18)      . S3 = STATUS          SSL       A1,18             . SHIFT TO A1 LOWER          JN        A0,CF105          . SKIP IF NEG STATUS RETURNED          TG,U      A1,3              . IS SUBSTATUS > 2?          J         CF125             .  YES, ERROR          SZ        RRDIR,X6          .  NO, FIND - MARK DIR = STD          J         CF130             .CF105          TE,U      A1,043            . IS ERROR = FILE NOT EXIST?          J         CF125             .  NO, DON'T KNOW WHAT THIS IS          TNZ       RRDIR,X6          .  YES, WAS MULTI-DIR SEARCH REQ?          J         CF120             .   NO, RETURN NO FINDCF110          TNZ       HOSTID            . SHARED-DIR REQ, MHFS MUST BE CONFIG          LMJ       X1,RF900          . INTERNAL ERROR, SOMETHING VERY WRONG          SP1,H1    EXPKT             . SET PACKET FOR SHARED-DIR SEARCH          LA,U      A0,EXPKT          .          ER        MSCON$            . PERFORM MSCON$-EXIST$ REQUEST          AND       A0,(077*/18)      . S3 = STATUS          SSL       A1,18             . SHIFT TO A1 LOWER          JN        A0,CF115          . SKIP IF NEG STATUS RETURNED          TG,U      A1,3              . IS SUBSTATUS > 2?          J         CF125             .  YES, ERROR          SP1       RRDIR,X6          .  NO, FIND - MARK DIR = SHARED          J         CF130             .CF115          TE,U      A1,043            . IS ERROR = FILE NOT EXIST?          J         CF125             .  NO, DON'T KNOW WHAT THIS ISCF120          TNZ       PASS1             .  YES, FIRST PASS?          J         CF145             .   NO, RELOAD UNSUCCESSFUL          J         CF850             .   YES, RETURN 'NO FIND'CF125          LA        A5,A0             . A5 = FULL-WORD MSCON$ STATUS          LX,U      X9,ERM1           . 'MSCON$ - EXIST$ ERROR: '          J         CF900             .  PRINT MESSAGE AND RETURN ERRORCF130          LX,U      X9,ERM2           . POSSIBLE ERROR, 'DIRECTORY FORMAT ERR'          LA,S1     A2,DBUFF          . FIRST WORD OF DIRECTORY INFO          AND,U     A2,034            . A3 = BITS 34-32          TE,U      A3,010            .  MUST BE 010 (LEAD ITEM)          J         CF900             .   IF NOT, ERROR          TLE,U     A1,2              . IS STATUS CODE > 2?          J         CF165             .   NO, REQUESTED CYCLE EXISTS          TZ        PASS1             . FIRST TIME THROUGH?          J         CF150             .   YES, PERFORM CYCLE LIMIT CHECKCF145          LX,U      X9,ERM3           . 'RELOAD WAS NOT SUCCESSFUL'          J         CF900             .  PRINT MESSAGE AND RETURN ERROR..         PERFORM CYCLE LIMIT CHECK.CF150          LA        A4,RRCYC,X6       . GET REQUESTED F-CYCLE          JZ        A4,CF175          . ERROR IF CYCLE = 0          LA        A1,DBUFF+9        . GET HIGHEST CURRENT CYCLE          AND,U     A1,07777          .  INTO A2          AU,S3     A2,DBUFF+9        . ADD MAX RANGE, TO A3          ANA,S4    A3,DBUFF+9        . SUBTRACT CURRENT RANGE          ANA,S3    A2,DBUFF+9        . SUBTRACT MAX RANGE FROM A2          TG,U      A3,1000           . IS MAX CYCLE OVER 999?          ANA,U     A3,999            .  YES, ADJUST FOR CYCLE WRAP          TLE,U     A2,0              . IS MIN CYCLE LESS THAN 1?          AA,U      A2,999            .  YES, ADJUST FOR CYCLE WRAP          TLE,U     A4,1,A3           . IS CYCLE >= HIGH+MAX-CUR+1 ?          J         CF152             .  NO, JUMP          TG        A3,A2             .  YES, IS CYCLE WRAP POSSIBLE?          J         CF160             .   NO, ERROR          J         CF155             .   YES, CHECK AGAINST MINIMUMCF152          TG        A2,A3             . IS CYCLE WRAP POSSIBLE?          J         CF850             .  YES, THIS IS LEGAL F-CYCLECF155          TG,U      A4,1,A2           . IS CYCLE < HIGH-MAX+1 ?          J         CF850             .  NO, THIS IS LEGAL F-CYCLECF160          LX,U      X9,ERM4           . 'F-CYCLE OUTSIDE OF ALLOWABLE RANGE'          J         CF900             .  PRINT MESSAGE AND RETURN ERRORCF165          LX,U      X4,DBUFF+28       . ADDRESS OF 2ND DIRECTORY ITEM RETURNED          LA,S1     A2,,X4            .          AND,U     A2,034            . A3 = BITS 34-32          TNE,U     A3,020            . IS THIS THE MAIN ITEM?          J         CF170             .  YES, SKIP          LX,U      X4,DBUFF+56       . ADDRESS OF 3RD DIRECTORY ITEM          LA,S1     A2,,X4            .          AND,U     A2,034            . BITS 32-34          TE,U      A3,020            . IS THIS THE MAIN ITEM?          J         CF900             .  NO, DIRECTORY FORMAT ERRORCF170          LA        A0,M0CYCW,X4      . WORD CONTAINING ABS F-CYCLE          AND,U     A0,07777          . CYCLE TO A1          TNE       A1,RRCYC,X6       . SAME AS REQUESTED?          J         CF180             .  YES, SKIP          TZ        RRCYC,X6          .  NO, WAS ORIGINAL = 0 (NONE SPECIFIED)?          J         CF172             .   NO, ERROR          SA        A1,RRCYC,X6       .   YES, STORE CYCLE IN RELOAD RECORD          J         CF180             . CONTINUE NORMAL PROCESSINGCF172          TZ        RRFCL,X6          . DID USER SPECIFY CYCLE?          J         CF175             .  YES, F-CYCLE AMBIGUITY          LX,U      X9,ERM21          .  NO, 'HIGHEST F-CYCLE HAS CHANGED'          SA        A1,RRCYC,X6       . SAVE NEW HIGHEST CYCLE          J         CF900             .  PRINT MESSAGE AND RETURN ERRORCF175          LX,U      X9,ERM5           . 'INTERNAL ERROR - F-CYCLE AMBIGUITY'          J         CF900             .  PRINT MESSAGE AND RETURN ERRORCF180          LA        A0,M0CATT,X4      . CATALOG DATE/TIME          LA        A1,M0REFT,X4      . LAST REFERENCE DATE/TIME          SA        A0,CATTIM         .  STORE FOR LATER USE          SA        A1,REFTIM         .          TOP       A15,(1*/('Z'-'A')) . DID USER REQUEST @ASG,A(X)?          TEP,U     A15,1*/('Z'-'X')  .          J         CF200             .  YES, GO ASSIGN FILE NOW          TP        M0DSCW,X4         . IS FILE UNLOADED?          J         CF200             .  YES, ASSIGN FILE          LX,U      X9,MSG1           .  NO, FILE 'IS CURRENTLY ONLINE'          J         CF800             .   PRINT MESSAGE AND RETURN NORMAL..         ASSIGN THE FILE TO THE RUN.CF200          E$CLEAR                     . CLEAR EDIT          E$COPY    6,('@ASG,A')      . FIRST 6 CHARS OF @ASG STATEMENT          LA,U      A0,'X'            .          TEP,U     A15,1*/('Z'-'X')  .          E$CHAR                      . ADD 'X' OPTION IF REQUESTED          LA,U      A0,'Z'            .          TZ        PASS1             .          E$CHAR                      . ADD 'Z' OPTION IF FIRST PASS          E$COL     12                . SKIP OVER          TNZ       HOSTID            . IS MHFS CONFIGURED?          J         CF202             .  NO, SKIP          LA        A1,RRDIR,X6       .  YES, GET DIR-ID          TG,U      A1,2              . AT THIS POINT MUST BE SPECIFIC (0,1)          LMJ       X1,RF900          .  IF NOT, INTERNAL ERROR - ABORT          LA,U      A0,'STD'          . STANDARD DIR NAME          JZ        A1,$+2            . SKIP IF ASSIGN FROM STD          LA        A0,('SHARED')     .  OTHERWISE, USE SHARED DIR NAME          E$FD1                       . EDIT IN          E$CHAR    '#'               . SEPARATORCF202          E$FD2     RRQUAL,X6         . EDIT QUALIFIER          E$CHAR    '*'               . *          E$FD2     RRFILE,X6         . FILENAME          TNZ       RRFCL,X6          . WAS CYCLE SPECIFIED BY USER?          J         CF205             .  NO, SKIP          E$CHAR    '('               .  YES, (          E$DECV    RRCYC,X6          . ABS F-CYCLE          E$CHAR    ')'               . )CF205          LA        A4,RRWKEY,X6      . PICK UP FILE KEYS          LA        A5,RRRKEY,X6      .          DTE       A4,('            ') . ARE BOTH KEYS BLANK?          J         $+2               .   NO, CONTINUE          J         CF210             .   YES, SKIP KEY INSERTION          E$CHAR    '/'               . FIRST SLASH          LMJ       X10,EDKEY         . EDIT READ KEY          TNE       A4,('      ')     . IS WRITE KEY BLANK?          J         CF210             .  YES, SKIP          E$CHAR    '/'               .  NO, ADD SECOND SLASH          LA        A5,A4             . KEY TO A5          LMJ       X10,EDKEY         . EDIT INTO IMAGECF210          E$FD1     (' . ')           . FINISH THIS OFF          LA,U      A0,LINE           .          ER        CSF$              . ISSUE CSF$ REQUEST - ASSIGN FILE          LA        A5,A0             . SAVE STATUS IN A5          JN        A5,CF230          . SKIP IF FILE NOT ASSIGNED          TEP       A5,(1*/19)        . FILE ASSIGNED, AND UNLOADED?          TNZ       PRIV              .  AND IS USER PRIVILEGED?          J         CF215             .   NO, SKIP          LX,U      X9,ERM22          .   YES, 'PRIV RUN CANNOT START ROLBAK'          LA,U      A5,0              . CLEAR STATUS          J         CF900             . PRINT MESSAGE AND RETURN ERRORCF215          TZ        PASS1             . PASS 1?          J         CF220             .  YES, ALWAYS PROCESS ASSIGNMENT NORMALLY          TOP       A15,(1*/('Z'-'A')) . DID USER REQUEST @ASG,A(X)?          TEP,U     A15,1*/('Z'-'X')  .          J         CF220             .  YES, FORMAT ASSIGNMENT MESSAGE          DL        A0,('@FREE       ') .  NO, THIS MUST HAVE BEEN WAIT          DS        A0,LINE           .   FOR FAS-RELOAD TO COMPLETE          LA,U      A0,LINE           .          ER        CSF$              . USER DOESN'T WANT ASG'D, SO FREE NOW          LX,U      X9,MSG1           . 'CURRENTLY ONLINE'          LA,U      A5,0              . CLEAR STATUS          J         CF800             .  PRINT MESSAGE AND RETURN NORMALCF220          E$CLEAR                     . CLEAR EDIT          E$SKIP    3                 . SKIP OVER          LMJ       X10,EDFILE        . EDIT Q*F(C)          E$MSG     MSG2              . ' HAS BEEN ASSIGNED (A'          LA,U      A0,'X'            .          TEP,U     A15,1*/('Z'-'X')  .          E$CHAR                      . ADD 'X' IF REQUESTED          E$MSGR                      . ')'          JZ        A5,CF820          . FINISHED IF STATUS = 0          E$MSGR                      .  IF NOT, ' - FAC WARN: '          J         CF810             .  ADD STATUS, PRINT MSG, RETURN NORMALCF230          LX,U      X9,ERM6           . ASSUME 'COULD NOT ASG, FAC REJECT: '          TNZ       PASS1             . FIRST PASS?          J         CF260             .  NO, TEST FOR NON-EXISTENCE ONLY          TOP       A5,(1*/19)        .  YES, IS FILE UNLOADED?          J         CF240             .   NO, SKIP          LX,U      X9,ERM18          .   YES, 'IS UNLOADED - ROLBAK INITIATED'          LA,U      A5,0              . CLEAR STATUS          DEC       CFSX11            . DECREMENT RETURN (RETURN WAIT/UNLOAD)          NOP                         .          J         CF800             . PRINT MESSAGE AND RETURNCF240          TOP       A5,(1*/18)        . WAIT STATUS RETURNED FOR FILE?          J         CF900             .  NO, PRINT GENERAL FAC REJECT MESSAGE          LX,U      X9,ERM19          .  YES, 'WAIT STATUS'          LA,U      A5,0              . CLEAR STATUS          DEC       CFSX11            . DECREMENT RETURN (RETURN WAIT/UNLOAD)          NOP                         .          J         CF800             . PRINT MESSAGE AND RETURNCF260          TOP       A5,(1*/21)        . SECOND PASS - DOES FILE EXIST?          J         CF900             .  YES, PRINT GENERAL FAC REJECT MESSAGE          LX,U      X9,ERM3           .  NO, 'RELOAD WAS NOT SUCCESSFUL'          LA,U      A5,0              . CLEAR STATUS          J         CF900             .  PRINT MESSAGE AND RETURN ERROR..         PRINT STATUS MESSAGE FOR FILE AND RETURN NORMAL.CF800          E$CLEAR                     . CLEAR EDIT          E$SKIP    3                 . SKIP OVER          LMJ       X10,EDFILE        . EDIT Q*F(C)          E$MSG     0,X9              . STATUS MESSAGECF810          JZ        A5,CF820          . SKIP IF STATUS CODE = 0          E$OCTF    12,A5             .  IF NOT, APPEND CODE TO MESSAGECF820          P$RINT    (0220,LINE)       . PRINT STATUS MESSAGE          LX        X11,CFSX11        .          J         3,X11             . RETURN NORMAL STATUS..         RETURN NO FIND.CF850          LX        X11,CFSX11        .          J         1,X11             . RETURN NO FIND (PASS 1 ONLY)..         PRINT ERROR MESSAGE AND RETURN ERROR.CF900          E$CLEAR                     . CLEAR EDIT          E$SKIP    3                 . SKIP OVER          LMJ       X10,EDFILE        . EDIT Q*F(C)          E$MSG     0,X9              . ERROR MESSAGE          JZ        A5,CF920          . SKIP IF STATUS CODE = 0          E$OCTF    12,A5             .  IF NOT, APPEND CODE TO MESSAGECF920          P$RINT    (0220,LINE)       . PRINT ERROR MESSAGE          LX        X11,CFSX11        .          J         0,X11             . RETURN ERROR/..         THIS ROUTINE IS CALLED FROM ABOVE TO EDIT A FILENAME.EDFILE          LA        A1,RRDIR,X6       . DIR-ID OF ASG'D/RELOADED FILE          TZ        HOSTID            . IS MHFS CONFIGURED,          TG,U      A1,2              .  AND IS DIR-ID SPECIFIC (0,1)?          J         EF050             .   NO, SKIP DIR-NAME EDIT          LA,U      A0,'STD'          . STANDARD DIRECTORY NAME          JZ        A1,$+2            . SKIP IF FILE FROM STD DIRECTORY          LA        A0,('SHARED')     .  OTHERWISE, USE SHARED DIR NAME          E$FD1                       . EDIT IN          E$CHAR    '#'               . SEPARATOREF050          E$FD2     RRQUAL,X6         . EDIT QUALIFIER          E$CHAR    '*'               . *          E$FD2     RRFILE,X6         . FILENAME          TNZ       RRCYC,X6          . WAS CYCLE SPECIFIED OR DETERMINED?          J         EF100             .  NO, SKIP          E$CHAR    '('               .  YES, (          E$DECV    RRCYC,X6          . ABS F-CYCLE          E$CHAR    ')'               . )EF100          J         0,X10             . RETURN..         THIS ROUTINE PRINTS THE CATALOG AND LAST REF DATE/TIME FOR A FILE.DATPRT          E$CLEAR                     . CLEAR EDIT          E$SKIP    3                 . SKIP OVER          E$MSG     MSG4              . 'CATALOGED: '          E$DAY5    CATTIM            . CATALOG DATE, YYMMDD          E$MSGR                      . ' AT '          E$TIME    CATTIM            . CATALOG TIME          E$SKIP    -3                . BACK UP OVER SECONDS          E$MSGR                      . '  LAST REFERENCE: '          E$DAY5    REFTIM            . REFERENCE DATE, YYMMDD          E$MSGR                      . ' AT '          E$TIME    REFTIM            . LAST REFERENCE TIME          E$SKIP    -3                . BACK UP OVER SECONDS          E$COPY    3,('      ')      .  AND REPLACE W/SPACES          P$RINT    (0114,LINE)       . PRINT STATUS MESSAGE          J         0,X10             . RETURN..         EDKEY - EDIT A FILE KEY INTO IMAGE.EDKEY          LA,U      A7,5              . LOOP COUNT - 1EK100          LSSC      A5,6              . NEXT CHAR TO A5:S6          AND,U     A5,077            . INTO A6          TNE,U     A6,' '            .          J         EK200             . ALL DONE IF CHAR IS A SPACE          E$CHAR    A6,,W             .  OTHERWISE, EDIT INTO IMAGE          JGD       A7,EK100          .  LOOP BACK FOR OTHER CHARSEK200          J         0,X10             . RETURN.. FDTOBN - CONVERT FIELDATA (A0) TO BINARY (A4).          RETURN 0,X11 IF ERROR    1,X11 IF OK.FDTOBN          LA,U      A4,0              . ZERO ACCUMULATOR          LR,U      R1,6-1            . LOOP COUNTFB100          LSSC      A0,6              . SHIFT NEXT DIGIT TO A0-S6          AND,U     A0,077            . INTO REGISTER A1          TG,U      A1,'0'            .          TG,U      A1,'9'+1          .          J         FB120             . DON'T CONTINUE UNLESS NUMERIC          MSI,U     A4,10             . MULT ACCUM BY TEN          ANA,U     A1,'0'            . CONVERT DIGIT TO BINARY          AA,U      A4,,A1            . ADD TO ACCUMULATOR          JGD       R1,FB100          . LOOP FOR REST OF DIGITS          J         FB200             . ALL DONEFB120          TE,U      A1,' '            . IS TERMINATOR A SPACE?          J         0,X11             .  NO, ERRORFB200          J         1,X11             . RETURN NORMAL STATUS/..         SORT ROUTINES...         SRTREL - RELEASE RECORD TO SORT..         ENT: A0 = RECORD ADDRESS..         RETURNS: 0,X11 IF SORT TABLE OVERFLOW.                  1,X11 NORMAL.SRTREL          TZ        SRTCNT            . SORT COUNT SHOULD BE 0 WHILE RELEASING          LMJ       X1,RF900          .  IF NOT, ABORT          LA        A1,SRTPTR         . POINTER TO NEXT SORT RECORD          AU,U      A1,SRSIZE         . A2 = POINTER TO NEXT AFTER THIS RELEASE          TG,U      A2,MAXSRT*SRSIZE+1 . TEST FOR SORT TABLE OVERFLOW          J         SRL90             .   SKIP IF OVERFLOW          SA        A2,SRTPTR         .   IF NOT, STORE NEW POINTER          LXI,U     A0,1              . INCREMENT FOR BT          AH        A1,(1,SRTTBL)     . A1 = ABS ADDRESS OF SORT RECORD          LR,U      R1,SRSIZE         . SORT RECORD SIZE          BT        A1,,*A0           . TRANSFER TO SORT RECORD TABLE          J         1,X11             . RETURN GOOD STATUSSRL90          P$RINT    ERRPRT(8)         . 'SORT TABLE OVERFLOW'          J         0,X11             . RETURN ERROR STATUS...         SRTRTN - SORT ALL RECORDS (ASCENDING)..         RETURNS: 0,X11 ALWAYS.SRTRTN          LA        A0,SRTPTR         . POINTER TO NEXT SORT RECORD          DSL       A0,36             . PREPARE FOR DIVIDE          DI,U      A0,SRSIZE         . DIV BY REC SIZE TO OBTAIN REC COUNT          SA        A0,SRTCNT         . STORE COMPUTED COUNT          ANA,U     A0,1              . DECREMENT FOR LOOP          LR        R3,A0             . OUTER LOOP COUNTSR100          JGD       R3,$+2            . DECR OUTER LOOP BY ONE EACH PASS          J         SR800             .  EXIT WHEN FINISHED          LR        R2,R3             . INNER LOOP COUNT = NEW OUTER LOOP COUNT          LA        A0,(SRSIZE,SRTTBL-SRSIZE) . INIT SORT TBL PTR FOR THIS PASS          LA,U      A1,0              . CLEAR EXCHANGE FLAGSR200          DL        A4,SRSIZE,*A0     . GET COMPARISON DATA FROM 1ST RECORD          JP        A4,SR250          . SKIP IF POSITIVE          TN        SRSIZE,A0         .  IF NOT, IS SECOND REC NEG?          J         SR400             .   NO, EXCHANGE RECORDS          J         SR300             .   YES, TREAT BOTH AS POSITIVESR250          TP        SRSIZE,A0         . FIRST REC POS, IS SECOND POS?          J         SR500             .  NO, RECORDS ARE IN CORRECT ORDERSR300          DAN       A4,SRSIZE,A0      . SUBTRACT 2ND VALUE FROM 1ST          JN        A4,SR500          . IF RESULT IS NEG, RECS ARE IN ORDER          DJZ       A4,SR500          . DO NOT EXCH IF RECS ARE EQUAL, EITHERSR400          LA,U      A1,,A0            . ADDRESS OF 1ST RECORD          LXI,U     A1,1              . INCREMENT, EXCHANGE ONE WORD AT A TIME          LR,U      R1,SRSIZE-1       . LOOP COUNT - 1SR450          LA        A4,,A1            . PICK UP NEXT WORD FROM 1ST RECORD          LA        A5,SRSIZE,A1      .  AND NEXT FROM 2ND RECORD          SA        A5,,A1            . EXCHANGE WORDS          SA        A4,SRSIZE,*A1     .  AND INCREMENT POINTER          JGD       R1,SR450          . LOOP FOR REST OF DATASR500          JGD       R2,SR200          . LOOP FOR NEXT COMPARISON          JNZ       A1,SR100          . BACK TO START IF EXCHANGE WAS MADESR800          LA,U      A0,SRTTBL-SRSIZE  . INIT ADDRESS FOR SRTRET ROUTINE          SA        A0,SRTPTR         .          J         0,X11             . RETURN...         SRTRET - RETURN A RECORD..         EXIT: A0 = NEXT RECORD ADDRESS..         RETURNS: 0,X11 NO MORE RECORDS.                  1,X11 NORMAL.SRTRET          LR        R1,SRTCNT         . REMAINING COUNT OF SORTED RECORDS          JGD       R1,$+2            . DECREMENT AND SKIP          J         SRT90             .  SKIP IF NO MORE RECORDS TO RETURN          SR        R1,SRTCNT         . OTHERWISE, STORE REMAINING COUNT          LA        A0,SRTPTR         . LOAD PREVIOUS POINTER          AA,U      A0,SRSIZE         . PLUS REC SIZE = POINTER TO NEXT RECORD          SA        A0,SRTPTR         . REPLACE POINTER          J         1,X11             . RETURN NORMAL STATUSSRT90          SZ        SRTPTR            . ZERO POINTER          SZ        SRTCNT            .  AND COUNT          J         0,X11             . RETURN EOF (NO MORE RECS IN TABLE)/..         ASSIGN THE ARCHIVE HISTORY FILE AND READ IN THE HEADER.         IF ARCHIVE IN PROGRESS, WAIT UNTIL HISTORY FILE UPDATE COMPLETE.AHFASG          TZ        AHFOPN            . IS HISTORY FILE ALREADY ASSIGNED?          J         AH500             .  YES, RETURN NORMALAH100          LA,U      A0,ASGAHF         .  NO, ADDRESS OF @ASG,A SYS$*ARCHIST$          ER        CSF$              . ASSIGN HISTORY FILE          JP        A0,AH120          . SKIP IF GOOD STATUS          LA        A4,A0             . A4 = ERROR STATUS          E$CLEAR                     . CLEAR EDIT          E$MSG     ERM17             . 'UNABLE TO ASSIGN HIST FILE - STATUS:'          E$OCTF    12,A4             . CSF$ ERROR STATUS          P$RINT    (0114,LINE)       . PRINT ERROR MESSAGE          J         AH900             .  AND RETURN ERRORAH120          SP1       AHFOPN            . SET HIST FILE ASSIGNED FLAG          LA,U      A0,USEAHF         .  @USE HISTIN$,SYS$*ARCHIST$          ER        CSF$              . ATTACH INTERNAL NAME          I$OW      AHHDPK            . READ HEADER (SECTOR ZERO)          LMJ       X9,STATUS         . CHECK I/O STATUS          J         AH900             .  I/O ERROR          LX,U      X4,AHFHDR         . X4 = HEADER BUFFER ADDRESS          LA        A0,AHHLBL,X4      . SOFTWARE LABEL          TNE       A0,HSTLBL         . MUST BE EXPECTED VALUE          J         AH200             . SKIP IF OK          P$RINT    ERRPRT(9)         .  IF NOT, 'HIST FILE HAS BAD HEADER'          J         AH900             .  RETURN ERRORAH200          TNZ       AHHAIP,X4         . IS ARCHIVE-IN-PROGRESS SET?          J         AH400             .  NO, SKIP          LA,U      A0,FREAHF         .          ER        CSF$              . FREE CURRENT CYCLE OF HIST FILE          SZ        AHFOPN            . CLEAR OPEN FLAG          LX,U      X7,RCADDR         . X7 = MRCBNK BASE ADDRESS          LA        A0,RCHDLV,X7      . LEVEL OF RLDCTL PROGRAM          TE,U      A0,RCLEVL         . CORRECT LEVEL,          TNZ       RCHDTM,X7         .  OR HAS BANK NOT BEEN INIT?          J         AH220             .   YES, SKIP          P$RINT    ERRPRT(5)         .   NO, 'SOFTWARE LEVEL INCOMPATIBILITY'          J         AH900             .   RETURN ERRORAH220          TZ        RCHDAP,X7         . IS IN-PROGRESS ALSO SET IN MRCBNK?          J         AH240             .  YES, CONTINUE          ON        M$MHFSHARED>0     . THIS CODE FOR SHARED-ONLY          LA        A0,ALTWCT         . LOOP COUNTER FOR ALT-SYS WAIT          JGD       A0,AH225          . LOOP FORWARD IF ARCHIVE STILL IN PROGAH222          SZ        IMAGE             . ZERO OPERATOR REPLY          C$OM      COMQ6PKT          . 'ARCHIVE RUNNING ON ALT HOST?  YN'          LA,S1     A0,IMAGE          . GET RESPONSE          TNE,U     A0,'N'            . NO RESPONSE?          J         AH230             .  YES, ASK IF RUNNING ON THIS HOST          TE,U      A0,'Y'            . YES RESPONSE?          J         AH222             .  NO, ASK AGAIN          LA,U      A0,10-1           .  YES, WAIT 30 MIN, CHECK EVERY 3AH225          SA        A0,ALTWCT         . SAVE LOOP COUNT          P$RINT    ERRPRT(11)        . 'WAITING FOR ARCHIVE TO FIN'          LR,U      R1,6-1            . WAIT 6*30 SECONDSAH226          LA,U      A1,30000          . 30 SECONDS - LONGEST POSSIBLE          ER        TWAIT$            .          JGD       R1,AH226          . LOOP UNTIL 3 MINUTES ARE UP          J         AH340             . CHECK HISTORY FILE AGAIN NOW          OFF       M$MHFSHARED>0     . END OF SHARED-ONLY CODEAH230          SZ        IMAGE             . ZERO OPERATOR REPLY          C$OM      COMQ3PKT          . 'IS ARCHIVE RUNNING?  YN'          LA,S1     A0,IMAGE          . GET RESPONSE          TNE,U     A0,'N'            . NO RESPONSE?          J         AH235             .  YES, NOTIFY TO RESTART          TE,U      A0,'Y'            . YES RESPONSE?          J         AH230             .  NO, ASK AGAIN          P$RINT    ERRPRT(10)        .  YES, 'INT ERR - IN-PROGRESS NOT SYNCH'          J         AH900             .  RETURN ERRORAH235          P$RINT    ERRPRT(11)        . 'WAITING FOR ARCHIVE TO FIN'          C$OM      COMQ4PKT          . 'RESTART OR RUN <ARCUPD>  A'          TZ        RCHDAP,X7         . IS FLAG SET NOW?          J         AH300             .  YES, WAIT FOR ARCHIVE TO FIN          LA,U      A1,10000          . WAIT TEN SECONDS          ER        TWAIT$            .          J         AH340             . TRY ASSIGNING HISTORY FILE AGAINAH240          P$RINT    ERRPRT(11)        . 'WAITING FOR ARCHIVE TO FIN'          ER        TDATE$            . GET CURRENT DATE/TIME          ANA       A0,AHHUPT,X4      . SUBTRACT LAST UPDATE DATE/TIME          TLE,U     A0,60*10          . LESS THAN TEN MINUTES AGO?          JP        A0,AH300          .  YES, SKIP MSG IF RESULT POSITIVEAH250          SZ        IMAGE             . ZERO OPERATOR REPLY          C$OM      COMQ3PKT          . 'IS ARCHIVE RUNNING?  YN'          LA,S1     A0,IMAGE          . GET RESPONSE          TNE,U     A0,'Y'            . YES RESPONSE?          J         AH300             .  YES, CONTINUE          TE,U      A0,'N'            . NO RESPONSE?          J         AH250             .  NO, ASK AGAIN          C$OM      COMQ4PKT          .  YES, 'RESTART OR RUN <ARCUPD>  A'          TNZ       RCHDAP,X7         . IS IN-PROGRESS STILL SET?          J         AH340             . NO, DON'T SEND NEXT MESSAGEAH300          C$OM      COMQ5PKT          . 'WAITING FOR ARCHIVE TO FIN'          LR,U      R1,(15*60)/5      . WAIT UP TO 15 MINUTESAH320          LA,U      A1,5000           .          ER        TWAIT$            . WAIT 5 SECONDS          TZ        RCHDAP,X7         . IS ARCHIVE-IN-PROGRESS SET?          JGD       R1,AH320          .  YES, KEEP LOOPINGAH340          LA,U      A1,5000           .          ER        TWAIT$            . WAIT AN ADDITIONAL 5 SECONDS          J         AH100             . TRY, TRY AGAINAH400          LA        A0,(9,AHFFAC)     . FITEM$ PACKET          ER        FITEM$            . RETRIEVE INFO (NEED ABS F-CYCLE)AH500          J         1,X10             . RETURN NORMALAH900          J         0,X10             . RETURN ERROR...         I/O STATUS CHECK ROUTINE.STATUS          TNZ,S1    3,A0              . IS STATUS IN I/O PACKET = 0?          J         1,X9              .  YES, RETURN NORMAL          LX,U      X4,,A0            . SET X4 = PACKET ADDRESS          LXI,U     X4,1              . LOOP INCREMENT          P$RINT    ERRPRT(7)         . 'I/O ERROR - PACKET DUMP FOLLOWS'          E$CLEAR                     . CLEAR EDIT          LA,U      A4,5              . LOOP 6 TIMESST100          E$OCTF    12,,*X4           . EDIT NEXT OCTAL VALUE INTO OUTPUT          E$SKIP    1                 .          JGD       A4,ST100          . BACK FOR MORE          P$RINT    (0116,LINE)       . PRINT PACKET DUMP          J         0,X9              . RETURN ERROR STATUS/.ERR(1)    '  WAITING ...'ERR(2)    '*RELOAD RUN TERMINATED IN ERROR*'ERR(3)    'ERROR STATUS FROM <RLDCTL> - NOTIFY SYSTEMS'ERR(4)    'TOO MANY FILES SELECTED FOR RELOAD, MAX = ':$CD(M$RELDMAX)ERR(5)    '<RLDCTL> SOFTWARE LEVEL INCOMPATIBLITY - NOTIFY SYSTEMS'ERR(6)    'INTERNAL ERROR, X1 = ERROR ADDRESS'ERR(7)    'I/O ERROR, PACKET DUMP FOLLOWS:'ERR(8)    'SORT TABLE OVERFLOW'ERR(9)    'HISTORY FILE HAS BAD HEADER - NOTIFY SYSTEMS'ERR(10)   'INTERNAL ERROR - IN-PROGRESS FLAG NOT SET IN <MRCBNK>'ERR(11)   '*ARCHIVE IN PROGRESS - WAITING FOR FIN*'ERR(12)   '*IN-PROGRESS FLAG SET IN <MRCBNK>'ERR(13)   '*IN-PROGRESS FLAG CLEARED IN <MRCBNK>'ERR(14)   ' NO ACTION TAKEN FOR THIS FILE.'ERR(15)   ' REQUESTED FILE WILL BE RELOADED.'ERR(16)   '*WARNING: Q-OPTION IGNORED IN BATCH MODE*'ERR(17)   'CANNOT USE Y, U OPTIONS TOGETHER WITH ONE REQUEST'ERR(18)   'MHFS IS NOT CONFIGURED, <M$MHFSHARED> MUST = 0'ERR(19)   'INVALID HOSTID RETURNED BY MSCON$-DIRID$'          $IF       M$MHFSHARED=0ERR(20)   'FETCH IS NOT CONFIGURED FOR SHARED-DIRECTORY ARCHIVE/RESTORE'ERR(21)   '*WARNING: ONLY STD-DIRECTORY FILES CAN BE ASG''D/RELOADED*'          $ELSEERR(20)   'MHFS IS NOT AVAILABLE, CANNOT ACCESS SHARED DIRECTORY'ERR(21)   '*WARNING - MHFS NOT AVAILABLE - CAN ONLY ACCESS STD DIRECTORY'          $ENDFERR(22)   '*USE @FETCH TO SPECIFY ANOTHER FILE, OR TRANSMIT TO START RELOAD*'NERR      EQU       22ERR(NERR+1)I DO NERR ,ERRPRT(I) +  0100+ERR(I+1)-ERR(I),ERR(I)ERM1      ' *** MSCON$ - EXIST$ ERROR: &'ERM2      ' *** MSCON$ - EXIST$ DIRECTORY FORMAT ERROR&'ERM3      ' *** RELOAD WAS NOT SUCCESSFUL&'ERM4      ' *** F-CYCLE OUTSIDE OF ALLOWABLE RANGE&'ERM5      ' *** INTERNAL ERROR - F-CYCLE AMBIGUITY&'ERM6      ' *** COULD NOT ASSIGN - FAC REJECT: &'ERM7      ' *** BAD LINK TO HISTORY SECTOR: &'ERM8      ' *** TOO MANY BACKUP REELS TO RELOAD&'ERM9      ' *** IS NOT CATALOGED, NOT FOUND IN ARCHIVE ***&'ERM10     ' *** HAS ALREADY BEEN SELECTED FOR RELOAD ***&'ERM11     'MISSING - REQUIRED&'ERM12     'FILE NAME REQUIRED&'ERM13     'RELATIVE (+,-) F-CYCLE NOT ALLOWED&'ERM14     'F-CYCLE FORMAT ERROR&'ERM15     'AGE LIMIT (PARAMETER 2) FORMAT ERROR&'ERM16     ' *** ARCHIVED FILE IS MORE THAN & DAYS OLD&'ERM17     'UNABLE TO ASSIGN ARCHIVE HISTORY FILE - STATUS: &'ERM18     ' *** IS UNLOADED - ROLBAK INITIATED ***&'ERM19     ' *** WAIT STATUS ***&'          ON        M$PVTACC>0ERM20     ' *** INCORRECT ACCOUNT NUMBER FOR PRIVATE FILE&'          OFF       M$PVTACC>0          ON        M$PVTACC=0ERM20     ' *** INCORRECT PROJECT-ID FOR PRIVATE FILE&'          OFF       M$PVTACC=0ERM21     ' *** HIGHEST F-CYCLE HAS CHANGED ***&'ERM22     ' *** IS UNLOADED, PRIV RUN CANNOT START ROLBAK ***&'MSG1      ' IS CURRENTLY ONLINE&'MSG2      ' HAS BEEN ASSIGNED (A&)& - FAC WARN: &'MSG3      ' WAS ARCHIVED ON & - WILL BE RELOADED&'MSG3A     '  (& TRACKS)&'MSG4      'CATALOGED: & AT &  LAST REFERENCE: & AT &'MSG5      '*RUNID: <RL&> STARTED AT & TO RELOAD FILE(S)&'MSG6      '*RELOAD RUN COMPLETED SUCCESSFULLY AT &'SPCMSG    'SPECIFICATION 1.  &'          $IF       M$MHFSHARED=0SYMDID    EQU       'STD#'            . REQUIRED DIR-ID FOR NON-SHARED SYS          $ELSESYMDID    EQU       'SHARED#'         . REQUIRED DIR-ID FOR SHARED SYS          $ENDFASGAHF    '@ASG,AI ':SYMDID:'SYS$*ARCHIST$/':$CFS(M$HFRK):' . 'USEAHF    '@USE HISTIN$,':SYMDID:'SYS$*ARCHIST$ . 'FREAHF    '@FREE ':SYMDID:'SYS$*ARCHIST$ . 'COMMSG1   'RELOAD CONTROLLER INOPERATIVE, RESOLVE AND ANS A'CQ1L      EQU       $-COMMSG1COMMSG2   'WAITING ON RUN - <&> - CONTINUE?  AE&'COMMSG3          $IF       M$MHFSHARED=0          'IS ARCHIVE RUNNING?  YN'          $ELSE          'IS ARCHIVE RUNNING ON THIS HOST?  YN'          $ENDFCQ3L      EQU       $-COMMSG3COMMSG4   'RESTART ARCHIVE OR RUN <ARCUPD>  A'CQ4L      EQU       $-COMMSG4COMMSG5   ' **WAITING FOR ARCHIVE TO FIN**'CQ5L      EQU       $-COMMSG5COMMSG6   'IS ARCHIVE RUNNING ON ALTERNAME HOST?  YN'CQ6L      EQU       $-COMMSG6RLDMSG    'RELOAD THIS FILE? (Y,N)'RLDASK    +         0100+$-RLDMSG,RLDMSG          +         RF370,LINEHSTLBL*   '*AHFL*'CLIST     +         0100          'FETCH'CLISTT    +         0500          +         0/.$(0)DEMAND    +         1                 . 1 = DEMAND , 0 = BATCHBRKPT     +         1                 . SET IF USER IS BREAKPOINTEDBOMB      +         0                 . SET TO 1 IF ERROR WILL ERR$ EXITCURJUL    +         0                 . CURRENT JULIAN DATEGENRUN    +         0                 . GENERATED RUN-ID FROM PCTPRIV      +         0                 . SET NONZERO IF USER IS PRIVILEGEDUSRPROJ   +         0D                . PROJECT-ID FROM PCTUSRACC    +         0D                . ACCOUNT NUMBER FROM PCTHOSTID    +         0                 . HOST-ID OF RUNNING SYSTEMALTWCT    +         0                 . COUNTER FOR ALT-HOST WAIT LOOPFRSTCL    +         1                 . SET = 1 IF FIRST @FETCH, 0 OTHERWISEPASS1     +         1                 . SET = 1 IF FIRST PASS OVER FILESCFSX11    +         0                 . CHKFIL RETURN ADDRESSAGELMT    +         0                 . MAX DAYS SINCE ARCHIVE TO ALLOW RELOADAHFOPN    +         0                 . SET = 1 WHEN SYS$*ARCHIST$ ASSIGNEDRELCNT    +         0                 . COUNT OF RELOAD RECORDSARRCNT    +         0                 . COUNT OF ARCHIVED FILES TO RELOADARCWT     +         0                 . SET = 1, MUST WAIT FOR RELOADCATTIM    RES       1                 . CURRENT FILE CATALOG DATE/TIMEREFTIM    RES       1                 . CURRENT FILE LAST REF DATE/TIMEQFLAG     +         0                 . QUERY-YES FLAGSAVA0     +         0                 . A0 SAVESRTPTR    +         0                 . POINTER TO NEXT OPEN SORT RECORDSRTCNT    +         0                 . SORT RECORDS REMAINING TO RETURN          $ASCII                      .IDPKT     I$DPKT    33,IDBUFF  'FETCH 1R2B'  020  . ID$ PACKET          $FDATA                      .EPKT      E$PKT     16,LINE           . EDIT$ CONTROL PACKETCOMQ1PKT  C$OMPK    CQ1L*6,COMMSG1,1,IMAGE . RLDCTL ERROR NOTIFICATION PKTCOMQ2PKT  C$OMPK    $-$,LINE,1,IMAGE . WAIT STATUS NOTIFICATION PKTCOMQ3PKT  C$OMPK    CQ3L*6,COMMSG3,1,IMAGE . IS ARCHIVE RUNNING REQUEST PKTCOMQ4PKT  C$OMPK    CQ4L*6,COMMSG4,1,IMAGE . RESTART OR RUN <ARCUPD> PKTCOMQ5PKT  C$OMPK    CQ5L*6,COMMSG5    . WAITING ON ARCHIVE NOTIFICATION PKTCOMQ6PKT  C$OMPK    CQ6L*6,COMMSG6,1,IMAGE . ARCHIVE ON ALT HOST REQ PKTAHHDPK    I$OD      'HISTIN$',R$  28,AHFHDR  0  . AHF HEADER READ PACKETAHRDPK    I$OD      'HISTIN$',R$  28,AHBUFF  $-$  . AHF HIST SECTOR READ PACKETDIDPKT    +         DIRID$            . MSCON$-DIRID$ PACKET          +         0D                .          +         3,DIDBUF          .DIDBUF    RES       3                 . BUFFER FOR DIRID$ RET INFOEXPKT     +         EXIST$            . EXIST$ PACKET          RES       4                 . QUALIFIER, FILENAME          +         84,0,$-$          . BUFF SIZE, 0, ABS F-CYCLE          +         DBUFF             . BUFFER ADDRESS          +         0,0,0             . INFO RETURNED BY EXIST$ (NOT USED)AHFFAC    'HISTIN$'                   . AHF FITEM$ PACKET (TO OBTAIN F-CYCLE)          RES       7                 .INFBUFF   RES       50                . INFOR$ BUFFERLINE      RES       22                . EDIT$ OUTPUT BUFFERIMAGE     RES       1                 . OPERATOR ANSWER BUFFERDBUFF     RES       84                . DIRECTORY BUFFER FOR EXITS$IDBUFF    RES       33                . ID$ WORK BUFFERAHFHDR*   RES       28                . AHF HEADER BUFFERAHBUFF    RES       28                . AHF HISTORY SECTOR BUFFERSRTTBL    RES       MAXSRT*SRSIZE     . SORT TABLERRBUFF    RES       M$RELDMAX*RRSIZE  . RELOAD RECORD TABLE          END       START             .@ELT,SIP MARSREL$.MAP/FETCH,,,021166063633,006IBANK,M I$1,01000IN MARS$.FETCH,.FINDFILE,.JULDATE,.CERU$/MARSEQU DIRID$/050NOT TPF$.DBANK,MC D$1,040000FORM I$1DBANK,UX MRCBNKEND@ELT,SIP MARSREL$.FILES,,,176425031235,023.         FILES - INTERACTIVE FILE LIST BY QUALIFIER AND/OR FILENAME   WRC 2/90.$(1)      AXR$          $LIT          MFDDEF          D$BDEF.FQL       EQUF      ELT$,,S1          . LENGTH OF QUALIFIER FIELDFNL       EQUF      ELT$,,S2          . LINGTH OF FILENAME FIELDENL       EQUF      ELT$+1,,S1        . LENGTH OF ELEMENT NAME FIELDFQUAL     EQUF      ELT$+2            . QUALIFIERFNAME     EQUF      ELT$+4            . FILENAMEENAME     EQUF      ELT$+9            . ELEMENT NAME.START          SA        A5,A15            . SAVE OPTIONS          TOP       A15,(1*/('Z'-'D')) . IS 'D' (DISC), OR          TEP,U     A15,1*/('Z'-'T')  .   'T' (TAPE) OPT SET?          J         $+2               .    YES, SKIP          AA        A15,(1*/('Z'-'D')++1*/('Z'-'T')) . NO, SET BOTH OPTIONS          LA        A0,(50,INFBUF)    . INFOR BUFFER          LMJ       X11,RINF$         . READ INFOR TABLE          J         ERREXT            .  ERROR READING INFOR          LMJ       X11,IDONLY$       . FORMAT ID LINE          P$RINT    (0107,IDBUFF)     .  AND PRINT IT          LA,U      A0,1              . FIRST FIELD OF INFOR          LMJ       X11,SELT$         . READ IN VIA SELT$          J         ERRPRT(1)         .  ERROR OR NOT FOUND, ERROR EXIT          LA        A0,ENL            . ELEMENT NAME LENGTH          JNZ       A0,FL150          . SKIP IF NAME WAS GIVEN          TZ        FQL               . WAS QUALIFIER GIVEN?          J         FL120             .  YES, SKIP          TZ        FNL               . IS FILENAME MISSING,          TEP,U     A15,1*/('Z'-'Q')  .  OR IS 'Q' OPTION SET?          J         ERRPRT(2)         .   YES, 'ILLEGAL OPT/PARAM COMBINATION'          J         FL200             . NO, SEARCH FOR FILENAME MATCHFL120          TNZ       FNL               . WAS FILENAME MISSING,          TOP       A15,(1*/('Z'-'F')) . AND IS 'F' OPTION SET?          J         FL200             .  NO, BEGIN SEARCH          J         ERRPRT(2)         .   YES, 'ILLEGAL OPT/PARAM COMBINATION'FL150          DL        A1,ENAME          . GET SUPPLIED ELEMENT NAME          TEP,U     A15,1*/('Z'-'Q')  . IS 'Q' OPTION SET?          J         FL170             .  YES, USE AS QUALIFIER          TZ        FNL               . WAS FILENAME SPECIFIED?          J         ERRPRT(2)         .  YES, 'ILLEGAL OPT/PARAM COMBINATION'          SA        A0,FNL            .  NO, USE AS FILENAME - STORE LENGTH          DS        A1,FNAME          .   AND TEXT          J         FL200             . BEGIN SEARCHFL170          TOP       A15,(1*/('Z'-'F')) . IS 'F' OPTION SET?          TZ        FQL               . OR WAS QUALIFIER GIVEN?          J         ERRPRT(2)         .  YES, 'ILLEGAL OPT/PARAM COMBINATION'          SA        A0,FQL            .  NO, USE AS QUALIFIER - STORE LENGTH          DS        A1,FQUAL          .   AND TEXTFL200          TEP,U     A15,1*/('Z'-'Z')  . IS 'Z' OPTION (TEST) SET?          J         FL210             .  YES, SKIP - DON'T AUTO-ASG FILE          LA,U      A0,MFASG          .  NO, ASSIGN INPUT MFDDB FILE          ER        CSF$              .  @ASG,AI SYS$*MFDEXT$          JN        A0,ERRPRT(3)      . ERROR EXIT IF BAD CSF$ STATUS          SP1       ASGFLG            . SET FILE-ASSIGNED FLAG          LA,U      A0,MFUSE          . ATTACH USE NAME TO FILE          ER        CSF$              .  @USE $MFDB$,SYS$*MFDEXT$FL210          I$OW      RDHDR             . READ HEADER (SECTOR ZERO) OF MFDDB          TZ,S1     RDHDR+3           . CHECK I/O STATUS          J         ERRPRT(4)         .  ERROR EXIT IF NONZERO          LA        A0,HDRBUF+MFLABL  . GET SOFTWARE LABEL          LR        R4,HDRBUF+MFFLCT  .  AND FILE COUNT          TNE       A0,('*MFDB*')     . VALID LABEL?          JGD       R4,FL220          .  AND FILE COUNT > 0?          J         ERRPRT(4)         .   NO, 'ERROR READING EXTRACT FILE'FL220          LA        A0,HDRBUF+MFLVWD  . GET MFDEDT LEVEL WORD          SSL       A0,18             . MAJOR PART OF REV LEVEL TO A0 LOWER          TLE,U     A0,012            . GRTR OR EQUAL TO 2R3?          J         FL230             .  NO, SKIP - NO MHFS INFO PRESENT          LA        A0,HDRBUF+MFHHID  .  YES, GET INPUT HOSTID          SA        A0,MHFFLG         . IF >0, MHFS IN USE - SAVE STATUSFL230          D$BIO     RDMFDB  HDRBUF+MFFLAD . OPEN INPUT I/O FROM EXTRACT FILE          E$DIT     EPKT              . OPEN EDIT          DSL       A11,72            . ZERO TOTAL FILES, TRACK TOTAL          LR,U      R10,0             . ZERO REM LINE CT, PRINT HDGS FIRSTFL300          D$BI      RDMFDB  ERRPRT(4),ERRPRT(4) . READ THE NEXT EXTRACT SECTOR          TNZ,H1    0,A1              . IS THIS A DAD TABLE, EXT ENTRY?          J         FL300             .  YES, SKIP - NOT USED HERE          LX,U      X4,,A1            . X4 = ADDRESS OF MFDDB DATA RECORD          LA        A0,MFTYPE,X4      . A0 = FILE TYPE          TE,U      A0,MMTAPE         . IS THIS A TAPE FILE?          J         FL305             .  NO, SKIP          TOP,U     A15,1*/('Z'-'T')  .  YES, DOES USER WANT TAPES LISTED?          J         FL400             .   NO, GET NEXT ENTRY          J         FL310             .   YES, CHECK THIS ENTRY FOR MATCHFL305          TOP       A15,(1*/('Z'-'D')) . DISC FILE - DOES USER WANT LISTED?          J         FL400             .   NO, GET NEXT ENTRYFL310          LA        A3,FQL            . LENGTH OF QUALIFIER          JZ        A3,FL320          . SKIP IF NO QUALIFIER CHECK          DL        A0,MFQUAL,X4      . QUALIFIER OF THIS ENTRY          DL        A4,FQUAL          . COMPARISON QUALIFIER          LMJ       X11,COMPARE       . CHECK FOR EQUALITY          J         FL400             .  NOT EQUAL, SKIP THIS ENTRYFL320          LA        A3,FNL            . LENGTH OF FILENAME FOR COMPARE          JZ        A3,FL330          . SKIP IF NO FILENAME CHECK          DL        A0,MFFILE,X4      . FILENAME OF THIS ENTRY          DL        A4,FNAME          . COMPARISON FILENAME          LMJ       X11,COMPARE       . CHECK FOR EQUALITY          J         FL400             .  NOT EQUAL, SKIP THIS ENTRYFL330          AA,U      A11,1             . INCREMENT TOTAL FILES SELECTED          TOP,U     A15,1*/('Z'-'W')  . OUTPUT FILE LIST TO OUT$$$?          J         FL340             .  NO, SKIP          TE,U      A11,1             .  YES, FIRST TIME THROUGH?          J         FL335             .   NO, SKIP          LA,U      A0,OUTASG         .          ER        CSF$              . @ASG,T OUT$$$ .          JN        A0,ERRPRT(6)      . ERROR IF UNABLE TO ASSIGN OUT$$$FL335          E$CLEAR                     . CLEAR EDIT          DL        A4,MFQUAL,X4      . QUALIFIER          LMJ       X10,EDNAME        . INSERT QUALIFIER INTO OUTPUT IMAGE          E$CHAR    '*'               .          DL        A4,MFFILE,X4      . FILENAME          LMJ       X10,EDNAME        . INSERT FILENAME INTO OUTPUT IMAGE          E$CHAR    '('               .          E$DECV    MFCYCL,X4         . ABSOLUTE F-CYCLE          E$CHAR    ')'               .          E$CHAR    '.'               .          E$COLN                      . A0 = COLUMN NUMBER          SA,H1     A0,SYMPKT+4       . SAVE CHAR COUNT IN SYMB$ PKT          LA,U      A0,SYMPKT         .          ER        SYMB$             . WRITE COMPLETE IMAGE TO SYMB$          J         FL400             . SKIP TO NEXT FILE (NO PRINTED LIST)FL340          LA        A5,MFTYPE,X4      . GET FILE TYPE          TE,U      A5,MMTAPE         . TAPE FILE?          AA        A12,MFNOTR,X4     .  NO, INCREMENT TRACK TOTAL          TEP       A15,(1*/('Z'-'B')) . BRIEF LISTING (TOTAL ONLY)?          J         FL400             . YES, SKIP DETAIL OUTPUT          JGD       R10,FL350         . LOOP AHEAD UNTIL REM LINE COUNT = 0          LA,U      A0,CONTRD         .  'CONTINUE >'          TE,U      A11,1             . SKIP SOLICIT IF FIRST TIME THROUGH          ER        TREAD$            . WAIT FOR USER TO TRANSMIT          E$CLEAR                     . CLEAR EDIT BUFFER          LA,U      A0,HDGMSG         . NON-MHFS HEADING          TZ        MHFFLG            . IS INPUT FROM MHFS SYSTEM?          LA,U      A0,HDGMSGM        .  YES, USE MHFS HEADING          E$MSG                       . EDIT APPROPRIATE HEADING MESSAGE          E$DAY1    HDRBUF+MFTDAT     . MMDDYY OF EXTRACT CREATION          E$MSGR                      . ' - '          E$TIME    HDRBUF+MFTDAT     . HH:MM:SS OF EXTRACT CREATION          E$SKIP    -3                . BACKSPACE 3 CHARS          E$COPY    3,('      ')      . WIPE OUT SECONDS FIELD          P$RINT    (0115,LINE)       . PRINT HEADING          P$RINT    (0100,$)          . SKIP FOR READABILITY          LR,U      R10,19            . INIT LINE COUNT (PRINT 20 LINES)          TOP,U     A15,1*/('Z'-'S')  . IS SCROLLING OUTPUT DESIRED,          TEP       A15,(1*/34)       .  OR IS USER BREAKPOINTED?          LR,U      R10,99999         .   YES, ONLY ONE HEADING, NO SOLICITSFL350          E$CLEAR                     . CLEAR EDIT          TNZ       MHFFLG            . IS INPUT FROM MHFS SYSTEM?          J         FL355             .  NO, SKIP - DON'T EDIT DIR-ID INDICATOR          LA,U      A0,'L'            .  YES, ASSUME LOCAL DIRECTORY          TZ        MFDRID,X4         .  UNLESS DIR-ID OF FILE > 0          LA,U      A0,'S'            .   IN WHICH CASE SHOW SHARED DIR          E$CHAR                      . EDIT DIR-ID          E$CHAR    ' '               .  AND A SPACE FOR READABILITYFL355          E$COPY    12,MFQUAL,X4      . EDIT QUALIFIER          LA,U      A0,2              . SKIP 2 FOR NON-MHFS          TZ        MHFFLG            .          LA,U      A0,1              . SKIP 1 FOR MHFS          E$SKIP                      .          E$COPY    12,MFFILE,X4      . FILENAME          LA        A0,MFCYCL,X4      . ABS F-CYCLE          LA,U      A1,5              . EDIT IN 5-COL FIELD FOR NON-MHFS          TZ        MHFFLG            .          LA,U      A1,4              . EDIT IN 4-COL FIELD MHFS          E$DECF                      . EDIT F-CYCLE          E$SKIP    2                 .          LA,U      A0,'?'            . ASSUME THE WORST          TNE,U     A5,MMFIXD         . FIXED DISC?          LA,U      A0,'F'            .  YES, SHOW AS 'F'          TNE,U     A5,MMREMD         . REMOVABLE DISC?          LA,U      A0,'R'            .  YES, SHOW AS 'R'          TNE,U     A5,MMTAPE         . TAPE FILE?          LA,U      A0,'T'            .  YES, SHOW AS 'T'          E$CHAR                      . EDIT FILE TYPE          LA,U      A0,9              . SKIP 9 IF TAPE          TNE,U     A5,MMTAPE         . TAPE FILE?          J         FL360             .  YES, DON'T EDIT TRACK SIZE          LA        A1,MFDESC,X4      . DESCRIPTOR BITS          LA,U      A0,' '            . ASSUME ONLINE FILE          TEP,U     A1,MMUNLD         . IS FILE UNLOADED?          LA,U      A0,'U'            .  YES, INDICATE STATUS          E$CHAR                      . INSERT LOADED/UNLOADED INDICATOR          E$DECF    6,MFNOTR,X4       . INSERT TRACK SIZE          LA,U      A0,2              . SKIP 2 INSTEAD OF 9FL360          E$SKIP                      .          E$DAY5    MFCATT,X4         . CATALOG DATE          E$SKIP    2                 .          E$DAY5    MFREFT,X4         . REFERENCE DATE          TE,U      A5,MMTAPE         . TAPE FILE?          J         FL370             .  NO, SKIP          LA        A4,MFTPCT,X4      .  YES, GET REEL COUNT          TLE,U     A4,1              . AT LEAST ONE REEL?          J         FL380             .  NO, SKIP          E$SKIP    2                 .  YES          E$FD1     ('REEL=')         . REEL LIST IDENTIFIER          E$FD1     MFTPR1,X4         . EDIT FIRST REEL NUMBER          TLE,U     A4,2              . MORE THAN ONE REEL?          J         FL380             .  NO, SKIP          E$CHAR    ','               .  YES, CONTINUE          E$FD1     MFTPR2,X4         . EDIT SECOND REEL NUMBER          J         FL380             . ONLY EDIT 1ST 2 REELSFL370          TE,U      A5,MMREMD         . REMOVABLE DISC?          J         FL380             .  NO, SKIP          E$SKIP    4                 .  YES          E$FD1     ('PACK=')         . REMOVABLE PACK LIST IDENTIFIER          E$FD1     MFPKID,X4         . EDIT 1ST PACKIDFL380          P$RINT    (0115,LINE)       . PRINT OUTPUT LINE (INFO FOR 1 FILE)FL400          JGD       R4,FL300          . LOOP BACK FOR MORE FILES          JZ        A11,ERRPRT(5)     . ERROR IF NOTHING SELECTED          TOP,U     A15,1*/('Z'-'W')  . OUTPUT FILE LIST TO OUT$$$?          J         FL420             .  NO, SKIP          LA,U      A0,OUTBKP         .          ER        CSF$              . @BRKPT OUT$$$          E$CLEAR                     . CLEAR EDIT          E$MSG     OUTMSG            . ' ** TOTAL FILES WRITTEN TO <OUT$$$>: '          E$DECV    A11               . TOTAL FILES SELECTED          P$RINT    (0110,LINE)       . DISPLAY INFO MESSAGE          J         EXIT              .  AND EXITFL420          TEP       A15,(1*/('Z'-'B')) . BRIEF MODE?          J         FL450             .  YES, SKIP CONTINUE SOLICIT          JGD       R10,$+1           . DECREMENT LINE COUNT TWICE          JGD       R10,FL450         . SKIP IF REM LINE CT >  0          LA,U      A0,CONTRD         .          ER        TREAD$            . WAIT FOR CONTINUE RESPONSEFL450          E$CLEAR                     . CLEAR EDIT          E$MSG     TOTMSG            . ' ** TOTAL FILES SELECTED: '          E$DECV    A11               . TOTAL SELECTED COUNT          TOP       A15,(1*/('Z'-'D')) . SELECTING DISK FILES?          J         FL480             .  NO, DON'T PRINT TRACK TOTAL          E$MSGR                      .  YES, ' ('          E$DECV    A12               . TOTAL TRACKS IN SELECTED FILES          E$MSGR                      . ' TRACKS)'FL480          P$RINT    (0100,$)          . SKIP A LINE FOR READABILITY          P$RINT    (0112,LINE)       . PRINT TOTAL LINE          J         EXIT              . NORMAL EXIT/..         COMPARE IS CALLED FROM ABOVE TO COMPARE A QUALIFIER OR FILE.         NAME FOR EQUALITY WITH A USER-SUPPLIED PARAMETER.  IF THE 'M'.         OPTION IS SET, THE ROUTINE RETURNS 'EQUAL' IF THE INPUT.         NAME BEGINS WITH THE NAME OF THE COMPARATOR...         AT ENTRY, A0,A1 = INPUT QUAL/FILE.                   A3 = CHAR COUNT OF COMPARISON QUAL/FILE.                   A4,A5 = QUALIFIER/FILENAME FOR COMPARISON..         RETURNS 0,X11 NO MATCH.                 1,X11 MATCH.COMPARE          TEP,U     A15,1*/('Z'-'M')  . IS MASKING SET AND          TG,U      A3,12             .  IS LENGTH OF COMPARATOR < 12 CHARS?          J         CP100             .   NO, DO FULL 12-CHAR COMPARE          LA,U      A2,12             .   YES, COMPUTE FIELD SIZE TO COMPARE          ANA,U     A2,,A3            . A2 = 12 - FIELD SIZE          MSI,U     A2,6              . TIMES 6 = BIT COUNT TO IGNORE          DSL       A0,,A2            . SHIFT INPUT QUAL OR FILE AND          DSL       A4,,A2            .  COMPARATOR TO IGNORE TRAILING CHARSCP100          DTE       A0,A4             . DO NAMES MATCH?          J         0,X11             .  NO, RETURN NO MATCH          J         1,X11             .  YES, RETURN MATCH..         EDNAME IS CALLED TO INSERT FULL QUALIFIER AND FILENAME INTO.         AN OUTPUT IMAGE (INCLUDING POSSIBLE '@' SIGNS).EDNAME          LR,U      R2,12-1           . UP TO 12 CHARS IN QUAL/FILEEN100          LDSC      A4,6              . NEXT CHAR TO A5 LOWER          AND,U     A5,077            . INTO A6          TNE,U     A6,' '            . IS IT A SPACE?          J         EN150             .  YES, ALL DONE          E$CHAR    A6,,W             .  NO, INSERT INTO IMAGE          JGD       R2,EN100          . BACK FOR NEXTEN150          J         0,X10             . RETURN..         TERMINATION PROCESSING.ERREXT          ER        PRINT$            . PRINT ERROR MESSAGEEXIT          LA,U      A0,MFFREE         . CSF$ IMAGE TO FREE INPUT FILE          TZ        ASGFLG            . WAS FILE ASSIGNED BY @FILES?          ER        CSF$              .  YES, @FREE SYS$*MFDEXT$          ER        EXIT$             . ALL DONE/.MFASG     '@ASG,AI SYS$*MFDEXT$ . 'MFUSE     '@USE $MFDB$,SYS$*MFDEXT$ . 'MFFREE    '@FREE SYS$*MFDEXT$ . 'OUTASG    '@ASG,T OUT$$$ . 'OUTBKP    '@BRKPT OUT$$$ . 'OUTMSG    '** TOTAL FILE NAMES WRITTEN TO <OUT$$$>: &'CONTRD    +         0102,('CONTINUE >  ')          +         EXIT,INFBUFHDGMSG    'QUALIFIER     FILENAME      CYC TYP  TRKS   CAT     REF    & - &'HDGMSGM   'H QUALIFIER    FILENAME     CYC TYP  TRKS   CAT     REF    & - &'TOTMSG    ' ** TOTAL FILES SELECTED: &  (& TRACKS)&'.ERR(1)    'SPECIFICATION 1 MISSING - REQUIRED'ERR(2)    'ILLEGAL OPTION/PARAMETER COMBINATION'ERR(3)    'COULD NOT ASSIGN EXTRACT FILE - NOTIFY SYSTEMS'ERR(4)    'ERROR READING EXTRACT FILE - NOTIFY SYSTEMS'ERR(5)    'NO MATCH ON SPECIFIED PARAMETER(S)'ERR(6)    'COULD NOT ASSIGN OUTPUT FILE (OUT$$$)'ERR(7)ERP*      PROC          LA        A0,ERP(1,1)          J         ERREXT          ENDI DO 6 ,ERRPRT(I)  ERP  (0100+ERR(I+1)-ERR(I),ERR(I)).$(0)ASGFLG    +         0                 . SET IF SYS$*MFDEXT$ WAS ASSIGNEDMHFFLG    +         0                 . SET NONZERO IF INPUT FROM MHFS SYSIDBUFF*   'FILES 1R2'                 . IDENTIFIER FOR IDONLY$ DO 5 ,   ' '                         .RDHDR     I$OD      '$MFDB$',R$  28,HDRBUF  0  .  PKT TO READ INPUT MFDDB HEADERRDMFDB    D$BRP     '$MFDB$'  28,1792*8,64,BUFF . PKT FOR D-B READ OF MFDDBSYMPKT    'OUT$$$      '              . SYMB$ PACKET          +         W$,0              .          +         0                 .          +         $-$,LINE          . DO 5 ,   +         0                 .EPKT      E$PKT     14,LINE           . EDIT$ PACKETLINE      RES       14                . EDIT$ OUTPUT BUFFERINFBUF    RES       50                . INFOR BUFFERHDRBUF    RES       28                . MFDDB FILE HEADER BUFFER$(2)BUFF      RES       1792*16           . MFDDB INPUT BUFFER(S)          END       START@ELT,SIP MARSREL$.MAP/FILES,,,162272121133,006IN MARS$.FILESNOT TPF$.@ELT,SIP MARSREL$.HISTINIT,,,172552111332,023.         AHF/SHF INITIALIZATION PROGRAM..         THIS PROGRAM IS USED TO INITIALIZE EITHER THE ARCHIVE HISTORY.         FILE (SYS$*ARCHIST$) OR THE FAS SAVE HISTORY FILE (SYS$*SAVHIST$)...         TO INITIALIZE THE ARCHIVE HISTORY FILE:..           @ASG,A SYS$*ARCHIST$.           @XQT,A HISTINIT..         TO INITIALIZE THE FAS SAVE HISTORY FILE:..           @ASG,A SYS$*SAVHIST$.           @XQT,F HISTINIT..         THE PROGRAM WILL ABORT UNLESS THE FILE IS EMPTY...$(1)      AXR$          $LIT          MGPDEF          AHFDEF.START          SA        A5,A15            . SAVE OPTIONS          E$DIT     EPKT              . OPEN EDIT          LX,U      X4,AHBUFF         . X4 = HEADER BUFFER ADDRESS          ER        TDATE$            . GET CURRENT DATE/TIME          SA        A0,AHHUPT,X4      . STORE IN HEADER          LA,U      A0,AHBEGN         . STARTING SECTOR OF HISTORY DATA          SA        A0,AHHSTB,X4      . STORE IN HEADER          SA        A0,AHHNXB,X4      . ALSO STORE AS NEXT AVAIL ADDR          TOP       A15,(1*/('Z'-'A')) . INIT ARCHIVE HISTORY FILE?          J         HI200             .  NO, SKIP          I$OW      AHFPKT            .  YES, READ SECTOR ZERO          LA,S1     A0,AHFPKT+3       . GET STATUS          TNE,U     A0,5              . BETTER BE I/O 5 (FILE EMPTY)          J         HI120             .  YES, CONTINUE          P$RINT    ERRPRT(1)         .  NO, 'FILE MUST BE EMPTY TO BE INIT'          ER        ERR$              .   BLOW UPHI120          LA        A0,(W$,0,0)       . SET UP PACKET TO WRITE HEADER          SA        A0,AHFPKT+3       .          LA        A0,('*AHFL*')     . ARCHIVE HISTORY FILE LABEL          SA        A0,AHHLBL,X4      . STORE IN HEADER          LA        A0,AHHUPT,X4      . UPDATE TIME          SA        A0,AHHSTD,X4      . STORE AS STAT AREA INIT TIME          I$OW      AHFPKT            . WRITE HEADER          TZ,S1     AHFPKT+3          . GOOD STATUS?          ER        ERR$              .  NO, BLOW UP          E$MSG     AHFMSG            .  YES, 'ARCHIVE HISTORY FILE INIT ON '          E$DAY1    AHHUPT,X4         . DATE          E$MSGR                      . ' AT '          E$TIME    AHHUPT,X4         . TIME          P$RINT    (0112,LINE)       . PRINT COMPLETION MESSAGE          J         HI300             .  AND EXITHI200          TEP       A15,(1*/('Z'-'F')) . INIT FAS SAVE HISTORY FILE?          J         HI210             .  YES, CONTINUE          P$RINT    ERRPRT(3)         .  NO, 'MISSING OR INVALID OPTION(S)'          ER        ERR$              .   BLOW UPHI210          I$OW      SHFPKT            . READ SECTOR ZERO          LA,S1     A0,SHFPKT+3       . GET STATUS          TNE,U     A0,5              . BETTER BE I/O 5 (FILE EMPTY)          J         HI220             .  YES, CONTINUE          P$RINT    ERRPRT(2)         .  NO, 'FILE MUST BE EMPTY TO BE INIT'          ER        ERR$              .   BLOW UPHI220          LA        A0,(W$,0,0)       . SET UP PACKET TO WRITE HEADER          SA        A0,SHFPKT+3       .          LA        A0,('*SHFL*')     . SAVE HISTORY FILE LABEL          SA        A0,AHHLBL,X4      . STORE IN HEADER          I$OW      SHFPKT            . WRITE HEADER          TZ,S1     SHFPKT+3          . GOOD STATUS?          ER        ERR$              .  NO, BLOW UP          E$MSG     SHFMSG            .  YES, 'SAVE HISTORY FILE INIT ON '          E$DAY1    AHHUPT,X4         . DATE          E$MSGR                      . ' AT '          E$TIME    AHHUPT,X4         . TIME          P$RINT    (0112,LINE)       . PRINT COMPLETION MESSAGEHI300          ER        EXIT$             . ALL DONE.ERR(1)    'ARCHIVE HISTORY FILE MUST BE EMPTY TO BE INITIALIZED'ERR(2)    'SAVE HISTORY FILE MUST BE EMPTY TO BE INITIALIZED'ERR(3)    'MISSING OR INVALID OPTION(S) - ''A'' OR ''F'' REQUIRED'ERR(4)I DO 3 ,ERRPRT(I)  +  0100+ERR(I+1)-ERR(I),ERR(I)AHFMSG    'ARCHIVE HISTORY FILE INITIALIZED ON & AT &'SHFMSG    'SAVE HISTORY FILE INITIALIZED ON & AT &'.$(0)AHFPKT    I$OD      'ARCHIST$',R$  28,AHBUFF  0SHFPKT    I$OD      'SAVHIST$',R$  28,AHBUFF  0EPKT      E$PKT     10,LINELINE      RES       10AHBUFF    RES       28          END       START@ELT,SIP MARSREL$.MAP/HISTINIT,,,116567112332,006IN MARS$.HISTINITNOT TPF$.@ELT,SIP MARSREL$.LISTER,,,152630123137,023. PROGRAM TO PRODUCE A READABLE FILE LIST FROM THE EDITED DIRECTORY. PRODUCED BY MFDEDT.                WRC 78-79, SEVERAL UPDATES SINCE.. CALL: @USE  FLISTPRT,<FILE>.  (UNLESS 'Q' OPTION USED).       @ASG,A  FLISTPRT.       @USE  $MFDB$,<MFDEDT FILE>..       @ASG,A  $MFDB$.       @ASG,A  SYS$*ARCCTL$   (IF 'O' OPTION USED).       @XQT<,OPT>  LISTER.       <SITE-ID CARD IF 'H' OPTION USED>.       <TRACK LIMIT IF 'B' OPTION USED>.       <GROUPACCTS PARAMETERS IF 'G' OPTION USED>.       <ACCOUNT-IDS (6 CHARS) IF 'X' OPTION USED>..  <FILE> CAN BE SYMMED TO A PRINTER AFTER LISTER HAS COMPLETED..  <MFDEDT FILE> IS THE EDITED DIRECTORY FILE PRODUCED BY MFDEDT... VALID OPTIONS:.. A - SORT DISC FILES BY FIRST 6 CHARACTERS OF ACCOUNT NUMBER.. B - SORT DISC FILES BY DESCENDING TRACK SIZE (OVERRIDES 'A').     FIRST CARD READ (2ND OF 'H' OPT USED) IS LOWER LIMIT TO LIST.. D - PRINT ONLY HARDWARE/SECURE DISABLED DISC FILES.. E - EJECT THE PAGE WHEN ACCOUNT CHANGES (USED ONLY WITH 'A').. F - PRINT DISC FILES (ASSUMED IF NEITHER 'F' OR 'T' GIVEN).. G - SORT DISC FILES BY ACCOUNT GROUPS (OVERRIDES 'A', 'B', 'X').     (PARAMETER FILE REQUIRED TO DESCRIBE GROUPS).. H - FIRST CARD READ CONTAINS SYSTEM ID, UP TO 12 CHARACTERS.. K - PRINT R/W KEYS WITH DISC LISTING, MUST ALSO BE USED WITH MFDEDT.. O - FOR FILES WITH QUALIFIERS REGISTERED IN SYS$*ARCCTL$, CHANGE.     THE ACCOUNT NUMBER TO THE 'OWNER' ACCOUNT IF IT IS DIFFERENT.. Q - OUTPUT DIRECTLY TO PRINT$ (FILE FLISTPRT IS NOT REFERENCED).. R - INCLUDE FILES FROM R-DISC IN OUTPUT.. S - SYM FLISTPRT TO PR WHEN COMPLETED.. T - PRINT CATALOGED TAPE FILES (ASSUMED IF NEITHER 'F' OR 'T' GIVEN).     LISTING IS SORTED ALPHABETICALLY BY REEL NUMBER, ONE LINE/REEL.. U - LIST ONLY UNLOADED FILES (OVERRIDES 'D').. X - REQUEST CERTAIN ACCOUNTS ONLY (READ$, ONE ACCOUNT/CARD).     ACCOUNTS ARE LIMITED/SELECTED BY FIRST 6-CHARACTER MATCH/.$(1)      AXR$          LIT          MGPDEF          MFDDEF          D$BDEF..         THIS PROCEDURE IS USED TO TEST/EDIT OPTION BITS/CHARACTERS..OPT*      PROC                        .          LA,U      A0,OPT(1,1)       . CHARACTER TO INSERT IF BIT IS SET          TEP,U     A6,OPT(1,2)       . IS BIT SET?          LMJ       X11,ECHAR$        .  YES, INSERT IN IMAGE          END                         ...         THIS PROCEDURE IS USED TO WRITE A LINE OF TEXT TO THE OUTPUT FILE..OUTPUT*   PROC                        .          LA        A0,OUTPUT(1,1)    . PRINT CONTROL WORD          LMJ       X10,LINOUT        . CALL LINOUT TO WRITE TO FILE          END                         ....         SORT RECORD DEFINITIONS..         DEFINITIONS COMMON TO ALL FORMATS.SCFLAG    EQUF      0,,S1             . RECORD TYPE: 0=DISC, >0=TAPESCGRP     EQUF      0,,S2             . OWNER GROUP NUMBERSCSRLN    EQU       17                . COMMON RECORD LENGTH..         DEFINITIONS COMMON TO ALL MASS STORAGE RECORDS.SMTYPE    EQUF      0,,S3             . FILE TYPESMDISF    EQUF      0,,S4             . DISABLE FLAGSSMINHI    EQUF      0,,S5             . INHIBIT BITSSMPCHR    EQUF      0,,S6             . PCHAR-FLAGS..         DEFINITIONS COMMON TO NON-'B'-OPTION MASS STORAGE RECORDS.SMACCT    EQU       1                 . ACCOUNT NUMBERSMNOTR    EQUF      3,,H1             . TRACK COUNTSMMXGR    EQUF      3,,H2             . MAXIMUM GRANULES..         DEFS COMMON TO 'B'-OPTION MASS STORAGE RECORDS (SORT BY FILE SIZE).SBNOTR    EQUF      1,,XH1            . TRACK COUNTSBMXGR    EQUF      1,,XH2            . MAXIMUM GRANULESSBACCT    EQUF      2                 . ACCOUNT NUMBER..         REMAINDER OF DEFINITIONS COMMON TO MASS STORAGE.SMPROJ    EQU       4                 . PROJECT-IDSMQUAL    EQU       6                 . QUALIFIERSMFILE    EQU       8                 . FILENAMESMHSCY    EQUF      10,,H1            . HOSTID (35-30), ABS F-CYCLE (29-18)SMFILF    EQUF      10,,S5            . FILE-FLAGSSMKEYF    EQUF      10,,S6            . SET IF FILE HAS READ OR WRITE KEYSMRKEY    EQU       11                . READ KEY, IF 'K' OPTION SETSMBKUT    EQU       11                . BACKUP TIMESMWKEY    EQU       12                . WRITE KEY, IF 'K' OPTION SETSMPKID    EQU       12                . FIRST PACKIDSMCATT    EQU       13                . CATALOG DATE/TIMESMREFT    EQU       14                . LAST REFERENCE DATE/TIMESMMNEM    EQU       15                . EQUIPMENT MNEMONICSMASGS    EQUF      16,,H1            . ASSIGN COUNTSMDESC    EQUF      16,,T3            . DESCRIPTOR BITS..         DEFINITIONS FOR CATALOGED TAPE FILES.SLREEL    EQU       1                 . REEL-IDSLACCT    EQU       2                 . ACCOUNT NUMBERSLPROJ    EQU       4                 . PROJECT-IDSLCATT    EQU       6                 . CATALOG DATE/TIMESLQUAL    EQU       7                 . QUALIFIERSLFILE    EQU       9                 . FILENAMESLCYCL    EQUF      11,,T1            . ABS F-CYCLESLTPNO    EQUF      11,,T2            . INDEX OF THIS REELSLTPCT    EQUF      11,,T3            . TOTAL REELS THIS FILESLDESC    EQUF      12,,T1            . DESCRIPTOR BITSSLDISF    EQUF      12,,S3            . DISABLE FLAGSSLINHI    EQUF      12,,S4            . INHIBIT BITSSLTPFM    EQUF      12,,S5            . TAPE FORMATSLTPDN    EQUF      12,,S6            . TAPE DENSITYSLREFT    EQU       13                . LAST REFERENCE DATE/TIMESLBKUT    EQU       14                . BACKUP DATE/TIMESLBUR1    EQU       15                . BACKUP REEL NUMBERSLSTFP    EQUF      16,,H1            . STARTING POSITION ON BACKUP TAPESLBUNO    EQUF      16,,S4            . NUMBER OF BACKUP REELS/.START          SA        A5,A15            . SAVE OPTIONS IN A15          AND       A5,(1*/('Z'-'F')++1*/('Z'-'T')) . F,T OPTS TO A6          TNZ       A6                . ARE EITHER F,T OPTION SET?          AA        A15,(1*/('Z'-'F')++1*/('Z'-'T')) .  NO, SET BOTH          TOP       A15,(1*/('Z'-'G')) . SORT BY ACCOUNT GROUPS?          J         ML080             .  NO, SKIP          TEP       A15,(1*/('Z'-'B')) .          ANA       A15,(1*/('Z'-'B')) .  YES, CLEAR 'B' OPT - CAN'T USE W/'G'ML080          I$OW      RDHDR             . READ MFDDB HEADER          TZ,S1     RDHDR+3           . VERIFY GOOD STATUS          J         ER100             .  BAD STATUS, ABORT          LA        A0,MFHDBF+MFLABL  . SOFTWARE LABEL          LA        A1,MFHDBF+MFLVWD  . SOFTWARE REV LEVEL          SSL       A1,18             . ISOLATE H1 OF REV LEVEL          TNE       A0,('*MFDB*')     . VERIFY CORRECT LABEL          TE,U      A1,012            .  AND S/W REV LEVEL          J         ER110             .   IF NOT CORRECT, ABORT          LR        R4,MFHDBF+MFFLCT  . TOTAL FILE COUNT OF MFDDB          JGD       R4,ML100          . DECREMENT AND SKIP          J         ER100             .  ABORT IF ZERO OR NEGML100          D$BIO     RDMFD  MFHDBF+MFFLAD . READ OPEN 1ST DATA SECT OF MFDDB          TEP,U     A15,1*/('Z'-'O')  . USE OWNER ACCOUNTS FROM SYS$*ARCCTL$?          LMJ       X11,ARSETUP       .  YES, READ/SORT REG QUALS, OWN ACCTS          TOP,U     A15,1*/('Z'-'T')  . INCLUDE TAPE FILES,          TEP       A15,(1*/('Z'-'A')) .  OR SORT BY ACCOUNT NUMBER?          J         ML110             .   YES, SORT REQUIRED          TOP       A15,(1*/('Z'-'G')) . SORT BY ACCOUNT GROUP,          TEP       A15,(1*/('Z'-'B')) .  OR BY FILE SIZE?          J         ML110             .   YES, SORT REQUIRED          J         ML120             . NO SORT REQ'D IF NONE OF THESE OPTS SETML110          R$OPN     RP                . OPEN MAJOR SORTML120          TOP       A15,(1*/('Z'-'K')) . DISPLAY KEYS ON OUTPUT?          J         ML130             .  NO, SKIP          LA        A0,MFHDBF+MFOPWD  .  YES, GET MFDEDT OPTIONS          TEP       A0,(1*/('Z'-'K')) . WAS 'K' USED WITH MFDEDT AS WELL?          J         ML130             .  YES, SKIP          P$RINT    (0100+ER3L,ERR3)  .  NO, 'K-OPTION IGNORED'          ANA       A15,(1*/('Z'-'K')) . PRETEND IT WAS NEVER SETML130          TEP,U     A15,1*/('Z'-'Q')  . OUTPUT DIRECTLY TO PRINT$?          J         ML135             .  YES, SKIP - DON'T NEED RUN INFO          ER        TDATE$            . CURRENT DATE/TIME          SA        A0,HDR+4          . STORE IN FILE HEADER          LA        A0,(21,PCTBUF)    .          ER        PCT$              . GET 1ST 21 WORDS OF PCT          LA        A0,PCTBUF+1       . GENERATED RUN-ID          SA        A0,HDR+3          . STORE IN HEADER          DL        A0,PCTBUF+19      . ACCOUNT NUMBER          DS        A0,HDR+9          . STORE IN HEADER          LA,U      A0,HDR+11         . ADDRESS OF PROJECT          LA,H1     A1,PCTBUF+5       . PROJECT OFFSET FROM PCT          AA        A1,(2,1)          . FORM CONTROL WORD          ER        PCT$              . READ PROJECT-ID FROM PCT INTO HEADER          LA        A0,(4,INFPKT)     .          ER        INFO$             . READ SITE-ID AND USERID INTO HEADER          LA,U      A0,SDFPKT         .          LMJ       X11,SDFOO$        . OPEN OUTPUT TO FLISTPRT          LA,U      A0,SDFPKT         .          LMJ       X11,SDFO$         . WRITE PRINT FILE HEADER          LMJ       A3,ER200          .  ABORT IF ERROR          LA,U      A0,LINE           . ADDRESS OF 'M,<LINE CT>,3,2'          LA        A1,(0600200,0)    . PRINT CONTROL IMAGE, 2 WORDS LONG          SA,H2     A0,SDFPKT+8       . STORE IN SDFO PACKET          SA        A1,SDFPKT+10      .          LA,U      A0,SDFPKT         .          LMJ       X11,SDFO$         . WRITE CONTROL IMAGE TO PRINT FILE          LMJ       A3,ER200          .  ABORT IF ERROR          J         ML140             .ML135          LA        A0,(2,LINE)       . OUTPUT DIRECTLY TO PRINT$:          ER        PRTCN$            .  ISSUE PRINT CONTROL REQ WITH PRTCN$ML140          TOP       A15,(1*/('Z'-'H')) . IS SITE-ID CARD SUPPLIED?          J         ML142             .  NO, SKIP          R$EAD     (ML141,SITCOD)    .  YES, READ 1ST CARD FOR THIS          J         ML142             .ML141          P$RINT    (0100+ER5L,ERR5)  . 'SITE-ID CARD MISSING, REQUIRED'          ER        ERR$              .  ABORTML142          E$DIT     H2PKT             . OPEN EDIT FOR DATE/TIME LINE          E$MSG     MSG2              . '   DATE/TIME:  '          E$DAY1    MFHDBF+MFTDAT     . DATE (MM/DD/YY) FROM MFDDB          E$COPY    3,(' -    ')      .          E$TIME    MFHDBF+MFTDAT     . TIME (HH:MM:SS) FROM MFDDB          E$DIT     EPKT              . OPEN NORMAL EDIT          LXI,U     X5,1              . INCREMENT FOR LATER ON          LA,U      A12,1             . INIT PAGE COUNTER          LR,U      R6,0              .  AND LINE COUNTER          TEP       A15,(1*/('Z'-'G')) . SORT BY ACCOUNT GROUPS?          J         ML180             .   YES, SKIP          TOP       A15,(1*/('Z'-'B')) . SORT BY FILE SIZE?          J         ML150             .  NO, SKIP          R$EAD     (ML200,LINE)      .  YES, READ SIZE PARAMETER          LA,U      A0,,A0            . A0 = WORDS READ          TE,U      A0,1              . BETTER BE ONLY ONE          ER        ERR$              .  IF NOT, ERROR          LA        A0,LINE           . A0 = SYMBOLIC PARAMETER          LA,U      A4,0              . INIT BINARY SIZE          LR,U      R1,5              . LOOP UP TO 6 TIMESML145          LSSC      A0,6              . SHIFT NEXT CHAR TO A0 LOWER          AND,U     A0,077            .  INTO A1          TNE,U     A1,' '            . SPACE?          J         ML148             .  YES, CONVERSION COMPLETE          ANA,U     A1,'0'            .  NO, CONVERT NEXT DIGIT TO BINARY          TG,U      A1,0              . VERIFY WITHIN RANGE 0-9          TG,U      A1,10             .          ER        ERR$              .  IF NOT, ERROR          MSI,U     A4,10             . MULTIPLY RESULT BY TEN          AA,U      A4,,A1            .  AND ADD BINARY VALUE OF CURRENT DIGIT          JGD       R1,ML145          . BACK FOR MOREML148          SA        A4,TLIMIT         . SAVE LOWER TRACK LIMIT FOR LISTML150          TOP,U     A15,1*/('Z'-'X')  . IS ACCOUNT LIST FORTHCOMING?          J         ML200             .  NO, SKIP          LA        A1,(1,ACTLST)     .  YES, A1 = POINTER TO LIST          LR,U      R1,M$ACCTMAX      . MAXIMUM ACCOUNTS IN LISTML160          LA,U      A0,,*A1           . A0 = ADDRESS TO STORE NEXT ACCOUNT          LXI,U     A0,ML170          . EOF ADDRESS          ER        READ$             . READ NEXT PARAM          LA,U      A0,,A0            . WORD COUNT          TE,U      A0,1              . MUST BE ONE WORD (1ST 6 CHARS OF ACCT)          ER        ERR$              .  IF NOT, ABORT          JGD       R1,ML160          . BACK FOR MORE          ER        ERR$              .  ERROR IF ACCOUNT MAXIMUM IS EXCEEDEDML170          LA,U      A0,M$ACCTMAX      . MAXIMUM PARAMETERS          ANA       A0,R1             .  MINUS LOOP COUNT = COUNT READ          SA        A0,ACLSLN         . STORE LENGTH OF ACCOUNT LIST          J         ML200             . BEGIN MAIN LOOP NOWML180          LA,U      A1,GRPTBL         . ADDRESS OF GROUP-ID TABLE          LA        A2,(2,0)          . POINTER TO ACTLST TABLE          LA,U      A3,0              . ACCT COUNT / POINTER TO ACTPTR TABLE          LNA,U     A4,1              . FLAG, NO GROUP-ID FOUND YET          LR        R1,('      ')     . ACCOUNT WORD 2 SPACEFILLML185          SR        R1,1,A1           . SET WORD 2 OF READ$ IMAGE = SPACES          LA,U      A0,,A1            . READ INTO NEXT AVAIL ADDR OF GRPTBL          LXI,U     A0,ML195          . EOF ADDRESS          ER        READ$             . READ THE NEXT IMAGE          LA,U      A0,,A0            . A0 = WORD COUNT          JZ        A0,ML185          . READ NEXT IF NOTHING THERE          LA,S1     A6,,A1            . FIRST CHAR OF IMAGE          TNE,U     A6,'.'            . COMMENT LINE?          J         ML185             .  YES, IGNORE IT          TE,U      A6,'>'            . IS THIS A GROUP-ID?          J         ML190             .  NO, SKIP          AA,U      A4,1              .  YES, INCREMENT GROUP COUNTER          TG,U      A4,M$GROUPMAX     . HAVE WE READ TOO MANY GROUPS?          ER        ERR$              .  YES, ABORT          TG,U      A0,4+1            .          LA,U      A0,4              . MAX GROUP WORD COUNT = 4          SA,S1     A0,,A1            . STORE WORD COUNT IN S1 OF GROUP-ID          LA,U      A5,,A1            . A5 = ADDRESS OF CURRENT GROUP-ID          AA,U      A1,,A0            . INCREMENT TO NEXT AVAIL GROUP-ID ADDR          J         ML185             . READ NEXT IMAGEML190          JP        A4,$+2            . ACCT FOUND, SKIP IF GROUP HAS BEEN READ          ER        ERR$              .  IF NOT, ABORT          AA,U      A3,1              . INCREMENT ACCOUNT COUNT          TG,U      A3,M$ACCTMAX+1    .  WITHIN RANGE?          ER        ERR$              .   NO, ABORT          DL        A6,,A1            .   YES, GET ACCOUNT NUMBER FROM BUFFER          DS        A6,ACTLST,*A2     . STORE IN ACCOUNT LIST          SA,H1     A4,ACTPTR-1,A3    . STORE ACCT GROUP NUMBER          SA,H2     A5,ACTPTR-1,A3    .  AND POINTER TO GROUP-ID TEXT          J         ML185             . GO READ NEXT IMAGEML195          JNZ       A3,$+2            . HAVE ANY ACCOUNTS BEEN READ?          ER        ERR$              .  NO, ABORT          SA        A3,ACLSLN         .  YES, STORE ACCOUNT COUNT/..         THIS IS THE TOP OF THE MAIN INPUT LOOP.ML200          D$BI      RDMFD  ER100,ER100 . GET THE NEXT RECORD FROM THE MFDDB          TNZ,H1    0,A1              . IS H1 OF WORD 0 = ZERO?          J         ML200             .  YES, BYPASS - NOT A FILE RECORDML205          LX        X4,A1             . X4 = FILE RECORD ADDRESS          LA        A6,MFDESC,X4      . DESCRIPTOR BITS          AND,U     A6,-1             . CLEAR BIT ZERO, RESULT TO A7          TOP,U     A15,1*/('Z'-'O')  . LOOKING FOR OWNER ACCOUNTS IN ARCCTL$?          J         ML210             .  NO, SKIP          DL        A4,MFQUAL,X4      . GET QUALIFIER          LMJ       X11,ARSRCH        . CALL GETOWN TO LOOKUP OWNER ACCOUNT          JZ        A4,ML210          .  SKIP IF NO MATCH          DTE       A4,MFACCT,X4      . SAME AS ORIGNIAL ACCOUNT?          J         $+2               .  NO, CONTINUE          J         ML210             .  YES, SKIP          DS        A4,MFACCT,X4      . STORE OWNER ACCOUNT OVER ORIGINAL          AA,U      A7,1              . AND SET 'ACCOUNT CHANGED' BITML210          SA        A7,MFDESC,X4      . RESTORE DESC + ACCOUNT-CHANGED BITS          TOP       A15,(1*/('Z'-'G')) . SORT BY OWNER GROUPS,          TNZ       ACLSLN            .  OR NO ACCOUNTS IN LOOKUP TABLE?          J         ML212             .   YES, SKIP ACCOUNT CHECK          LA        A0,MFACCT,X4      .   NO, GET ACCOUNT NUMBER          LA        A1,(1,ACTLST)     . POINTER TO ACCOUNT LIST TABLE          LR        R1,ACLSLN         . ENTRY COUNT OF THIS TABLE          SE        A0,,*A1           . SEARCH FOR MATCH ON 1ST 6-CHARS OF ACCT          J         ML400             .  IF NO FIND, DO NOT PROCESS THIS FILEML212          LA        A10,MFTYPE,X4     . GET FILE TYPE          TNE,U     A10,MMTAPE        . CATALOGED TAPE FILE?          J         ML215             .  YES, SKIP/..         MASS STORAGE FILE.          TOP       A15,(1*/('Z'-'F')) . ARE MASS STORAGE FILES TO BE LISTED?          J         ML400             .  NO, SKIP THIS FILE          TNE,U     A10,MMREMD        .  YES, IS IT CAT ON REMOVABLE,          TEP,U     A15,1*/('Z'-'R')  .   AND IF SO, ARE WE LISTING SUCH FILES?          J         $+2               .    YES, CONTINUE          J         ML400             .    NO, SKIP THIS FILE          TOP,U     A15,1*/('Z'-'U')  . LIST ONLY UNLOADED FILES?          J         ML2125            .  NO, CONTINUE          LA        A0,MFDESC,X4      .  YES, GET DESCRIPTOR BITS          TEP,U     A0,MMUNLD         . IS FILE UNLOADED?          J         ML213             .  YES, CONTINUE          J         ML400             .  NO, SKIP THIS FILEML2125          TOP       A15,(1*/('Z'-'D')) . LIST ONLY DISABLED FILES?          J         ML213             .  NO, CONTINUE          LA        A0,MFDISF,X4      .  YES, GET DISABLE FLAGS          TOP,U     A0,MMDISA         . IS GENERAL-DISABLE SET?          J         ML400             .  NO, SKIP THIS FILE          TOP,U     A0,MMDISH         . IS HARDWARE-DISABLE          TEP,U     A0,MMDISS         .  OR SECURE-DISABLE SET?          J         ML213             .   YES, LIST THIS FILE          TEP,U     A0,MMDISD         . IS DATA-DISABLE SET?          J         ML213             .  YES, LIST FILE          J         ML400             .  NO, DO NOT LIST..         DETERMINE IF SORT OF MASS-STORAGE FILE(S) IS REQUIRED.ML213          TOP       A15,(1*/('Z'-'A')) . SORT BY ACCOUNT NUMBER,          TEP       A15,(1*/('Z'-'G')) . OR BY OWNER GROUPS?          J         ML2131            .  YES, SORT REQUIRED          TOP       A15,(1*/('Z'-'B')) . SORT BY FILE SIZE?          J         ML300             .  NO, SORT NOT REQUIRED..         RELEASE INFO ON CATALOGED MASS STORAGE FILE TO SORT.ML2131          DL        A0,MFQUAL,X4      . QUALIFIER          DL        A2,MFFILE,X4      . FILE NAME          DL        A4,MFACCT,X4      . ACCOUNT NUMBER          DL        A6,MFPROJ,X4      . PROJECT-ID          DS        A0,RECORD+SMQUAL  .  STORE IN SORT RECORD          DS        A2,RECORD+SMFILE  .          DS        A4,RECORD+SMACCT  .          DS        A6,RECORD+SMPROJ  .          LA        A0,MFCYCL,X4      . ABS F-CYCLE          ON        M$MHFSHARED>0     . THIS CODE IS SHARED-ONLY          LA        A1,MFHDBF+MFHHID  . GET INPUT HOST-ID          TG,U      A1,1              . TEST FOR LEGAL RANGE, 1-4          TG,U      A1,4+1            .          J         ML2132            .  NOT IN RANGE, SKIP          TZ        MFDRID,X4         .  IN RANGE, IS THIS FILE FROM SHARED DIR?          LA,U      A1,077            .  YES, USE 077 AS CODE FOR FILE          LSSL      A0,24             . CYCLE TO A0 UPPER          DSC       A0,24             . HOST-ID, CYCLE TO A0 LOWERML2132          OFF       M$MHFSHARED>0     . END OF SHARED-ONLY CODE          LA        A1,MFMNEM,X4      . ASSIGN MNEMONIC          LA        A2,MFASGS,X4      . ASSIGN COUNT          LA        A3,MFDISF,X4      . DISABLE FLAGS          LA        A4,MFINHI,X4      . INHIBIT FLAGS          LA        A5,MFDESC,X4      . DESCRIPTOR BITS          LA        A6,MFPCHR,X4      . PCHAR-FLAGS          SA        A0,RECORD+SMHSCY  .  STORE IN SORT RECORD          SA        A1,RECORD+SMMNEM  .          SA        A2,RECORD+SMASGS  .          SA        A3,RECORD+SMDISF  .          SA        A4,RECORD+SMINHI  .          SA        A5,RECORD+SMDESC  .          SA        A6,RECORD+SMPCHR  .          LA        A0,MFMXGR,X4      . MAX GRANULES          LA        A1,MFNOTR,X4      . TRACK COUNT          LA        A2,MFCATT,X4      . CATALOG DATE/TIME          LA        A3,MFBKUT,X4      . BACKUP DATE/TIME          LA        A4,MFREFT,X4      . LAST REF DATE/TIME          LA        A5,MFPKID,X4      . FIRST PACK-ID IF REMOVABLE          LA        A6,MFFILF,X4      . FILE-FLAGS          SA        A0,RECORD+SMMXGR  .  STORE IN SORT RECORD          SA        A1,RECORD+SMNOTR  .          SA        A2,RECORD+SMCATT  .          SA        A3,RECORD+SMBKUT  .          SA        A4,RECORD+SMREFT  .          SA        A5,RECORD+SMPKID  .          SA        A6,RECORD+SMFILF  .          SA        A10,RECORD+SMTYPE . STORE FILE TYPE          LA        A0,MFRKEY,X4      . READ KEY          LA        A1,MFWKEY,X4      . WRITE KEY          LA,U      A2,0              . INIT KEY-FLAG = 0          DTE       A0,('            ') . ARE BOTH KEYS = SPACES?          LA,U      A2,1              .   YES, SET KEY-FLAG = 1 (NO KEYS)          SA        A2,RECORD+SMKEYF  . STORE IN SORT RECORD          TOP,U     A15,1*/('Z'-'K')  . ARE KEYS TO BE INCLUDED IN REPORT?          J         ML2133            .  NO, SKIP          SA        A0,RECORD+SMRKEY  .  YES, STORE IN SORT RECORD          SA        A1,RECORD+SMWKEY  .ML2133          TOP       A15,(1*/('Z'-'G')) . SORT BY ACCOUNT OWNER GROUP?          J         ML2138            .  NO, SKIP          DL        A0,MFACCT,X4      .  YES, GET ACCOUNT NUMBER          LA        A2,(2,0)          . INIT ACTLST POINTER          LR        R1,ACLSLN         . LENGTH OF ACTLST          JGD       R1,$+1            . DECREMENT FOR LOOPML2134          DTE       A0,ACTLST,*A2     . DOES FILE'S ACCOUNT MATCH THIS ENTRY?          J         $+2               .  NO, CONTINUE          J         ML2136            .  YES, SKIP          JGD       R1,ML2134         . BACK FOR NEXT ENTRY          LA,U      A2,2              . NO FIND, ASSUME MATCH OF 1ST ENTRYML2136          ANA,U     A2,2              . A2 = POINTER TO ACTLST ENTRY          SSL       A2,1              . DIV BY TWO, USE AS PTR TO ACTPTR TABLE          LA,H1     A0,ACTPTR,A2      . GET GROUP-ID NUMBER          SA        A0,RECORD+SCGRP   . STORE IN SORT RECORD          J         ML214             .  GO RELEASE TO SORTML2138          SZ        RECORD+SCGRP      . ZERO GROUP-ID, NOT USED FOR OTHER SORTS          TOP       A15,(1*/('Z'-'B')) . SORT BY FILE SIZE?          J         ML214             .  NO, SKIP          LA        A0,MFNOTR,X4      .  YES, GET TRACK SIZE OF FILE          AU        A0,TOTTRK         . ADD TO TRACK COUNT OF ALL M/S FILES          SA        A1,TOTTRK         .  AND REPLACE          LA        A1,MFDESC,X4      . DESCRIPTOR BITS          TEP,U     A1,MMUNLD         . IS FILE UNLOADED?          J         ML2139            .  YES, SKIP          AU        A0,LODTRK         .  NO, UPDATE TOTAL ONLINE TRACK COUNT          SA        A1,LODTRK         .ML2139          TLE       A0,TLIMIT         . IS THIS FILE LARGE ENOUGH TO BE LISTED?          J         ML2142            .  NO, DO NOT LIST FILE          LA        A1,MFMXGR,X4      .  YES, GET MAX GRANULES          DL        A2,MFACCT,X4      .   AND ACCOUNT NUMBER          SNA       A0,RECORD+SBNOTR  . STORE NEG TRK SIZE, LIST BY DECR VALUE          SNA       A1,RECORD+SBMXGR  . STORE NEG MAX GRANULES          DS        A2,RECORD+SBACCT  . STORE ACCOUNT NUMBER, DIFF PART OF RECML214          SZ        RECORD+SCFLAG     . ZERO COMMON FLAG - IND M/S FILE          R$REL     (SCSRLN,RECORD)   . RELEASE RECORD TO SORTML2142          J         ML400             . ALL DONE WITH THIS FILE FOR NOW/..         CATALOGED TAPE FILE.ML215          TOP,U     A15,1*/('Z'-'T')  . LIST CATALOGED TAPES?          J         ML400             .  NO, DO NOT LIST THIS FILE          LA        A11,MFTPCT,X4     .  YES, GET REEL COUNT OF FILE          JGD       A11,ML220         . DECREMENT FOR LOOP AND SKIP          J         ML400             .  DON'T LIST IF FILE HAS NO REELS..         RELEASE A SORT RECORD FOR EACH REEL OF FILE.ML220          LA        A0,MFCATT,X4      . MMDDYYTTTTTT: (TDATE$, ADJ FOR SORT SEQ)          DSL       A0,24             . --------MMDD:YYTTTTTT          LSSL      A0,18             . --MMDD------:YYTTTTTT          LDSL      A0,6              . MMDD------YY:TTTTTT          LSSC      A0,12             . ------YYMMDD:TTTTTT          LDSL      A0,18             . YYMMDDTTTTTT: (CAT DATE/TIME FOR SORT)          DL        A1,MFQUAL,X4      . QUALIFIER          DL        A3,MFFILE,X4      . FILE NAME          DL        A5,MFACCT,X4      . ACCOUNT NUMBER          DL        A7,MFPROJ,X4      . PROJECT-ID          SA        A0,RECORD+SLCATT  .  STORE IN SORT RECORD          DS        A1,RECORD+SLQUAL  .          DS        A3,RECORD+SLFILE  .          DS        A5,RECORD+SLACCT  .          DS        A7,RECORD+SLPROJ  .          LA        A0,MFCYCL,X4      . ABS F-CYCLE          LA        A1,MFTPCT,X4      . REEL COUNT          LA        A2,MFDESC,X4      . DESCRIPTOR BITS          LA        A3,MFDISF,X4      . DISABLE FLAGS          LA        A4,MFINHI,X4      . INHIBIT BITS          LA        A5,MFTPFM,X4      . FORMAT          LA        A6,MFTPDN,X4      . DENSITY          SA        A0,RECORD+SLCYCL  .  STORE IN SORT RECORD          SA        A1,RECORD+SLTPCT  .          SA        A2,RECORD+SLDESC  .          SA        A3,RECORD+SLDISF  .          SA        A5,RECORD+SLTPFM  .          SA        A6,RECORD+SLTPDN  .          LA        A0,MFRKEY,X4      . READ KEY          LA        A1,MFWKEY,X4      . WRITE KEY          AND,U     A4,-(1*/2)        . ZERO INHIBIT-BIT 2, USE AS KEY FLAG          DTE       A0,('            ') . ARE BOTH KEYS = SPACES?          OR,U      A4,1*/2           .  NO, SET INHIBIT-BIT 1          LA        A0,MFREFT,X4      . LAST REF DATE/TIME          LA        A1,MFBKUT,X4      . BACKUP DATE/TIME          LA        A2,MFBUR1,X4      . FIRST REEL OF BACKUP          LA        A3,MFSTFP,X4      . STARTING FILE POS ON BACKUP          LA        A4,MFBUNO,X4      . NUMBER OF BACKUP REELS          SA        A0,RECORD+SLREFT  .  STORE IN SORT RECORD          SA        A1,RECORD+SLBKUT  .          SA        A2,RECORD+SLBUR1  .          SA        A3,RECORD+SLSTFP  .          SA        A4,RECORD+SLBUNO  .          SA        A5,RECORD+SLINHI  . STORE ADJUSTED INHIBIT-BITS          SA        A10,RECORD+SCFLAG . SET COMMON FLAG = 1 (TAPE FILE)          SZ        RECORD+SCGRP      . ZERO GROUP INDEX - NOT USED FOR TAPES          LA        A0,MFTPR1,X4      . FIRST REEL-ID OF FILE          LA,U      A8,1              . REEL INDEX = 1          LMJ       X10,ML290         . OUTPUT RECORD TO SORT          JGD       A11,ML230         . DECR REEL CT AND SKIP IF MORE TO GO          J         ML400             .  NONE LEFT, FINISHED WITH FILEML230          LA        A0,MFTPR2,X4      . SECOND REEL-ID OF FILE          LA,U      A8,2              . REEL INDEX = 2          LMJ       X10,ML290         . OUTPUT RECORD TO SORT          JGD       A11,ML240         . DECR REEL CT AND SKIP IF MORE          J         ML400             .  NO MORE REELS IN FILEML240          D$BI      RDMFD  ER100,ER100 . READ THE NEXT REEL TABLE FROM THE MFDDB          TNZ,H1    0,A1              . IS H1 OF WORD ZERO = 0?          J         ML245             .  YES, THIS IS A REEL TABLE          JGD       R4,ML205          .  NO, STOP HERE AND START NEXT FILE          J         ML410             . LAST RECORD IN MFDDB ENCOUNTEREDML245          LXM,U     X5,2,A1           . X5 = ADDR OF REEL ENTRIES IN TABLE          LR,U      R5,24             . UP TO 25 REELS/TABLEML250          AA,U      A8,1              . INCREMENT REEL INDEX          LA        A0,,*X5           . GET NEXT REEL-ID FROM TABLE          LMJ       X10,ML290         . OUTPUT NEXT RECORD TO SORT          JGD       A11,ML260         . DECR REMAINING REEL CT, SKIP IF MORE          J         ML400             .  NO MORE REELS IN FILEML260          JGD       R5,ML250          . LOOP BACK UNTIL REEL TABLE EMPTY          J         ML240             . GO READ NEXT TABLE..ML290          SA        A0,RECORD+SLREEL  . STORE REEL-ID          SA        A8,RECORD+SLTPNO  .  AND REEL INDEX (REM OF RECORD SET UP)          R$REL     (SCSRLN,RECORD)   . RELEASE TO SORT          J         0,X10             . RETURN FOR MORE/..         PROCESS MASS STORAGE FILE - LIST DIRECTLY, NO SORT.ML300          JGD       R6,ML350          . DECREMENT LINE COUNTER, SKIP IF > 0          OUTPUT    (0777700+H1L,HDG1) . WRITE FIRST HEADING LINE - TOP OF PAGE          E$DECF    6,A12             . EDIT PAGE NUMBER          LA        A0,LINE           . GET EDITED VALUE          SA        A0,HDG2+20        . AND STORE IN 2ND HEADING LINE          E$CLEAR                     . CLEAR EDIT          OUTPUT    (0100+H2L,HDG2)   . PRINT 2ND HEADING LINE          OUTPUT    (0100+H3DL,HDG3D) .  AND 3RD HEADING LINE          TOP       A15,(1*/('Z'-'K')) . ARE FILE KEYS INCL IN LISTING?          J         ML340             .  NO, SKIP          LA,U      A0,' '            .  YES, BLANK OUT LAST HDG CHAR          SA,S6     A0,HDG4D+H4DL-3   .          OUTPUT    (0100+H4DL-2,HDG4D) . PRINT ABBREVIATED 4TH LINE          OUTPUT    (0100+H5DL-2,HDG5D) .  AND ABBREV 5TH LINE          J         ML345             .ML340          OUTPUT    (0100+H4DL,HDG4D) . OUTPUT NORMAL 4TH HEADING LINE          OUTPUT    (0100+H5DL,HDG5D) .  AND 5TH HEADING LINEML345          OUTPUT    (0100,$)          . SKIP A LINE FOR READABILITY          AA,U      A12,1             . INCREMENT PAGE COUNT FOR REPORT          LR,U      R6,M$TLP-14       . RESET LINE COUNTER          INC       PAGECT            . INCREMENT TOTAL PAGE COUNT          NOP                         .ML350          ON        M$MHFSHARED>0     . THIS CODE FOR SHARED-ONLY          LA        A1,MFHDBF+MFHHID  . GET INPUT HOST-ID          LA,U      A0,'?'            . CODE FOR UNKNOWN HOST          TG,U      A1,1              . TEST FOR LEGAL RANGE, 1-4          TG,U      A1,4+1            .          J         ML360             .  NOT IN RANGE, SKIP          LA,U      A0,'A'-1,A1       . IN RANGE, LOAD CHAR CODE (A-D)          TZ        MFDRID,X4         . IS THIS A SHARED FILE?          LA,U      A0,'S'            .  YES, LETTER 'S' IS FOR SHAREDML360          E$CHAR                      . EDIT CODE FOR HOST-ID/DIR          E$CHAR    ' '               . SKIP ONE SPACE FOR READABILITY          OFF       M$MHFSHARED>0     . END OF SHARED-ONLY CODE          E$COPY    12,MFQUAL,X4      . EDIT QUALIFIER          E$CHAR    ' '               .          E$COPY    12,MFFILE,X4      . FILE NAME          E$DECF    4,MFCYCL,X4       . ABS F-CYCLE          E$CHAR    ' '               .          LA,U      A0,' '            . ASSUME ORIGINAL ACCOUNT NUMBER          LA        A1,MFDESC,X4      . DESCRIPTOR BITS          TEP,U     A1,1              . WAS OWNER ACCT DIFF FROM ORIGINAL?          LA,U      A0,'*'            .  YES, INDICATE OWNER ACCT WAS SUB          E$CHAR                      . APPEND FLAG CHAR TO ACCOUNT          E$COPY    12,MFACCT,X4      . EDIT ACCOUNT NUMBER FOR FILE          E$CHAR    ' '               .          E$COPY    12,MFPROJ,X4      . PROJECT-ID          E$CHAR    ' '               .          LA,U      A0,'K'            . FLAG FOR KEYED FILE          LA        A1,MFRKEY,X4      . GET KEYS          LA        A2,MFWKEY,X4      .  IN A1-A2          DTE       A1,('            ') . DOES FILE HAVE KEY(S)?          LMJ       X11,ECHAR$        .  YES, EDIT FLAG INTO OUTPUT          LA        A6,MFDISF,X4      . DISABLE FLAGS          LMJ       X10,OPDISF        . EDIT APPROPRIATE LETTER(S) INTO OUTPUT          LA        A6,MFINHI,X4      . INHIBIT BITS          OPT       'V',MMVOPT        . 'V' OPT IS ONLY FOR DISC          LMJ       X10,OPINHI        . OTHERS ARE SAME AS TAPE - USE SUB          LA        A6,MFFILF,X4      . FILE FLAGS          OPT       'S',MMSTRT        . 'S' FLAG IF APPROPRIATE (STORE THROUGH)          LA        A9,MFDESC,X4      . DESCRIPTOR BITS          LA,U      A0,'U'            . UNLOAD FLAG          TEP,U     A9,MMUNLD         . IS FILE UNLOADED?          LMJ       X11,ECHAR$        .  YES, EDIT FLAG INTO OUTPUT          E$COL     62+2*(M$MHFSHARED>0) . MOVE OVER A LITTLE          E$COPY    4,MFMNEM,X4       . EDIT ASSIGN MNEMONIC          LA        A6,MFPCHR,X4      . PCHAR-FLAGS          LA,U      A4,'T'            . ASSUME TRACK GRANULATITY          TEP,U     A6,MMPOGR         . UNLESS POS-BIT SET          LA,U      A4,'P'            .  THEN INDICATE POS GRANULARITY          E$DECF    8-(M$MHFSHARED>0),MFMXGR,X4 . EDIT MAX GRANULES          E$CHAR    A4,,W             . INDICATE (T)RACKS OR (P)OSITIONS          E$DECF    8-(M$MHFSHARED>0),MFNOTR,X4 . NUMBER OF TRACKS IN USE          E$DECF    7,MFASGS,X4       . ASSIGN COUNT          LA        A0,MFCATT,X4      . CATALOG DATE/TIME          LMJ       X10,ETIME         . EDIT USING COMMON SUBROUTINE          LA        A0,MFREFT,X4      . LAST REFERENCE DATE/TIME          LMJ       X10,ETIME         . EDIT USING COMMON SUBROUTINE          TOP       A15,(1*/('Z'-'K')) . ARE FILE KEYS TO BE DISPLAYED?          J         ML382             .  NO, SKIP          E$SKIP    1                 .  YES          E$COPY    6,MFRKEY,X4       . EDIT READ KEY          E$SKIP    1                 .          E$COPY    6,MFWKEY,X4       .  AND WRITE KEY          J         ML390             . ALL DONE - WRITE EDITED OUTPUTML382          TOP,U     A9,MMBKUP         . HAS FILE BEEN BACKED UP BY FAS?          J         ML384             .  NO, SKIP          LA        A0,MFBKUT,X4      .  YES, GET BACKUP DATE/TIME          LMJ       X10,ETIME         . EDIT DATE/TIME (USE DATE ONLY)ML384          E$COL     125               . ALIGN TO CORRECT COLUMN          E$CHAR    ' '               .          LA,U      A0,('      ')     . ASSUME NO PACKID          TNE,U     A10,MMREMD        . IS FILE CAT ON R-DISC?          LA,U      A0,MFPKID,X4      .  YES, LOAD FIRST PACK-ID FROM FILE REC          E$COPY    6                 . EDIT INTO IMAGEML390          OUTPUT    (0126,LINE)       . WRITE EDITED OUTPUT LINE          E$CLEAR                     .  AND CLEAR EDIT..         FINISHED WITH CURRENT FILE - LOOP BACK FOR MORE.ML400          JGD       R4,ML200          . BACK FOR NEXT FILE, R4 = REM COUNT          TOP,U     A15,1*/('Z'-'T')  . INCLUDE TAPE FILES,          TEP       A15,(1*/('Z'-'A')) .  OR SORT BY ACCOUNT NUMBER?          J         ML410             .   YES, SORT REQUIRED          TOP       A15,(1*/('Z'-'G')) . SORT BY ACCOUNT GROUP,          TEP       A15,(1*/('Z'-'B')) .  OR BY FILE SIZE?          J         ML410             .   YES, SORT REQUIRED          J         ML700             . NO SORT REQ'D IF NONE OF THESE OPTS SETML410..         FINISHED WITH INPUT PHASE - SORT FILE INFO.ML410          R$SORT                      . TELL SORT TO DO IT'S THING..         RETURN THE FIRST ENTRY FROM SORT.ML420          R$RET     ML700             . GET FIRST ENTRY, END = ML700          LX        X4,A0             . X4 = ADDRESS OF RETURNED ENTRY          TZ        SCFLAG,X4         . IS THIS A MASS STORAGE FILE?          J         ML500             .  NO, MUST BE TAPE/..         PRODUCE LIST OF M/S FILES SORTED BY ACCT, GROUP, OR SIZE.ML430          DSL       A7,72             . ZERO TOTAL AND ONLINE TRACK COUNTML435          JGD       R6,ML450          . DECR LINE CT, SKIP AHEAD IF > 0          TOP       A15,(1*/('Z'-'G')) . IS OUTPUT SORTED BY OWNER GROUP??          J         ML436             .  NO, SKIP          DL        A0,('            ') .  YES, INIT OWNER NAME IN HDG TO SPACES          DS        A0,HDG1+1         .          DS        A0,HDG1+3         .          LA        A0,SCGRP,X4       . GROUP INDEX          SA        A0,CURGRP         . STORE AS CURRENT INDEX          LA        A1,(1,0)          . POINTER TO ACTLST          LR        R1,ACLSLN         . ENTRY COUNT OF ACTLST          SE,H1     A0,ACTPTR,*A1     . SEARCH FOR CORRECT GROUP INDEX          ER        ERR$              .  SOMETHING WRONG IF NO FIND HERE          LA,H2     A0,ACTPTR-1,A1    . POINTER TO SYMBOLIC GROUP NAME          LXI,U     A0,1              . INCREMENT FOR TRANSFER          LA        A1,(1,HDG1+1)     . WHERE TO PLACE IN HEADING          LR,S1     R1,,A0            . WORD COUNT OF GROUP NAME          BT        A1,,*A0           . MOVE TO HEADING          LA,U      A0,'*'            . GROUP INDICATOR CHAR          SA,S1     A0,HDG1+1         . STORE OVER S1, PREV USED FOR WORD CTML436          OUTPUT    (0777700+H1L,HDG1) . OUTPUT 1ST LINE OF HEADING          E$DECF    6,A12             . EDIT PAGE NUMBER          LA        A0,LINE           . GET SYMBOLIC NUMBER          SA        A0,HDG2+20        . STORE IN HEADING BUFFER          E$CLEAR                     . CLEAR EDIT          OUTPUT    (0100+H2L,HDG2)   . OUTPUT 2ND LINE OF HEADING          TOP       A15,(1*/('Z'-'G')) .  IS OUTPUT SORTED BY OWNER GROUP?          J         ML437             .  NO, SKIP          OUTPUT    (0100+H3DGL,HDG3DG) .  YES, IND SORT BY GROUP FIRST          J         ML438             .ML437          TEP       A15,(1*/('Z'-'B')) . SORT BY FILE SIZE?          J         ML442             .  YES, SKIP          OUTPUT    (0100+H3DAL,HDG3DA) .  NO, IND SORT BY ACCOUNT(6)ML438          TOP       A15,(1*/('Z'-'K')) . ARE FILE KEY(S) INCLUDED IN OUTPUT?          J         ML440             .  NO, SKIP          LA,U      A0,' '            .  YES, BLANK OUT LAST HDG CHAR          SA,S6     A0,HDG4D+H4DL-3   .          OUTPUT    (0100+H4DL-2,HDG4D) . PRINT ABBREVIATED 4TH LINE          OUTPUT    (0100+H5DL-2,HDG5D) .  AND ABBREV 5TH LINE          J         ML445             .ML440          OUTPUT    (0100+H4DL,HDG4D) . OUTPUT NORMAL 4TH HEADING LINE          OUTPUT    (0100+H5DL,HDG5D) .  AND 5TH HEADING LINE          J         ML445             .ML442          OUTPUT    (0100+H3DBL,HDG3DB) . IND OUTPUT SORTED BY FILE SIZE, MAX          OUTPUT    (0100+H4DBL,HDG4DB) . OUTPUT 4TH HEADING W/SIZE STATS          OUTPUT    (0100+H5DBL,HDG5DB) .  AND 5TH HEADINGML445          OUTPUT    (0100,$)          . SKIP A LINE FOR READABILITY          AA,U      A12,1             . INCREMENT PAGE COUNT FOR THIS REPORT          LR,U      R6,M$TLP-14       . RESET LINE COUNTER          INC       PAGECT            . INCREMENT TOTAL PAGE COUNT          NOP                         .ML450          LA        A10,SMTYPE,X4     . GET FILE TYPE          LA        A13,SMACCT,X4     .  AND 1ST 6 CHARS OF ACCOUNT NBR          ON        M$MHFSHARED>0     . THIS CODE FOR SHARED-ONLY          LA        A1,SMHSCY,X4      . GET HOSTID, CYCLE          SSL       A1,12             . HOSTID ONLY TO A1 LOWER          LA,U      A0,'A'-1,A1       . LOAD CODE FOR HOST (A-D)          TG,U      A1,1              . TEST FOR VALID RANGE, 1-4          TG,U      A1,4+1            .          LA,U      A0,'?'            . NOT IN RANGE, DON'T KNOW WHAT THIS IS          TNE,U     A1,077            .  UNLESS SHARED FILE          LA,U      A0,'S'            .   IN WHICH CASE, USE LETTER 'S'          E$CHAR                      . EDIT HOSTID/DIR CODE          E$CHAR    ' '               . SKIP A SPACE FOR READABILITY          OFF       M$MHFSHARED>0     . END OF SHARED-ONLY CODE          E$COPY    12,SMQUAL,X4      . EDIT QUALIFIER          E$CHAR    ' '               .          E$COPY    12,SMFILE,X4      . FILE NAME          LA        A0,SMHSCY,X4      . GET HOSTID, CYCLE          LSSL      A0,24             . SHIFT OFF HOSTID          SSL       A0,24             . CYCLE ONLY TO A0 LOWER          E$DECF    4                 . EDIT ABS F-CYCLE INTO OUTPUT          E$CHAR    ' '               .          LA,U      A0,' '            . ASSUME ACCOUNT NUMBER = ORIGINAL          LA        A1,SMDESC,X4      . DESCRIPTOR BITS + ACCT SUB INDICATOR          TEP,U     A1,1              . WAS OWNER ACCT DIFF FROM ORIGINAL ACCT?          LA,U      A0,'*'            .  YES, INDICATE SUBSTITUTION WAS DONE          E$CHAR                      . EDIT FLAG CHAR INTO OUTPUT          LA,U      A0,SMACCT,X4      . ADDRESS OF ACCOUNT NUMBER          TEP       A15,(1*/('Z'-'B')) . UNLESS SORT BY FILE SIZE,          LA,U      A0,SBACCT,X4      .  IN WHICH CASE USE A DIFFERENT LOCATION          E$COPY    12                . EDIT ACCOUNT NUMBER          E$CHAR    ' '               .          E$COPY    12,SMPROJ,X4      . PROJECT-ID          E$CHAR    ' '               .          LA,U      A0,'K'            . FLAG: FILE HAS KEYS          TZ        SMKEYF,X4         . WAS KEY FLAG SET?          LMJ       X11,ECHAR$        .  YES, EDIT INTO OUTPUT          LA        A6,SMDISF,X4      . DISABLE FLAGS          LMJ       X10,OPDISF        . CALL SUBROUTINE TO EDIT          LA        A6,SMINHI,X4      . INHIBIT BITS          OPT       'V',MMVOPT        . EDIT 'V' IF V-OPTION (M/S ONLY)          LMJ       X10,OPINHI        . CALL SUBROUTINE TO EDIT REM OPTS          LA        A6,SMFILF,X4      . FILE FLAGS          OPT       'S',MMSTRT        . INDICATE 'S' IF STORE-THROUGH SET          LA        A0,SMNOTR,X4      . TRACK COUNT OF FILE          TEP       A15,(1*/('Z'-'B')) . SORT BY FILE SIZE?          LNA       A0,SBNOTR,X4      .  YES, GET FROM A DIFFERENT PLACE          JP        A0,$+2            . SKIP IF SIZE < 131K          AA        A0,(0777777)      .  IF NOT, ADJUST FOR OVERFLOW          LA        A9,SMDESC,X4      . DESCRIPTOR BITS          TOP,U     A9,MMUNLD         . IS FILE UNLOADED?          AA        A7,A0             .  NO, UPDATE TOTAL ONLINE TRACK CT          AA        A8,A0             . UPDATE TOTAL TRACK COUNT          LA,U      A0,'U'            . UNLOAD INDICATOR CHAR          TEP,U     A9,MMUNLD         . IS FILE UNLOADED?          LMJ       X11,ECHAR$        .  YES, EDIT INTO OUTPUT          E$COL     62+2*(M$MHFSHARED>0) . LINE THINGS UP          E$COPY    4,SMMNEM,X4       . ASSIGN MNEMONIC          LA        A6,SMPCHR,X4      . PCHAR-FLAGS          LA,U      A4,'T'            . INDICATE TRACK GRANULARITY          TEP,U     A6,MMPOGR         . POSITION GRANULARITY?          LA,U      A4,'P'            .  YES, USE DIFFERENT INDICATOR          TEP       A15,(1*/('Z'-'B')) . SORT BY FILE SIZE?          J         ML460             .  YES, SKIP          E$DECF    8-(M$MHFSHARED>0),SMMXGR,X4 . EDIT MAX GRANULES          E$CHAR    A4,,W             . GRANULARITY CHARACTER P/T          E$DECF    8-(M$MHFSHARED>0),SMNOTR,X4 . TRACK COUNT          J         ML462             .ML460          LNA       A0,SBMXGR,X4      . INVERT MAX GRAN - ORIG STORED NEG          JP        A0,$+2            . SKIP IF SIZE < 131K          AA        A0,(0777777)      .  IF NOT, ADJUST FOR OVERFLOW          E$DECF    8-(M$MHFSHARED>0) .  AND EDIT INTO OUTPUT          E$CHAR    A4,,W             . GRANULARITY CHARACTER P/T          LNA       A0,SBNOTR,X4      . SAME FOR TRACK COUNT          JP        A0,$+2            . SKIP IF SIZE < 131K          AA        A0,(0777777)      .  IF NOT, ADJUST FOR OVERFLOW          E$DECF    8-(M$MHFSHARED>0) .  AND EDIT INTO OUTPUTML462          E$DECF    7,SMASGS,X4       . EDIT ASSIGN COUNT          LA        A0,SMCATT,X4      . CATALOG DATE/TIME          LMJ       X10,ETIME         . CALL ETIME TO EDIT          LA        A0,SMREFT,X4      . LAST REF DATE/TIME          LMJ       X10,ETIME         . CALL ETIME TO EDIT          TEP       A15,(1*/('Z'-'B')) . SORT BY FILE SIZE?          J         ML485             .  YES, SKIP          TOP       A15,(1*/('Z'-'K')) . LIST KEYS IN OUTPUT?          J         ML482             .  NO, SKIP          E$SKIP    1                 .          E$COPY    6,SMRKEY,X4       . EDIT READ KEY          E$SKIP    1                 .          E$COPY    6,SMWKEY,X4       .  AND WRITE KEY          J         ML490             .ML482          TOP,U     A9,MMBKUP         . WAS FILE BACKED UP BY FAS?          J         ML484             .  NO, SKIP          LA        A0,SMBKUT,X4      .  YES, GET TIME OF LAST SAVE          LMJ       X10,ETIME         . CALL ETIME (DATE ONLY)ML484          E$COL     125               . MOVE OVER          E$CHAR    ' '               .          LA,U      A0,('      ')     . ASSUME NO PACK-ID          TNE,U     A10,MMREMD        . WAS FILE CAT ON R-DISC?          LA,U      A0,SMPKID,X4      .  YES, LOAD FIRST PACK-ID          E$COPY    6                 . EDIT INTO OUTPUT          J         ML490             .ML485          LA        A4,A8             . A4 = CUM TOTAL TRACKS          LA        A6,TOTTRK         . A6 = TOTAL FOR ALL FILES          LMJ       X10,EPCT          . EDIT PCT OF TOTAL TO THIS POINT          LA        A4,A7             . A4 = CUM ONLINE TRACKS          LA        A6,LODTRK         . A6 = TOTAL ONLINE FOR ALL FILES          LMJ       X10,EPCT          . EDIT PCT OF ONLINE TO THIS POINTML490          OUTPUT    (0126,LINE)       . WRITE EDITED INFO FOR CURRENT FILE          E$CLEAR                     . CLEAR EDIT          R$RET     ML492             . GET NEXT RECORD FROM SORT, EOF=ML492          LX        X4,A0             . X4 = RECORD ADDRESS          TZ        SCFLAG,X4         . IS THIS A MASS STORAGE FILE?          J         ML495             .  NO, CLOSE OUT M/S SECTION OF REPORT          TOP       A15,(1*/('Z'-'G')) .  YES, SORT BY OWNER GROUP?          J         ML491             .   NO, SKIP          LA        A0,CURGRP         .   YES, GET CURRENT GROUP INDEX          TNE       A0,SCGRP,X4       . SAME INDEX FOR NEXT FILE?          J         ML435             .  YES, BACK TO START FOR THIS ONE          J         ML495             .  NO, CLOSE OUT PREVIOUS GROUPML491          TOP       A15,(1*/('Z'-'B')) . SORT BY FILE SIZE, OR          TNE       A13,SMACCT,X4     .  SAME ACCOUNT NUMBER AS PREV FILE?          J         ML435             .   YES, BACK TO START FOR THIS FILE          J         ML495             .   NO, BEGIN NEW ACCOUNT SECTIONML492          SZ        CONFLG            . SORT RET EOF - ZERO CONTINUATION FLAGML495          TOP       A15,(1*/('Z'-'E')) . EJECT A PAGE BETWEEN GROUPS, OR          TEP       A15,(1*/('Z'-'G')) .  SORT BY OWNER GROUP?          J         ML496             .    YES, SKIP          LA        A4,R6             .    NO, GET REM LINE COUNT THIS PAGE          TLE,U     A4,6              . FEWER THAN 7 LINES REMAINING?          J         ML497             .  YES, SKIP - START ON NEW PAGE          OUTPUT    (0100,$)          .  NO, SKIP A LINE FOR READABILITY          JGD       R6,ML498          . DECREMENT LINE COUNT AND SKIP AHEADML496          E$MSG     TOTMSG            . '** TOTAL TRACKS: '          E$DECV    A8                . TOTAL TRACKS THIS ACCOUNT/GROUP          E$MSGR                      . '  ( '          E$DECV    A7                . TOTAL ONLINE TRACKS THIS ACCOUNT/GROUP          E$MSGR                      . ' ONLINE)'          OUTPUT    (0200+TML+2,LINE) . PRINT TRACK TOTALS FOR ACCT OR GROUP          E$CLEAR                     . CLEAR EDITML497          LR,U      R6,0              . SET LINE CT = 0 (FORCE PAGE EJECT)ML498          TNZ       CONFLG            . DID SORT RETURN EOF?          J         ML700             .  YES, FINISHED WITH REPORT          TNZ       SCFLAG,X4         .  NO, IS NEXT FILE ON MASS STORAGE?          J         ML430             .   YES, BACK TO TOP OF M/S SECTION          J         ML500             .   NO, BEGIN PROCESSING TAPE LIST/..         PRINT LIST OF REELS ON CATALOGED TAPES.ML500          LR,U      R6,0              . INIT LINE COUNT = 0          LA,U      A0,'2'            . REPORT ID          SA,S1     A0,HDG1           . STORE IN 1ST HEADING LINE          DL        A0,('            ') . SPACEFILL WORDS 1-5 OF          DS        A0,HDG1+1         .   FIRST HEADING LINE          DS        A0,HDG1+3         .   (OVERLAY GROUP NAME, IF USED)          LA        A0,(' TAPE ')     . INDICATE TAPE REPORT          SA        A0,HDG1+13        .  UPDATE HEADING LINEML510          JGD       R6,ML550          . DECR LINE COUNT, LOOP AHEAD IF > 0          OUTPUT    (0777700+H1L,HDG1) . WRITE 1ST HEADING LINE          E$DECF    6,A12             . EDIT PAGE NUMBER          LA        A0,LINE           . GET SYMBOLIC PAGE NUMBER          SA        A0,HDG2+20        . STORE IN 2ND HEADING LINE          E$CLEAR                     . CLEAR EDIT          OUTPUT    (0100+H2L,HDG2)   . WRITE 2ND HEADING LINE          OUTPUT    (0100+H3TL,HDG3T) .  HEADING LINE 3          OUTPUT    (0100+H4TL,HDG4T) .  HEADING LINE 4          OUTPUT    (0100+H5TL,HDG5T) .  HEADING LINE 5          OUTPUT    (0100,$)          . SKIP A LINE FOR READABILITY          AA,U      A12,1             . INCREMENT PAGE COUNT FOR THIS SECTION          LR,U      R6,M$TLP-14       . RESET LINE COUNTER          INC       PAGECT            . INCREMENT TOTAL PAGE COUNT          NOP                         .ML550          E$COPY    12,SLQUAL,X4      . EDIT QUALIFIER          E$CHAR    ' '               .          E$COPY    12,SLFILE,X4      . FILE NAME          E$DECF    4,SLCYCL,X4       . ABS F-CYCLE          E$CHAR    ' '               .          LA,U      A0,' '            . ASSUME ACCOUNT UNCHANGED          LA        A1,SLDESC,X4      . DESCRIPTOR BITS + ACCT-CHANGED FLAG          TEP,U     A1,1              . WAS OWNER ACCT DIFF FROM ORIG ACCT?          LA,U      A0,'*'            .  YES, CHANGE INDICATOR CHAR          E$CHAR                      . WRITE IND CHAR PRECEDING ACCOUNT          E$COPY    12,SLACCT,X4      . EDIT ORIG OR OWNER ACCOUNT NUMBER          E$CHAR    ' '               .          E$COPY    12,SLPROJ,X4      . PROJECT-ID          E$CHAR    ' '               .          LA        A6,SLINHI,X4      . INHIBIT BITS + KEY INDICATOR          OPT       'K',1*/2          . LETTER 'K' IF FILE HAS KEY(S)          LMJ       X10,OPINHI        . EDIT REMAINDER OF INHIBIT BITS          LA        A6,SLDISF,X4      . DISABLE FLAGS          LMJ       X10,OPDISF        . EDIT DISABLE FLAGS          LA        A6,SLTPFM,X4      . TAPE FORMAT          OPT       '8',MM8BIT        . 8-BIT PACKED          OPT       '6',MM6BIT        . 6-BIT PACKED          OPT       'Q',MMQRTR        . QUARTER-WORD MODE          OPT       'E',MMEVEN        . EVEN PARITY          LA,U      A0,'O'            . ODD PARITY INDICATOR          TOP,U     A6,MMEVEN         .          LMJ       X11,ECHAR$        . EDIT THIS CHAR IF NOT EVEN PARITY          LA        A6,SLTPDN,X4      . TAPE DENSITY          LA,U      A0,'L'            . LOW DENSITY, 200/800          TNE,U     A6,MMDENL         .          LMJ       X11,ECHAR$        . EDIT 'L' IF LOW DENSITY          LA,U      A0,'M'            . MEDIUM DENSITY, 556/1600          TNE,U     A6,MMDENM         .          LMJ       X11,ECHAR$        . EDIT 'M' IF MEDIUM DENSITY..         HIGH DENSITY IS NORMAL, NOT DISPLAYED - CODE IS COMMENTED OUT...         LA,U      A0,'H'            . HIGH DENSITY, 800/6250.         TNE,U     A6,MMDENH         ..         LMJ       X11,ECHAR$        . EDIT 'H' IF HIGH DENSITY.          LA        A9,SLDESC,X4      . DESCRIPTOR BITS          E$COL     62                . LINE UP          E$COPY    6,SLREEL,X4       . REEL NUMBER          E$DECF    3,SLTPNO,X4       . TAPE INDEX          E$COPY    3,(' OF   ')      .          E$DECF    3,SLTPCT,X4       . TAPE COUNT THIS FILE          LA        A0,SLCATT,X4      . CATALOG DATE/TIME          DSL       A0,18             . UNDO PREVIOUS CONTORTIONS FOR          SSC       A0,12             .  PROPER SORT SEQUENCING          DSL       A0,6              .          SSL       A0,18             .          LDSL      A0,24             . A0 IS NOW IN STANDARD TDATE$ FORMAT          LMJ       X10,ETIME         . EDIT CATALOG DATE/TIME          TEP,U     A9,MMBKUP         . WAS FILE BACKED UP?          J         ML570             .  YES, SKIP          E$SKIP    14                .  NO, SPACEFILL THIS PART OF REPORT          J         ML580             .ML570          LA        A0,SLBKUT,X4      . BACKUP DATE/TIME          LMJ       X10,ETIME         . EDIT INTO OUTPUTML580          LA        A0,SLREFT,X4      . LAST REF DATE/TIME          LMJ       X10,ETIME         . EDIT INTO OUTPUT          TOP,U     A9,MMBKUP         . WAS FILE BACKED UP?          J         ML590             .  NO, SKIP          E$CHAR    ' '               .  YES          E$COPY    6,SLBUR1,X4       . EDIT FIRST FAS BACKUP REEL          LA        A0,SLSTFP,X4      . STARTING POSITION ON BACKUP          LSSL      A0,24             . CLEAR SIGN BIT IF SET          SSL       A0,24             .          LA,U      A1,4              . FIELD IS 4 DIGITS WIDE          LMJ       X11,EDECF$        . EDIT INTO IMAGEML590          OUTPUT    (0126,LINE)       . WRITE EDITED INFO LINE FOR THIS REEL          E$CLEAR                     . CLEAR EDIT          R$RET     ML700             . GET NEXT SORT REC, EOF = ML700          LX        X4,A0             . X4 = RECORD ADDRESS          J         ML510             . BACK TO TOP FOR NEXT REEL/..         TERMINATION PROCESSING.ML700          TEP,U     A15,1*/('Z'-'Q')  . OUTPUTTING DIRECTLY TO PRINT$?          J         ML800             .  YES, SKIP          LNA,U     A0,0              .  NO, GET SDF EOF FLAG          SA        A0,SDFPKT+10      . STORE IN SDFO$ PACKET          LA,U      A0,SDFPKT         .          LMJ       X11,SDFOC$        . WRITE EOF AND CLOSE OUTPUT FILE          LMJ       A3,ER200          .  ABORT IF ERROR RETURNED HERE          I$OW      HDRPKT            . READ SDF HEADER FROM FILE          TZ,S1     HDRPKT+3          . VERIFY GOOD STATUS          J         ML730             .  IF NOT, SKIP HEADER UPDATE          LA        A0,PAGECT         . TOTAL PAGE COUNT OF ALL REPORTS          SA        A0,HDRBUF+9       . STORE IN SDF HEADER          LA        A0,(W$,0,0)       . PREPARE TO WRITE          SA        A0,HDRPKT+3       .          I$OW      HDRPKT            . WRITE HEADER BACK TO FILEML730          LA,U      A0,SYM            . '@SYM,U FLISTPRT,,PR . '          TEP,U     A15,1*/('Z'-'S')  . DOES USER WANT REPORT PRINTED?          ER        CSF$              .  IF SO, ISSUE @SYM NOW          ER        EXIT$             . FINISML800          LA        A0,(2,('M,*,*,*.    ')) . RESET MARGINS TO NORMAL          ER        PRTCN$            . OUTPUT VIA PRTCN$ - NO SDF OUTPUT          ER        EXIT$             . ALL DONE..ER100          LR        R15,A0            . SAVE A0          P$RINT    (0100+ER1L,ERR1)  . 'ERROR ON DIRECTORY FILE READ'          ER        ERR$              .  ABORTER110          P$RINT    (0100+ER4L,ERR4)  . 'INPUT MFDDB HAS BAD HEADER'          ER        ERR$              .  ABORT.ER200          P$RINT    (0100+ER2L,ERR2)  . 'I/O ERROR ON OUTPUT TO FLISTPRT'          ER        ERR$              .  ABORT/..         THIS ROUTINE EDITS INDICATOR CHARACTERS FOR DISABLE FLAGS.OPDISF          TOP,U     A6,MMDISA         . IS GENERAL DISABLE SET?          J         0,X10             .  NO, RETURN          OPT       'E',MMDISD        . 'E' IS FOR DATA DISABLE          OPT       'C',MMDISS        . 'C' IS FOR FAS/SECURE DISABLE          OPT       'D',MMDISSW       . 'D' IS FOR SOFTWARE DISABLE          OPT       'Z',MMDISH        . 'Z' IS FOR HARDWARE DISABLE          J         0,X10             . RETURN..         THIS ROUTINE EDITS INDICATOR CHARACTERS FOR INHIBIT BITS.OPINHI          OPT       'G',MMGOPT        . 'G' IS FOR G-OPTION FILE          OPT       'P',MMPRVT        . 'P' IS FOR PRIVATE FILE          OPT       'R',MMROLY        . 'R' IS FOR READ-ONLY FILE          OPT       'W',MMWOLY        . 'W' IS FOR WRITE-ONLY FILE          J         0,X10             . RETURN..         THIS ROUTINE EDITS TDATE$ VALUE IN FORM <MMDDYY-HHMMSS>.ETIME          SA        A0,TIMVAL         . SAVE INPUT VALUE          LA,U      A0,,A0            . A0 = SECONDS SINCE MIDNIGHT          DSL       A0,36             . PREPARE FOR DIVIDE          DI,U      A0,3600           . DIV BY 3600, A0 = HOURS          DSL       A1,36             . PREP FOR DIVIDE          DI,U      A1,60             . DIV REM BY 60, A1 = MIN, A2 = SEC          MSI,U     A0,100            . HOURS TIMES 100          AA        A0,A1             . ADD MINUTES          MSI,U     A0,100            . TIMES 100          AA        A0,A2             . ADD SEC, NOW IN BINARY FORM <HHMMSS>          SA,H2     A0,TIMVAL         . SAVE FOR LATER          LA,S1     A0,TIMVAL         . MONTH          MSI,U     A0,100            . TIMES 100          AA,S2     A0,TIMVAL         . ADD DAY          MSI,U     A0,100            . TIMES 100          AA,S3     A0,TIMVAL         . ADD YEAR, MOD 64          AA,U      A0,64             . ADD OFFSET, NOW IN BIN FORM <MMDDYY>          SA,H1     A0,TIMVAL         . SAVE FOR LATER          E$CHAR    ' '               . SKIP OVER ONE          E$DCFZ    6,TIMVAL,,H1      . EDIT <MMDDYY>          E$CHAR    '-'               .          E$DCFZ    6,TIMVAL,,H2      . EDIT <HHMMSS>          J         0,X10             . RETURN..         THIS ROUTINE EDITS A4 AS PERCENT OF A6, FORMAT <XXX.X>.EPCT          MSI,U     A4,1000           . RESULT MUST BE TIMES 1000          DSL       A4,36             . PREPARE FOR DIVIDE          DI        A4,A6             . A4 NOW AS PCT OF A6, TIMES 10          DSL       A4,36             . PREPARE FOR DIVIDE          DI,U      A4,10             . ISOLATE FRACTIONAL PART          E$DECF    5,A4              . EDIT WHOLE PERCENT          E$CHAR    '.'               .          E$DECF    1,A5              . AND TENTHS OF A PERCENT          J         0,X10             . RETURN..         THIS ROUTINE IS CALLED FROM THE 'OUTPUT' PROC TO WRITE A LINE.         OF OUTPUT TO THE FILE, OR PRINT$.  A0 = PRINT CTL WORD..LINOUT          TEP,U     A15,1*/('Z'-'Q')  . OUTPUTTING DIRECTLY TO PRINT$?          J         LN100             .  YES, SKIP          DSL       A0,24             . A0 = LINE SPACING          DSL       A1,30             . A1 = WORD COUNT          LSSL      A0,6              . SPACING NOW IN A0 (17-6)          LXI       A0,A1             . WORD COUNT TO A0 UPPER          LSSL      A0,6              . SHIFT, T1 = COUNT, T2 = SPACING          SSL       A2,18             . IMAGE ADDRESS TO A2 LOWER          SA        A0,SDFPKT+10      . STORE COUNT, SPACING IN SDFO$ PACKET          SA,H2     A2,SDFPKT+8       . STORE IMAGE ADDRESS IN PACKET          LA,U      A0,SDFPKT         .          LMJ       X11,SDFO$         . WRITE IMAGE TO SDF FILE (FLISTPRT)          LMJ       A3,ER200          .  ABORT IF ERROR RETURNED FROM SDFO$          J         LN200             .LN100          ER        PRINT$            . WRITE INFO DIRECTLY TO PRINT$LN200          J         0,X10             . RETURN/.ERR1      'ERROR ON DIRECTORY FILE READ'ER1L      EQU       $-ERR1ERR2      'I/O ERROR ON OUTPUT TO FILIST PRINTFILE'ER2L      EQU       $-ERR2ERR3      '** K-OPTION IGNORED -- MUST BE USED ALSO WITH MFDEDT **'ER3L      EQU       $-ERR3ERR4      '*ERROR* INPUT MFDDB HAS BAD HEADER, OR WRONG SOFTWARE LEVEL.'ER4L      EQU       $-ERR4ERR5      '*ERROR* SITE-ID CARD MISSING, REQUIRED'ER5L      EQU       $-ERR5.HDG3D     '    SORTED BY: QUALIFIER/FILENAME/CYCLE NUMBER'H3DL      EQU       $-HDG3DHDG3DA    '    SORTED BY: ACCOUNT(6)/QUALIFIER/FILENAME/CYCLE NUMBER'H3DAL     EQU       $-HDG3DAHDG3DG   '    SORTED BY: ACCOUNT GROUP/ACCT(6)/QUALIFIER/FILENAME/CYCLE NUMBER'H3DGL     EQU       $-HDG3DGHDG3DB    '    SORTED BY: FILE SIZE,MAX/QUALIFIER/FILENAME/CYCLE NUMBER'H3DBL     EQU       $-HDG3DBHDG4DB DO 11 ,  ' '          $IF       M$MHFSHARED=0          '    MAX      CUR    ASG     CATALOG '          $ELSE          '     MAX     CUR    ASG     CATALOG '          $ENDF          '     LAST REF      TOT    ONL 'H4DBL     EQU       $-HDG4DBHDG5D          $IF       M$MHFSHARED=0          ' QUALIFIER     FILENAME  CYCLE  ACCOUNT      PROJECT  '          '  MODES EQUIP   GRAN     TRKS  COUNT   DATE-TIME'          $ELSE          'H QUALIFIER    FILENAME   CYCLE  ACCOUNT      PROJECT '          '   MODES EQUIP   GRAN    TRKS  COUNT   DATE-TIME'          $ENDF          '     DATE-TIME    DATE  PACKID'H5DL      EQU       $-HDG5DHDG5DB          $IF       M$MHFSHARED=0          ' QUALIFIER     FILENAME  CYCLE  ACCOUNT      PROJECT  '          '  MODES EQUIP   GRAN     TRKS  COUNT   DATE-TIME'          $ELSE          'H QUALIFIER    FILENAME   CYCLE  ACCOUNT      PROJECT '          '   MODES EQUIP   GRAN    TRKS  COUNT   DATE-TIME'          $ENDF          '     DATE-TIME     PCT    PCT 'H5DBL     EQU       $-HDG5DBHDG3T     '    SORTED BY: REEL NUMBER/CATALOG DATE'H3TL      EQU       $-HDG3THDG4T DO 10 ,  ' '          '   REEL  REEL SEQ    CATALOG       BACKUP '          '       LAST REF   SECURE SEC'H4TL      EQU       $-HDG4THDG5T     ' QUALIFIER     FILENAME  CYCLE  ACCOUNT     PROJECT-ID'          '  MODES   NO      NO      DATE-TIME     DATE-TIME     '          'DATE-TIME    REEL  FIL  'H5TL      EQU       $-HDG5TMSG2      '    DATE/TIME: &'TOTMSG    '** TOTAL TRACKS: &  (& ONLINE)&'TML       EQU       $-TOTMSGSYM       '@SYM,U FLISTPRT,,PR . '/$(0)TIMVAL    +         0                 . WORK AREA FOR 'LINOUT' ROUTINECONFLG    +         1                 . SET TO ZERO WHEN SORT RETURNS EOFTLIMIT    +         0                 . MIN TRK SIZE FOR INCLUSION IN 'B' LISTPAGECT    +         0                 . TOTAL PAGE COUNT FOR ALL REPORTSTOTTRK    +         0                 . TOTAL TRACKS IN USELODTRK    +         0                 . TOTAL ONLINE TRACKS IN USEACLSLN    +         0                 . LENGTH OF <ACTLST>CURGRP    +         0                 . CURRENT GROUP INDEX DURING OUTPUTINFPKT    +         SITID$,0,0        . INFO$ PACKET FOR RETRIEVING SITE-ID          +         1,HDR+2           .  AND USER-ID          +         USRID$,0,0        .   (OUTPUT GOES TO SDF HEADER)          +         2,HDR+5           .RDHDR     I$OD      '$MFDB$      ',R$  28,MFHDBF  0 . PKT FOR READ OF MFDDB HDRRDMFD     D$BRP     '$MFDB$      '  28,1792,64 . PKT FOR D/B READ OF INPUT MFDDBHDRPKT    I$OD      'FLISTPRT',R$  28,HDRBUF  0 . PKT TO PUT PAGE CT IN SDF HDREPKT      E$PKT     22,LINE           . EDIT$ PACKETH2PKT     E$PKT     5,HDG2            . EDIT$ PKT TO PLACE DATE/TIME IN HDR2RP        R$FILE    ;                 . SORT PACKET          'RSZW',SCSRLN               ;          'FILES','XA'                ;          'KEY',1,2,'A','A'           ;          'KEY',7,6,'A','A'           ;          'KEY',37,27,'A','A'         ;          'DELCON'  ;          'DELLOG'  ;          'FPOC',ML120                ;          'LPOC',ML420                .SDFPKT    'FLISTPRT  '                . SDFO$ PACKET          +         0                 .          +         W$,0,0            . WRITE FUNCTION          +         1792,0            . WRITE ONE TRACK AT A TIME          +         0                 .          +         BUFF1,BUFF2       . BUFFER LOCATIONS          +         64,0              . SECTOR SIZE OF BUFFER          +         1,HDR             . ACW FOR FIRST WRITE (HEADER)          +         1,0               .          '*OP@@@'                    . HEADER CONTROL WORDHDR       'FLISTPRT  '                . SDF HEADER BUFFER          'CR1   FILIST'              .          +         0                 .          +         0D                .          '          '                . DO 11 ,  +         0                 .LINE      'M,':$CD(M$TLP):',3,2. '   . EDIT$ WORK BUFFER, INIT W/PRTCN$ INFO          RES       20                ..HDG1      '1' DO 6 ,   ' '          '  UNISYS 1100/2200 SERIES CATALOGUED DISK LISTING'SITCOD    '            'H1L       EQU       $-HDG1          RES       20HDG2 DO 19 ,  ' '          '  PAGE'          +         0H2L       EQU       $-HDG2HDG4D DO 11 ,  ' '          $IF       M$MHFSHARED=0          '    MAX      CUR    ASG     CATALOG '          $ELSE          '     MAX     CUR    ASG     CATALOG '          $ENDF          '     LAST REF    BACKUP       'H4DL      EQU       $-HDG4DPCTBUF    RES       21                . BUFFER TO CONTAIN PCT INFOMFHDBF    RES       28                . MFD EXTRACT HEADER BUFFERHDRBUF    RES       28                . BUFFER FOR PRINT FILE PG CT UPDATERECORD    RES       SCSRLN            . SORT RECORDACTLST    RES       M$ACCTMAX*2       . ACCOUNT NUMBER LISTACTPTR    RES       M$ACCTMAX         . PTR TABLE, H1=INDEX, H2=TEXT POINTERGRPTBL    RES       M$GROUPMAX*4+18   . GROUP-ID TEXT TABLEBUFF1     RES       1792              . SDFO$ WORK BUFFERSBUFF2     RES       1792              .          END       START@ELT,SIP MARSREL$.MAP/LISTER,,,167774033233,006IN MARS$.LISTER,.GETOWNNOT TPF$.@ELT,SIP MARSREL$.MARS,,,216020122737,023.         MASS STORAGE ARCHIVE/RETRIEVAL SYSTEM.         USER INTERFACE AND CONTROL PROGRAM - WRC 12/88-3/89.$(1)      AXR$          $ASCII          $LIT          CHRDEF          MGPDEF          ACFDEF          AHFDEF          MFDDEF          RCBDEF.ACLEVL    EQU       2                 . INTERNAL SOFTWARE LEVEL (2R2+)ACLEV1    EQU       1                 . PREVIOUS SOFTWARE LEVEL (2R1)MAXPAR    EQU       10                . MAX PARAMETERS/COMMAND LINEMAXREL    EQU       40                . MAX BUFFERS TO RELEASE IN A GROUPMAXSRT    EQU       1000              . MAX ITEMS THAT CAN BE SORTED INCORESRSIZE    EQU       +(ACFTES>4)*ACFTES+(ACFTES<5)*4  . SIZE OF INTRNL SORT REC.MAXSEL    EQU       1000              . MAX FILES THAT CAN BE SEL AT A TIMEMAXRPL    EQU       50                . MAX FILENAME REPLACEMENT RELOADSMAXMRR    EQU       20                . MAX MULTI-REEL RELOADS..         SELECTION LIST DEFINITIONS.SLQUAL    EQUF      0                 . QUALIFIERSLSEL     EQUF      2,,S1             . FILE SELECTED THIS COMMANDSLREL     EQUF      2,,S2             . FILE SELECTED FOR RELOAD                                      . 1=SEL, 2=REL-FIXED, 3=REL-REMOVSLHOST    EQUF      2,,S3             . HOST-ID (SAME AS <AHHOST>)SLRLNK    EQUF      2,,H2             . LINK TO REPLACEMENT LIST ENTRY (0=NONE)SLFEBG    EQU       3                 . BEGINNING OF SAVED APFE RECORDSLSIZE    EQU       SLFEBG+APFTES     . SIZE OF SELECTION RECORD..         FILENAME REPLACEMENT LIST DEFINITIONS.RPQUAL    EQUF      0                 . REPLACEMENT QUALIFIERRPFILE    EQUF      2                 . REPLACEMENT FILENAMERPCYCL    EQUF      4,,H1             . REPLACEMENT F-CYCLE (0 IF NONE GIVEN)RPHOST    EQUF      4,,S4             . REPLACEMENT HOSTID (077=SHARED)RPLSIZ    EQU       5                 . SIZE OF REPLACEMENT RECORD..P         PROC      *1                . 'CMDERR' PROC - ECHO COMMAND GIVENCMDERR*   NAME                        .   BEFORE PRINTING MESSAGE IF @ADD INPUT          LA        A0,P(1,1)         . PRINT CONTROL WORD          LMJ       X11,CMDERP        . CALL CMDERP TO DO THE WORK          END                         ./..         BEGIN HERE.START          SA        A5,A15            . SAVE OPTIONS          SPD       A0                . STORE PSR D-BITS          OR,U      A0,010            . SET QUARTER WORD BIT          LPD       0,A1              . TURN ON QUARTER WORD MODE          TE,U      A4,4              . DEMAND RUN?          J         MS920             .  NO, ABORT - CAN ONLY BE RUN FROM DMD          LA,U      A10,'0'-1         . SETUP INITIAL VALUES FOR REGISTERS          LA,U      A11,'9'           .   USED BY CHARACTER SCAN ROUTINES          LA,U      A12,'A'-1         .          LA,U      A13,'Z'           .          LA        A0,(33,IMAGE)     .          LMJ       X11,RINF$         . READ INFOR TABLE          J         MS990             .  ERROR READING INFOR, ABORT          LA,U      A0,010106         . PICKUP SPEC 1 ELTNAME (TEST ACCOUNT)          LMJ       X11,SINF$         .          J         $+2               . SKIP IF NO FIND          DS        A0,TSTACC         .  OTHERWISE STORE FOR LATER REF          LA,U      A0,010107         . PICKUP SPEC 1 VERS NAME (TEST USERID)          LMJ       X11,SINF$         .          J         $+2               . SKIP IF NO FIND          DS        A0,TSTUSR         .  OTHERWISE STORE FOR LATER REF          I$D       IDPKT             . PRINT ID LINE          ER        ERR$              .  ABORT IF ERROR RETURNED FROM ID$          LA,U      A0,DIDPKT         .          ER        MSCON$            . PERFORM MSCON$-DIRID$ FUNCTION          JN        A0,MS050          . SKIP IF NEG STATUS, NO MHFS          LA,S6     A4,DIDBUF         . GET MHFS STATUS BITS          TEP,U     A4,1*/0           . IS MHFS CONFIGURED?          J         MS060             .  YES, SKIPMS050          $IF       M$MHFSHARED=0     . THIS CODE FOR NON-SHARED          J         MS080             . CONTINUE, DON'T NEED MHFS          $ELSE                       . THIS CODE FOR SHARED-ONLY          P$RINT    ERRPRT(77)        . 'MHFS NOT CONFIG, REQUIRED'          ER        ERR$              .  ABORT          $ENDF                       . END CONDITIONAL CODEMS060          LA,S5     A0,DIDBUF         . GET HOST-ID OF THIS SYSTEM          SA        A0,HOSTID         . SAVE FOR LATER REFERENCE          TG,U      A0,1              . TEST FOR LEGAL RANGE, 1-4          TG,U      A0,4+1            .          J         $+2               . NOT IN RANGE          J         MS070             . RANGE CHECK IS OK, SKIP          P$RINT    ERRPRT(78)        . 'INVALID MSCON$-DIRID$ HOSTID'          ER        ERR$              .  ABORTMS070          SP1       MHFSUP            . SET MHFS-UP STATUS          AND,U     A4,1*/4++1*/5     . A5 = MHFS DN, NOT AVAIL BITS          JZ        A5,MS080          . SKIP IF ZERO, ALL IS OK          SZ        MHFSUP            . IF EITHER SET, MHFS NOT AVAIL          P$RINT    ERRPRT(76)        . 'RELOAD OF SHARED FILES NOT ALLOWED'MS080          E$DIT     EPKT              . OPEN EDIT          LA        A0,(4,INFPKT)     . PICKUP USERID AND SITEID          ER        INFO$             .          LA        A0,USERID         .          SSL       A0,12             .          SA        A0,USER4          . STORE LEFTMOST 4 CHARS FOR LATER REF          LA,U      A0,USRACC         . ADDR OF USER ACCOUNT NUMBER          LA        A1,(2,023)        .          ER        PCT$              . PICKUP REAL ACCOUNT NUMBER FROM PCT          LA        A0,(6,LINE)       .          ER        PCT$              . RETRIEVE 1ST 6 WORDS OF PCT          LA        A0,LINE+1         .          SA        A0,GENRUN         . SAVE GENERATED RUNID          LA,U      A0,USRPROJ        . ADDRESS OF PROJECT-ID          LA        A1,(2,1)          . PCT$ PARAMETER          AA,H1     A1,LINE+5         . ADD OFFSET OF PROJECT-ID PCT BUFFER          ER        PCT$              . RETRIEVE PROJECT-ID          LA,S2     A0,LINE+4         . GET PRIVILEGED INDICATOR          SA        A0,PRIVX          . SET DLOC-PRIVILEGED FLAG          TOP       A15,(1*/('Z'-'F')) . FAS SAVE-HISTORY MODE?          J         MS100             .  NO, SKIP          SA        A0,PRIV           .  YES, SET MARS-PRIVILEGE FLAG          P$RINT    ERRPRT(45)        . 'FAS SAVE-HISTORY MODE'          SP1       SAVMOD            . SET SAVE HISTORY MODE ON          LA        A0,($CFS('*SHFL*')) . SYS$*SAVHIST$ LABEL WORD          SA        A0,HSTLBL         . SAVE FOR LATER CHECKING/..         GET THE NEXT COMMAND.MS100          LA        A0,IMGLEN         . IMAGE LENGTH FROM CONTINUE INPUT          JNZ       A0,MS125          . PROCESS THIS IMAGE AS NEXT INPUT IF > 0          E$CLEAR                     .  OTHERWISE, SETUP FOR NEW INPUT          TNZ       SELCNT            . IS SELECT MODE ACTIVE?          J         MS110             .  NO          E$FD2     ($CFS('(SELECT)    ')) . YES, EDIT SELECT MODE PROMPT          J         MS120             . GO DO TREAD$ INPUTMS110          TNZ       CURCLS            . IS A CLASS ACCESSED?          J         MS112             .  NO, SKIP          E$FD2     CURCLS            .  YES, EDIT CLASS NAME INTO PROMPT          E$FD1     ($CFS('>>'))      . CLASS NAME INDICATOR          LA        A0,CURQAL         . CURRENT ACCESS QUALIFIER          TNE,U     A0,0              . IS A QUAL ACCESSED?          J         MS120             .  NO, FINISHED WITH PROMPTMS112          DL        A2,CURQAL         . GET CURRENT ACCESS QUALIFIER          TNE,U     A2,0              . ANYTHING THERE?          J         MS115             .  NO, DO ENTRY MODE PROMPT          LMJ       X11,FMTDSP        .  YES, FORMAT FOR OUTPUT          E$FD2                       .   AND EDIT INTO IMAGEMS115          E$CHAR    $CFS('*')         . EDIT SINGLE * FOR ACCESS/ENTRY PROMPTMS120          E$SKIP    1                 .          E$CHAR    077               . PRINT STOP CHAR/..         READ THE NEXT COMMAND.          LA,U      A0,TRDPKT         .          ER        TREAD$            . READ THE NEXT COMMAND VIA TREAD$..         PROCESS THE NEXT COMMAND.MS125          SA        A0,CMDPAR         . SAVE TREAD$ PARAM / WORD COUNT          SZ        IMGLEN            . CLEAR CONTINUE-INPUT LENGTH/FLAG          LR,U      R4,,A0            . INPUT WORD COUNT          LX,U      X5,IMAGE          . ADDRESS OF INPUT IMAGE          LMJ       X11,SETUPF        . SETUP FOR FIELDATA IMAGE SCAN          GNCHNB,,MS128  'AL',MS130  'EN',MS100 . FIRST FIELD MUST BE ALPHAMS128          LA,U      A4,0              . SET COMMAND = 0 FOR ILLEGAL ENTRYMS130          SSL       A4,18             . SHIFT OFF ALL BUT FIRST 3 CHARS          LA,U      A2,0              . A2 = MODE POINTER (DEFAULT=ENTRY)          TNZ       SAVMOD            . FAS SAVE-HISTORY MODE?          J         MS135             .  NO, SKIP          LA,U      A2,1              .  YES, MODE POINTER = 1          J         MS140             . DON'T CHECK FOR ACCESS MODEMS135          TZ        CURCLS            . IS A CLASS ACCESSED?          LA,U      A2,2              .  YES, SET MODE = 2 (CLASS-UPDATE)          LA        A0,CURQAL         .          TE,U      A0,0              .          LA,U      A2,3              . IF CURR QUAL NOT = 0, A2 = 3 (ACCESS)MS140          TZ        SELCNT            .          LA,U      A2,4              . IF SEL COUNT NOT = 0, A2 = 4 (SELECT)          JZ        A4,MS150          . SKIP IF NO COMMAND ENTERED          LA,H2     A0,CMDTBL,A2      . LOAD ADDR OF COMMAND TABLE TO SEARCH          AH        A0,(1,-1)         . SET UP FOR SEARCH          LR,H1     R1,CMDTBL,A2      . GET ENTRY COUNT OF APPROPRIATE TABLE          SE,H1     A4,1,*A0          . SEARCH FOR VALID COMMAND          J         MS150             .  NO FIND          LA,H2     A0,,A0            .  FIND - LOAD ADDRESS OF COMMAND HANDLER          J         0,A0              .   AND CONTINUE PROCESSING FROM THEREMS150          P$RINT    ERRPRT(1)         . 'UNRECOGNIZED COMMAND'          LA        A0,*CMDVAL,A2     . LOAD PCW FOR COMMAND LIST          ER        PRINT$            . PRINT LEGAL CMDS FOR THIS MODE          J         MS100             .  AND SOLICIT NEXT COMMAND/..         @EOF RETURNED FROM INPUT TREAD$.MS600          TNZ       SAVMOD            . SAVE-HISTORY MODE,          TZ        SELCNT            .  OR IN SELECT MODE?          J         MS700             .   YES, TERMINATE NOW          SP1       EOFFLG            . SET USER-EOF FLAG          TZ        CHGCNT            . ANY CHANGES MADE TO CURR QUAL?          J         EXTCMD            .  YES, INDICATE BEFORE TERMINATION..         @EOF OR EXIT FROM ENTRY MODE.MS700          LA,U      A0,FREACF         .          TZ        ACFFLG            .          ER        CSF$              . FREE ACF IF IT HAD BEEN ASSIGNED          LA,U      A0,FREAHF         .          TZ        SAVMOD            .          LA,U      A0,FRESHF         .          TZ        AHFFLG            .          ER        CSF$              . FREE AHF OR SHF IF IT HAD BEEN ASSIGNED          P$RINT    (0102,($CFS('END MARS.   '))) . TERMINATION MESSAGE          ER        EXIT$             . ALL DONE..         NONRECOVERABLE COMMAND INPUT ERRORS.MS920          P$RINT    ERRPRT(36)        . 'PROG CAN ONLY BE USED FROM DEMAND'          ER        ERR$              . ABORT RUNMS990          ER        PRINT$            . PRINT MESSAGE FROM RINF$          ER        EXIT$             . AND EXIT/..         FILE INITIALIZATION (INIT).INIT          TNZ       ACFINT            . HAS ACF ALREADY BEEN OPENED?          J         IN100             .  NO          P$RINT    ERRPRT(2)         .  YES, 'FILE MUST BE EMPTY'          J         MS100             .   GET NEXT COMMANDIN100          LA,U      A14,0             . SET INIT FLAG          LMJ       X10,ACFASG        . GO ASSIGN FILE AND VERIFY I/O STAT 5          J         IN990             .  ACF COULD NOT BE ASG'D OR WASN'T EMPTY          SP1       ACHWRT            . SET HEADER-WRITTEN FLAG          LA        A0,($CFS('*ACFL*')) . ACF LABEL WORD          SA        A0,ACHDLB,X8      . STORE IN HEADER          ER        TDATE$            .          SA        A0,ACHDCD,X8      . STORE CREATION DATE/TIME          LA,U      A0,ACLEVL         .          SA        A0,ACHDLV,X8      . STORE MARS LVL USED FOR CREATION          DL        A0,USRACC         . USER ACCOUNT NUMBER          DS        A0,ACHDPA,X8      . THIS WILL BE PRIVILEGED ACCOUNT          LA,U      A0,ACBFBS         . BEGINNING SECTOR ADDR OF DATA          SA        A0,ACHDNW,X8      . STORE AS NEXT AVAIL ADDRESS          SZ        ACHDNB,X8         . ZERO NEXT FREE BUFF ADDR          LA,U      A3,QTBUF1         . ADDR OF FIRST QT TABLE          LMJ       X11,BUFALC        . ALLOCATE 1ST QUAL TABLE IN ACF          ER        ERR$              . BLOW UP IF ERROR HERE          SA        A2,ACHDQL,X8      . STORE MS ADDR OF 1ST QT IN DEFAULT CLASS          LMJ       X10,WRTBUF        . WRITE EMPTY QUAL TABLE TO ACF          ER        ERR$              . BLOW UP IF ERROR HERE          LMJ       X11,INTLV2        . FINISH LEVEL 2 INITIALIZATION          E$CLEAR                     . CLEAR EDIT          E$MSG     INTMSG            . INITIALIZATION MESSAGE          E$FD2     USRACC            . INDICATE PRIVILEGED ACCOUNT          P$RINT    (0112,LINE)       . PRINT MESSAGE          SP1       ACFINT            . SET ACF INITIALIZED/OPEN FLAG          SP1       PRIV              . OBVIOUSLY, THIS USER IS PRIVILEGED          LMJ       X11,UNLOCK        . WRITE ACF HEADER TO FILE          SP1       INTMOD            . SET INITIAL UPDATE MODEIN990          J         MS100             . GO SOLICIT NEXT COMMAND/..         CONVERT LEVEL 2R1 ACF TO LEVEL 2R2+  (CONVERT).CONVRT          TNZ       ACFINT            . HAS ACF ALREADY BEEN OPENED?          J         CV100             .  NO, CONTINUE          P$RINT    ERRPRT(1)         .  YES, 'UNRECOGNIZED COMMAND'          J         CV990             .   GET NEXT COMMANDCV100          LNA,U     A14,1             . CONVERSION FLAG          LMJ       X10,ACFASG        . OPEN ACF AND VERIFY EARLIER LEVEL          J         CV990             .  ABORT COMMAND IF ERROR          TNZ       PRIV              . PRIVILEGED USER?          ER        ERR$              .  NO, ABORT - SHOULD NEVER HAPPEN          LMJ       X11,LOCK          . LOCK HEADER          LA,U      A0,ACLEVL         . CURRENT SOFTWARE LEVEL          SA        A0,ACHDLV,X8      .  REPLACE IN HEADER          LMJ       X11,INTLV2        . INIT CLASS-ID AND PACK-ID TABLES          SP1       ACHWRT            . SET HEADER-WRITTEN FLAG          LMJ       X11,UNLOCK        . WRITE UPDATED HEADER AND UNLOCK          SP1       ACFINT            . SET AHF OPEN/INIT FLAG          P$RINT    ERRPRT(62)        . 'HEADER CONVERSION COMPLETED'CV990          J         MS100             . GET THE NEXT COMMAND...         INITIALIZE THE CLASS-ID AND PACK-ID TABLES IN THE ACF HEADER.INTLV2          LA,U      A0,ACCTBG,X8      . START ADDRESS OF TABLES          LXI,U     A0,1              . LOOP INCREMENT          LA,U      A1,(0)            . INIT ALL TO ZEROES          LR,U      R1,ACHDSZ-ACCTBG  . COMBINED SIZE OF TABLES          BT        A0,,*A1           . ZEROFILL CLASS-ID, PACK-ID TABLES          LA        A0,($CFS('DEFAUL')) . DEFAULT CLASS-ID          SA        A0,ACCTBG+ACCECL,X8 . STORE AS FIRST CLASS          LA        A1,ACHDQL,X8      . ADDRESS OF FIRST QT BUFFER          SA        A1,ACCTBG+ACCEQL,X8 . STORE IN PTR FOR DEFAULT CLASS          LA        A1,($CFS('FIX$$$')) . FIXED STORAGE RESERVED PACK-ID          SA        A1,ACPTBG+ACPEPK,X8 . STORE AS 1ST ENTRY IN PACK-ID TBL          SA        A0,ACPTBG+ACPECL,X8 .  AND LINK TO DEFAULT CLASS          J         0,X11             . RETURN/..         DEFINE A NEW STORAGE CLASS (DEFINE).DEFCMD          LA        A0,(2,DEFPAR)     . PARAMETER LIST FOR DEFINE COMMAND          LMJ       X10,PARSCN        . PARSE REMAINDER OF COMMAND          J         DC990             . EXIT COMMAND IF SYNTAX ERR(S)          LA,U      A14,1             . STANDARD OPEN FLAG          LMJ       X10,ACFASG        . ASSIGN/OPEN SYS$*ARCCTL$          J         MS700             .  EXIT MARS IF CAN'T OPEN ACF          TZ        PRIV              . PRIVILEGED USER?          J         DC100             .  YES, CONTINUE          P$RINT    ERRPRT(8)         .  NO, 'ACCOUNT NOT AUTHORIZED'          J         DC990             .   ABORT COMMANDDC100          LMJ       X11,LOCK          . LOCK THE ACF HEADER          LA        A2,DFCLAS         . USER-SPECIFIED CLASS-ID          LMJ       X10,SRCLASS       . LOOK FOR IT IN THE CLASS-ID TABLE          J         DC200             .  NO FIND, CONTINUE          P$RINT    ERRPRT(64)        .  FIND, 'CLASS HAS ALREADY BEEN DEFINED'          J         DC900             .   ABORT COMMANDDC200          JNZ       A3,DC220          . CONTINUE IF MORE ROOM TO ADD          P$RINT    ERRPRT(65)        .  IF NOT, 'NO MORE CLASSES MAY BE DEF'          J         DC900             .   ABORT COMMANDDC220          LX,U      X6,,A3            . X6 = ADDRESS OF NEXT OPEN CLASS-ID SLOT          TNZ       PCKCNT            . ANY PACK-IDS SPECIFIED?          J         DC250             .  NO, SKIP          LA        A6,DFCLAS         .  YES, A6 = NEW CLASS-ID          SZ        REMFLG            . CLEAR REMOVE FLAG          LMJ       X10,UPDPCK        . UPDATE PACK-ID TABLE          J         DC900             .  ABORT COMMAND IF ERRORDC250          LA,U      A3,QTBUF1         . ADDRESS OF NEW QT BUFFER          LMJ       X11,BUFALC        . ALLOCATE 1ST QT BUFF FOR NEW CLASS          J         DC900             .  ABORT IF ERROR          SA        A2,ACCEQL,X6      . STORE ADDRESS OF 1ST QT IN CLASS-ID REC          LMJ       X10,WRTBUF        . WRITE QT (ALL ZEROES) BACK TO ACF          J         DC900             .  ABORT IF ERROR          LA        A0,DFCLAS         . NEW CLASS NAME          SA        A0,ACCECL,X6      . STORE IN CLASS-ID RECORD          SP1       ACHWRT            . SET HEADER-WRITTEN FLAG          J         DC920             . ALL DONE, UPDATE HEADERDC900          SZ        ACHWRT            . ERROR, CLEAR HEADER-WRITTEN FLAGDC920          LMJ       X11,UNLOCK        . WRITE AND/OR UNLOCK HEADERDC990          J         MS100             . GET THE NEXT COMMAND/..         RELEASE A STORAGE CLASS (RELEASE).RELCMD          LA        A0,(1,RELPAR)     . PARAMETER LIST FOR RELEASE COMMAND          LMJ       X10,PARSCN        . PARSE REMAINDER OF COMMAND          J         RC990             .  ABORT IF SYNTAX ERROR(S)          LA,U      A14,1             . STANDARD OPEN FLAG          LMJ       X10,ACFASG        . ASSIGN/OPEN SYS$*ARCCTL$          J         MS700             .  EXIT MARS IF CAN'T OPEN ACF          TZ        PRIV              . PRIVILEGED USER?          J         RC100             .  YES, CONTINUE          P$RINT    ERRPRT(8)         .  NO, 'ACCOUNT NOT AUTHORIZED'          J         RC990             .   ABORT COMMANDRC100          LMJ       X11,LOCK          . READ/LOCK ACF HEADER          LA        A2,RLCLAS         . CLASS-ID TO RELEASE          TNE       A2,($CFS('DEFAUL')) . DEFAULT CLASS?          J         RC900             .   YES, CAN'T RELEASE THIS ONE          LMJ       X10,SRCLASS       . LOOK FOR CLASS IN CLASS-ID TABLE          J         RC900             .  NO FIND, ERROR          LX,U      X7,,A0            .  FIND, X7 = ADDRESS OF MATCHING RECORD          LX        X6,(1,DRPTRS)     . ADDRESS TABLE OF QT BUFFER(S) TO REL          LA        A2,ACCEQL,X7      . POINTER TO FIRST QT BUFFER          LR,U      R6,MAXREL-1       . ALLOW A MAX OF <MAXREL> BUFFERS/CHAINRC150          SA        A2,,*X6           . STORE ADDR OF NEXT BUFFER TO RELEASE          LA,U      A3,QTBUF2         . USE ADDR OF 2ND QT FOR READS          LMJ       X10,RDBUFF        . READ NEXT QT IN CHAIN          J         RC980             .  IF ERROR, ABORT COMMAND          LA,U      A1,ACQTBG,A0      . A1 = ADDRESS OF FIRST QUAL ENTRY          LXI,U     A1,ACQTES         . LOOP INCREMENT = REC SIZE          LR,U      R1,ACQTMX-1       . LOOP COUNT, MAX NBR OF QUALS/BUFFERRC160          LA        A2,ACQEQL,*A1     . GET NEXT QUALIFIER          TE,U      A2,0              . THEY BETTER ALL BE ZERO          J         RC920             .  IF NOT, CANNOT RELEASE CLASS          JGD       R1,RC160          . BACK FOR MORE          LA        A2,ACQTNX,A0      . POINTER TO NEXT QT IN CHAIN OR ZERO          JZ        A2,RC200          . SKIP IF ALL DONE          JGD       R6,RC150          .  IF NOT, LOOP BACK FOR NEXT          P$RINT    ERRPRT(24)        . 'TOO MANY CHAINED BUFFERS'          J         RC980             .  ABORT COMMANDRC200          SZ        0,X6              . ZERO LAST ENTRY IN <DRPTRS>          SZ        ACCECL,X7         . CLEAR REQUESTED CLASS-ID          SZ        ACCEQL,X7         .  AND LINK TO 1ST QT          LA,U      A1,ACPTBG-ACPTES,X8 . A1 = POINTER TO PACK-ID TABLE          LXI,U     A1,ACPTES         . LOOP INCREMENT = REC SIZE          LR,U      R1,ACMXPK-1       . MAX PACK-IDS/TABLE          LA        A0,RLCLAS         . A0 = CLASS-ID TO RELEASERC220          TE        A0,ACPECL+ACPTES,*A1 . IS NEXT PACK ASSIGNED TO REQ CLASS?          J         RC230             .  NO, SKIP          SZ        ACPEPK,A1         .  YES, ZERO ENTRY: PACK-ID          SZ        ACPECL,A1         .   AND ASSOCIATED CLASS-IDRC230          JGD       R1,RC220          . BACK FOR NEXT PACK-ID ENTRY          SP1       ACHWRT            . SET HEADER-WRITTEN FLAG          LMJ       X11,UNLOCK        . WRITE HEADER BACK TO ACF          LMJ       X11,LOCK          . LOCK AGAIN IN PREP FOR BUFF RELEASE          LX        X6,(1,DRPTRS)     . RESTORE POINTER TO REL BUFF TABLERC250          LA        A2,,*X6           . ADDRESS OF NEXT BUFFER TO RELEASE          JZ        A2,RC980          . ALL DONE IF ZERO          LMJ       X11,BUFREL        .  IF NOT, RELEASE THIS ONE          J         RC940             . ERROR RELEASING, ABORT REMAINDER OF CMD          J         RC250             . CONTINUE FOR NEXT IN CHAINRC900          P$RINT    ERRPRT(67)        . 'STORAGE CLASS IS UNDEFINED'          J         RC980             .RC920          P$RINT    ERRPRT(72)        . 'CLASS HAS REG QUAL(S), CANNOT RELEASE'          J         RC980             .RC940          P$RINT    ERRPRT(25)        . 'POSSIBLE FILE CORRUPTION' - LOOK OUT!RC980          LMJ       X11,UNLOCK        . UNLOCK AND/OR WRITE HEADER, AGAINRC990          J         MS100             . GET THE NEXT COMMAND/..         ADD OR REMOVE 1 OR MORE PACKID(S) FROM A STORAGE CLASS (ADD, REMOVE).ADPCMD          SZ        REMFLG            . ZERO REMOVE FLAG          J         AP100             .RMPCMD          SP1       REMFLG            . SET REMOVE FLAGAP100          TZ        PRIV              . PRIVILEGED USER,          TNZ       CURCLS            .  AND HAS A STORAGE CLASS BEEN ACCESSED?          J         AP920             .   NO, EXIT COMMAND          LA        A0,(1,ADPPAR)     . PARAM LIST FOR ADD/REMOVE PACK          LMJ       X10,PARSCN        . PARSE REMAINDER OF COMMAND          J         AP990             .  EXIT COMMAND IF SYNTAX ERR(S)          LMJ       X11,LOCK          . READ/LOCK THE ACF HEADER          LA        A2,CURCLS         . A2 = CURRENT ACCESSED CLASS-ID          LMJ       X10,SRCLASS       . LOOK FOR IT IN THE CLASS-ID TABLE          J         AP940             .  NO FIND, ABORT          LA        A6,CURCLS         .  FIND, A6 = CLASS-ID          LMJ       X10,UPDPCK        . UPDATE THE PACK-ID TBL FROM PARAM LIST          J         AP950             .  EXIT COMMAND IF ERROR          SP1       ACHWRT            . SET HEADER-WRITTEN FLAG          J         AP980             . ALL DONEAP920          P$RINT    ERRPRT(1)         . 'UNRECOGNIZED COMMAND'          J         AP990             .AP940          P$RINT    ERRPRT(68)        . 'STORAGE CLASS IS NO LONGER DEFINED'          SZ        CURCLS            . ZERO CURRENT ACCESSED CLASS-IDAP950          SZ        ACHWRT            . ERROR - CLEAR HEADER-WRITTEN FLAGAP980          LMJ       X11,UNLOCK        . WRITE AND/OR UNLOCK THE ACF HEADERAP990          J         MS100             . GET THE NEXT COMMAND/..         REGISTER A QUALIFIER (REGISTER).REGSTR          LA        A0,(4,REGPAR)     . PARAMETER LIST FOR REGISTER COMMAND          LMJ       X10,PARSCN        . PARSE REMAINDER OF COMMAND          J         RE990             . STOP IF SYNTAX ERROR(S)          TNZ       OWNFLG            . WAS OWNER ACCT SPECIFIED?          J         RE040             .  NO, SKIP          LA,S6     A0,REOWN+1        .  YES, GET LAST CHAR OF FIELD          TE,U      A0,077            . IS IT WILDCARD?          J         RE050             .  NO, OWNER IS VALID          LA,S1     A0,REOWN          .  YES, GET FIRST CHAR OF FIELD          TNE,U     A0,077            . IS IT WILDCARD?          J         RE040             .  YES, FULL W/C MEANS UNUSED          P$RINT    ERRPRT(86)        .  NO, 'OWNER CANNOT BE PARTIAL W/C'          J         RE990             . EXIT COMMANDRE040          SZ        REOWN             . ZERO OWNER FIELD INDICATES UNUSED          SZ        REOWN+1           .RE050          TNZ       MXRFLG            . WAS <MXR> PARAMETER GIVEN?          J         RE080             .  NO, SKIP          LA        A0,REGMXR         .  YES, GET VALUE          TG,U      A0,0              . MUST BE >= 0          TG,U      A0,1000           .  AND < 1000          J         $+2               . INCORRECT VALUE          J         RE080             . VALUE IS OK, CONTINUE          P$RINT    ERRPRT(73)        . 'INVALID VALUE FOR <MXR> PARAM'          J         RE990             . EXIT COMMANDRE080          LA,U      A14,1             . STANDARD OPEN FLAG          LMJ       X10,ACFASG        . ASSIGN/OPEN SYS$*ARCCTL$          J         MS700             . EXIT MARS IF ERROR OPENING ACF          TZ        PRIV              . IS THIS USER PRIVILEGED?          J         RE100             .  YES          P$RINT    ERRPRT(8)         .  NO, PRINT ERROR MESSAGE          J         RE990             .   AND GET NEXT COMMANDRE100          LMJ       X11,LOCK          . LOCK THE ACF HEADER          DL        A4,REQUAL         . LOAD DESIRED QUALIFIER          LMJ       X11,SRQUAL        . SEARCH FOR IT IN THE QT CHAIN          J         RE920             . ERROR IN SEARCH          J         RE200             . NO FIND, CONTINUE          P$RINT    ERRPRT(9)         . FIND, PRINT 'ALREADY REGISTERED'          J         RE920             .  AND EXIT COMMANDRE200          SZ        UPDP3             . ZERO UPDATE POINTER 3          JNZ       A3,RE300          . SKIP IF OPEN SLOT EXISTS IN TABLE          SA        A0,UPDP3          .  OTHERWISE, SAVE THIS QT ADDR TO UPDATE          LA,U      A3,QTBUF2         . ADDRESS OF 2ND QT BUFFER          LMJ       X11,BUFALC        . GO ALLOCATE A NEW ACF BUFFER          J         RE900             . EXIT COMMAND IF ERROR HERE          LA        A3,UPDP3          . POINTER TO PREVIOUS BUFFER          SA        A2,ACQTNX,A3      . LINK NEW BUFFER INTO CHAIN          SZ        ACQTNX,A0         . ZERO LINK IN NEW BUFFER          LA,U      A3,ACQTBG,A0      . ADDRESS OF FIRST QUAL ENTRY IN NEW BUFFRE300          SA        A0,UPDP2          . SAVE ADDRESS OF 2ND BUFFER TO UPDATE          LX,U      X6,,A3            . X6 = ADDRESS OF NEW QT ENTRY          LA,U      A3,FTBUF1         . ADDRESS OF FIRST FT BUFFER          LMJ       X11,BUFALC        . ALLOCATE AN FT BUFFER FOR NEW QUALIFIER          J         RE900             . EXIT COMMAND IF ERROR HERE          SA        A0,UPDP1          . THIS IS FIRST BUFFER TO UPDATE          DL        A4,REQUAL         . GET NEW QUALIFIER          DS        A4,ACQEQL,X6      . STORE IN QT ENTRY          SA        A2,ACQEFL,X6      . STORE LINK TO FT          SZ        ACFTNX,A0         . ZERO LINK TO 2ND FT BUFFER IN 1ST FT          DS        A4,ACFTQL,A0      . STORE QUAL IN FT VERIFICATION SLOT          DL        A4,REOWN          . OWNER ACCOUNT FOR THIS QUAL          DS        A4,ACFTON,A0      . STORE IN OWNER SLOT IN 1ST FT          LA,U      A4,0              . DEFAULT MAX REF = 0          TZ        MXRFLG            . WAS <MXR> PARAM GIVEN?          LA        A4,REGMXR         .  YES, GET VALUE          SA        A4,ACFTRM,A0      . STORE IN 1ST FT          SZ        ACFTUI,A0         . ZERO UPDATING USERID          SZ        ACFTUT,A0         .  AND TIME OF LAST UPDATE          TNZ       ACTCNT            . ANY ACCOUNT(S) TO ACCESS THIS QUAL?          J         RE400             .  NO,SKIP          SZ        REMFLG            .  YES, ZERO REMOVE FLAG          LMJ       X11,UPDACC        .   AND UPDATE ACCT TABLE IN 1ST FT          J         RE900             . EXIT COMMAND IF ERROR HERE..         UPDATES COMPLETE AND VERIFIED, WRITE BUFFER CONTENTS BACK TO ACF.RE400          LA        A0,UPDP1          .          LMJ       X10,WRTBUF        . WRITE 1ST FT BACK TO ACF          J         RE900             . EXIT IF ERROR          LA        A0,UPDP2          .          LMJ       X10,WRTBUF        . WRITE 2ND OR 1ST QT BACK TO ACF          J         RE900             . EXIT IF ERROR          LA        A0,UPDP3          .          JZ        A0,RE920          . SKIP IF NO 2ND QT          LMJ       X10,WRTBUF        .  OTHERWISE, WRITE 1ST QT BACK TO ACF          J         RE900             . EXIT IF ERROR          J         RE920             . ALL IS GOOD, WRITE BACK HEADERRE900          SZ        ACHWRT            . IF ERROR(S), DON'T WRT HDR, ONLY UNLOCKRE920          LMJ       X11,UNLOCK        . WRITE/UNLOCK ACF HEADER          SZ        CURQAL            . ZERO CURRENT QUALIFIER          SZ        CURQAP            .  AND POINTERRE990          J         MS100             . GO SOLICIT NEXT COMMAND/..         DEREGISTER A QUALIFIER (DEREGISTER).DERGST          LA        A0,(1,DERPAR)     . PARAMETER LIST FOR DEREGISTER COMMAND          LMJ       X10,PARSCN        . PARSE REMAINDER OF COMMAND          J         DR990             . STOP IF SYNTAX ERROR(S)          LA,U      A14,1             . STANDARD OPEN FLAG          LMJ       X10,ACFASG        . ASSIGN/OPEN SYS$*ARCCTL$          J         MS700             . EXIT MARS IF CAN'T OPEN THE ACF FILE          TZ        PRIV              . IS THIS USER PRIVILEGED?          J         DR100             .  YES, CONTINUE          P$RINT    ERRPRT(8)         .  NO, PRINT ERROR MESSAGE          J         DR990             .   AND GET NEXT COMMANDDR100          LMJ       X11,LOCK          . READ AND LOCK THE ACF HEADER          DL        A4,DRQUAL         . GET USER-SPECIFIED QUALIFIER          LMJ       X11,SRQUAL        . SEARCH FOR QUAL IN QT CHAIN          J         DR980             . ERROR SEARCHING          J         DR900             . NO FIND          SA        A0,UPDP1          . FIND - SAVE ADDRESS OF THIS QT          SA        A3,DRQPTR         . SAVE POINTER TO ENTRY TO REMOVE          LX        X6,(1,DRPTRS)     . ADDRESS TABLE OF FT BUFFERS TO RELEASE          LA        A2,ACQEFL,A3      . ADDRESS OF FIRST FT BUFFER FOR QUAL          LR,U      R6,MAXREL-1       . ALLOW A MAX OF <MAXREL> BUFFERS/CHAINDR150          SA        A2,,*X6           . STORE ADDRESS OF NEXT BUFFER TO RELEASE          LA,U      A3,FTBUF2         . USE ADDR OF 2ND FT FOR READS          LMJ       X10,RDBUFF        . READ NEXT FT IN CHAIN          J         DR980             . ERROR READING FT - EXIT COMMAND          DL        A4,ACFTQL,A0      . VERIFICATION QUALIFIER FOR THIS TABLE          DTE       A4,DRQUAL         . IS THIS THE CORRECT QUAL?          J         $+2               .  NO          J         DR180             .  YES, SKIP          P$RINT    ERRPRT(14)        . 'INTERNAL BUFFER LINK AMBIGUITY'          J         DR980             .   .. NASTY ERROR! STOP RIGHT NOW ..DR180          LA        A2,ACFTNX,A0      . GET ADDRESS OF NEXT FT IN CHAIN          JZ        A2,DR200          . FINISHED VERIFICATION PHASE IF ZERO          JGD       R6,DR150          .  OTHERWISE, LOOP BACK          P$RINT    ERRPRT(24)        . 'TOO MANY CHAINED BUFFS, INCR <MAXREL>'          J         DR980             . EXIT COMMAND PROCESSINGDR200          SZ        0,X6              . ZERO NEXT ENTRY IN <DRPTRS>          LA        A0,DRQPTR         . RELOAD PTR TO QT ENTRY FOR THIS QUAL          LXI,U     A0,1              . INCREMENT FOR BT          LA,U      A1,(0)            . FOR ZEROFILL          LR,U      R1,ACQTES         . SIZE OF QT ENTRY          BT        A0,,*A1           . ZERO THIS ENTRY IN THE QT BUFFER          LA        A0,UPDP1          . ADDR OF QT BUFFER          LMJ       X10,WRTBUF        . GO WRITE IT BACK TO ACF          J         DR920             . ERROR WRITING, EXIT COMMAND          LX        X6,(1,DRPTRS)     . POINTER TO FT ADDRESS TABLEDR220          LA        A2,,*X6           . LOAD NEXT ADDRESS TO RELEASE          JZ        A2,DR980          . ALL DONE IF ZERO          LMJ       X11,BUFREL        . IF NOT, RELEASE BUFFER          J         DR920             . EXIT COMMAND IF ERROR RELEASING          J         DR220             . IF NOT, BACK FOR MOREDR900          P$RINT    ERRPRT(13)        . 'QUALIFIER HAS NOT BEEN REGISTERED'          J         DR980             . EXIT COMMANDDR920          P$RINT    ERRPRT(25)        . 'POSSIBLE FILE CORRUPTION' ..NASTY! ..DR980          LMJ       X11,UNLOCK        . UNLOCK/WRITE HEADER BACK TO FILE          SZ        CURQAL            . ZERO CURRENT QUALIFIER          SZ        CURQAP            .  AND POINTERDR990          J         MS100             . GO SOLICIT NEXT COMMAND/..         ALTER THE OWNER OF A QUALIFIER (ALTER).ALTQAL          LA        A0,(3,ALQPAR)     . PARAMETER LIST FOR ALTER COMMAND          LMJ       X10,PARSCN        . PARSE REMAINDER OF COMMAND          J         AQ990             . STOP IF SYNTAX ERROR(S)          TNZ       OWNFLG            . WAS OWNER ACCT SPECIFIED?          J         AQ040             .  NO, SKIP          LA,S6     A0,ALOWN+1        .  YES, GET LAST CHAR OF FIELD          TE,U      A0,077            . IS IT WILDCARD?          J         AQ050             .  NO, OWNER IS VALID          LA,S1     A0,ALOWN          .  YES, GET FIRST CHAR OF FIELD          TNE,U     A0,077            . IS IT WILDCARD?          J         AQ040             .  YES, FULL W/C MEANS UNUSED          P$RINT    ERRPRT(86)        .  NO, 'OWNER CANNOT BE PARTIAL W/C'          J         RE990             . EXIT COMMANDAQ040          SZ        ALOWN             . ZERO OWNER FIELD INDICATES UNUSED          SZ        ALOWN+1           .AQ050          TZ        MXRFLG            . WAS <MXR> PARAMETER GIVEN?          J         AQ060             .  YES, SKIP          TZ        OWNFLG            .  NO, WAS <OWN> PARAM GIVEN?          J         AQ080             .   YES, SKIP          P$RINT    ERRPRT(7)         .   NO, 'MISSING PARAM(S)'          J         AQ990             . EXIT COMMANDAQ060          LA        A0,ALMXR          . VALUE FOR <MXR> PARAMETER          TG,U      A0,0              . MUST BE >= 0          TG,U      A0,1000           .  AND < 1000          J         $+2               . INCORRECT VALUE          J         AQ080             . CORRECT VALUE, CONTINUE          P$RINT    ERRPRT(73)        . 'INCORRECT VALUE FOR <MXR> PARAM'          J         AQ990             . EXIT COMMANDAQ080          LA,U      A14,1             . STD OPEN FLAG          LMJ       X10,ACFASG        . ASSIGN/OPEN SYS$*ARCCTL$          J         MS700             . EXIT MARS IF CAN'T OPEN ACF          TZ        PRIV              . IS THIS USER PRIVILEGED?          J         AQ100             .  YES          P$RINT    ERRPRT(8)         .  NO, PRINT ERROR MESSAGE          J         AQ990             .   AND GET NEXT COMMANDAQ100          LMJ       X11,LOCK          . LOCK THE ACF HEADER          DL        A4,ALQUAL         . LOAD REQUESTED QUALIFIER          LMJ       X11,SRQUAL        . SEARCH FOR IT IN THE QT CHAIN          J         AQ980             .  ERROR IN SEARCH          J         AQ900             .  NO FIND IN SEARCH          LA        A2,ACQEFL,A3      . FIND - LOAD LINK TO 1ST FILE TABLE          LA,U      A3,FTBUF2         . MEMORY ADDRESS TO HOLD FILE TABLE          LMJ       X10,RDBUFF        . GO READ FILE TABLE FROM ACF          J         AQ980             .  ERROR READING FILE TABLE          DL        A4,ACFTQL,A0      . LOAD VERIFICATION QUALIFIER          DTE       A4,ALQUAL         . IS THIS THE CORRECT TABLE?          J         $+2               .  NO          J         AQ150             .  YES, SKIP          P$RINT    ERRPRT(14)        . 'INTERNAL BUFFER LINK AMBIGUITY'          J         AQ980             .  BAD ERROR, STOP RIGHT NOWAQ150          DL        A4,ALOWN          . LOAD NEW OWNER ACCOUNT          TZ        OWNFLG            . WAS OWNER PARAMETER GIVEN?          DS        A4,ACFTON,A0      .  YES, STORE IN FILE TABLE HEADER AREA          LA        A4,ALMXR          . NEW MAX REF LIMIT PARAMETER          TZ        MXRFLG            . WAS <MXR> PARAMETER GIVEN?          SA        A4,ACFTRM,A0      .  YES, STORE IN FT HEADER AREA          LMJ       X10,WRTBUF        . WRITE UPDATED TABLE BACK TO ACF          J         AQ980             .  ERROR WRITING TABLE          J         AQ980             .  NO ERROR (NOTHING MORE TO DO) CONTINUEAQ900          P$RINT    ERRPRT(13)        . 'QUALIFIER HAS NOT BEEN REGISTERED'AQ980          LMJ       X11,UNLOCK        . UNLOCK ACF HEADER          SZ        CURQAL            . ZERO CURRENT QUALIFIER          SZ        CURQAP            .  AND POINTERAQ990          J         MS100             . GO SOLICIT NEXT COMMAND/..         ACCESS A REGISTERED QUALIFIER AND/OR STORAGE CLASS (ACCESS).ACCESS          LA        A0,(2,ACCPAR)     . PARAMETER LIST FOR ACCESS COMMAND          LMJ       X10,PARSCN        . PARSE REMAINDER OF COMMAND          J         AC990             . STOP HERE IF SYNTAX ERROR(S) FOUND          TNZ       ACQUAF            . WAS QUALIFIER PARAMETER          TZ        ACCLSF            .  OR CLASS PARAMETER GIVEN?          J         $+2               .   YES, CONTINUE          J         AC900             .   NO, 'MISSING PARAMETER(S)'          LA,U      A14,1             . FLAG FOR STANDARD OPEN          LMJ       X10,ACFASG        . ASSIGN/OPEN SYS$*ARCCTL$          J         MS700             . EXIT MARS IF CANNOT OPEN ACF FILE          LMJ       X10,EXTPRT        . PRINT CHANGES TO PREV QUAL, IF ANY          TNZ       ACCLSF            . WAS 'CLASS' PARAMETER GIVEN?          J         AC100             .  NO, SKIP          DL        A2,ACCLAS         . GET USER-SUPPLIED PARAM          DTE       A2,($CFS('DEFAULT     ')) . DEFAULT CLASS,          TNE       A3,($CFS('      ')) .  OR LESS THAN 7 CHARS?          J         $+2               .   YES, CONTINUE          J         AC910             .   NO, 'UNDEFINED CLASS'          LMJ       X10,SRCLASS       . SEARCH CLASS-ID TABLE          J         AC910             .  NO FIND, PRINT ERROR AND EXIT          DL        A0,ACCLAS         . FIND, GET USER PARAM          TNE       A0,($CFS('DEFAUL')) . DEFAULT CLASS?          LA        A1,($CFS('T     ')) .  YES, ALWAYS USE 7-CHARS          DS        A0,CURCLS         .  AND STORE IN CURRENT CLASS-ID          TNZ       ACQUAF            . WAS 'QUAL' PARAMETER GIVEN?          J         AC950             .  NO, ALL DONEAC100          DL        A4,ACQUAL         . LOAD REQUESTED QUALIFIER          LMJ       X11,SRQUAL        . SEARCH FOR IT IN THE QT CHAIN          J         AC990             .  ERROR IN SEARCH          J         AC920             .  NO FIND          LA        A2,ACQEFL,A3      . FIND - GET LINK TO 1ST FILE TABLE          LA,U      A3,FTBUF1         . MEMORY ADDRESS FOR FIRST FILE TABLE          LMJ       X10,RDBUFF        . READ FILE TABLE FROM ACF          J         AC940             . EXIT COMMAND IF READ ERROR DETECTED          DL        A4,ACQUAL         . GET REQUESTED QUALIFIER          DTE       A4,ACFTQL,A0      . SAME AS VERIFICATION QUAL IN FILE TBL?          J         AC930             .  NO, EXIT COMMAND          TZ        PRIV              .  YES, IS THIS USER PRIVILEGED?          J         AC200             .   YES, SKIP ACCOUNT CHECK          LA,U      A1,ACFTBA,A0      .   NO, LOAD FT ADDRESS OF VALID ACCOUNTS          LXI,U     A1,2              . INCREMENT FOR LOOP (2 WDS/ACCOUNT NBR)          LA,U      A7,0              . INIT NUMBER FOUND FLAG          LR,U      R1,ACFTMA-1       . LOOP COUNT FOR LIST SEARCHAC120          DL        A2,,*A1           . GET NEXT ACCOUNT NUMBER FROM LIST          TNE,U     A2,0              .          J         AC140             . IF ZERO, SKIP - NO NUMBER IN THIS SLOT          DTE       A2,USRACC         .  OTHERWISE, IS RUN USING THIS ACCT NBR?          J         $+2               .   NO, SKIP          J         AC200             .   YES, ACCESS IS VALID          LA,U      A7,1              . SET NUMBER FOUND FLAGAC140          JGD       R1,AC120          . LOOP BACK FOR OTHER ENTRIES IN LIST          JZ        A7,AC200          . ACCESS IS OK IF LIST IS EMPTY          P$RINT    ERRPRT(12)        .  OTHERWISE, 'ACCOUNT NOT AUTHORIZED..'          J         AC940             .   EXIT COMMANDAC200          DS        A4,CURQAL         . ALLOW ACCESS - STORE QUALIFIER          SA        A0,CURQAP         .   AND POINTER TO 1ST FILE TABLE          SZ        CHGCNT            . ZERO QUALIFIER CHANGE COUNT          LX,U      X4,,A0            . X4 = FT ADDRESS          LA        A0,ACFTRM,X4      . MAX REF LIMIT FOR QUALIFIER          JNZ       A0,$+2            . SKIP IF > ZERO          LA,U      A0,M$REFMAX       . LOAD DEFAULT VALUE IF ZERO          AA,U      A0,1              . INCREMENT FOR LATER USE          SA        A0,CURMXR         . SAVE MAX REF FOR QUALIFIER          TZ        ACFTRM,X4         . DOES THIS QUAL HAVE DEFINED MXR,          TZ        INTMOD            .  AND IS THIS NOT INITIAL UPDATE?          J         AC250             .   NO, SKIP          E$CLEAR                     .   YES, CLEAR EDIT          E$MSG     RMMSG             . 'THE MAX REF LIMIT FOR THIS QUAL IS '          E$DECV    ACFTRM,X4         . VALUE OF DEFINED MAX REF LIMIT          E$MSGR                      . ' DAYS.'          P$RINT    (0112,LINE)       . PRINT INFO FOR USERAC250          TNZ       ACFTUI,X4         . HAS UPDATING USERID BEEN SET?          J         AC300             .  NO, DON'T PRINT STATUS MESSAGE          E$CLEAR                     .  YES, CLEAR EDIT          E$MSG     LUPMSG            . '*LAST UPDATED BY: '          E$FD1     ACFTUI,X4         . UPDATING USERID          E$MSGR                      .   (          E$DAY1    ACFTUT,X4         . DATE OF LAST UPDATE          E$MSGR                      .  -          E$TIME    ACFTUT,X4         . TIME OF LAST UPDATE          E$MSGR                      . )          P$RINT    (0114,LINE)       . PRINT STATUS MESSAGEAC300          P$RINT    (0100,$)          . SKIP A LINE FOR READABILITY          J         MS100             . GO SOLICIT NEXT COMMANDAC900          P$RINT    ERRPRT(7)         . 'MISSING PARAMETER(S)'          J         AC990             .AC910          P$RINT    ERRPRT(67)        . 'SPECIFIED CLASS IS UNDEFINED'          J         AC940             .AC920          P$RINT    ERRPRT(13)        . 'QUALIFIER HAS NOT BEEN REGISTERED'          J         AC940             .AC930          P$RINT    ERRPRT(14)        . 'INTERNAL BUFFER LINK AMBIGUITY'AC940          TZ        ACCLSF            . ERROR, WAS CLASS SPEC W/COMMAND?          SZ        CURCLS            .  YES, ZERO CURRENT ACCESSED CLASSAC950          SZ        CURQAL            . IF ERROR(S) OR NO QUAL SPEC, CLEAR CURR          SZ        CURQAP            .   QUAL AND POINTER TO 1ST FILE TABLEAC990          J         MS100             . GO SOLICIT NEXT COMMAND/..         EXIT FROM ACCESS OR CLASS-UPDATE MODE (EXIT).EXTCMD          LA        A0,CURQAL         . GET CURRENT ACCESSED QUALIFIER          TE,U      A0,0              . IS ONE ACTIVE?          J         EC100             .  YES, SKIP          TNZ       CURCLS            .  NO, IS A STORAGE CLASS ACTIVE?          J         MS700             .   NO, EXIT MARS          SZ        CURCLS            .   YES, CLEAR CURRENT ACCESSED CLASS          J         EC150             .    AND BACK TO ENTRY MODE (UNLESS @EOF)EC100          LMJ       X10,EXTPRT        . PRINT CHANGE COUNT FOR QUAL          SZ        CURQAL            . CLEAR QUALIFIER          SZ        CURQAP            .  AND POINTER TO 1ST FILE TABLE          TZ        ACCLSF            . WAS CLASS SPEC ON LAST ACCESS CMD?          SZ        CURCLS            .  IF SO, CLEAR CURRENT CLASSEC150          TNZ       EOFFLG            . HAS USER ENTERED @EOF?          J         MS100             .  NO, GO SOLICIT NEXT COMMAND          J         MS700             .  YES, TERMINATE MARS..         EXTPRT IS CALLED FROM EXIT AND ACCESS TO PRINT CHANGE.         COUNT FOR THE PREVIOUSLY-ACCESSED QUALIFIER..EXTPRT          TNZ       CHGCNT            . ANY CHANGES TO CURRENT QUAL?          J         EP100             .  NO, SKIP NOTIFICATION MESSAGE          E$CLEAR                     .  YES, OPEN EDIT          E$MSG     CHGMSG            . *          E$DECV    CHGCNT            . CHANGE COUNT          E$MSGR                      . ' CHANGE'          LA,U      A0,$CFS('S')      . PLURAL INDICATION          LA        A1,CHGCNT         . CHANGE COUNT          TE,U      A1,1              . ONLY ONE CHANGE?          E$CHAR                      . NO, ADD 'S' - IND MULTIPLE CHANGES          E$MSGR                      . ' TO QUALIFIER: '          DL        A2,CURQAL         . CURRENT QUALIFIER          LMJ       X11,FMTDSP        . FORMAT FOR DISPLAY          E$FD2                       . EDIT INTO IMAGE          P$RINT    (0110,LINE)       . INDICATE CHANGE STATUS          SZ        CHGCNT            . ZERO CHANGE COUNTEP100          J         0,X10             . RETURN/..         ADD, MODIFY OR REMOVE A FILE OR ACCOUNT ENTRY UNDER AN.         EXISTING QUALIFIER (ADD, MODIFY, REMOVE).ADDCMD          SZ        MRFLGS            . CLEAR MODIFY/REMOVE FLAGS          J         AD010             . JUMP TO COMMON CODEMODCMD          SZ        MRFLGS            .          SP1       MODFLG            . SET MODIFY FLAG          J         AD010             . JUMP TO COMMON CODEREMCMD          SZ        MRFLGS            .          SP1       REMFLG            . SET REMOVE FLAGAD010          LA        A0,CURQAL         . LOAD CURRENT ACCESSED QUALIFIER          TE,U      A0,0              . IS IT ZERO?          J         AD100             .  NO, CONTINUE          CMDERR    ERRPRT(15)        .  YES, 'QUAL MUST BE ACCESSED.. FIRST'          J         AD990             .   EXIT COMMANDAD100          LA        A0,(6,ADDPAR)     . PARAMETER LIST FOR ADD/MOD/REM COMMANDS          TZ        REMFLG            . IS THIS A REMOVE?          LXI,U     A0,2              .  IF SO, ONLY 1ST 2 PARAMS ARE LEGAL          LMJ       X10,PARSCN        . PARSE REMAINDER OF COMMAND          J         AD990             . EXIT COMMAND IF SYNTAX ERROR(S)          TNZ       FILFLG            . WAS THE 'FILE' KEYWORD GIVEN?          J         AD110             .  NO, SKIP          TZ        ACTCNT            .  YES, WAS 'ACCOUNT' ALSO USED?          J         AD125             .   YES, ERROR          J         AD130             .   NO, CONTINUE 'FILE' PROCESSINGAD110          TZ        ACTCNT            . WAS THE 'ACCOUNT' KEYWORD USED?          J         AD115             .  YES, CONTINUE          CMDERR    ERRPRT(7)         .  NO, 'MISSING PARAMETER(S)'          J         AD990             .   EXIT COMMANDAD115          TNZ       MODFLG            . MODIFY ACCOUNT?          J         AD120             .  NO, CONTINUE          CMDERR    ERRPRT(5)         .  YES, 'UNRECOGNIZED PARAMETER'          J         AD990             .   EXIT COMMANDAD120          TZ        PRIV              . MUST BE PRIV TO ADD/REMOVE ACCOUNT          J         AD122             .  IF SO, CONTINUE          CMDERR    ERRPRT(8)         .  IF NOT, 'NOT AUTHORIZED'          J         AD990             .   EXIT COMMANDAD122          TZ        REMFLG            . REMOVE ACCOUNT?          J         AD200             .  YES, ALL PARAMS VERIFIED          TNZ       ADDCCT            .  NO, BE SURE 'CYCLE', 'REFLIM',          TZ        ADDRFC            .   'EXPIRE' AND 'FLAG' KEYWORDS ARE          J         AD125             .   NOT PRESENT          TNZ       ADDEXC            .          TZ        FLGCNT            .          J         AD125             .          J         AD200             . ALL OK - CONTINUEAD125          CMDERR    ERRPRT(27)        . 'CONFLICTING PARAMETERS'          J         AD990             .  EXIT COMMANDAD130          TZ        REMFLG            . REMOVE FILE?          J         AD200             .  YES, ALL PARAMS VERIFIED          SZ        FLGADD            . ZERO ADD FLAG BITS          SZ        FLGREM            .  AND REMOVE FLAG BITS          LR        R2,FLGCNT         . LOAD COUNT OF FLAG PARAMS SPECIFIED          JGD       R2,$+2            . DECR AND SKIP          J         AD140             . BYPASS FLAG CODE IF NONE SPECIFIED          LA        A3,(2,FLGLST)     .  OTHERWISE, LOAD LIST FROM CMD PARSERAD132          LA,U      A4,0              . PREPARE FOR SHIFT          LA        A5,,*A3           . LOAD NEXT FLAG PARAMETER          LDSL      A4,12             . A4 = FIRST 2 CHARS          TZ        MODFLG            . ONLY ALLOW 'NOXXX' IF MODIFY          TE,U      A4,$CFS('NO')     . IS THIS A NOXXX FORM PARAM?          DSL       A4,12             .  NO, SHIFT BACK, RESET A4 = 0          SSL       A5,18             . SHIFT MOST SIG 3 CHARS TO A5 LOWER          LA        A1,(1,FLGTBL-1)   . POINTER TO VALID PARAM LIST          LR,U      R1,FLTLEN         . COUNT OF VALID PARAMETERS          SE,H1     A5,1,*A1          . SEARCH LIST FOR CURR PARAMETER          J         AD138             .  NO FIND, ERROR          JNZ       A4,AD137          .  FIND - SKIP IF 'NOXXX' FORMAT          TZ,S4     0,A1              . IS THIS A PRIVILEGED FLAG PARAM?          TZ        PRIV              .  IF SO, IS USER PRIVILEGED?          J         AD134             .   YES, CONTINUE          CMDERR    ERRPRT(8)         .   NO, 'NOT AUTHORIZED'          J         AD990             .    EXIT COMMANDAD134          TZ        ADDFIL            . IS THIS MASTER WILD FILENAME?          J         AD135             .  NO, SKIP          TE,U      A5,$CFS('AVF')    .  YES, SETTING ALLOW-V-OPTION          TNE,U     A5,$CFS('DNN')    .   OR DO-NOT-NOTIFY?          J         $+2               .    YES, ILLEGAL FLAG(S)          J         AD135             .    NO, SKIP          CMDERR    ERRPRT(51)        . 'CANNOT SET AVF/DNN ON MASTER W/C'          J         AD990             .    EXIT COMMANDAD135          LA,S6     A0,ADDFIL+1       . GET LAST CHAR OF FILE PARAM          TE,U      A0,077            . DOES ENTRY CONTAIN A WILDCARD?          J         AD136             .  NO, SKIP          TE,U      A5,$CFS('CRT')    .  YES, SETTING CRITICAL-BACKUP?          J         AD1365            .   NO, SKIP          TZ        PRIV              .   YES, IS USER PRIVILEGED?          J         AD137             .    YES, ALLOW FLAG TO BE SET          CMDERR    ERRPRT(55)        .    NO, 'CANNOT SET CRT ON W/C ENTRY'          J         AD990             .    EXIT COMMANDAD136          LA,S6     A0,CURQAL+1       . GET LAST CHAR OF QUAL PARAM          TE,U      A0,077            . DOES QUAL CONTAIN A WILDCARD?          J         AD137             .  NO, SKIPAD1365          TE,U      A5,$CFS('DEL')    . IS USER SETTING DELETE FLAG?          J         AD137             .  NO, SKIP          CMDERR    ERRPRT(82)        .  YES, 'CANNOT SET DEL ON W/C ENTRY'          J         AD990             .  EXIT COMMANDAD137          LA        A0,,A1            . A0 = FLAG TABLE ENTRY          LSSL      A0,24             . SHIFT OFF SYMBOLIC FLAG, PRIV INDICATOR          SSL       A0,24             . BINARY FLAG BIT TO A0 LOWER          TNE,U     A5,$CFS('DCY')    . IS DAILY CYCLE FLAG SPECIFIED?          ANA,U     A4,$CFS('NO')     .  YES, INTERNAL REP IS INVERTED          LA,U      A2,FLGADD         . ADDRESS OF 'ADD' FLAGS          JZ        A4,$+2            . IS THIS A 'NOXXX' FORMAT PARAMETER?          LA,U      A2,FLGREM         .  IF SO, LOAD ADDRESS OF 'REMOVE' FLAGS          OR        A0,,A2            . COMBINE THIS BIT WITH POSSIBLE OTHERS          SA        A1,,A2            .  AND STORE BACK THE RESULT          JGD       R2,AD132          . LOOP BACK FOR OTHER FLAG PARAMS          LA        A0,FLGADD         . GET 'ADD' FLAGS          AND       A0,FLGREM         .  COMPARE WITH 'REMOVE' FLAGS          JZ        A1,AD140          . CONTINUE IF NO FLAG USED BOTH WAYSAD138          CMDERR    ERRPRT(5)         . 'UNRECOGNIZED PARAMETER'          J         AD990             .  EXIT COMMANDAD140          TNZ       ADDCCT            . IS 'CYCLE' KEYWORD GIVEN?          TZ        ADDRFC            .  OR 'REFLIM'?          J         AD145             .   YES, SKIP          TZ        MODFLG            .   NO, IS THIS A MODIFY?          J         AD142             .    YES, CHECK OTHER KEYWORDS          CMDERR    ERRPRT(16)        .    NO, 'CYC OR REF REQUIRED'          J         AD990             .     EXIT COMMANDAD142          TNZ       FLGCNT            . IS 'FLAG' KEYWORD GIVEN?          TZ        ADDEXC            .  OR 'EXPIRE'?          J         AD160             .   YES, SKIP          CMDERR    ERRPRT(7)         .   NO, 'MISSING PARAMETER(S)'          J         AD990             .    EXIT COMMANDAD145          TNZ       ADDCCT            . IS 'CYCLE' KEYWORD GIVEN?          J         AD150             .  NO, SKIP          LA        A0,ADDCYC         .  YES, GET VALUE GIVEN WITH COMMAND          TG,U      A0,1              . MUST BE GREATER THAN ZERO          TG,U      A0,32+1           .  AND LESS THAN 33          J         AD190             .   IF NOT, ERRORAD150          TNZ       ADDRFC            . IS 'REFLIM' KEYWORD GIVEN?          J         AD160             .  NO, SKIP          LA        A0,ADDREF         .  YES, GET VALUE GIVEN WITH COMMAND          TG,U      A0,0              . MUST BE POSITIVE          TG        A0,CURMXR         .  AND LESS THAN MAX+1 FOR THIS QUAL          J         AD190             .   IF NOT, ERROR          TG,U      A0,M$REFMXW+1     . IS REFLIM > MAX-MASTER-WILDCARD          TZ        PRIV              .  AND USER NON-PRIV?          J         AD160             .   NO, SKIP          LA        A0,ADDFIL         .   YES, GET FILE NAME GIVEN W/COMMAND          JZ        A0,AD190          .    ERROR IF MASTER WILDCARDAD160          TZ        ADDEXC            . IS 'EXPIRE' KEYWORD GIVEN?          J         AD170             .  YES, SKIP          LA        A0,FLGADD         .  NO, GET 'ADD' FLAG BITS          TNZ       MODFLG            . IS THIS AN 'ADD' COMMAND          TOP,U     A0,ACFFBY         .  AND IS THE 'BYPASS' FLAG SET?          J         AD200             .   NO, SKIP          SP1       ADDEXC            .   YES, WE WILL GENERATE A VALUE          LA,U      A0,M$EXPA(M$EXPACNT)*/-18 . LOAD MAX EXPIRATION PERIOD          SA        A0,ADDEXP         .  STORE FOR LATER UPDATE          J         AD200             . VERIFICATION IS COMPLETEAD170          LA        A0,ADDEXP         . LOAD EXPIRATION GIVEN W/COMMAND          ON        M$EXPZERO>0       . THIS CODE FOR EXP-ZERO ONLY          TE,U      A0,0              . DOES EXPIRATION PARAM = ZERO?          J         AD175             .  NO, SKIP          TNZ       ADDFIL            . IS THIS MASTER WILD FILENAME,          TZ        PRIV              .  AND IS USER NONPRIVILEGED?          J         AD200             .   NO, SKIP - VERIFICATION COMPLETE          CMDERR    ERRPRT(84)        . 'CANNOT SET EXP = ZERO ON MAST W/C FILE'          J         AD990             .  EXIT COMMANDAD175          OFF       M$EXPZERO>0       . END OF EXP-ZERO CODE          TG,U      A0,1              . AT THIS POINT, EXP MUST BE > 0          TG,U      A0,(M$EXPA(M$EXPACNT)*/-18)+1 . AND LESS THAN MAX CONFG + 1          J         AD180             .   IF NOT, ERROR          J         AD200             .   IF SO, VERIFICATION COMPLETEAD180          ON        M$EXPPERM>0       . THIS CODE FOR PERM-EXP ONLY          TE,U      A0,M$EXPPERM      . DID USER SPECIFY PERM RETENTION?          J         AD190             .  NO, ERROR          TZ        PRIV              .  YES, IS THIS USER PRIV?          J         AD200             .   YES, THIS IS VALID EXP CODE          CMDERR    ERRPRT(79)        .   NO, 'MUST BE PRIV TO USE PERM EXP'          J         AD990             .   EXIT COMMAND          OFF       M$EXPPERM>0       . END OF PERM-EXP ONLY CODEAD190          CMDERR    ERRPRT(17)        . 'INVALID <CYC>, <REF> OR <EXP>'          J         AD990             .  EXIT COMMAND..         COMMAND SYNTAX/PARAMETER VERIFICATION COMPLETE.  BEGIN.         ACTUAL UPDATE PROCESS HERE..AD200          LMJ       X11,LOCK          . LOCK THE ACF HEADER          DL        A4,CURQAL         . LOAD ACCESSED QUALIFIER          LMJ       X11,SRQUAL        . SEARCH THE QT CHAIN FOR MATCH          J         AD980             .  ERROR DURING SEARCH, STOP HERE          J         AD940             .  NO FIND, STOP HERE          LA        A2,ACQEFL,A3      . FIND, LOAD LINK TO FIRST FILE TABLE          LA,U      A3,FTBUF1         . ADDRESS OF BUFFER FOR 1ST FILE TABLE          LMJ       X10,RDBUFF        . READ FILE TABLE FROM ACF          J         AD980             .  STOP HERE IF ERROR DURING READ          DL        A4,CURQAL         . LOAD ACCESSED QUALIFIER          DTE       A4,ACFTQL,A0      . MUST EQUAL VERIFICATION QUAL FROM FT          J         AD940             .  IF NOT, ERROR          SZ        UPDP1             . ZERO 1ST UPDATE POINTER          SZ        UPDP2             .  AND 2ND UPDATE POINTER          SA        A0,UPDP3          . FIRST FT WILL BE FINAL UPDATE          TNZ       ACTCNT            . IS THIS AN ADD/REMOVE ACCOUNT COMMAND?          J         AD230             .  NO, SKIP..         ADD/REMOVE ACCOUNT.          SA        A0,UPDP1          . STORE 1ST AND ONLY UPDATE POINTER          SZ        UPDP3             . DO NOT UPDATE ACCESS INFO          LMJ       X11,UPDACC        . UPDATE ACCOUNT LIST IN FIRST FILE TABLE          J         AD980             .  ERROR IN UPDATE, STOP HERE          J         AD400             . UPDATE COMPLETE - WRITE FT BACK TO ACF..         ADD/REMOVE/MODIFY FILE.AD230          TNZ       CHGCNT            . QUALIFIER ALREADY UPDATED,          TZ        INTMOD            .  OR INITIAL UPDATE MODE?          SZ        UPDP3             .   YES, DO NOT UPDATE ACCESS INFO          DL        A4,ADDFIL         . LOAD FILE PARAMETER FROM COMMAND SPEC          LMJ       X11,SRFILE        . SEARCH FOR IT IN THIS QUAL'S FT CHAIN          J         AD980             .  ERROR DURING SEARCH, STOP HERE          J         AD250             .  NO FIND, SKIP          TNZ       MODFLG            .  FIND - IS THIS A MODIFY          TZ        REMFLG            .   OR A REMOVE?          J         AD270             .    YES, CONTINUE          E$CLEAR                     .    NO, EDIT ERROR MESSAGE          E$MSG     ADDERR            . 'FILE'          DL        A2,ADDFIL         . GET FILE PARAM          LMJ       X11,FMTDSP        . FORMAT FOR OUTPUT          E$FD2                       . EDIT INTO IMAGE          E$MSGR                      . 'HAS ALREADY BEEN ADDED FOR THIS QUAL'          CMDERR    (0114,LINE)       . PRINT ERROR MESSAGE          J         AD980             .  AND EXIT COMMANDAD250          TNZ       MODFLG            . FILE PARAM WAS FOUND IN FILE TABLE          TZ        REMFLG            .  TEST FOR MODIFY OR REMOVE          J         $+2               .   IF SO, ERROR          J         AD270             .   IF NOT, SKIP          CMDERR    ERRPRT(21)        . 'FILE HAS NOT BEEN ADDED FOR THIS QUAL'          J         AD980             .  EXIT COMMANDAD270          TE        A0,UPDP3          . IS UPDATE TO FIRST FT IN CHAIN?          SA        A0,UPDP2          .  NO, SAVE SECOND UPDATE POINTER          JNZ       A3,AD300          . SKIP IF OPEN/MATCHING SLOT EXISTS IN FT          LA,U      A3,FTBUF3         . LOAD ADDRESS OF NEW FILE TABLE          LMJ       X11,BUFALC        .  AND ALLOCATE IT          J         AD960             .  ERROR ALLOCATING BUFFER, STOP HERE          LA        A3,UPDP2          . RELOAD POINTER TO PREVIOUS FILE TABLE          JNZ       A3,$+2            . SKIP IF NONZERO          LA        A3,UPDP3          . LOAD POINTER TO 1ST FT IF ZERO          SA        A2,ACFTNX,A3      . STORE MASS STORAGE LINK TO NEW FT          SZ        ACFTNX,A0         . ZERO LINK TO NEXT FT IN NEW FT          DL        A4,CURQAL         . LOAD CURRENT ACCESSED QUALIFIER          DS        A4,ACFTQL,A0      . STORE VERIFICATION QUAL FOR NEW FT          LA,U      A3,ACFTBF2,A0     . GET ADDR OF FIRST OPEN SLOT IN NEW FT          SA        A0,UPDP1          . STORE ADDRESS OF 1ST FT TO UPDATEAD300          TZ        REMFLG            . IS THIS A 'REMOVE' COMMAND?          J         AD380             .  YES, SKIP..         ADD/MODIFY FILE.          DL        A4,ADDFIL         . LOAD FILE PARAM FROM COMMAND LINE          TNZ       MODFLG            . 'ADD' COMMAND?          DS        A4,ACFEFL,A3      .  YES, STORE IN OPEN SLOT IN FT          LA,U      A0,M$CYCDEF       . LOAD DEFAULT CYCLE LIMIT          TZ        MODFLG            . 'MODIFY' COMMAND?          LA        A0,ACFECY,A3      .  YES, LOAD PREVIOUS CYCLE LIMIT          TZ        ADDCCT            . CYCLE LIMIT GIVEN ON COMMAND LINE?          LA        A0,ADDCYC         .  YES, USE THIS VALUE INSTEAD          SA        A0,ACFECY,A3      . STORE CYCLE LIMIT IN FT ENTRY          LA,U      A0,M$REFDEF       . LOAD DEFAULT REFERENCE LIMIT          TZ        MODFLG            . 'MODIFY' COMMAND?          LA        A0,ACFERF,A3      .  YES, LOAD PREVIOUS REF LIMIT          TZ        ADDRFC            . REF LIMIT GIVEN ON COMMAND LINE?          LA        A0,ADDREF         .  YES, USE THIS VALUE INSTEAD          SA        A0,ACFERF,A3      . STORE REFERENCE LIMIT IN FT ENTRY          LA,U      A2,ACFFAC         . DEFAULT FLAG BITS (DCY = -ACFFAC)          TNZ       MODFLG            . 'MODIFY' COMMAND?          J         AD320             .  NO, SKIP          LA        A2,ACFEF2,A3      .  YES, LOAD PREV FLAG BITS (6-11)          LSSL      A2,6              . SHIFT TO PROPER POSITION          AA        A2,ACFEF1,A3      . ADD IN BITS 5-0AD320          TNZ       FLGCNT            . ANY FLAG CHANGES ON COMMAND LINE?          J         AD330             .  NO, SKIP          LA        A0,FLGADD         .  YES, GET 'ADD' FLAGS          OR        A0,A2             .  COMBINE WITH PREVIOUS, RESULT IN A1          LNA       A0,FLGREM         . LOAD 'REMOVE' FLAGS (NEG MASK)          AND       A1,A0             . KEEP ALL BUT THESE, RESULT IN A2AD330          SA        A2,ACFEF1,A3      . STORE FLAG BITS (5-0) IN FT ENTRY          SSL       A2,6              . BITS 6-11 TO A2 LOWER          SA        A2,ACFEF2,A3      .  AND STORE IN ENTRY          TZ        MODFLG            . IS THIS AN 'ADD' COMMAND          TZ        ADDEXC            .  OR IS EXPIRATION GIVEN ON CMD LINE?          J         $+2               .   YES          J         AD350             .   NO, SKIP          LA,U      A0,0              . IND DEFAULT EXPIR IF NONE GIVEN          LA,U      A4,M$EXPADEF      . LOAD DEFAULT EXPIRATION PERIOD          TNZ       ADDEXC            . IS EXPIR GIVEN ON COMMAND LINE?          J         AD340             .  NO, SKIP          LA        A0,ADDEXP         . LOAD EXPIR VALUE FROM COMMAND LINE          ON        M$EXPPERM>0       . THIS CODE FOR PERM-EXP ONLY          LA,U      A4,M$EXPPERM      . SET A4 = PERM RETENTION CODE          TNE,U     A0,M$EXPPERM      . DID USER SPECIFY PERM RETENTION?          J         AD345             .  YES, SKIP RANGE CHECK          OFF       M$EXPPERM>0       . END OF PERM-EXP ONLY CODE          LA,H1     A4,EXDFTB         . A4 = MINIMUM EXPIRATION VALUE          LR,U      R1,EXDFCT-2       . LOOP COUNTER FOR SEARCHING EXP TBL          LA        A1,(1,EXDFTB)     . EXPIRATION PERIOD TABLE POINTERAD335          LA,H1     A2,,*A1           . GET NEXT VALID EXPIRATION FROM TABLE          TG,U      A0,1,A2           . IS USER SPEC GREATER THAN THIS VALUE?          LA,H1     A4,,A1            .  YES, LOAD NEXT HIGHEST EXP PERIOD          JGD       R1,AD335          . LOOP BACK UNTIL ALL PERIODS CHECKEDAD340          TNE       A4,A0             . IS THIS SAME AS USER-SPEC?          J         AD345             .  YES, SKIP          LA        A5,A3             . SAVE A3          E$CLEAR                     . EDIT INFORMATION MESSAGE          E$MSG     EXDFMSG           . 'STANDARD EXPIRATION PERIOD OF'          E$DECV    A4                . EDIT COMPUTED EXPIRATION PERIOD          E$MSGR                      . 'DAYS IS USED.'          CMDERR    (0112,LINE)       . PRINT INFO MESSAGE          LA        A3,A5             . RESTORE A3AD345          SA        A4,ACFEEX,A3      . STORE EXPIRATION PERIOD IN FT ENTRYAD350          LA        A4,ACFEF1,A3      . GET FLAG BITS (0-5)          TOP,U     A4,ACFFCF         . IS <CRT> SET?          J         AD360             .  NO, SKIP          LA        A0,ACFEEX,A3      . EXPIRATION          LA        A1,(1,EXDFTB-1)   . INDEX INTO EXP DEFN TABLE          LR,U      R1,EXDFCT         . ENTRY COUNT OF EXP DEFN TABLE          SE,H1     A0,1,*A1          . IS EXP FOUND IN TABLE?          J         $+2               .  NO, CONTINUE          J         AD354             .  YES, SKIP: H2 = <CRT>-ALLOWED IND          ON        M$EXPPERM>0       . THIS CODE FOR PERM-EXP ONLY          TNE,U     A0,M$EXPPERM      . IS THIS PERM-EXPIRATION?          J         AD360             .  YES, ALLOW <CRT>          OFF       M$EXPPERM>0       . END OF PERM-EXP CODE          J         AD355             . <CRT> NOT ALLOWED FOR THIS EXPAD354          TZ,H2     0,A1              . IS CRIT-BACKUP ALLOWED FOR EXP?          J         AD360             .  YES, SKIPAD355          AND,U     A4,-ACFFCF        . REMOVE <CRT> FLAG          SA        A5,ACFEF1,A3      . RESTORE REMAINING FLAG BITS (0-5)          CMDERR    ERRPRT(56)        . '<CRT> NOT ALLOWED FOR EXP - REMOVED'AD360          TNZ       ACFEEX,A3         . IS EXP = 0 (PURGE/DELETE) ?          J         AD400             .  YES, SKIP          LA        A4,ACFEF2,A3      .  NO, LOAD FLAG BITS (6-11)          LSSL      A4,6              . SHIFT TO PROPER POSITION          TOP,U     A4,ACFFDF         . IS <DEL> FLAG SET?          J         AD400             .  NO, SKIP          AND,U     A4,-ACFFDF        .  YES, REMOVE IT          SSL       A5,6              . SHIFT BITS 6-11 TO A5 LOWER          SA        A5,ACFEF2,A3      . RESTORE REMAINING BITS          CMDERR    ERRPRT(83)        . '<DEL> NOT ALLOWED FOR NONZERO EXP'          J         AD400             . GO UPDATE FILE TABLE(S)..         REMOVE FILE.AD380          LXI,U     A3,1              . INCREMENT FOR BLOCK TRANSFER          LA,U      A0,(0)            . MOVE ZEROES          LR,U      R1,ACFTES         . LENGTH OF ONE FILE TABLE ENTRY          BT        A3,,*A0           . CLEAR APPROPRIATE ENTRY IN FILE TABLE..         WRITE UPDATED FILE TABLE(S) BACK TO ACF.AD400          LA        A0,UPDP1          .          JZ        A0,AD410          . SKIP IF NO 1ST FT TO UPDATE          LMJ       X10,WRTBUF        . WRITE 1ST FT BACK TO ACF          J         AD960             .  STOP IF ERRORAD410          LA        A0,UPDP2          .          JZ        A0,AD420          . SKIP IF NO 2ND FT TO UPDATE          LMJ       X10,WRTBUF        .  OTHERWISE, WRITE BACK TO ACF          J         AD960             .  STOP IF ERRORAD420          LA        A2,UPDP3          .          JZ        A2,AD430          . SKIP IF NO 3RD FT TO UPDATE          LA        A0,USERID         .  OTHERWISE, GET USERID          SA        A0,ACFTUI,A2      . STORE IN LAST-USER FIELD          ER        TDATE$            . CURRENT DATE/TIME          SA        A0,ACFTUT,A2      . STORE IN LAST UPDATE TIME FIELD          LA        A0,UPDP3          .          LMJ       X10,WRTBUF        . WRITE 3RD FT (FIRST IN CHAIN)          J         AD960             .  STOP IF ERRORAD430          INC       CHGCNT            . INCREMENT CHANGE COUNT FOR QUALIFIER          NOP                         .          J         AD980             . ALL DONE.AD940          CMDERR    ERRPRT(14)        . 'INTERNAL BUFFER LINK AMBIGUITY'          SZ        CURQAL            . BAD ERROR - ZERO ACCESSED QUALIFIER          SZ        CURQAP            .  AND POINTER..         ERRORS DURING UPDATE COME HERE.AD960          SZ        ACHWRT            . IF ERROR(S), DO NOT UPDATE ACF HEADER..         AFTER HEADER IS LOCKED, ALL EXITS MUST COME HERE.AD980          LMJ       X11,UNLOCK        . WRITE/UNLOCK ACF HEADER..         FINAL EXIT POINT FOR ADD/MODIFY/REMOVE PROCESSING.AD990          J         MS100             . GO SOLICIT THE NEXT COMMAND/..         LIST QUALIFIERS OR FILENAMES OR ACCOUNTS (LIST).LSTCMD          SZ        LSTFND            . ZERO FIND FLAG          SZ        LSTMTC            .  AND MATCH CHAR COUNT          SZ        LSTPRT            .  AND PRINT FLAG          SZ        LSTOUT            .  AND COMMAND OUTPUT FLAG          LA,U      A7,0              . CLEAR KEYWORD SAVE          JUMP,,LS080  ',',LS060      . CHECK FOR CONTROL OPTIONLS060          GNCH,,LS900  'P',LS070  'C',LS072 . MUST BE P OR C OPTIONLS070          SP1       LSTPRT            . P OPTION FOUND - SET PRINT FLAG          J         LS075             . CONTINUE SCANLS072          SP1       LSTOUT            . C OPTION FOUND - SET CMD OUTPUT FLAGLS075          GNCH,,LS900  ' ',LS080  'EN',LS180 . SPACE OR END MUST FOLLOW OPTIONLS080          JUMPNB,,LS900  'AL',LS100  'EN',LS180 . CHECK FOR OPTIONAL KEYWORDLS100          LA,U      A2,0              . INIT MATCH COUNT TO ZERO          LA        A7,A4             . SAVE KEYWORD          SSL       A7,18             .  SHIFT FIRST 3 CHARS TO A7 LOWER          JUMPNB,,LS900  '=',LS110  'EN',LS130 . CHECK FOR KEYWORD PARAMETERLS110          TE,U      A7,$CFS('QUA')    . ONLY 'QUAL' OR 'FILE' KEYWORDS          TNE,U     A7,$CFS('FIL')    .  MAY HAVE A PARAMETER          J         $+2               .          J         LS900             . ERROR IF OTHER THAN THESE          GNCHNB,LS990,LS900  'A1',LS115  '#',LS118  '*',LS120 . GET PARAM, W/CLS115          DL        A0,A4             . STORE PARAMETER FIELD          LA,U      A2,12             . ASSUME SIZE IS MAX (12 CHARS)          TG,U      A3,12             . DOES PARAM HAVE FEWER THAN 12 CHARS?          J         LS120             .  NO, SKIP          LA        A2,A3             .  YES, SAVE SIZE, ALLOW TRAIL WILDCARD          JUMPNB,,LS900  '#',LS118  '*',LS120  'EN',LS125 . CHECK FOR TRAIL W/CLS118          MSI,U     A2,6              . BIT COUNT OF SUPPLIED PARAM          DL        A4,(-0D)          . WILDCARD MASK          DSL       A4,,A2            . SHIFT TO COVER UNUSED CHARS          OR        A1,A5             . A2 = RIGHT HALF PARAM          OR        A0,A4             . A1 = LEFT HALF PARAM          DL        A0,A1             . BACK INTO A0,A1          LA,U      A2,12             . MUST MATCH ALL 12 WITH TRAIL W/CLS119          GNCH,,LS900  '#',LS119  '*',LS120  ' ',LS120  'EN',LS130 . EAT TRL '#'LS120          GNCHNB,,LS900  'EN',LS130   . COMMAND MUST CONTAIN NOTHING MORELS125          LA,U      A2,12             . NO WILDCARD - ENTIRE PARAM MUST MATCHLS130          JZ        A2,LS135          . SKIP IF NO PARAM GIVEN WITH KEYWORD          MSI,U     A2,6              . OTHERWISE, COMPUTE BIT COUNT OF PARAM          LNA,U     A2,,A2            .  AND INVERT FOR SHIFT          DSL       A0,72,A2          . SHIFT SIG PART OF PARAM TO A0,A1 LOWER          DS        A0,LSTMAT         . STORE FOR LATER USELS135          SA        A2,LSTMTC         . STORE INVERSE BIT COUNT OF PARAM OR 0          TE,U      A7,$CFS('QUA')    . LIST QUALIFIER(S)?          J         LS160             .  NO, SKIP          LA        A0,CURQAL         .  YES, GET CURRENT ACCESSED QUALIFIFER          TE,U      A0,0              . MUST BE ZERO (NO QUAL ACCESSED)          J         LS900             .  IF NOT, ERROR          LA,U      A14,1             . STANDARD OPEN FLAG          LMJ       X10,ACFASG        . ASSIGN AND OPEN SYS$*ARCCTL$          J         MS700             . EXIT MARS IF OPEN FAILS          TNZ       PRIV              . IS THIS USER PRIVILEGED?          J         LS920             .  NO, ERROR - MUST BE PRIV TO LIST QUALS          J         LQCMD             .  YES - PROCESS LIST QUALIFIERS COMMANDLS160          TNE,U     A7,$CFS('FIL')    . LIST FILE(S)?          J         LS180             .  YES, SKIP          TE,U      A7,$CFS('ACC')    .  NO, LIST ACCOUNT(S)?          J         LS300             .   NO, CHECK FOR LIST PACK, CLASSLS180          LA        A0,CURQAL         . GET CURRENT ACCESSED QUALIFIER          TE,U      A0,0              . IS IT ZERO (NO ACCESSED)?          J         LS200             .  NO, SKIP          P$RINT    ERRPRT(15)        .  YES, 'QUAL MUST BE ACCESSED FIRST..'          J         LS990             .   EXIT COMMANDLS200          TE,U      A7,$CFS('ACC')    . LIST ACCOUNT(S)?          J         LFCMD             .  NO, GO LIST FILES FOR QUAL ACCESSED          TZ        LSTOUT            .  YES, IS COMMAND OUTPUT REQUESTED?          J         LS900             .   IF SO, ERROR - NOT ALLOWED HERE          TNZ       PRIV              . IS THIS USER PRIVILEGED?          J         LS920             .  NO, ERROR - MUST BE PRIV TO LIST ACCT          J         LACMD             .  YES - PROCESS LIST ACCOUNTS COMMANDLS300          TE,U      A7,$CFS('PAC')    . LIST PACK?          J         LS400             .  NO, CHECK FOR LIST CLASS          LA        A0,CURQAL         .          TNE,U     A0,0              . IS A QUALIFIER ACCESSED          TNZ       CURCLS            .  OR IS NO CLASS ACCESSED?          J         LS900             .   YES, CAN'T USE HERE          TNZ       PRIV              . PRIV USER?          J         LS920             .  NO, ERROR          J         LPCMD             .  YES, PROCESS LIST PACK COMMANDLS400          TE,U      A7,$CFS('CLA')    . LIST CLASS?          J         LS900             .  NO, INVALID KEYWORD          LA        A0,CURQAL         .          TNE,U     A0,0              . IS A QUALIFIER ACCESSED          TZ        CURCLS            .  OR IS A CLASS ACCESSED?          J         LS900             .   YES, CAN'T USE HERE          LA,U      A14,1             . STANDARD OPEN FLAG          LMJ       X10,ACFASG        . ASSIGN AND OPEN SYS$*ARCCTL$          J         MS700             . EXIT MARS IF OPEN FAILS          TNZ       PRIV              . PRIV USER?          J         LS920             .  NO, ERROR          J         LCCMD             .  YES, PROCESS LIST CLASS COMMANDLS900          P$RINT    ERRPRT(5)         . 'UNRECOGNIZED PARAMETER'          J         LS990             .  EXIT COMMANDLS920          P$RINT    ERRPRT(8)         . 'MUST BE PRIVILEGED'LS990          J         MS100             . GO SOLICIT NEXT COMMAND/..         LIST QUALIFIERS.LQCMD          SZ        SRTPTR            . ZERO SORT POINTER          SZ        SRTCNT            .  AND COUNTER          LA        A2,CURCLS         . CURRENT ACCESSED CLASS          JNZ       A2,$+2            . SKIP IF ONE IS THERE          LA        A2,($CFS('DEFAUL')) . IF NOT, USE DEFAULT          LMJ       X10,SRCLASS       . LOOK FOR IT IN CLASS-ID TABLE          J         LQ910             . NO FIND, ERROR          LA        A2,ACCEQL,A0      . FIND, A2 = MS ADDR OF 1ST QTLQ100          LA,U      A3,QTBUF1         . ADDRESS OF QT BUFFER          LMJ       X10,RDBUFF        . READ TABLE INTO MEMORY          J         LQ990             . ERROR READING QT - EXIT COMMAND          SA        A0,QTSAVE         . STORE POINTER TO THIS QT          LX,U      X6,ACQTBG,A0      . ADDRESS OF FIRST QT ENTRY IN TABLE          LXI,U     X6,ACQTES         . SIZE OF ONE ENTRY - LOOP INCREMENT          LR,U      R8,ACQTMX-1       . MAX ENTRIES - 1 (LOOP COUNTER)LQ120          DL        A0,ACQEQL,X6      . GET NEXT QUALIFIER          LA        A2,ACQEFL,*X6     . GET LINK TO 1ST FILE TABLE & INCREMENT          TNE,U     A0,0              . DOES THIS ENTRY CONTAIN A QUALIFIER?          J         LQ190             .  NO, SKIP          SP1       LSTFND            .  YES, SET FIND FLAG          DS        A0,LINE           . STORE IN TEMP RECORD FOR SORT RELEASE          LA        A3,LSTMTC         . NEG BIT COUNT OF MATCHING PARAMETER          JZ        A3,LQ130          .  IF ZERO, NO PARAM - ALL QUALS MATCH          DSL       A0,72,A3          . ALIGN QUAL WITH SHIFTED MATCH PARAMETER          DTE       A0,LSTMAT         . DOES THIS ONE MATCH?          J         LQ190             .  NO, SKIPLQ130          SA        A2,LINE+2         . STORE LINK TO 1ST FT IN TEMP RECORD          LA,U      A0,LINE           .          LMJ       X11,SRTREL        . RELEASE TEMP RECORD TO SORT          J         LQ990             .  EXIT COMMAND IF SORT OVERFLOWLQ190          JGD       R8,LQ120          . LOOP BACK FOR OTHER QUAL ENTRIES          LA        A0,QTSAVE         . RESTORE QT POINTER          LA        A2,ACQTNX,A0      . GET LINK TO NEXT QT IN CHAIN          JNZ       A2,LQ100          . BACK TO BEGINNING IF NONZERO          TZ        SRTPTR            .  IF ZERO, DONE - ANY RECS TO SORT?          J         LQ200             .   YES, SKIP          TZ        LSTFND            .   NO, WERE ANY QUAL ENTRIES FOUND?          J         LQ195             .    YES          P$RINT    ERRPRT(22)        .    NO, 'NO QUALS ARE REGISTERED'          J         LQ990             .     EXIT COMMANDLQ195          P$RINT    ERRPRT(43)        . 'NO MATCHING ENTRIES FOUND'          J         LQ990             .  EXIT COMMAND..         SORT SELECTED QUALIFIERS AND BUILD THE QUALIFIER POINTER TABLE.LQ200          LMJ       X11,SRTRTN        . SORT ALL SELECTED QUALIFIER ENTRIES          LX        X7,(3,QALTBL)     . POINTER TO QUALIFIER POINTER TABLE          LNA,U     A7,1              . INIT CTR FOR LATER USE IN JGD LOOPLQ210          LMJ       X11,SRTRET        . RETURN THE NEXT QUAL IN SORTED SEQ          J         LQ220             . SKIP WHEN NO MORE LEFT          DL        A1,,A0            . LOAD QUAL FROM SORT RECORD          DS        A1,,X7            . STORE IN QALTBL          LA        A1,2,A0           . LOAD LINK TO FILE TABLE          SA        A1,2,*X7          . STORE IN QALTBL          AA,U      A7,1              . INCREMENT LOOP COUNTER          J         LQ210             . BACK FOR MORELQ220          LX        X7,(3,QALTBL-3)   . INIT POINTER TO QALTBL          LR        R7,A7             . LOOP COUNTER          TZ        LSTOUT            . COMMAND LIST OUT?          J         LQ230             .  YES, SKIP..         INITIALIZE FOR OUTPUT TO TERMINAL OR PRINTER.          P$RINT    (0100,$)          . SKIP ONE LINE BEFORE HDG PRINT          LNA,U     A8,1              . INIT HDG LOOP CTR TO SKIP 1ST CONT MSG          LA        A0,(2,($CFS('D,@@PRNT    '))) . PRTCN$ CONTROL IMAGE          TZ        LSTPRT            . PRINTER OUTPUT?          ER        PRTCN$            .  YES, ISSUE PRTCN$ TO TURN ON PRINTING          J         LQ250             . START MAIN LOOP..         INITIALIZE FOR COMMAND LIST OUTPUT (TO ALTERNATE FILE).LQ230          LA,U      A0,ASGLOF         .          ER        CSF$              .  @ASG,T MARS$OUT$          JN        A0,LQ900          .  SKIP IF ERROR ASSIGNING OUTPUT FILE          SZ        LFOCNT            . ZERO OUTPUT LINE COUNT..         PROCESS THE NEXT QUALIFIER IN SEQUENCE FROM QUALIFIER POINTER TABLE.LQ250          LA        A2,3+2,*X7        . LINK TO NEXT FILE TABLE          LA,U      A3,FTBUF2         . MEMORY ADDRESS FOR FILE TABLE          LMJ       X10,RDBUFF        . GO READ FT INTO MEMORY          J         LQ980             .  EXIT COMMAND IF ERROR READING FT          DL        A6,ACFTQL,A0      . VERIFICATION QUALIFIER FROM FILE TABLE          DTE       A6,,X7            . DOES IT EQUAL QUALIFIER FROM QALTBL?          J         LQ920             .  NO, LINK ERROR          LX,U      X6,,A0            .  YES, SETUP X6 TO POINT TO FILE TABLE          DL        A4,ACFTON,X6      . GET OWNER ACCOUNT FOR THIS QUALIFIER          DS        A4,LQONSV         . SAVE FOR LATER USE          LA        A4,ACFTRM,X6      . MAX REF LIMIT FOR QUALIFIER          SA        A4,LQRMSV         . SAVE FOR LATER          LA        A4,ACFTUI,X6      . LAST UPDATING USERID          SA        A4,LQIDSV         . SAVE FOR LATER          LA        A4,ACFTUT,X6      . LAST UPDATE DATE/TIME          SA        A4,LQUTSV         . SAVE FOR LATER          TNZ       LSTOUT            . COMMAND LIST OUTPUT?          J         LQ260             .  NO, SKIP..         OUTPUT A REGISTER COMMAND FOR THIS QUALIFIER.          E$CLEAR                     . CLEAR EDIT          E$MSG     REGMSG            . 'REGISTER QUAL='          DL        A2,,X7            . GET RAW QUALIFIER          LMJ       X11,FMTDSP        . EDIT FOR PRINTING          E$FD2                       . PLACE IN OUTPUT IMAGE          E$MSGR                      . ',OWN='          DL        A0,ACFTON,X6      . OWNER ACCOUNT          JNZ       A0,LQ256          . SKIP IF NONZERO          LA,U      A0,$CFS('#')      . IF ZERO, INSERT A WILDCARD CHAR          LA,U      A1,0              .LQ256          E$FD2                       . INSERT IN OUTPUT          TNZ       ACFTRM,X6         . DOES THIS QUAL HAVE DEF MAX REF?          J         LQ258             .  NO, SKIP          E$MSGR                      .  YES, EDIT ',MXR='          E$DECV    ACFTRM,X6         . AND ADD VALUELQ258          LMJ       X10,ALTOUT        . OUTPUT IMAGE..         PROCESS ACCOUNT LIST FOR THIS QUALIFIER.LQ260          SZ        SRTPTR            . SERO SORT POINTER          SZ        SRTCNT            .  AND COUNTER          DSL       A6,72             . ZERO A6 (FILE CT) AND A7 (ACCT COUNT)          LA,U      A3,ACFTBA,X6      . START ADDRESS OF ACCOUNTS IN FT          LXI,U     A3,2              . LOOP INCREMENT (2 WORDS/ACCT)          LA,U      A4,ACFTMA-1       . MAX ACCOUNTS - 1 (LOOP COUNTER)LQ270          LA,U      A0,,*A3           . GET ADDRESS OF NEXT ACCOUNT          TNZ       0,A0              . IS THERE AN ACCOUNT IN THIS SLOT?          J         LQ275             .  NO, SKIP          AA,U      A7,1              .  YES, INCREMENT ACCOUNT COUNTER          LMJ       X11,SRTREL        . RELEASE ENTRY TO SORT          ER        ERR$              . SORT TBL SHOULD *NEVER* OVERFLOW HERE!LQ275          JGD       A4,LQ270          . LOOP FOR OTHER ACCOUNT ENTRIES          TNZ       LSTOUT            . COMMAND LIST OUTPUT?          J         LQ300             .  NO, SKIP          SZ        LQAFLG            .  YES, CLEAR ACCESS FLAG          JZ        A7,LQ300          . SKIP IF NO ACCOUNTS TO ADD..         OUTPUT AN ACCESS COMMAND AND ADD COMMAND(S) TO INSERT.         ALL VALID ACCOUNTS FOR THIS QUALIFIER.          LMJ       X11,SRTRTN        . SORT ACCOUNT ENTRIES          E$CLEAR                     . CLEAR EDIT          E$MSG     ACCMSG            . 'ACCESS QUAL='          DL        A2,,X7            . GET RAW QUALIFIER          LMJ       X11,FMTDSP        . FORMAT FOR OUTPUT          E$FD2                       . PLACE IN OUTPUT IMAGE          LMJ       X10,ALTOUT        . OUTPUT TO FILE          SP1       LQAFLG            . SET ACCESS FLAG          E$CLEAR                     . CLEAR EDIT          E$MSG     ADDACM            . 'ADD ACCOUNT=('          LR,U      R5,4              . MAX ACCOUNTS/LINELQ280          LMJ       X11,SRTRET        . RETURN NEXT ACCT ENTRY FROM SORT          J         LQ290             . SKIP WHEN DONE          DL        A4,,A0            . GET THE NEXT ACCOUNT NUMBER          JGD       R5,LQ285          . LOOP UNTIL LINE IS FULL          E$SKIP    -1                . ERASE PREVIOUS COMMA          E$MSGR                      . REPLACE WITH RIGHT PARENTHESIS          LMJ       X10,ALTOUT        . OUTPUT TO FILE          E$CLEAR                     . CLEAR EDIT          E$MSG     ADDACM            . 'ADD ACCOUNT=('          LR,U      R5,4              . LOOP COUNT IS ONE LESS HERELQ285          E$FD2     A4                . EDIT ACCOUNT NUMBER INTO IMAGE          E$CHAR    $CFS(',')         . APPEND COMMA TO SEP FROM NEXT ACCOUNT          J         LQ280             . BACK FOR MORELQ290          E$SKIP    -1                . ERASE PREV COMMA          E$MSGR                      . REPLACE WITH RIGHT PARENTHESIS          LMJ       X10,ALTOUT        . OUTPUT TO FILE..         READ ALL FILE ENTRIES FOR THIS QUALIFIER AND RELEASE TO SORT.LQ300          SZ        SRTPTR            . CLEAR SORT POINTER          SZ        SRTCNT            .  AND COUNTER          LA,U      A3,ACFTBF1,X6     . ADDRESS OF 1ST FILE ENTRY IN 1ST FT          LXI,U     A3,ACFTES         . USE ENTRY SIZE FOR INCREMENT          LA,U      A4,ACFTMX1-1      . MAX ENTRIES - 1 (LOOP COUNT)LQ310          LA,U      A0,,*A3           . GET ADDRESS OF NEXT ENTRY          LA        A1,ACFEFL,A0      . FIRST HALF FILENAME FROM ENTRY          TNE,U     A1,0              . DOES THIS ENTRY CONTAIN A FILENAME?          J         LQ320             .  NO, SKIP          AA,U      A6,1              .  YES, INCREMENT FILE COUNTER          LMJ       X11,SRTREL        . RELEASE ENTRY TO SORT          J         LQ980             .  EXIT COMMAND IF SORT TABLE OVERFLOWLQ320          JGD       A4,LQ310          . LOOP BACK FOR OTHER ENTRIES IN THIS FT          LA        A2,ACFTNX,X6      . GET LINK TO NEXT FILE TABLE          JZ        A2,LQ350          . ALL DONE WITH THIS QUAL IF ZERO          LA,U      A3,FTBUF3         .  OTHERWISE, LOAD MEMORY ADDR FOR NXT FT          LMJ       X10,RDBUFF        .  AND READ IT IN FROM THE ACF          J         LQ980             .   EXIT COMMAND IF ERROR READING TABLE          DL        A4,ACFTQL,A0      . GET VERIFICATION QUAL FROM NEXT FT          DTE       A4,,X7            . DOES IT EQUAL CURRENT FROM QALTBL?          J         LQ920             .  NO, LINK ERROR - EXIT COMMAND          LX,U      X6,,A0            .  YES, LOAD ADDRESS OF NEXT FT          LXM,U     A3,ACFTBF2,X6     . ADDRESS OF 1ST ENTRY IN NEXT FT          LXI,U     A3,ACFTES         . LOOP INCREMENT (ENTRY SIZE)          LA,U      A4,ACFTMX2-1      . MAX ENTRIES - 1 (LOOP COUNT)          J         LQ310             . BACK FOR MORELQ350          TZ        LSTOUT            . COMMAND LIST OUTPUT?          J         LQ400             .  YES, SKIP..         OUTPUT TO TERM/PRINTER HERE.          JGD       A8,LQ380          . LOOP FORWARD UNTIL HDG COUNT = 0          TLE,XU    A8,-1             . FIRST TIME THROUGH?          J         LQ370             .  YES, SKIP          P$RINT    (0100,$)          .  NO, PRINT A BLANK LINE          LA,U      A0,CONTRD         .          ER        TREAD$            . SOLICIT CONTINUATION FROM USER          LA,U      A0,,A0            . RETURNED WORD COUNT          JZ        A0,LQ370          . CONTINUE IF ZERO          SA        A0,IMGLEN         .  OTHERWISE, SAVE NEW COMMAND IMAGE LEN          J         LQ990             .  AND EXIT THIS COMMANDLQ370          P$RINT    (0100+QHL,QALHDG) . PRINT LIST QUALIFIERS HEADING          P$RINT    (0100+QHL,DASHES) . FOLLOW WITH LINE OF DASHES          LA,U      A8,18             . INIT HEADING LOOP COUNT          TZ        LSTPRT            . PRINTER OUTPUT?          LA,U      A8,99999          .  YES, NO MORE HDGS OR PAGE WAITSLQ380..         OUTPUT A SUMMARY LINE FOR THIS QUALIFIER TO TERM/PRINTER.          E$CLEAR                     . CLEAR EDIT          DL        A2,,X7            . GET RAW QUALIFIER          LMJ       X11,FMTDSP        . FORMAT FOR OUTPUT          E$FD2                       . INSERT IN IMAGE          E$COL     14                .          LA,U      A0,LQONSV         . ADDRESS OF OWNER ACCOUNT          TNZ       LQONSV            . IS VALUE ZERO?          LA,U      A0,($CFS(' (NONE)     ')) .  YES, INDICATE NONE IN USE          E$COPY    12                . INSERT IN OUTPUT          E$DECF    5,A7              . EDIT ACCOUNT COUNT          E$DECF    11,A6             .  AND FILE COUNT          LA        A0,LQRMSV         . MAXIMUM REF FOR QUAL          JNZ       A0,LQ385          . SKIP IF DEFINED          E$DECF    10,M$REFMAX,,U    .  IF NOT, USE DEFAULT VALUE          E$CHAR    $CFS('*')         . INDICATE THIS IS DEFAULT          J         LQ386             .LQ385          E$DECF    10                . EDIT MAX REF LIMIT          E$CHAR    $CFS(' ')         . THIS IS USER-DEF, NO '*'LQ386          TNZ       LQIDSV            . WAS THERE A LAST UPDATING USERID?          J         LQ390             .  NO, SKIP          E$SKIP    6                 .  YES, ADD TO STATUS LINE          E$COPY    6,LQIDSV          . SHOW LAST UPDATING USERID          E$SKIP    2                 .          E$DAY1    LQUTSV            . SHOW LAST UPDATE DATELQ390          P$RINT    (0115,LINE)       . PRINT LINE TO TERMINAL          J         LQ500             . SKIP TO END OF LOOPLQ400          JZ        A6,LQ450          . SKIP IF NO FILES TO ADD..         OUTPUT A LIST OF ADD COMMANDS (TO ALT FILE) FOR EACH FILE.         ENTRY UNDER THIS QUALIFIER.  IF NOT DONE BEFORE, OUTPUT AN.         ACCESS COMMAND FIRST..          LMJ       X11,SRTRTN        . SORT FILE ENTRIES          TZ        LQAFLG            . HAS ACCESS COMMAND ALREADY BEEN GIVEN?          J         LQ410             .  YES, SKIP          E$CLEAR                     .  NO, CLEAR EDIT          E$MSG     ACCMSG            . 'ACCESS QUAL='          DL        A2,,X7            . RAW QUALIFIER          LMJ       X11,FMTDSP        . FORMAT FOR OUTPUT          E$FD2                       . INSERT INTO IMAGE          LMJ       X10,ALTOUT        . OUTPUT TO FILE          SP1       LQAFLG            . SET ACCESS FLAGLQ410          LMJ       X11,SRTRET        . RETURN THE NEXT ENTRY FROM SORT          J         LQ450             . SKIP WHEN COMPLETE          LX,U      X6,,A0            . GET ADDRESS OF NEXT ENTRY          LMJ       X10,ADDOUT        . FORMAT ADD COMMAND FOR THIS ENTRY          LMJ       X10,ALTOUT        .  AND OUTPUT TO FILE          J         LQ410             . BACK FOR MORELQ450          TNZ       LQAFLG            . HAS ACCESS COMMAND BEEN GIVEN?          J         LQ500             .  NO, SKIP          E$CLEAR                     .  YES, CLEAR EDIT          E$MSG     EXTMSG            . 'EXIT'          LMJ       X10,ALTOUT        . OUTPUT EXIT COMMAND TO FILE.LQ500          JGD       R7,LQ250          . LOOP BACK FOR NEXT QUALIFIER..         FINISH UP.          TZ        LSTOUT            . COMMAND LIST OUTPUT?          J         LQ600             .  YES, SKIP          P$RINT    (0100,$)          .  NO, PRINT BLANK LINE          LA        A0,(2,($CFS('D,@@NOPR    '))) . PRTCN$ CONTROL IMAGE          TZ        LSTPRT            . IS OUTPUT TO AN ATTACHED PRINTER?          ER        PRTCN$            .  YES, ISSUE PRTCN$ TO DISABLE PRINTING          J         LQ990             . ALL DONELQ600          LA,U      A0,BRKLOF         .          ER        CSF$              . CLOSE OUTPUT - @BRKPT MARS$OUT$          E$CLEAR                     . CLEAR EDIT          E$DECV    LFOCNT            . EDIT COUNT OF IMAGES OUTPUT          E$MSG     LFOMSG            . ' COMMANDS WRITTEN TO MARS$OUT$.'          P$RINT    (0112,LINE)       . PRINT MESSAGE          J         LQ990             . ALL DONE..         ERROR RETURNS.LQ900          P$RINT    ERRPRT(18)        . 'UNABLE TO ASSIGN MARS$OUT$'          J         LQ990             .  EXIT COMMANDLQ910          P$RINT    ERRPRT(68)        . 'STORAGE CLASS IS NO LONGER DEFINED'          SZ        CURCLS            . CLEAR CURRENT ACCESSED CLASS          J         LQ990             .LQ920          P$RINT    ERRPRT(14)        . 'INTERNAL BUFFER LINK AMBIGUITY'LQ980          LA,U      A0,BRKLOF         .          TZ        LSTOUT            . COMMAND LIST OUTPUT?          ER        CSF$              .  YES, ISSUE @BRKPT MARS$OUT$LQ990          J         MS100             . GO SOLICIT NEXT COMMAND/..         LIST ACCOUNTS.LACMD          SZ        SRTPTR            . CLEAR SORT POINTER          SZ        SRTCNT            .  AND COUNTER          LA        A3,CURQAP         . GET POINTER TO 1ST FT FOR ACCESSED QUAL          LX,U      X6,ACFTBA,A3      . START ADDRESS OF ACCOUNT NUMBER LIST          LXI,U     X6,2              . LOOP INCREMENT          LR,U      R8,ACFTMA-1       . MAX ACCOUNTS - 1 (LOOP COUNT)LA100          LA,U      A0,,*X6           . ADDRESS OF NEXT ACCOUNT ENTRY          TNZ       0,A0              . IS THIS SLOT IN USE?          J         LA150             .  NO, SKIP          LMJ       X11,SRTREL        .  YES, RELEASE TO SORT          ER        ERR$              . SHOULD NEVER GET AN ERROR RETURN HERELA150          JGD       R8,LA100          . BACK FOR OTHER ENTRIES          TZ        SRTPTR            . ANY ACCOUNTS IN LIST?          J         LA200             .  YES          P$RINT    ERRPRT(23)        .  NO, 'ANY ACCOUNT MAY ACCESS THIS QUAL'          J         LA990             .   EXIT COMMANDLA200          LMJ       X11,SRTRTN        . SORT ACCOUNT LIST          P$RINT    (0100,$)          . PRINT A BLANK LINE FOR READABILITY          P$RINT    (0100+AHL,ACCHDG) . PRINT ACCOUNT HEADING          P$RINT    (0100,$)          .  AND ANOTHER BLANK LINELA250          LMJ       X11,SRTRET        . RETURN THE NEXT ACCOUNT FROM SORT          J         LA300             . SKIP WHEN FINISHED          LXI,U     A0,0102           . FORM PRINT$ CONTROL WORD          ER        PRINT$            . PRINT ACCOUNT NUMBER          J         LA250             . BACK FOR MORELA300          P$RINT    (0100,$)          . PRINT BLANK LINELA990          J         MS100             . GO SOLICIT NEXT COMMAND/..         LIST FILES.LFCMD          SZ        SRTPTR            . CLEAR SORT POINTER          SZ        SRTCNT            .  AND COUNTER          LA        A3,CURQAP         . POINTER TO 1ST FT FOR ACCESSED QUAL          LX,U      X6,ACFTBF1,A3     . ADDRESS OF 1ST FILE ENTRY IN FT          LXI,U     X6,ACFTES         . ENTRY SIZE (LOOP INCREMENT)          LR,U      R8,ACFTMX1-1      . MAX ENTRIES - 1 (LOOP COUNTER)LF100          LA,U      A0,,*X6           . ADDRESS OF NEXT FILE ENTRY          DL        A4,ACFEFL,A0      . FILE NAME FROM ENTRY          TNE,U     A4,0              . IS IT ZERO?          J         LF150             .  YES, THIS SLOT IS EMPTY          SP1       LSTFND            .  NO, SET FOUND FLAG          LA        A1,LSTMTC         . LOAD NEG BIT COUNT OF MATCH PARAM          JZ        A1,LF120          . IF ZERO, ALL ENTRIES WILL BE LISTED          DSL       A4,72,A1          . ALIGN FILENAME WITH SHIFTED MATCH PARAM          DTE       A4,LSTMAT         .  DOES THIS ONE MATCH?          J         LF150             .   NO, SKIPLF120          LMJ       X11,SRTREL        . RELEASE ENTRY TO SORT          J         LF990             . EXIT COMMAND IF SORT OVERFLOWLF150          JGD       R8,LF100          . LOOP BACK FOR OTHER ENTRIES IN FT          LA        A2,ACFTNX,A3      . LINK TO NEXT FT IN CHAIN          JZ        A2,LF200          . SKIP IF ZERO          LA,U      A3,FTBUF2         .  OTHERWISE, LOAD MEM ADDR OF NEXT BUFF          LMJ       X10,RDBUFF        . READ NEXT FILE TABLE FROM ACF          J         LF990             .  EXIT COMMAND IF ERROR READING FT          DL        A4,CURQAL         . LOAD ACCESSED QUALIFIER          DTE       A4,ACFTQL,A0      .  EQUAL TO VERIFICATION QUAL FROM FT?          J         LF900             .   NO, SKIP          LA,U      A3,,A0            .   YES, LOAD ADDRESS OF NEXT FT BUFFER          LXM,U     X6,ACFTBF2,A3     . ADDRESS OF 1ST ENTRY IN NEXT FT BUFF          LR,U      R8,ACFTMX2-1      . MAX ENTRIES - 1 (LOOP COUNT)          J         LF100             . GO PROCESS ENTRIES FROM THIS FILE TABLELF200          TZ        SRTPTR            . ANY ENTRIES SELECTED?          J         LF220             .  YES, SKIP          TZ        LSTFND            .  NO, ANY ENTRIES FOUND?          J         LF210             .   YES          P$RINT    ERRPRT(20)        .   NO, 'NO FILE ENTRIES FOR THIS QUAL'          J         LF990             .    EXIT COMMANDLF210          P$RINT    ERRPRT(43)        . 'NO MATCHING ENTRIES FOUND'          J         LF990             .  EXIT COMMANDLF220          LMJ       X11,SRTRTN        . SORT SELECTED ENTRIES          TZ        LSTOUT            . COMMAND LIST OUTPUT?          J         LF230             .  YES, SKIP          P$RINT    (0100,$)          .  NO, PRINT BLANK LINE FOR READABILITY          LNA,U     A8,1              . INIT HDG COUNT, PRT HDG, SKIP 1ST TREAD          LA        A0,(2,($CFS('D,@@PRNT    '))) . PRTCN$ CONTROL IMAGE          TZ        LSTPRT            . OUTPUT TO PRINTER?          ER        PRTCN$            .  YES, ISSUE PRTCN$ TO TURN ON PRINTER          J         LF250             . BEGIN LIST OUTPUTLF230          LA,U      A0,ASGLOF         .          ER        CSF$              .  @ASG,T MARS$OUT$          JN        A0,LF920          . SKIP IF ERROR ASSIGNING OUTPUT FILE          SZ        LFOCNT            . ZERO OUTPUT LINE COUNTLF250          LMJ       X11,SRTRET        . RETURN NEXT FILE ENTRY FROM SORT          J         LF500             . EXIT WHEN NO MORE RECORDS TO RETURN          LX,U      X6,,A0            . LOAD ADDRESS OF NEXT ENTRY          TZ        LSTOUT            . COMMAND LIST OUTPUT?          J         LF300             .  YES, SKIP          JGD       A8,LF280          .  NO, DECR HEADING COUNT AND SKIP          TLE,XU    A8,-1             . IS THIS THE FIRST TIME THROUGH?          J         LF270             .  YES, DON'T SOLICIT PAGE CONTINUATION          P$RINT    (0100,$)          . PRINT BLANK LINE          LA,U      A0,CONTRD         .          ER        TREAD$            .  'CONTINUE>'          LA,U      A0,,A0            . WORD COUNT OF RETURNED INPUT          JZ        A0,LF270          . CONTINUE IF ZERO          SA        A0,IMGLEN         . OTHERWISE, SAVE LENGTH OF NEXT COMMAND          J         LF990             .  AND EXIT THIS LIST COMMANDLF270I         $REPEAT   4                 . PRINT LIST FILE HEADING          LA        A0,(0100+FHL,FILHDG+(I-1)*FHL) . PRT CTL WORD FOR NXT LINE          TNZ       PRIV              . PRIVILEGED USER?          ANH       A0,(2,0)          .  NO, SKIP PRT OF LAST 2 WORDS          ER        PRINT$            . PRINT LINE OF TEXT          $ENDR                       . END OF HEADING PRINT          LA,U      A8,16             . INIT HEADING COUNT          TZ        LSTPRT            . OUTPUT TO PRINTER?          LA,U      A8,99999          .  YES, NO MORE HDGS OR PAGE WAITSLF280          E$CLEAR                     . CLEAR EDIT          DL        A2,CURQAL         . CURRENT ACCESSED QUALIFIER          LMJ       X11,FMTDSP        . FORMAT FOR OUTPUT          E$FD2                       . INSERT IN OUTPUT IMAGE          E$CHAR    $CFS('*')         . QUAL/FILENAME SEPARATOR          DL        A2,ACFEFL,X6      . FILENAME FROM THIS ENTRY          LMJ       X11,FMTDSP        . FORMAT FOR OUTPUT          E$FD2                       .  AND INSERT IN IMAGE          E$COL     27                . SKIP OVER A LITTLE          E$DECF    2,ACFECY,X6       . EDIT CYCLE LIMIT          E$DECF    6,ACFERF,X6       . EDIT REFERENCE LIMIT          E$DECF    6,ACFEEX,X6       . EDIT EXPIRATION PERIOD DO 2 ,   E$CHAR    $CFS(' ')         .          LA        A3,ACFEF2,X6      . GET FLAG BITS (6-11)          LSSL      A3,6              . SHIFT TO PROPER POSITION          AA        A3,ACFEF1,X6      . ADD IN BITS 0-5          XOR,U     A3,ACFFAC         . INVERT <ACFFAC> FOR DISPLAY          LX        X4,(1,FLGTBL-1)   . POINTER TO FLAG CONTROL TABLE          LR,U      R4,FLTLEN-1       . LENGTH OF FLAG CTR TBL - 1 FOR LOOP          TNZ       PRIV              . PRIVILEGED USER?          LR,U      R4,FLTLNP-1       .  NO, ONLY LIST NON-PRIV FLAGSLF285 DO 2 ,   E$CHAR    $CFS(' ')         . SKIP TWO SPACES          LA,U      A0,$CFS('*')      . ASTERISK INDICATES FLAG IS SET          TOP,H2    A4,1,*X4          . IS THE NEXT FLAG SET?          LA,U      A0,$CFS('.')      .  NO, PRINT PERIOD INSTEAD          E$CHAR                      . INSERT FLAG INDICATOR          JGD       R4,LF285          . LOOP BACK FOR OTHER FLAG BITS          TZ        PRIV              . PRIVILEGED USER?          J         LF290             .  YES, FINISHED WITH FLAG DISPLAY DO 2 ,   E$CHAR    $CFS(' ')         .  NO, SKIP OVER TO FINISH          LR,U      R4,FLTLEN-FLTLNP-1 . INIT LOOP CTR FOR REM OF TBLLF286          TOP,H2    A4,1,*X4          . IS THE NEXT FLAG SET?          J         LF288             .  NO, SKIP          E$CHAR    $CFS('+')         .  YES          E$COPY    3,,X4             . INSERT FLAG MNEMONICLF288          JGD       R4,LF286          . LOOP BACK FOR REM OF PRIV FLAGSLF290          P$RINT    (0116,LINE)       . PRINT OUTPUT LINE TO TERMINAL/PRINTER          J         LF250             . BACK FOR NEXT FILE ENTRYLF300          LMJ       X10,ADDOUT        . FORMAT ADD COMMAND FOR THIS ENTRY          LMJ       X10,ALTOUT        . OUTPUT TO FILE MARS$OUT$          J         LF250             . BACK FOR NEXT ENTRYLF500          TZ        LSTOUT            . COMMAND LIST OUTPUT?          J         LF600             .  YES, SKIP          P$RINT    (0100,$)          .  NO, PRINT BLANK LINE FOR READABILITY          LA        A0,(2,($CFS('D,@@NOPR    '))) . PRINT CONTROL IMAGE          TZ        LSTPRT            . OUTPUT TO PRINTER?          ER        PRTCN$            .  YES, ISSUE PRTCN$ TO TURN OFF PRINTING          J         LF990             . ALL DONELF600          LA,U      A0,BRKLOF         .          ER        CSF$              . CLOSE OUTPUT FILE - @BRKPT MARS$OUT$          E$CLEAR                     . CLEAR EDIT          E$DECV    LFOCNT            . EDIT OUTPUT LINE COUNT          E$MSG     LFOMSG            . ' COMMANDS WRITTEN TO FILE'          P$RINT    (0112,LINE)       . PRINT STATUS MESSAGE          J         LF990             . ALL DONELF900          P$RINT    ERRPRT(14)        . 'INTERNAL BUFFER LINK AMBIGUITY'          J         LF990             .  EXIT COMMANDLF920          P$RINT    ERRPRT(18)        . 'UNABLE TO ASSIGN OUTPUT FILE'LF990          J         MS100             . GO SOLICIT NEXT COMMAND FROM USER...         OUTPUT AN ADD COMMAND FOR THIS FILE.         (CALLED FROM LIST QUAL OR LIST FILE, COMMAND LIST OUTPUT).ADDOUT          E$CLEAR                     . CLEAR EDIT          E$MSG     ADDFLM            . 'ADD FILE='          DL        A2,ACFEFL,X6      . GET FILENAME FROM ENTRY          LMJ       X11,FMTDSP        . FORMAT FOR OUTPUT          E$FD2                       . EDIT INTO IMAGE          E$MSGR                      . ',CYC='          E$DECV    ACFECY,X6         . EDIT CYCLE LIMIT          E$MSGR                      . ',REF='          E$DECV    ACFERF,X6         . EDIT REFERENCE LIMIT          E$MSGR                      . ',EXP='          E$DECV    ACFEEX,X6         . EDIT EXPIRATION PERIOD          LA        A3,ACFEF2,X6      . GET FLAG BITS (6-11)          LSSL      A3,6              . SHIFT TO PROPER POSITION          AA        A3,ACFEF1,X6      . ADD IN BITS 0-5          XOR,U     A3,ACFFAC         . INVERT <ACFFAC> FOR OUTPUT          JZ        A4,AX120          . SKIP IF NONE SET          E$MSGR                      .  OTHERWISE, ',FLAG=('          LA,U      A5,0              . SET NO FLAGS PROCESSED (YET)          LX        X4,(1,FLGTBL-1)   . POINTER TO FLAG CONTROL TABLE          LR,U      R4,FLTLEN-1       . LENGTH OF FLAG CTR TBL - 1 (LOOP COUNT)AX110          TOP,H2    A4,1,*X4          . IS THE NEXT FLAG SET?          J         AX115             .  NO, SKIP          JZ        A5,AX112          .  YES, SKIP IF NO FLAGS OUTPUT YET          E$CHAR    $CFS(',')         . EDIT FLAG MNEMONIC SEPARATORAX112          LA,U      A5,1              . INDICATE FLAG(S) OUTPUT          E$COPY    3,,X4             . COPY MNEMONIC FOR THIS FLAGAX115          JGD       R4,AX110          . BACK FOR OTHER FLAGS          E$MSGR                      . ')'AX120          J         0,X10             . RETURN..         OUTPUT AN IMAGE TO MARS$OUT$ FILE.ALTOUT          E$COLN                      . GET COLUMN NUMBER          LSSL      A0,18             . SHIFT TO A0 UPPER          LXM,U     A0,LINE           . FORM PARAMETER FOR SYMB$          SA        A0,ALTPKT+4       . INTO SYMB$ PACKET          LA,U      A0,ALTPKT         .          ER        SYMB$             . ISSUE SYMB$ TO WRITE IMAGE TO FILE          INC       LFOCNT            . INCREMENT OUTPUT LINE COUNT          NOP                         .          J         0,X10             . RETURN/..         LIST PACK.LPCMD          SZ        SRTPTR            . ZERO SORT POINTER          SZ        SRTCNT            .  AND COUNTER          LX,U      X6,ACPTBG,X8      . X6 = START ADDRESS OF PACK-ID TABLE          LXI,U     X6,ACPTES         . LOOP INCREMENT = REC SIZE          LA        A6,CURCLS         . CURRENT ACCESSED CLASS-ID          LA,U      A7,0              . ZERO CONTAINS-FIXED FLAG          LR,U      R6,ACMXPK-1       . LOOP COUNT, MAX PACK-ID ENTRIES - 1LP100          LA,U      A0,,*X6           . A0 = ADDRESS OF NEXT ENTRY          TE        A6,ACPECL,A0      . IS THIS ENTRY LINKED TO CURRENT CLASS?          J         LP150             .  NO, SKIP          LA        A1,ACPEPK,A0      .  YES, A1 = PACK-ID          JZ        A1,LP150          . SKIP IF ZERO          TE        A1,($CFS('FIX$$$')) . IS THIS FIXED STORAGE?          J         LP130             .  NO, SKIP          LA,U      A7,1              .  YES, SET CONTAINS-FIXED FLAG          J         LP150             . GET NEXT ENTRYLP130          LMJ       X11,SRTREL        . RELEASE NON-FIXED MATCHING ENT TO SORT          ER        ERR$              .  ABORT IF ERROR HERE, SHOULDN'T HAPPENLP150          JGD       R6,LP100          . BACK FOR NEXT PACK-ID ENTRY          TNZ       SRTPTR            . ANY FOUND PACK-IDS?          JZ        A7,LP700          .  NO, SKIP IF NO FIXED EITHER          LMJ       X11,SRTRTN        . SORT LIST OF PACKIDS          P$RINT    (0100,$)          . SKIP A LINE          E$CLEAR                     . CLEAR EDIT          E$MSG     LPMSG             . 'STORAGE CLASS <'          E$FD2     CURCLS            . CURRENT ACCESSED CLASS          E$MSGR                      . '> APPL TO FILES ON THESE PACK-IDS:'          P$RINT    (0114,LINE)       . PRINT HEADING          P$RINT    (0100,$)          . SKIP ANOTHER          JZ        A7,LP200          . SKIP IF NO FIXED          P$RINT    ERRPRT(69)        .  IF FIXED, PRINT 'FIX$$$  (FIXED)'LP200          LMJ       X11,SRTRET        . GET NEXT PACK-ID FROM SORT          J         LP250             . SKIP WHEN NO MORE TO PRINT          LA,U      A0,ACPEPK,A0      . A0 = ADDRESS OF PACK-ID NAME          LXI,U     A0,0101           . MAKE A PRINT CONTROL WORD          ER        PRINT$            .  AND PRINT IT          J         LP200             . BACK FOR MORELP250          P$RINT    (0100,$)          . SKIP A LINE FOR READABILITY          J         LP990             . ALL DONELP700          P$RINT    ERRPRT(70)        . 'CURRENT CLASS CONTAINS NO PACK-IDS'LP990          J         MS100             . GET NEXT COMMAND/..         LIST CLASS.LCCMD          LX,U      X6,ACCTBG-ACCTES,X8 . X6 = POINTER TO CLASS-ID TABLE          LXI,U     X6,ACCTES         . LOOP INCREMENT = REC SIZE          LR,U      R6,ACMXCL-1       . MAX CLASS ENTRIES - 1 (LOOP COUNT)          SZ        SRTPTR            . ZERO SORT POINTER          SZ        SRTCNT            .  AND COUNTERLC100          LA        A6,ACCECL+ACCTES,*X6 . A6 = NEXT CLASS-ID IN LIST          JZ        A6,LC180          . SKIP IF NO CLASS-ID IN THIS SLOT          DSL       A4,72             . ZERO PACK COUNTERS          LX,U      X4,ACPTBG,X8      . X4 = POINTER TO PACK-ID TABLE          LXI,U     X4,ACPTES         . LOOP INCREMENT = REC SIZE          LR,U      R4,ACMXPK-1       . MAX PACK ENTRIES - 1 (LOOP COUNT)LC120          LA        A0,ACPEPK,X4      . GET NEXT PACK-ID          TE        A6,ACPECL,*X4     . IS THIS ENTRY IN CURRENT CLASS?          J         LC130             .  NO, SKIP          TE        A0,($CFS('FIX$$$')) .  YES, IS IT FIXED STORAGE?          AA,U      A4,1              .   NO, INCREMENT REM-PACK COUNT          TNE       A0,($CFS('FIX$$$')) .          LA,U      A5,1              .   YES, SET CONTAINS-FIXED FLAGLC130          JGD       R4,LC120          . LOOP BACK FOR NEXT PACK-ID          SA        A6,LINE           . STORE CURRENT CLASS-ID IN SORT REC          SA,H1     A4,LINE+1         .  AND REM PACK COUNT          SA,H2     A5,LINE+1         .  AND CONTAINS-FIXED FLAG          LA,U      A4,0              . ZERO QUALIFIER COUNTER          LA        A2,ACCEQL,X6      . A2 = LINK TO 1ST QT FOR CLASSLC140          LA,U      A3,QTBUF1         . READ INTO QTBUF1          LMJ       X10,RDBUFF        . READ NEXT QT FOR CLASS          J         LC990             .  ABORT COMMAND IF ERROR          LA,U      A1,ACQTBG,A0      . A1 = POINTER TO 1ST QUAL ENTRY IN QT          LXI,U     A1,ACQTES         . LOOP INCREMENT = REC SIZE          LR,U      R1,ACQTMX-1       . LOOP COUNTERLC150          LA        A2,ACQEQL,*A1     . GET NEXT QUALIFIER IN TABLE          TE,U      A2,0              . IS THERE ONE IN THIS SLOT?          AA,U      A4,1              .  YES, INCREMENT QUALIFIER COUNT          JGD       R1,LC150          . BACK FOR MORE          LA        A2,ACQTNX,A0      . LINK TO NEXT QT IN CHAIN          JNZ       A2,LC140          . BACK FOR MORE IF NONZERO          SA        A4,LINE+2         . FIN READING QTS, STORE QUAL CT FOR SORT          LA,U      A0,LINE           . ADDRESS OF TEMP SORT RECORD          LMJ       X11,SRTREL        . RELEASE TO SORT          ER        ERR$              .  SOMETHING IS WRONG IF ERROR HERELC180          JGD       R6,LC100          . BACK FOR NEXT CLASS-ID ENTRY          LMJ       X11,SRTRTN        . SORT DATA FOR CLASS-IDS          P$RINT    (0100,$)          . SKIP A LINE          P$RINT    (0100+CHL,CLSHDG) . PRINT HEADING          P$RINT    (0100+CHL,DASHES) .  AND A LINE OF DASHES          P$RINT    (0100,$)          . SKIP ANOTHERLC200          LMJ       X11,SRTRET        . RETURN NEXT DATA FROM SORT          J         LC250             . FINISHED WHEN NO MORE TO GET          LX,U      X4,,A0            . X4 = ADDRESS OF NEXT SORT RECORD          E$CLEAR                     . CLEAR EDIT          E$SKIP    3                 .          LA        A0,,X4            . A0 = CLASS-ID (FIELDATA)          LA,U      A1,0              . ZERO TRAILING CHARACTER          TNE       A0,($CFS('DEFAUL')) . IS THIS DEFAULT CLASS?          LA,U      A1,$CFS('T')      .  YES, APPEND 'T' FOR 7 CHARS          E$FD2                       . EDIT INTO IMAGE          E$COL     16                .          E$DECF    4,2,X4            . COUNT OF REGISTERED QUALIFIERS          E$COL     29                .          E$DECF    3,1,X4,H1         . COUNT OF PACK-IDS          TNZ,H2    1,X4              . IS CONTAINS-FIXED SET?          J         LC220             .  NO, SKIP          E$FD1     ($CFS('+FIXED'))  .  YES, INDICATE IN OUTPUTLC220          P$RINT    (0110,LINE)       . PRINT STATUS LINE FOR CLASS          J         LC200             . BACK FOR MORELC250          P$RINT    (0100,$)          . SKIP A LINELC990          J         MS100             . ALL DONE, GET NEXT COMMAND/..         SELECT A LIST OF ARCHIVED FILES (SELECT).SELCMD          SZ        SELFLGS           . CLEAR 'A' AND 'R' FLAGS          JUMP,,SE100  ',',SE050      . TEST FOR OPTION PRESENTSE050          GNCH,,SE920  'A',SE060  'R',SE070  'B',SE080 . JUMP ON ALLOWED OPTIONSE060          SP1       SELALL            . SET 'A' FLAG (SELECT ALL FILES)          J         SE090             .SE070          SP1       SELREL            . SET 'R' FLAG (SEL ONLY RELOADED FILES)          J         SE090             .SE080          SP1       SELBCK            . SET 'B' FLAG (SELECT BACKUP COPIES)          SP1       SELALL            .  ALSO SELECT REGARDLESS OF RLD STATUSSE090          GNCH                        . GET NEXT CHARACTER OF COMMAND LINE          TNZ       SAVMOD            . SAVE-HISTORY MODE?          J         SE100             .  NO, SKIP          P$RINT    ERRPRT(53)        .  YES, 'SELECT OPTION IGNORED'          SZ        SELFLGS           . ZERO OPTION FLAGSSE100          LA        A0,SELBCK         . GET B-OPTION FLAG          TZ        SELCNT            . ANY FILES ALREADY SELECTED,          TNE       A0,BCKFLG         .  OF DIFFERENT TYPE?          J         SE105             .   NO, SKIP          P$RINT    ERRPRT(57)        .   YES, 'CANNOT SEL STD, BACKUP TOGETHER'          J         SE900             .    EXIT COMMANDSE105          SA        A0,BCKFLG         . SET/CLEAR BACKUP-SELECTED FLAG          LA        A0,(SPCNT,SELPAR) . PARAMETER LIST FOR SELECT COMMAND          LMJ       X10,PARSCN        . PARSE REMAINDER OF COMMAND LINE          J         SE900             .  STOP HERE IF SYNTAX ERROR DETECTED          TZ        SEFFLG            . WAS A FILE NAME GIVEN ON THE CMD LINE?          J         SE110             .  YES, SKIP          LNA,U     A0,0              .  NO, SET TO MASTER WILDCARD          SA        A0,SEFILE         .          SA        A0,SEFILE+1       .SE110          TNZ       SEQUAL            . IS QUAL A MASTER WILDCARD,          TZ        SEFILE            .  AND IS FILE A MASTER WILDCARD?          J         SE120             .   NO, SKIP          P$RINT    ERRPRT(32)        .   YES, 'BOTH CANNOT BE MASTER W/C'          J         SE900             .    EXIT COMMANDSE120          LA,U      A0,0              . USE ZERO TO INDICATE NO CYCLE SUPPLIED          TNZ       SECFLG            . WAS A CYCLE GIVEN BY THE USER?          J         SE130             .  NO, SKIP          LA        A0,SECYCL         .  YES          TG,U      A0,1              . IS CYCLE WITHIN THE RANGE 1-999?          TG,U      A0,1000           .          J         $+2               .  NO          J         SE130             .  YES, SKIP          P$RINT    ERRPRT(33)        . 'INVALID VALUE FOR <CYCLE>'          J         SE900             .  EXIT COMMANDSE130          SA        A0,SECYCL         . SAVE SUPPLIED CYCLE OR ZERO          ON        M$MHFSHARED>0     . THIS CODE FOR SHARED-ONLY          LA        A0,HOSTID         . DEFAULT = MATCH LOCAL HOST          AA,U      A0,0100           .  PLUS SHARED          TNZ       SEHFLG            . WAS HOSTID GIVEN BY USER?          J         SE140             .  NO, SKIP - MATCH LCL+SHARED          LA        A1,SEHOST         .  YES, GET USER PARAMETER          DSL       A1,30             . LEFTMOST CHAR TO A1 LOWER          LA,U      A0,0              . CODE TO MATCH ALL HOSTS          TNE,U     A1,077            . WILDCARD CHAR RETURNED?          J         SE140             .  YES, RETURN ALL          SSL       A2,6              . OTHER CHARACTERS IN A2          TE        A2,($CFS('@     ')) . BETTER ALL BE SPACES          J         SE135             .  IF NOT, ERROR          LA        A2,(1,HIDTBL-1)   . POINTER TO CODE LOOKUP TABLE          LR,U      R1,HIDLEN         . LENGTH OF CODE LOOKUP TABLE          SE,H1     A1,1,*A2          . CHECK FOR VALID HOST-ID CODE          J         SE135             . IF NO FIND, ERROR          LA,H2     A0,,A2            . A0 = INTERNAL CODE FOR HOST-ID          TNE,U     A1,$CFS('L')      .  UNLESS LETTER 'L',          LA        A0,HOSTID         .   IN WHICH CASE USE LOCAL HOSTID          J         SE140             .SE135          P$RINT    ERRPRT(74)        . 'INVALID <HOST> PARAMETER'          J         SE900             .  EXIT COMMANDSE140          SA        A0,SEHOST         . SAVE INTERNAL HOST-LOOKUP CODE          OFF       M$MHFSHARED>0     . END OF SHARED-ONLY CODE          LX        X6,(SLSIZE,SELLST) . POINTER TO SELECTION LIST          LA        A4,SELCNT         . PREVIOUS SELECTION COUNT          JGD       A4,SE160          . DECREMENT, SKIP IF SOME ALREADY THERE          TZ        SAVMOD            . FAS SAVE-HISTORY MODE?          J         SE150             .  YES, DON'T ASSIGN THE ACF FILE          LA,U      A14,1             . STANDARD OPEN FLAG          LMJ       X10,ACFASG        . ASSIGN/OPEN THE ACF FILE          J         MS700             .  EXIT MARS IF THIS FILE IS UNAVAILABLESE150          LMJ       X10,AHFASG        . ASSIGN/OPEN THE AHF (HISTORY) FILE          J         SE900             .  EXIT CMD IF THIS FILE CAN'T BE OPENED          SZ        RELCNT            . ZERO RELOAD COUNT IF SEL COUNT = 0          J         SE180             .SE160          SZ        SLSEL,*X6         . CLEAR SELECTION FLAG FOR ALL FILES          JGD       A4,SE160          .  CURRENTLY ON THE SELECTION LISTSE180          LA,U      A7,0              . ZERO A7 (NEW SELECTION COUNTER)          LMJ       X11,FFINIT        . TELL FINDFILE TO START OVERSE200          DL        A0,SEQUAL         . LOAD QUALIFIER,          DL        A2,SEFILE         .  FILENAME,          LA        A4,SECYCL         .  CYCLE TO SELECT          LA        A5,SEHOST         . REQUESTED HOST-ID LOOKUP CODE          LSSL      A5,18             .  TO A5 UPPER          AA        A5,SELBCK         . A5 LOWER = BACKUP-SELECT FLAG          LMJ       X11,FINDFILE      . FIND THE NEXT OCCURRENCE IN THE AHF          J         SE900             .  EXIT COMMAND IF ERROR HERE          J         SE300             .  NO MORE FINDS, SKIP          TP        APFERW,X4         . FIND, HAS THIS FILE BEEN PREV RELOADED?          J         SE220             .  YES          TNZ       SELREL            .  NO, IS THIS A RELOADED-ONLY SEARCH?          J         SE250             .   NO, CONTINUE          J         SE290             .   YES, SKIP THIS ENTRYSE220          TNZ       SELFLGS           . SKIP THIS ENTRY IF FILE WAS PREVIOUSLY          J         SE290             .  RELOADED AND 'A' AND 'R' OPTS MISSINGSE250          LA        A2,APFECL,X4      . GET CYCLE, LINK TO AHF ENTRY          LA        A3,(SLSIZE,SELLST). POINTER TO SELECTION LIST          LR        R1,SELCNT         . COUNT OF CURRENT ENTRIES IN LIST          SE        A2,SLFEBG+APFECL,*A3 . SEARCH FOR SAME FILE ALREADY SELECTED          J         $+2               .  NO FIND, CONTINUE          J         SE290             .  FIND, DON'T INCLUDE IN LIST TWICE          AA,U      A7,1              . INCREMENT SELECTION LIST COUNTER          AU        A7,SELCNT         . ADD CURRENT ENTRY COUNT          TLE,U     A8,MAXSEL+1       . HAVE WE SELECTED TOO MANY FILES?          J         SE280             .  NO          E$CLEAR                     .  YES, PREPARE TO EDIT ERROR MESSAGE          E$MSG     SELOVF            . 'TOO MANY FILES SELECTED, THE MAX IS'          E$DECV    MAXSEL,,U         . EDIT MAX SELECTION COUNT          E$MSGR                      .          P$RINT    (0112,LINE)       . PRINT ERROR MESSAGE          J         SE900             .  AND EXIT COMMANDSE280          DL        A0,APQEQL,X5      . GET QUALIFIER FROM AHF LOOKUP ENTRY          DS        A0,SLQUAL,X6      .  STORE IN SELECTION RECORD          SP1       SLSEL,X6          . SET FILE SELECTED THIS COMMAND          SZ        SLREL,X6          . ZERO RELOAD FLAG          SZ        SLRLNK,X6         . ZERO REPLACEMENT LIST LINK          LA        A0,APFEHC,X4      . HOSTID, JUL CREATE DATE          SSL       A0,15             . HOSTID (3 BITS) TO A0 LOWER          TNE,U     A0,07             . ALL 1'S = SHARED FILE          LA,U      A0,077            .  IF SO, LOAD CODE FOR SHARED FILE          SA        A0,SLHOST,X6      . SAVE HOST-ID FOR LATER REF          LA,U      A0,SLFEBG,*X6     . POS OF SELECTION RECORD TO RECEIVE DATA          LXI,U     A0,1              . PREPARE FOR TRANSFER          LXI,U     X4,1              .          LR,U      R1,APFTES         . WORD COUNT OF POINTER FILE ENTRY          BT        A0,,*X4           . TRANSFER TO SELECTION RECORDSE290          J         SE200             . BACK FOR MORE FILESSE300          E$CLEAR                     . CLEAR EDIT          E$DECV    A7                . EDIT TOTAL NEW FILES SELECTED          AU        A7,SELCNT         . COMPUTE TOTAL SELECTION COUNT          TNZ       SELCNT            . ANY FILES SELECTED BEFORE?          J         SE320             .  NO, SKIP          E$MSG     SELADD            . ' ADDITIONAL ('          E$DECV    A8                . EDIT TOTAL FILES SELECTED          E$MSGR                      . ' TOTAL)'SE320          TNZ       SELBCK            . SELECTING BACKUP ARCHIVE COPIES?          J         SE325             .  NO, SKIP          E$COPY    7,($CFS(' BACKUP     ')) .  YES, INDICATE BACKUP STATUSSE325          E$MSG     SELMSG            . ' FILES SELECTED.'          LA,U      A0,$CFS('.')      . END WITH A PERIOD IF NO NEW FILES SEL          JZ        A7,$+2            .          LA,U      A0,$CFS(':')      . OTHERWISE, END WITH A COLON          E$CHAR                      . EDIT CHAR INTO IMAGE          P$RINT    (0114,LINE)       . PRINT INFO MESSAGE, TELL WHAT WE FOUND          SA        A8,SELCNT         . UPDATE SELECTION COUNT          JZ        A7,SE900          . SKIP IF NO NEW FILES SELECTED          P$RINT    (0100,$)          .  OTHERWISE, PRNT BLANK LINE          SP1       AUTOSM            .  AND SET AUTO-SELECT MODE          J         SUMSEL1           . GO PRINT SUMMARY LIST FOR NEW FILES..         ERROR RETURNS.SE900          J         MS100             . BACK FOR NEXT COMMAND IF ERRORSE920          P$RINT    ERRPRT(4)         . 'COMMAND SYNTAX ERROR'          J         MS100             . GO SOLICIT NEXT COMMAND/..         MARK ONE OR MORE FILES FOR RELOAD, IN SELECT MODE (RELOAD).RELSEL          LNA,U     A14,1             . FLAG: PARAM(S) REQ, 'REL' NOT ALLOWED          LMJ       X10,SELPSC        . PARSE PARAMETER LIST          J         RS990             .  EXIT IF ERROR WITH PARAMETER(S)          LX        X6,(SLSIZE,SELLST-SLSIZE) . POINTER TO SELECTION LIST          LR        R6,SELCNT         . SELECTION LIST ENTRY COUNT          JGD       R6,$+1            . DECREMENT FOR LOOP          LR,U      R5,0              . SHARED-RELOAD ERROR FLAG          LA,U      A14,0             . INITIALIZE FILE NUMBER          SZ        RELNEW            .  AND NEW RELOADED FILE COUNTRS100          AA,U      A14,1             . INCREMENT FILE NUMBER          TNZ       SLSEL+SLSIZE,*X6  . HAS THIS FILE BEEN SELECTED?          J         RS400             .  NO, SKIP          TZ        MHFSUP            . IS MHFS UP, AVAILABLE?          J         RS105             .  YES, SKIP          LA        A0,SLHOST,X6      .  NO, LOAD HOSTID OF SELECTED FILE          LA        A1,SLRLNK,X6      . LINK TO REPLACEMENT INFO          JZ        A1,$+2            . SKIP NI IF NO REPL INFO          LA        A0,RPHOST,A1      . IF INFO AVAIL, USE THIS HOST INSTEAD          TE,U      A0,077            . RELOAD INTO SHARED DIRECTORY?          J         RS105             .  NO, SKIP          JGD       R5,RS390          .  YES, NO RLD, ERR IF 1ST TIME THRU          P$RINT    ERRPRT(76)        . 'SHARED FILE RELOAD NOT ALLOWED'          LR,U      R5,MAXSEL+1       . ONLY PRINT THIS ERROR ONCE          J         RS390             . REMOVE RELOAD FLAG FOR THIS FILERS105..         SEARCH THE ENTIRE SELECTION LIST FOR OTHER FILE(S) THAT HAVE.         THE SAME QUALIFIER, FILENAME AND CYCLE NUMBER.  IF ONE IS ALREADY.         MARKED FOR RELOAD, DON'T SELECT THE NEW ONE.  IF MULTIPLE NEW MATCHING.         FILES HAVE BEEN SELECTED, PICK THE ONE WITH THE MOST CURRENT CATALOG.         DATE AND ARCHIVE DATE AND DO NOT SELECT THE REST..          LX,U      X7,SLFEBG,X6      . ADDR OF APFEXX DATA IN CURR SEL REC          LX        X4,(SLSIZE,SELLST-SLSIZE) . LIST PTR FOR SECONDARY SEARCH          LR        R4,SELCNT         .          JGD       R4,$+1            . SECONDARY LOOP COUNTER          LA,U      A4,0              . INIT FILE NUMBER FOR SECONDARY LOOP          SZ        RELHP             . INIT HIGHEST PRIORITY FILE NBR          LA        A2,SLRLNK,X6      . POINTER TO REPLACEMENT LIST          JNZ       A2,RS110          . SKIP IF LOAD INTO DIFF Q*F          DL        A6,SLQUAL,X6      .  IF NOT, LOAD ORIGINAL QUALIFIER,          DL        A8,APFEFL,X7      .   FILENAME,          LA        A5,APFECL,X7      .   AND CYCLE          SSL       A5,24             .   SHIFT OFF LINK PART OF FIELD          TZ        SBQUAL            . IS SUBSTITUTE QUAL IN USE?          DL        A6,SBQUAL         .  YES, LOAD REPLACEMENT VALUE          LA        A0,SLHOST,X6      . A0 = HOSTID CODE FOR FILE          J         RS120             . START SECONDARY SEARCHRS110          DL        A6,RPQUAL,A2      . REPLACEMENT QUALIFIER          DL        A8,RPFILE,A2      .  FILENAME          LA        A5,RPCYCL,A2      .  CYCLE          JNZ       A5,$+2            . SKIP IF CYCLE SPECIFIED          LA,U      A5,1              .  IF NOT, ASSUME 1          LA        A0,RPHOST,A2      . A0 = REPL HOSTID CODERS120          LR,U      R3,0              . FLAG, RELOAD INTO <STD> DIR          TNE,U     A0,077            . RELOAD TO <SHARED> DIR?          LR,U      R3,1              .  YES, SET SHARED RELOAD FLAG..         CHECK THE NEXT ENTRY FOR MATCHING QUAL, FILE, CYCLE.RS150          AA,U      A4,1              . INCREMENT FILE NUMBER          LX,U      X5,SLFEBG+SLSIZE,*X4 . ADDR OF APFEXX DATA IN SEL REC          LA        A2,SLRLNK,X4      . LINK TO REPLACEMENT LIST ENTRY          JNZ       A2,RS160          . SKIP IF LOADING INTO DIFF Q*F          LA,U      A3,SLQUAL,X4      . ADDRESS OF NEXT QUALIFIER          TZ        SBQUAL            . IS SUBSTITUTE QUAL IN USE?          LA,U      A3,SBQUAL         .  YES, USE ADDR OF REPLACEMENT VALUE          DTE       A6,,A3            . DOES QUALIFIER MATCH?          J         RS200             .  NO, SKIP          LA        A0,APFECL,X5      . CYCLE, LINK          SSL       A0,24             . A0 = CYCLE          TNE       A5,A0             . DO CYCLE AND FILENAME MATCH?          DTE       A8,APFEFL,X5      .          J         RS200             .  NO, SKIP          LA        A0,SLHOST,X4      . A0 = HOSTID CODE FOR FILE          J         RS170             . FURTHER CHECKING IS REQUIREDRS160          DTE       A6,RPQUAL,A2      . DOES QUALIFIER MATCH REPL Q*F?          J         RS200             .  NO, SKIP          TNZ       RPCYCL,A2         . IS REPLACEMENT CYCLE ZERO?          TE,U      A5,1              .  YES, CYCLE 1 WILL MATCH          TNE       A5,RPCYCL,A2      .  NO, COMPARE WITH INPUT          DTE       A8,RPFILE,A2      . DO CYCLE AND FILENAME MATCH?          J         RS200             .  NO, SKIP          LA        A0,RPHOST,A2      . A0 = REPLACEMENT HOSTID CODERS170          LA,U      A1,0              . FLAG FOR RELOAD TO <STD> DIR          TNE,U     A0,077            . WILL MATCHING FILE LOAD INTO SHARED?          LA,U      A1,1              .  YES, USE FLAG FOR SHARED RELOAD          TE        A1,R3             . MATCHING FILES, LOAD INTO SAME DIR?          J         RS200             .  NO, SKIP          TNE       A4,A14            . IS THIS THE SAME ENTRY AS ABOVE?          J         RS200             .  YES, SKIP..         AT THIS POINT A MATCHING ENTRY HAS BEEN FOUND.  CHECK TO SEE.         IF IT HAS BEEN MARKED FOR RELOAD, OR HAS A NEWER CATALOG/ARCHIVE.         DATE THAN THE PREVIOUS ONE..          TZ        SLREL,X4          . ENTRY MARKED FOR RELOAD?          J         RS300             .  YES, PRINT ERR MSG AND UNSELECT          TNZ       SLSEL,X4          . HAS THIS ENTRY BEEN SELECTED?          J         RS200             .  NO, NO FURTHER CHECKING NEEDED          LA        A0,APFEW3,X5      . HOSTID, CAT DATE/TIME FOR THIS ENT          LSSL      A0,3              . SHIFT HOSTID INTO BIT BUCKET          LA        A1,APFEW3,X7      . HOSTID, CAT DATE/TIME FOR ABOVE ENT          LSSL      A1,3              . REMOVE HOSTID          DSL       A0,3              . SHIFT CAT DATE/TIMES INTO PLACE          TLE       A0,A1             . IS THIS ENTRY OLDER THAN ABOVE?          J         RS200             .  YES, NO FURTHER CHECKING          TE        A0,A1             . IS THIS ENTRY NEWER THAN ABOVE?          J         RS190             .  YES, THIS WILL OVERRIDE          LA        A0,APFEAD,X5      .  SAME AGE - LOAD ARCHIVE DATE          TLE       A0,APFEAD,X7      . THIS ENTRY ARCHIVED BEFORE ABOVE?          J         RS200             .  YES, NO FURTHER CHECKING          TE        A0,APFEAD,X7      . ARCHIVED AFTER ABOVE?          J         RS190             .  YES, THIS WILL OVERRIDE          TLE       A4,A14            . SAME DATE, IS THIS CLOSER TO BOTTOM?          J         RS200             .  NO, NO FURTHER CHECKING..         A MATCHING ENTRY HAS ALSO BEEN SELECTED BY THE SAME RELOAD.         COMMAND, AND THIS ONE HAS HIGHER PRIORITY..RS190          SA        A4,RELHP          . SAVE HIGHER PRIORITY FILE NUMBER          LX,U      X7,,X5            . SET X7 TO COMPARE WITH THIS ENTRYRS200          JGD       R4,RS150          . BACK FOR OTHER ENTRIES IN LIST          LA        A4,RELHP          . LOAD HIGHER PRIORITY FILE NBR          JNZ       A4,RS300          .  GO PRINT ERR IF FILE FOUND..         VERIFICATION COMPLETE FOR THIS FILE.          LA        A0,RELNEW         . COUNT OF FILES REL WITH THIS CMD          AA,U      A0,1              . INCREMENT          SA        A0,RELNEW         .  AND REPLACE          AA        A0,RELCNT         . COMPUTE NEW TOTAL RELOAD COUNT          TLE,U     A0,M$RELDMAX+1    . MORE THAN MAX ALLOWED?          J         RS400             .  NO, SKIP          E$CLEAR                     .  YES, CLEAR EDIT          E$MSG     RELOVF            . 'A MAXIMUM OF '          E$DECV    M$RELDMAX,,U      . EDIT MAX RELOAD COUNT          E$MSGR                      . ' FILES MAY BE RELOADED PER SINGLE REQ'          P$RINT    (0112,LINE)       . PRINT ERROR MESSAGE          LA,U      A7,0              . ZERO NEW RELOAD COUNT          LA        A8,RELCNT         . LOAD PREVIOUS RELOAD COUNT          J         RS600             .  PRINT SUMMAY, EXIT COMMANDRS300          E$CLEAR                     . CLEAR EDIT          E$MSG     NOTREL            . '*ENTRY '          E$DECV    A14               . EDIT CURR FILE NUMBER          E$MSGR                      . ' NOT RELOADED BECAUSE ENTRY '          E$DECV    A4                . EDIT CONFLICTING FILE NUMBER          E$MSGR                      . ' HAS SAME QUAL, FILE, CYCLE*'          P$RINT    (0114,LINE)       . PRINT ERROR MESSAGERS390          SZ        SLSEL,X6          . CLEAR SELECTION FLAG FOR THIS FILERS400          JGD       R6,RS100          . LOOP BACK FOR OTHER FILES IN LIST..         MARK ALL NEW VERIFIED FILE ENTRIES FOR RELOAD.          LX        X6,(SLSIZE,SELLST-SLSIZE) . SELECTION LIST POINTER          LR        R6,SELCNT         . SELECTION LIST ENTRY COUNT          JGD       R6,$+1            . DECREMENT FOR LOOP          DSL       A7,72             . ZERO NEW AND PREV RELOAD COUNTSRS500          TNZ       SLREL+SLSIZE,*X6  . WAS THIS ENTRY PREVIOUSLY RELOADED?          J         RS540             .  NO, SKIP          TZ        SLSEL,X6          .   YES, STILL MARKED SELECTED?          LMJ       X1,RS900          .    YES, INTERNAL ERROR -- ABORT          AA,U      A8,1              .    NO, INCR PREV RELOAD COUNT          J         RS550             . CONT WITH LOOPRS540          TNZ       SLSEL,X6          . WAS THIS ENTRY SELECTED FOR RELOAD NOW?          J         RS550             .  NO, SKIP          SP1       SLREL,X6          .  YES, MARK FOR RELOAD          AA,U      A7,1              .   AND INCREMENT NEW RELOAD COUNTRS550          JGD       R6,RS500          . LOOP BACK FOR OTHER ENTRIES          TE        A8,RELCNT         . VERIFY PREVIOUS RELOAD COUNT          LMJ       X1,RS900          .  IF NOT EQUAL, SOMETHING WRONG - ABORTRS600          AU        A8,A7             . COMPUTE NEW TOTAL RELOAD COUNT          TG,U      A9,M$RELDMAX+1    . MUST NOT EXCEED MAXIMUM          LMJ       X1,RS900          .  IF SO, SOMETHING WRONG - ABORT          SA        A9,RELCNT         . STORE NEW TOTAL RELOAD COUNT          E$CLEAR                     . CLEAR EDIT          E$DECV    A7                . EDIT NEW RELOAD COUNT          JZ        A8,RS620          . SKIP IF PREVIOUS RELOAD COUNT WAS ZERO          E$COPY    11,($CFS(' ADDITIONAL ')) . CONTINUE MESSAGE IF PREV > 0RS620          E$MSG     RELMSG            . ' FILES SELECTED FOR RELOAD.'          P$RINT    (0112,LINE)       . PRINT INFO MESSAGE          JZ        A8,RS990          . SKIP IF PREVIOUS COUNT WAS ZERO          E$CLEAR                     .  IF NOT, CLEAR EDIT FOR 2ND MESSAGE          E$DECV    A9                . EDIT NEW TOTAL COUNT          E$MSG     RELTOT            . ' TOTAL FILES WILL BE RELOADED.'          P$RINT    (0112,LINE)       . PRINT INFO MESSAGE          J         RS990             . ALL DONE.RS900          P$RINT    ERRPRT(35)        . 'INTERNAL ERROR, X1 = ADDRESS'          ER        ERR$              .  BLOW UPRS990          J         MS100             . GO SOLICIT NEXT COMMAND/..         SET UP A BATCH RUN TO RELOAD SELECTED FILES (COMMIT).COMSEL          LA        A7,RELCNT         . COUNT OF FILES MARKED FOR RELOAD          JZ        A7,CS200          . DON'T CONTINUE IF ZERO          LX        X6,(SLSIZE,SELLST-SLSIZE) . POINTER TO SELECTION LIST          LR        R6,SELCNT         . SELECTION LIST ENTRY COUNT          JGD       R6,$+1            . DECREMENT FOR LOOP          LX        X7,(1,MRRTBL)     . POINTER TO MULTI-REEL RELOAD TABLE          LR,U      R7,MAXMRR         . MAX MULTI-REEL RELOAD COUNTER          SZ        SRTPTR            . ZERO SORT POINTER          SZ        SRTCNT            .  AND COUNTER          DSL       A7,72             . ZERO RELOAD COUNT, ENTRY NUMBER          LA,U      A9,0              . ZERO COUNT OF FILES W/SUB QUALIFIERCS100          AA,U      A8,1              . INCREMENT ENTRY NUMBER          TNZ       SLREL+SLSIZE,*X6  . IS THIS ENTRY MARKED FOR RELOAD?          J         CS190             .  NO, SKIP          LX,U      X5,SLFEBG,X6      . X5 = ADDR OF APFEXX DATA IN SEL RECORD          LA        A2,SLRLNK,X6      . LOAD LINK TO REPLACEMENT Q*F          JNZ       A2,CS105          . SKIP IF REPLACEMENT EXISTS          DL        A0,SLQUAL,X6      .  IF NOT, LOAD ORIG QUALIFIER          TZ        SBQUAL            . IS SUBSTITUTE QUAL IN USE?          DL        A0,SBQUAL         .  YES, USE REPLACEMENT VALUE          DS        A0,EXPKT+1        . STORE IN EXIST$ PACKET          DL        A0,APFEFL,X5      . LOAD FILENAME          LA        A4,APFECL,X5      .  AND CYCLE, LINK          SSL       A4,24             . SHIFT CYCLE TO A4 LOWER          DS        A0,EXPKT+3        . STORE IN EXIST$ PACKET          SA,H2     A4,EXPKT+5        .  STORE CYCLE          LA        A0,SLHOST,X6      . A0 = HOSTID CODE FOR FILE          J         CS110             .CS105          DL        A0,RPQUAL,A2      . REPLACEMENT QUALIFIER          DS        A0,EXPKT+1        . STORE IN EXIST$ PACKET          DL        A0,RPFILE,A2      . REPLACEMENT FILENAME          DS        A0,EXPKT+3        . STORE IN PACKET          LA        A0,RPHOST,A2      . A0 = REPLACEMENT HOSTID CODE          SP1,H2    EXPKT+5           . INIT CYCLE TO ONE          LA        A4,RPCYCL,A2      . REPLACEMENT F-CYCLE          JZ        A4,CS110          . SKIP IF ZERO          SA,H2     A4,EXPKT+5        .  IF NOT, STORE IN PACKETCS110          SZ,H1     EXPKT             . ASSUME RESTORE TO <STD> DIR          TNE,U     A0,077            . IS HOSTID OF FILE = 077?          SP1,H1    EXPKT             .  YES, RESTORE TO <SHARED> DIR          SZ        EXPKT+7           . ZERO RETURNED INFO          LA,U      A0,EXPKT          .          ER        MSCON$            . ISSUE MSCON$-EXIST$ REQ FOR FILE          JP        A0,CS112          . SKIP IF GOOD STATUS          AND       A0,(077*/18)      . ISOLATE ERROR CODE IN A1          TNE       A1,(043*/18)      . DOES FILE NOT EXIST? (STAT 043)          J         CS120             .  YES, PERMIT RELOAD          J         CS130             .  NO, PRINT ERROR MSG, DO NOT RELOADCS112          SSL       A0,18             . MOVE 'GOOD' STATUS TO A0 LOWER          TE,U      A0,2              . DO OTHER CYC (BUT NOT THIS ONE) EXIST?          J         CS130             .  NO, PRINT ERROR MSG, DO NOT RELOAD          JZ        A2,CS115          .  YES, SKIP IF NO REPLACEMENT Q*F          JNZ       A4,CS115          . IF DIFF Q*F, SKIP IF CYCLE GIVEN          LA,U      A0,1              .  IF NO CYC GIVEN, FILE MUST NOT EXIST          J         CS130             .   GO PRINT ERR MESSAGE, DON'T RELOADCS115          LA        A1,LIBUFF+9       . GET HIGHEST CURRENT CYCLE          AND,U     A1,07777          .   INTO A2          AU,S3     A2,LIBUFF+9       . ADD MAX RANGE, TO A3          ANA,S4    A3,LIBUFF+9       . SUBTRACT CURRENT RANGE          ANA,S3    A2,LIBUFF+9       . SUBTRACT MAX RANGE FROM A2          TG,U      A3,1000           . IS MAX CYCLE OVER 999?          ANA,U     A3,999            .  YES, ADJUST FOR CYCLE WRAP          TLE,U     A2,0              . IS MIN CYCLE LESS THAN 1?          AA,U      A2,999            .  YES, ADJUST FOR CYCLE WRAP          TLE,U     A4,1,A3           . IS CYCLE >= HIGH+MAX-CUR+1 ?          J         CS118             .  NO, JUMP          TG        A3,A2             .  YES, IS CYCLE WRAP POSSIBLE?          J         CS130             .   NO, ERROR          J         CS119             .   YES, CHECK AGAINST MINIMUMCS118          TG        A2,A3             . IS CYCLE WRAP POSSIBLE?          J         CS120             .  YES, THIS IS LEGAL F-CYCLECS119          TLE,U     A4,1,A2           . IS CYCLE < HIGH-MAX+1 ?          J         CS130             .  YES, ERRORCS120          LA        A5,APFECL,X5      . GET CYCLE, LINK TO MAIN ENTRY IN AHF          LSSL      A5,12             . REMOVE CYCLE PORTION OF FIELD          SSL       A5,12             .  A5 = LINK NOW          AA        A5,AHFHDR+AHHSTB  . MAKE ABSOLUTE          SA        A5,AHFPKT+5       . STORE IN READ PACKET          I$OW      AHFPKT            . READ THE ENTRY FROM ARCHIST$          LMJ       X9,STATUS         . CHECK STATUS          J         CS990             .  I/O ERROR, DO NOT CONTINUE          LX,U      X4,AHBUFF         . ADDRESS OF ENTRY BUFFER          LNA,U     A0,1              . INIT STATUS = BAD LINK          DL        A2,SLQUAL,X6      . GET SELECTED QUALIFIER          DTE       A2,AHQUAL,X4      . DOES IT MATCH QUAL FROM AHF ENTRY?          J         CS130             .  NO, ERROR          DL        A2,APFEFL,X5      .  YES, GET SELECTED FILE          LA        A4,APFECL,X5      .   AND CYCLE, LINK          SSL       A4,24             .  SHIFT OFF LINK PORTION          TNE       A4,AHCYCL,X4      . DO THEY MATCH MAIN ENTRY?          DTE       A2,AHFILE,X4      .          J         CS130             .  NO, ERROR          LNA,U     A0,4              . CODE FOR BACKUP REEL COUNT EXCEEDED          LA        A1,AHBRCT,X4      . COUNT OF BACKUP REELS          TG,U      A1,RCBRMX+1       . WITHIN LEGAL RANGE?          J         CS130             .  NO, CANNOT RELOAD THIS FILE          TZ        PRIVX             . DOES USER HAVE DLOC ASSIGNED?          J         CS122             .  YES, SKIP PRIVACY/KEY CHECK          LA        A0,AHINHI,X4      .  NO, GET INHIBIT BITS          TOP,U     A0,MMPRVT         . PRIVATE FILE?          J         CS121             .  NO, SKIP          LNA,U     A0,2              .  YES, -2 IS CODE FOR PRIVACY ERROR          ON        M$PVTACC>0        . THIS CODE IS FOR PRIVATE-BY-ACCT          DL        A2,AHACCT,X4      . ACCOUNT NUMBER OF ARCHIVED FILE          DTE       A2,USRACC         . SAME AS USER'S ACCOUNT?          J         CS130             .  NO, CAN'T RELOAD          OFF       M$PVTACC>0        .          ON        M$PVTACC=0        . THIS CODE IS FOR PRIVATE-BY-PROJ          DL        A2,AHPROJ,X4      . PROJECT-ID OF ARCHIVED FILE          DTE       A2,USRPROJ        . SAME AS USER'S PROJECT-ID?          J         CS130             .  NO, CAN'T RELOAD          OFF       M$PVTACC=0        .CS121          TNZ       SAVMOD            . SAVE-HISTORY MODE?          J         CS122             .  NO, SKIP          LA        A1,AHFLGS,X4      . HISTORY FLAGS          TOP,U     A1,AHFRKY         . DOES FILE HAVE READ KEY?          J         CS122             .  NO, SKIP          LNA,U     A0,3              .  YES, -3 IS CODE FOR KEYED-RELOAD ERR          TZ        SLRLNK,X6         . RELOAD INTO A DIFFERENT NAME?          J         CS130             .  YES, CANNOT DO THIS IF FILE HAS RD KEY          DL        A1,SBQUAL         . GET SUBSTITUTE QUALIFIER          JZ        A1,CS122          . OK TO RELOAD IF NONE GIVEN          DTE       A1,SLQUAL,X6      . IF GIVEN, IS IT SAME AS ORIG QUAL?          J         CS130             .  NO, CANNOT FAS-RELOAD INTO DIFF NAMECS122          LA        A4,AHPKID,X4      . PACKID IF REMOVABLE          JZ        A4,CS126          . SKIP PACK-CHECK IF ORIG FIXED          LA        A0,SLREL,X6       . RELOAD/FIXED-RESTORE FLAG          TG,U      A0,2              . HAVE WE ALREADY CHECKED THIS FILE?          J         CS126             .  YES, DON'T DO IT AGAIN          LA        A2,SLRLNK,X6      . POINTER TO REPLACEMENT INFO          JZ        A2,CS123          . SKIP IF NONE THERE          LA        A0,SLHOST,X6      . HOSTID OF ORIGINAL FILE          LA        A1,RPHOST,A2      . REPLACEMENT HOSTID          TNE       A0,A1             . HAS HOSTID CHANGED?          J         CS123             .  NO, SKIP          TE,U      A0,077            .  YES, WAS ORIGINAL          TNE,U     A1,077            .  OR REPLACEMENT TO/FROM SHARED?          J         CS125             .   YES, DIFFERENT - RESTORE TO FIXEDCS123          LA,H1     A0,EXPKT          . DIRECTORY-ID FOR RELOADED FILE          SA,H1     A0,MSAPKT         .  STORE IN MSCON$-MSALL$ PKT          LA,U      A0,MSAPKT         .          ER        MSCON$            . PERFORM MSCON$-MSALL$ FUNCTION          JN        A0,CS1235         . SKIP IF NEG STATUS RETURNED          LR,H2     R1,MSABUF         . COUNT OF EQUIP TYPES          JGD       R1,CS124          . DECR FOR LOOP, SKIP IF NONZEROCS1235          P$RINT    ERRPRT(80)        . 'ERROR PROCESSING MSALL$ DATA'          J         CS990             .  ABORT RELOADCS124          LA        A3,(1,0)          . POINTER TO EQUIP INDEX TABLE          LXI,U     A2,10             . UNIT TABLE SIZE INCREMENTCS1242          LXM,H1    A2,MSABUF+1,A3    . ADDRESS OF NEXT UNIT TABLE          LA,H2     A0,MSABUF+1,*A3   . ADDRESS OF EQUIP SUMMARY TABLE          LA        A0,MSABUF,A0      . WORD ZERO OF EQUIP SUMMARY TABLE          SSL       A0,24             . UNIT COUNT (T1) TO A0 LOWER          LR,U      R2,,A0            . INTO R2 FOR LOOP          JGD       R2,CS1245         . SKIP FORWARD, DECR FOR JGD          J         CS1248            . SKIP, NO UNITS OF THIS TYPE AVAILCS1245          DL        A0,MSABUF+2,A2    . WORDS 2,3 OF UNIT TABLE          TE        A4,MSABUF+7,*A2   . DOES PACKID MATCH THIS UNIT?          J         CS1247            .  NO, SKIP          TEP,U     A1,02             .  YES, IS THIS UNIT CONFIG AS FIXED?          J         CS1247            .   YES, SKIP THIS UNIT          AND,U     A0,074            . A1 = DN, RV, SU, NOT AVAIL          JNZ       A1,CS1247         . SKIP THIS UNIT IF ANY OF THESE SET          LA,U      A0,3              . THIS UNIT IS UP, REMOV, ETC.          SA        A0,SLREL,X6       . MARK FILE = PASSED PACKID CHECK          J         CS126             . OK TO RELOAD FILE AS ISCS1247          JGD       R2,CS1245         . LOOP BACK FOR OTHER UNITSCS1248          JGD       R1,CS1242         . LOOP BACK FOR OTHER EQUIP TYPES          P$RINT    ERRPRT(81)        . 'ORIGINAL R-PACK NO LONGER AVAILABLE:'CS125          E$CLEAR                     . CLEAR EDIT          E$MSG     RFSMSG            . '*ENTRY '          E$DECV    A8                . ENTRY NUMBER IN SELECTION TABLE          E$MSGR                      . ' - WILL BE RELOADED TO FIXED STORAGE*'          P$RINT    (0114,LINE)       . PRINT WARNING MESSAGE          LA,U      A0,2              .          SA        A0,SLREL,X6       . MARK ENTRY FOR RELOAD TO FIXEDCS126..         OK TO RELOAD THIS FILE.  RELEASE POINTER RECORD TO SORT...         THE POINTER RECORD    1) 0,H1    EQUIPMENT TYPE (0=REEL, 1=CART).         CONTAINS:             2) 0,H2 AND 1,H1  THE FIRST BACKUP REEL NUMBER.                               3) 1,H2    POSITION OF DATA ON THE REEL.                               4) 2,H1    COUNT OF BACKUP REELS.                               5) 2,H2    POINTER TO REEL TABLE IF > 1 REEL.                               6) 3,H2    LINK TO SELECTION LIST ENTRY..         IF MULTIPLE FILES ARE TO BE RELOADED, AFTER RETURN FROM SORT.         THEY WILL BE RELOADED IN THE MOST OPTIMUM SEQUENCE..          LA        A0,AHBRST,X4      . FIRST REEL OF BACKUP          DSL       A0,18             . SHIFT TO A0-LOWER, A1-UPPER          LA        A2,AHFLGS,X4      . HISTORY FLAGS          TEP,U     A2,AHFHIC         . BACKED UP ON CARTRIDGE TAPE?          LXI,U     A0,1              . YES, SET CARTRIDGE FLAG          LXM       A1,AHSTFP,X4      . STARTING FILE POSITION          DS        A0,LINE           . INTO 1ST TWO WORDS OF TEMP SORT REC          LA        A0,AHBRCT,X4      . COUNT OF BACKUP REELS          SA,H1     A0,LINE+2         . STORE IN SORT REC          TLE,U     A0,2              . MORE THAN ONE REEL?          J         CS128             .  NO, SKIP          JGD       R7,CS127          .  YES, DECR MULTI-REEL TBL COUNTER          P$RINT    ERRPRT(54)        . IF OVERFLOW, 'TOO MANY MULT-RL RELOADS'          J         CS990             .  ABORT RELOAD REQUESTCS127          SX,H2     X7,LINE+2         . STORE POINTER TO MULTI-REEL TABLE          ANA,U     A0,1              . COUNT OF REMAINING REELS          LA,U      A1,AHBRST+1,X4    . ADDRESS OF REELS 2-N IN HIST RECORD          LXI,U     A1,1              . INCREMENT FOR TRANSFER          LR,U      R1,,A0            . COUNT TO R1          BT        X7,,*A1           . MOVE REEL LIST TO TABLECS128          SX,H2     X6,LINE+3         . STORE LINK TO SELECTION LIST ENTRY          LA,U      A0,LINE           .          LMJ       X11,SRTREL        . RELEASE RECORD TO SORT          J         CS990             .  STOP HERE IF SORT OVERFLOW DETECTED          AA,U      A7,1              . INCREMENT VERIFIED RELOAD COUNT          DL        A0,SBQUAL         . SUBSTITUTE QUALIFIER          JZ        A0,CS190          . SKIP IF NONE IN USE          DTE       A0,SLQUAL,X6      . SAME AS THIS FILE'S QUALIFIER,          TZ        SLRLNK,X6         .  OR RELOAD TO DIFF NAME?          J         CS190             .  YES, SKIP          AA,U      A9,1              .  NO, INCR COUNT OF FILES W/SUB QUAL          J         CS190             . CONTINUE LOOPING FOR OTHER FILE(S)CS130          LA        A4,A0             . SAVE ERROR STATUS          E$CLEAR                     . CLEAR EDIT          TNZ       HOSTID            . IS MHFS CONFIG ON SYSTEM?          J         CS132             .  NO, SKIP DIRECTORY EDIT          LA,U      A0,$CFS('STD')    . SETUP FOR STANDARD DIRECTORY          TZ,H1     EXPKT             . RELOAD INTO SHARED DIRECTORY?          LA        A0,($CFS('SHARED')) .  YES, USE SHARED DIR-ID          E$FD1                       . EDIT INTO IMAGE          E$CHAR    $CFS('#')         . SEPARATORCS132          E$FD2     EXPKT+1           . EDIT SELECTED QUALIFIER          E$CHAR    $CFS('*')         .          E$FD2     EXPKT+3           . FILENAME          E$CHAR    $CFS('(')         .          E$DECV    EXPKT+5,,H2       . CYCLE          E$CHAR    $CFS(')')         .          JP        A4,CS140          . SKIP IF STATUS POSITIVE          TG,XU     A4,-4             . LESS THAN -4?          J         CS160             .  NO, THIS IS SELECTION ERROR          E$MSG     MSCERR            .  YES, 'MSCON$ - EXIST$ ERROR CODE: '          E$OCTF    12,A4             . EDIT FULL WORD STATUS          J         CS180             . GO PRINT MESSAGECS140          TNE,U     A4,2              . IS STATUS = 2?          J         CS150             .  YES, SKIP          E$MSG     EXTERR            .  NO, 'ALREADY EXISTS, CANNOT RELOAD'          J         CS180             . PRINT MESSAGECS150          E$MSG     CYCERR            . 'CYCLE NUMBER OUTSIDE ALLOWABLE RANGE'          J         CS180             . PRINT MESSAGECS160          TE,XU     A4,-1             . LINK ERROR?          J         CS170             .  NO, SKIP          E$MSG     AHLERR            . 'BAD LINK TO HISTORY AREA: '          E$OCTF    6,A5              . EDIT LINK VALUE (SUPPOSED SECTOR ADDR)          J         CS180             . PRINT MESSAGECS170          TE,XU     A4,-2             . PRIVACY ERROR?          J         CS175             .  NO, SKIP          E$MSG     PVTERR            . ' INCORRECT ACCT(PROJ) FOR PVT FILE'          J         CS180             . PRINT MESSAGECS175          TE,XU     A4,-3             . KEYED RELOAD ERROR?          J         CS178             .  NO, SKIP          E$MSG     KEYERR            . ' CANNOT RELOAD KEYED FILE AS DIFF NAME'          J         CS180             . PRINT MESSAGECS178          E$MSG     BCERR             . ' HAS TOO MANY BACKUP REELS ...'CS180          P$RINT    (0116,LINE)       . PRINT ERROR MESSAGE          SZ        SLREL,X6          . ZERO RELOAD-SELECTED FOR THIS FILECS190          JGD       R6,CS100          . GO BACK FOR OTHER SEL LIST ENTRIES..         THE VERIFICATION PHASE IS COMPLETE.  IF USER GIVES THE GO-AHEAD,.         MOVE THE INFO TO THE RELOAD CONTROL BANK AND LET RLDCTL TAKE OVER..CS200          E$CLEAR                     . CLEAR EDIT          E$DECV    A7                . RELOAD FILE COUNT          E$MSG     RELMSG            . ' FILES SELECTED FOR RELOAD.'          P$RINT    (0106,LINE)       . PRINT INFO MESSAGE          SA        A7,RELCNT         . STORE VERIFIED RELOAD COUNT          JZ        A7,CS990          . SKIP IF ZERO          JZ        A9,CS210          . SKIP IF NO FILES W/SUB QUALIFIER          E$CLEAR                     . CLEAR EDIT          E$DECV    A9                . INSERT FILE COUNT          E$MSG     SBQMSG            . ' FILES WILL HAVE SUB QUALIFIER: <'          E$FD2     SBQUAL            . INSERT SUBSTITUTE QUAL          E$MSGR                      . '>'          P$RINT    (0112,LINE)       . PRINT INFO MESSAGECS210          TNZ       BCKFLG            . RELOADING FROM BACKUP TAPE(S)?          J         CS220             .  NO, SKIP          P$RINT    ERRPRT(58)        .  YES, '*WARNING: TAPES MAY BE OFFSITE*'CS220          ON        $SL(M$RSIUP)>0    . THIS CODE ON FOR UKEY INTERFACE          SZ        IMAGE             . ZERO USER ANSWER WORD          LA,U      A0,NOTTRD         .          ER        TREAD$            . 'NOTIFY TERMINAL, USERID, NONE?'          LA,U      A0,,A0            . A0 = WORD COUNT OF RESPONSE          LA,U      A1,0              . CODE FOR NO NOTIFICATION          JZ        A0,CS230          . DON'T NOTIFY IF RESPONSE WAS <CR>          LA,S1     A0,IMAGE          . GET RESPONSE          TNE,U     A0,$CFS('T')      . TERMINAL NOTIFICATION WANTED?          LA,U      A1,RCNTTR         .  YES, LOAD APPROPRIATE CODE          TNE,U     A0,$CFS('U')      . USERID NOTIFICATION WANTED?          LA,U      A1,RCNTUS         .  YES, LOAD APPROPRIATE CODE          TE,U      A0,$CFS('N')      . NO NOTIFICATION WANTED?          JZ        A1,CS220          .  NO, ASK AGAIN UNLESS 'T' OR 'U'CS230          SA        A1,NOTTYP         . SAVE NOTIFICATION CODE          OFF       $SL(M$RSIUP)>0    . END OF UKEY INTERFACE CODE          SZ        IMAGE             . ZERO USER ANSWER WORD          LA,U      A0,COMTRD         .          ER        TREAD$            . 'START BATCH RUN TO RELOAD? (YN)'          LA,S1     A0,IMAGE          . GET RESPONSE          TNE,U     A0,$CFS('Y')      .          J         CS240             . PROCEED IF ANSWERED 'Y'          TE,U      A0,$CFS('N')      .          J         CS220             . ASK AGAIN IF NOT 'N'          P$RINT    ERRPRT(39)        . 'ENTER OMIT TO EXIT SELECT MODE...'          J         CS990             .  EXIT COMMANDCS240          LMJ       X11,SRTRTN        . SORT POINTER RECS BY REEL, POSITION          LX,U      X7,RCADDR         . X7 = BASE ADDR OF RELOAD CONTROL BANKCS250          TS        RCHDTS,X7         . LOCK CONTROL BANK          ER        TIME$             . GET SYSTEM TIME          ANA       A0,RCHDTM,X7      . SUBTRACT TIME CELL FROM RCB          JP        A0,CS260          . OK IF POSITIVE          AA        A0,(24*60*60000)  .  IF NOT, ADJ FOR PAST MIDNIGHT?          JN        A0,CS280          .   ERROR IF STILL NEGCS260          TG,U      A0,20000          . UPDATED LESS THAN 20 SEC AGO?          J         CS280             .  NO, RELOAD CONTROLLER IS NOT RUNNING          LA        A0,RCHDLV,X7      . GET BANK SW LEVEL (2R1 = UNDEFINED)          TE,U      A0,RCLEVL         . IS THIS CORRECT LEVEL?          J         CS280             .  NO, DO NOT CONTINUE          LA        A0,RCHDFL,X7      .  YES, LOAD FLAG WORD          TNE       A0,($CFS('*READY')) . IS CONTROLLER IDLE?          J         CS300             .  YES, GO SET UP RELOAD DATA          TE        A0,($CFS('*DATA*')) .  NO, WORKING FOR SOMEONE ELSE?          J         CS280             .   NO, NOT RUNNING OR BANK CORRUPTED          C$TS      RCHDTS,X7         .   YES, UNLOCK AND WAIT          P$RINT    ERRPRT(40)        . 'PLEASE WAIT...'          LA,U      A1,5000           .          ER        TWAIT$            . WAIT FIVE SECONDS          J         CS250             .  AND TRY AGAINCS280          C$TS      RCHDTS,X7         . UNLOCK RCB          P$RINT    ERRPRT(47)        . 'RELOAD CONTROLLER IS NOT RUNNING'          J         CS990             .  ABORT COMMANDCS300          LX,U      X6,RCFEBG,X7      . X6 = START ADDRESS OF FILE ENTRIESCS320          LMJ       X11,SRTRET        . RETURN NEXT RECORD FROM SORT          J         CS400             . STOP WHEN FINISHED          DL        A2,0,A0           . FIRST TWO WORDS OF SORT REC          DSL       A2,18             . SHIFT, A2=EQUIP, A3=REEL ID          SA        A3,RCFEBS,X6      .  STORE REEL-ID IN RECORD          LA,H1     A4,2,A0           . COUNT OF BACKUP REELS          LA,H2     A3,2,A0           . MULTI-REEL TABLE ADDR IF COUNT > 1          LX,H2     X5,3,A0           . X5 = ADDRESS OF SEL LIST ENTRY          LX,U      X4,SLFEBG,X5      . ADDRESS OF APFEXX DATA IN IN SEL RECORD          DL        A0,SLQUAL,X5      . QUALIFIER          DS        A0,RCFEQL,X6      .  STORE IN RELOAD RECORD          DL        A0,APFEFL,X4      . FILENAME          DS        A0,RCFEFL,X6      .          LA        A0,APFECL,X4      . F-CYCLE, LINK          DSL       A0,24             . A0 = F-CYCLE          SSL       A1,12             . A1 = LINK          SA        A0,RCFECY,X6      . STORE CYCLE IN RELOAD RECORD          AA        A1,AHFHDR+AHHSTB  . MAKE LINK ABSOLUTE          SA        A1,RCFELW,X6      . STORE LINK IN APPROPRIATE WORD (23-0)          LA,U      A0,0              . INIT FLAG BITS = 0          JZ        A2,$+2            . SKIP IF RELOAD FROM REEL TAPE          LA,U      A0,RCFBCT         .  IF NOT, SET CARTRIDGE FLAG          LA        A1,SLHOST,X5      . HOST-ID OF ORIGINAL FILE          TNE,U     A1,077            . WAS THIS A SHARED FILE?          AA,U      A0,RCFBOS         .  YES, SET ORIGINAL-SHARED FLAG          LA        A2,SLRLNK,X5      . LINK TO REPLACEMENT INFO          JZ        A2,$+2            .  SKIP IF ZERO          LA        A1,RPHOST,A2      .  IF NOT, LOAD REPLACEMENT HOSTID          TNE,U     A1,077            . RELOAD TO SHARED DIRECTORY?          AA,U      A0,RCFBRS         .  YES, SET SHARED-RELOAD FLAG          LA        A1,SLREL,X5       . RELOAD/FIXED INDICATOR          TNE,U     A1,2              . RELOAD TO FIXED STORAGE?          AA,U      A0,RCFBFX         .  YES, SET FIXED-RELOAD FLAG          SA        A0,RCFEFB,X6      . STORE FLAG BITS          TG,U      A4,RCBRMX+1       . TOO MANY REELS?          LA,U      A4,RCBRMX         .  YES, LOAD MAX (SHOULD NEVER HAPPEN)          SA        A4,RCFEBC,X6      . STORE REEL COUNT          TLE,U     A4,2              . MORE THAN ONE REEL?          J         CS330             .  NO, SKIP          LXI,U     A3,1              .  YES, SET UP FOR TRANSFER          LA,U      A0,RCFEBS+1,X6    . LIST ADDR FOR REELS 2-N          LXI,U     A0,1              .          ANA,U     A4,1              . DECREMENT REEL COUNT          LR        R1,A4             . REMAINING TRANSFER COUNT          BT        A0,,*A3           . MOVE REMAINDER OF REEL LISTCS330          SZ        RCFEQ2,X6         . INIT QUAL-2 = 0 (NO REPL Q*F)          TZ        SLRLNK,X5         . RELOAD INTO DIFFERENT Q*F?          J         CS340             .  YES, SKIP          DL        A0,SBQUAL         . SUBSTITUTE QUALIFIER          JZ        A0,CS350          .  SKIP IF NOT IN USE          DTE       A0,SLQUAL,X5      . SAME AS ORIGINAL FILE QUALIFIER?          J         $+2               .  NO          J         CS350             .  YES, SKIP          DS        A0,RCFEQ2,X6      . STORE REPL QUAL IN RELOAD RECORD          DL        A0,RCFEFL,X6      . SET REPLACEMENT FILENAME AND          DS        A0,RCFEF2,X6      .  CYCLE TO ORIGINAL VALUES          LA        A0,RCFECY,X6      .          SA        A0,RCFEC2,X6      .          J         CS350             .CS340          LX        X4,SLRLNK,X5      .  YES, X4 = ADDR OF REPLACEMENT DATA          DL        A0,RPQUAL,X4      . REPL QUALIFIER          DS        A0,RCFEQ2,X6      .  STORE IN RECORD          DL        A0,RPFILE,X4      . REPL FILENAME          DS        A0,RCFEF2,X6      .          LA        A0,RPCYCL,X4      . REPL F-CYCLE          JNZ       A0,$+2            .          LA,U      A0,1              . MAKE 1 IF SAVED AS ZERO          SA        A0,RCFEC2,X6      .  STORE IN RECORDCS350          AX,U      X6,RCFESZ         . POINT X6 TO NEXT RELOAD FILE ENTRY          J         CS320             . BACK FOR NEXT FILECS400          LA        A0,RCHDAC,X7      . ACCESS COUNT          DSL       A0,36             . PREPARE FOR DIVIDE          DI,U      A0,RCRSMX         . DIVIDE BY MAX STATUS RECORDS          MSI,U     A1,RCRSSZ         . MULT REMAINDER BY REC SIZE          LX,U      X6,RCRSBG,X7      . X6 = START ADDR OF STAT RECORDS          AX,U      X6,,A1            .  ADD OFFSET, X6 = PTR TO OUR STAT REC          LA        A0,GENRUN         . GENERATED RUNID          SA        A0,RCRSGR,X6      .  STORE IN STATUS RECORD          LA,U      A1,RCSTWT         . WAIT STATUS          SA        A1,RCRSST,X6      .  STORE IN STATUS RECORD          SZ        RCRSAS,X6         . ZERO ACP/FETCH STATUS          LA        A0,AHFFAC+6       . CYCLE NUMBER OF HISTORY FILE          AND,U     A0,07777          . ISOLATE CYCLE IN A1          SA        A1,RCHDHC,X7      . STORE IN RCB HEADER          LA        A0,RELCNT         . RELOAD COUNT          LA        A1,SAVMOD         . FAS SAVE-HIST FLAG          LA        A2,USER4          . FIRST 4 CHARS USERID          SA        A0,RCHDFC,X7      .  STORE IN RCB HEADER          SA        A1,RCHDFA,X7      .   .          SA        A2,RCHDU4,X7      .   .          SZ        RCHDFE,X7         . ZERO FETCH-REQUEST FLAG          SZ        RCHDKL,X7         . ZERO KEYIN LENGTH          LA        A2,NOTTYP         . TYPE OF NOTIFICATION DESIRED          SA        A2,RCHDNT,X7      .  STORE IN RCB HEADER          JZ        A2,CS410          . SKIP IF NO NOTIFICATION          LA        A0,SITEID         . GET SITEID          LA,U      A1,0              . WORD 2 = ZERO          TNE,U     A2,RCNTUS         . NOTIFY USERID?          DL        A0,USERID         .  YES, LOAD USERID IN A0,A1          DS        A0,RCHDND,X7      . STORE NOTIFICATION DESTINATION IN HDRCS410          LA        A4,RCHDAC,X7      . ACCESS COUNT          AA,U      A4,1              . A4 = ACC COUNT AFTER OUR REQ PROCESSED          LA        A0,($CFS('*DATA*')) . DATA-READY FLAG          SA        A0,RCHDFL,X7      . STORE IN RCB HEADER          C$TS      RCHDTS,X7         . ALL DONE - UNLOCK HEADER          LA,U      A1,4000           . FIRST WAIT - 4 SECONDS          LR,U      R1,6              . INITIAL WAIT - LOOP COUNTCS420          ER        TWAIT$            . WAIT 4 SEC (INITIAL), 1 SEC (ADDTL)          TS        RCHDTS,X7         . LOCK RELOAD CONTROL BANK          LA        A0,RCHDAC,X7      . ACCESS COUNT          LA        A1,RCRSGR,X6      . GENERATED RUNID FROM OUR STAT RECORD          LA        A2,RCRSST,X6      . STATUS FROM OUR RECORD          C$TS      RCHDTS,X7         . UNLOCK RCB          TLE       A0,A4             . HAS ACCESS COUNT BEEN UPDATED?          J         CS430             .  NO, CONTINUE WAITING          TE        A1,GENRUN         . YES, DOES RUNID STILL = US?          J         CS425             .  NO, ERROR          TNE,U     A2,RCSTCM         . COMPLETION STATUS?          J         CS440             .  YES, SEND MESSAGE AND EXIT          TE,U      A2,RCSTER         .  NO, ERROR STATUS?          J         CS425             .   NO, SOMETHING WRONG          P$RINT    ERRPRT(48)        .   YES, 'REQ ERR - TRY AGAIN, NOTIFY'          J         CS990             . EXIT WITHOUT CLEARING SELECTION LISTCS425          P$RINT    ERRPRT(49)        . 'INTERNAL ERROR IN RCB - NOT SYSTEMS'          J         CS990             . EXIT WITHOUT CLEARING SELECTION LISTCS430          LA,U      A1,1000           . SUBSEQUENT WAITS ARE ONE SECOND          JGD       R1,CS420          . LOOP BACK UNTIL COUNT EXHAUSTED          P$RINT    ERRPRT(40)        . 'PLEASE WAIT...'          LR,U      R1,5              . WAIT 6 SECONDS BEFORE REPEATING MESSAGE          J         CS420             . START OVER AGAINCS440          E$CLEAR                     . CLEAR EDIT          E$MSG     RLDONE            . 'BATCH RUN <RL'          E$FD1     USER4             . 1ST 4 CHARS OF USERID          E$MSGR                      . '> HAS BEEN STARTED TO PERFORM RELOAD'          P$RINT    (0114,LINE)       . PRINT INFO MESSAGE          SZ        SELCNT            . ZERO SELECT COUNT (EXIT SELECT MODE)          SZ        RELCNT            . ZERO RELOAD COUNT          SZ        RPLCNT            . ZERO REPLACEMENT LIST COUNT          SZ        SBQUAL            . CLEAR SUBSTITUTE QUALIFIERCS990          J         MS100             . SOLICIT NEXT COMMAND/..         DO A SUMMARY PRINT WHILE IN SELECT MODE (SUMMARY).SUMSEL          LA,U      A14,1             . FLAG: PARAMS NOT REQ, ASSUME 'ALL'          LMJ       X10,SELPSC        . PARSE PARAMETER LIST          J         SS990             .  EXIT IF ERROR WITH PARAMETER LIST          SZ        AUTOSM            . CLEAR AUTO-SUMMARY FLAG..         ENTRY IS HERE FROM A VALID SELECT, TO CAUSE A SUMMARY LISTING.         OF ALL FILES SELECTED BY THE LAST COMMAND.  <AUTOSM> IS SET..SUMSEL1          LX        X6,(SLSIZE,SELLST-SLSIZE) . POINTER TO SELECTION LIST          LR        R6,SELCNT         . SELECTION LIST ENTRY COUNT          JGD       R6,$+1            . DECREMENT FOR LOOP          LA,U      A7,0              . INIT FILE NUMBER          LNA,U     A8,1              . INIT HEADING LOOP COUNTSS100          AA,U      A7,1              . INCREMENT FILE NUMBER          TNZ       SLSEL+SLSIZE,*X6  . WAS THIS FILE SELECTED FOR DISPLAY?          J         SS300             .  NO, SKIP          JGD       A8,SS200          .  YES, DECR HEADING COUNTER, LOOP FWD          TLE,XU    A8,-1             . FIRST TIME THROUGH?          J         SS150             .  YES          LA,U      A0,CONTRD         .  NO, SOLICIT USER CONTINUATION          ER        TREAD$            .   'CONTINUE>'          LA,U      A0,,A0            . PICK UP ONLY WORD COUNT RETURNED          JZ        A0,SS150          .  IF ZERO, CONTINUE WITH LISTING          SA        A0,IMGLEN         .  OTHERWISE, SAVE LENGTH OF NEXT COMMAND          J         SS990             .   AND EXIT SUMMARYSS150          LA        A0,(0100+SHL,SUMHDG) . SUMMARY HEADING          TZ        SAVMOD            . FAS SAVE-HISTORY MODE?          LA        A0,(0100+SSL,SUMHDS) .  YES, USE ALTERNATE HEADING          ER        PRINT$            . PRINT HEADING          P$RINT    (0100+SHL,DASHES) . FOLLOW WITH A LINE OF DASHES          LA,U      A8,19             . RESET LOOP COUNT          TZ        AUTOSM            . AUTO-SUMMARY MODE?          LA,U      A8,17             .  YES, KEEP 'SELECTED' MSG ON 1ST SCREEN          SZ        AUTOSM            . FUTURE SCREENS WILL NOT BE AFFECTEDSS200          LX,U      X4,SLFEBG,X6      . ADDRESS OF APFEXX DATA IN SEL RECORD          E$CLEAR                     . CLEAR EDIT          E$DECF    4,A7              . EDIT FILE NUMBER          E$SKIP    1                 . SKIP OVER          LA,U      A0,$CFS(' ')      . NEXT CHAR = SPACE          TZ        SLREL,X6          . IS THIS FILE SEL FOR RELOAD?          LA,U      A0,$CFS('*')      .  IF SO, USE '*'          E$CHAR                      . PLACE CHAR IN IMAGE          E$CHAR    $CFS(' ')         . SKIP OVER          LA,U      A0,$CFS(' ')      . NEXT CHAR = SPACE          TP        APFERW,X4         . WAS THIS FILE RELOADED BEFORE?          LA,U      A0,$CFS('-')      .  IF SO, USE '-'          E$CHAR                      . PLACE CHAR IN IMAGE          ON        M$MHFSHARED>0     . THIS CODE FOR SHARED-ONLY          LA        A1,SLHOST,X6      . GET HOSTID CODE FOR FILE          LA,U      A0,$CFS('A')-1,A1 . FORM LETTER CODE IF <STD> DIR          TG,U      A1,1              . TEST FOR WITHIN STD RANGE 1-4          TG,U      A1,4+1            .          LA,U      A0,$CFS('?')      . NO, UNKNOWN          TNE,U     A1,077            .  UNLESS CODE = 077          LA,U      A0,$CFS('S')      .   THIS IS CODE FOR <SHARED> DIR          E$CHAR                      . DISPLAY HOSTID INDICATOR          E$CHAR    $CFS(' ')         . SKIP OVER          OFF       M$MHFSHARED>0     . END OF SHARED-ONLY CODE          E$COPY    12,SLQUAL,X6      . EDIT QUALIFIER          E$SKIP    1                 .          E$COPY    12,APFEFL,X4      . FILENAME          LA        A0,APFECL,X4      . F-CYCLE, LINK          SSL       A0,24             . SHIFT OFF LINK PORTION          E$DECF    5-(M$MHFSHARED>0) . DISPLAY CYCLE IN 5/4 CHAR FIELD          TZ        SAVMOD            . SAVE-HISTORY MODE,          TZ        APFERD,X4         .  AND IS REF DATE = 0?          J         SS220             .   NO, SKIP          E$SKIP    6-(M$MHFSHARED>0) .   YES, WE DON'T KNOW TRACK SIZE          E$CHAR    $CFS('-')         . PUT DASH IN PLACE OF TRACK SIZE          J         SS230             .SS220          E$DECF    7-(M$MHFSHARED>0),APFETS,X4 . DISPLAY TRK CT IN 7/6 CHARSSS230          E$SKIP    2                 .          LA        A3,APFEHC,X4      . HOSTID, JUL CAT DATE          AND,U     A3,077777         . A4 = JUL CAT DATE          LMJ       X11,JULIN         . CONVERT TO TDATE$          E$DAY5                      . EDIT INTO IMAGE          E$SKIP    2                 .          LA        A0,APFERD,X4      . LAST REF DATE (TDATE$)          TZ        SAVMOD            . SAVE-HISTORY MODE?          JZ        A0,SS250          .  YES, SKIP IF REF DATE = 0          LSSL      A0,18             . SHIFT          E$DAY5                      .  AND EDIT REF DATE          J         SS260             .SS250          E$FD1     ($CFS('------'))  . TELL USER WE DON'T KNOW REF DATESS260          E$SKIP    2                 .          LA        A4,APFEAD,X4      . ARCHIVE DATE (JULIAN)          LMJ       X11,JULIN         . CONVERT TO TDATE$          E$DAY5                      .  AND EDIT INTO IMAGE          E$SKIP    2                 .          LA        A3,APFERE,X4      . REL FLAG (17), EXPIRATION (16-0)          AND,U     A3,0377777        . A4 = EXPIRATION          ON        M$EXPPERM>0       . THIS CODE FOR PERM-EXP ONLY          TE,U      A4,M$EXPPERM      . DOES THIS FILE HAVE PERM RETENTION?          J         SS270             .  NO, SKIP          E$DECF    6,A4              .  YES, INDICATE EXP CODE, NOT DATE          J         SS280             .SS270          OFF       M$EXPPERM>0       . END OF PERM-EXP ONLY CODE          AA        A4,APFEAD,X4      . ADD JULIAN ARCHIVE DATE          LMJ       X11,JULIN         . CONVERT TO TDATE$          E$DAY5                      .  AND EDIT INTO IMAGESS280          P$RINT    (0115,LINE)       . PRINT SUMMARY LINE FOR THIS FILESS300          JGD       R6,SS100          . BACK FOR OTHER FILESSS990          J         MS100             . GO SOLICIT NEXT COMMAND/..         DO A LONG PRINT WHILE IN SELECT MODE (PRTF).PRTSEL          LA,U      A14,0             . FLAG: PARAM(S) REQ, ALLOW ALL KEYWORDS          LMJ       X10,SELPSC        . PARSE PARAMETER LIST          J         PR990             .  EXIT IF ERROR WITH PARAM LIST          LX        X6,(SLSIZE,SELLST-SLSIZE) . POINTER TO SELECTION LIST          LR        R6,SELCNT         . SELECTION LIST ENTRY COUNT          JGD       R6,$+1            . DECREMENT FOR LOOP          LA,U      A7,0              . INITIALIZE FILE NUMBER          LA,U      A8,2              .  AND CONTINUATION CTR (2 FILES/SCREEN)PR100          AA,U      A7,1              . INCREMENT FILE NUMBER          TNZ       SLSEL+SLSIZE,*X6  . IS THIS ENTRY SELECTED FOR PRINT?          J         PR300             .  NO, SKIP          P$RINT    (0100,$)          .  YES, PRINT BLANK LINE FOR READABILITY          JGD       A8,PR150          . SKIP FWD UNTIL CONT CTR = 0          LA,U      A0,CONTRD         .          ER        TREAD$            . 'CONTINUE> '          LA,U      A0,,A0            . GET WORD COUNT ONLY          JZ        A0,PR140          . CONTINUE IF ZERO          SA        A0,IMGLEN         .  IF NOT, STORE LENGTH OF NEXT COMMAND          J         PR990             .   AND EXIT THIS COMMANDPR140          LA,U      A8,1              . RESET CONTINUATION LOOP COUNTERPR150          LX,U      X5,SLFEBG,X6      . ADDRESS OF APFEXX DATA IN SEL RECORD          LA        A5,APFECL,X5      . GET CYCLE, LINK TO MAIN HISTORY ENTRY          LSSL      A5,12             . SHIFT OFF CYCLE PORTION          SSL       A5,12             . A5 = LINK          AA        A5,AHFHDR+AHHSTB  . ADD OFFSET, MAKE ABSOLUTE          SA        A5,AHFPKT+5       . STORE IN READ PACKET          I$OW      AHFPKT            . READ HISTORY ENTRY FROM ARCHIST$          LMJ       X9,STATUS         . CHECK STATUS          J         PR990             .  EXIT COMMAND IF I/O ERROR          LX,U      X4,AHBUFF         . ADDRESS OF HISTORY ENTRY BUFFER          DL        A0,SLQUAL,X6      . QUALIFIER FROM SELECTION RECORD          DTE       A0,AHQUAL,X4      . IS IT THE SAME AS HIST ENTRY?          J         PR170             .  NO, ERROR          DL        A0,APFEFL,X5      . GET FILENAME FROM SELECTION REC          LA        A4,APFECL,X5      .  AND CYCLE, LINK          SSL       A4,24             . SHIFT OFF LINK PORTION          TNE       A4,AHCYCL,X4      . DO THEY MATCH HIST ENTRY?          DTE       A0,AHFILE,X4      .          J         PR170             .  NO, ERROR          J         PR200             .  YES, CONTINUEPR170          E$CLEAR                     . CLEAR EDIT          E$FD2     SLQUAL,X6         . QUAL FROM SEL RECORD          E$CHAR    $CFS('*')         .          E$FD2     APFEFL,X5         . FILENAME FROM SEL RECORD          E$CHAR    $CFS('(')         .          LA        A0,APFECL,X5      . CYCLE, LINK FROM SELECTION RECORD          SSL       A0,24             . SHIFT OFF LINK PORTION          E$DECV                      . EDIT CYCLE          E$MSG     AHLERR            . ' BAD LINK TO HISTORY AREA: '          E$DECV    A5                . EDIT SECTOR NUMBER          P$RINT    (0116,LINE)       . PRINT ERROR MESSAGE          J         PR990             .  AND EXIT COMMANDPR200          LNA,U     A14,1             . A14 = -1 IS ACP-ARCHIVE, STD SAVE          TNZ       SAVMOD            . ACP-ARCHIVE?          J         PR202             .  YES, SKIP          LA        A0,AHMNM4,X4      .  NO, GET ASSIGN MNEMONIC          SSL       A0,12             . MNEMONIC IS IN S1-S4          JNZ       A0,PR202          . NONZERO IS STANDARD SAVE ENTRY          LA,U      A14,1             . A14 = 1 IS FROM SYS$*FAS$ARCHIVE          LA        A0,AHACCT,X4      . GET ACCOUNT ID          TE        A0,($CFS('      ')) . IS ACCOUNT SPACEFILLED          TNE       A0,($CFS('??????')) .  OR QUESTION MARKS?          LA,U      A14,0             .   YES, THIS IS FROM SYS$*ARCHIVE$PR202          E$CLEAR                     . CLEAR EDIT          E$DCFZ    4,A7              . FILE NUMBER          E$CHAR    $CFS(':')         .          E$CHAR    $CFS(' ')         .          E$MSG     PRTMS1            . ' * *  PROJ: '          LA,U      A6,1              . ALLOW PRINT OF PROJECT, ACCOUNT          TNZ       PRIVX             . DOES USER HAVE DLOC?          TZ        PRIV              . OR IS THIS THE SITE ADMINISTRATOR?          J         PR210             .  YES, DON'T CHECK FOR MATCH          ON        M$PVTACC>0        . THIS CODE FOR PRIVATE-BY-ACCOUNT          DL        A0,AHACCT,X4      . ACCOUNT NUMBER OF FILE          DTE       A0,USRACC         . SAME AS USER ACCOUNT?          LA,U      A6,0              .  NO, DON'T PRINT PROJ/ACCT OF FILE          OFF       M$PVTACC>0        .          ON        M$PVTACC=0        . THIS CODE FOR PRIVATE-BY-PROJECT          DL        A0,AHPROJ,X4      . PROJECT-ID OF FILE          DTE       A0,USRPROJ        . SAME AS USER PROJECT-ID?          LA,U      A6,0              .  NO, DON'T PRINT PROJ/ACCT OF FILE          OFF       M$PVTACC=0        .PR210          LA,U      A0,($CFS('////////////')) . ADDRESS OF DUMMY PROJECT          JZ        A6,$+2            . SKIP IF USER NOT ALLOWED TO SEE THIS          LA,U      A0,AHPROJ,X4      . LOAD ADDRESS OF REAL PROJECT          E$COPY    12                . COPY INTO IMAGE          E$MSGR                      . '    ACCNT: '          LA,U      A0,($CFS('////////////')) . ADDRESS OF DUMMY ACCOUNT          JZ        A6,$+2            . SKIP IF USER NOT ALLOWED TO SEE THIS          LA,U      A0,AHACCT,X4      . LOAD ADDRESS OF REAL ACCOUNT          E$COPY    12                . COPY INTO IMAGE          E$MSGR                      . ' * *'          P$RINT    (0114,LINE)       . PRINT 1ST LINE OF OUTPUT FOR THIS FILE          E$CLEAR                     . CLEAR EDIT          TNZ       SLREL,X6          . IS THIS FILE SELECTED FOR RELOAD?          J         PR220             .  NO, SKIP          E$COPY    4,($CFS(' (R)  ')) .  YES, INDICATE AT START OF 2ND LINEPR220          E$COL     6                 . MOVE TO COL 6          TNZ       HOSTID            . IS MHFS CONFIG ON SYSTEM?          J         PR222             .  NO, SKIP DIRECTORY EDIT          LA,U      A0,$CFS('STD')    . SETUP FOR STANDARD DIRECTORY          LA        A1,AHHOST,X4      . HOST-ID OF FILE          TNE,U     A1,077            . WAS FILE FROM SHARED DIR?          LA        A0,($CFS('SHARED')) .  YES, USE SHARED DIR-ID          E$FD1                       . EDIT INTO IMAGE          E$CHAR    $CFS('#')         . SEPARATORPR222          E$FD2     AHQUAL,X4         . QUALIFIER          E$CHAR    $CFS('*')         .          E$FD2     AHFILE,X4         . FILENAME          E$CHAR    $CFS('(')         .          E$DECV    AHCYCL,X4         . CYCLE          E$CHAR    $CFS(')')         .          JN        A14,PR223         . CONTINUE IF ACP-ARCH OR FAS-SAVE ENTRY          JZ        A14,PR230         . SKIP REM OF LINE IF ARCHIVE$ ENTRY          TNZ       AHPKID,X4         . DOES FAS-ARCHIVED HAVE R-PACKID?          J         PR230             .  NO, SKIP REM OF LINE          E$CHAR    $CFS(',')         .  YES, PREPARE TO INCLUDE IN OUTPUT          J         PR228             . SKIP KEYS, ETC - TO PACKID EDITPR223          LA        A4,AHFLGS,X4      . MISC FLAGS          LA,U      A5,0              . INIT KEY-SLASH LOOP COUNTER          TEP,U     A4,AHFRKY         . READ KEY ON FILE?          LA,U      A5,6              .  YES, MIN 7 SLASHES          TEP,U     A4,AHFWKY         . WRITE KEY ON FILE?          AA,U      A5,7              .  YES, 8 (OR 14) SLASHES          JZ        A5,PR225          . SKIP IF NEITHER KEY IS PRESENT          LA,U      A0,$CFS('/')      . LOAD SLASH CHARACTERPR224          E$CHAR                      . EDIT INTO IMAGE          JGD       A5,PR224          . LOOP BACK APPROPRIATE NUMBER OF TIMESPR225          E$CHAR    $CFS(',')         .          LA        A0,AHMNM4,X4      . 1ST 4 CHARS OF EQUIP MNEMONIC          SSL       A0,12             . SHIFT INTO PROPER POSITION          E$FD1                       . EDIT INTO IMAGE          E$CHAR    $CFS('/')         .          E$DECV    AHINIT,X4         . INITIAL RESERVE          E$CHAR    $CFS('/')         .          LA,U      A0,$CFS('TRK')    . ASSUME TRACK GRANULARITY          LA        A4,AHPCFF,X4      . PCHAR/FILE FLAGS          TEP,U     A4,MMPOGR         .  POS GRANULARITY?          LA,U      A0,$CFS('POS')    .   YES, SO INDICATE          E$FD1                       . EDIT GRANULARITY          E$CHAR    $CFS('/')         .          E$DECV    AHMXGR,X4         . MAXIMUM GRANULES          TNZ       AHPKID,X4         . IS THE PACKID NONZERO?          J         PR230             .  NO, FIXED STORAGEPR228          E$CHAR    $CFS(',')         .  YES          E$FD1     AHPKID,X4         . EDIT PACKID INTO IMAGEPR230          P$RINT    (0114,LINE)       . PRINT 2ND LINE OF OUTPUT          JZ        A14,PR235         . SKIP MODES, ETC IF ARCHIVE$ ENTRY          LA        A4,AHPCFF,X4      . A4 = PCHAR/FILE FLAGS          E$CLEAR                     . CLEAR EDIT          E$COL     8                 . SKIP OVER A LITTLE          E$MSG     PRTMS2            . 'MODES: '          LA        A5,AHINHI,X4      . INHIBIT BITS          LA        A0,($CFS('PUBLIC')) . ASSUME PUBLIC          TEP,U     A5,MMPRVT         . PRIVATE FILE?          LA        A0,($CFS('PRIVAT')) .  YES, SO INDICATE          E$FD1                       . EDIT INTO IMAGE          LA        A0,($CFS(',G-OPT')) .          TEP,U     A5,MMGOPT         . G-OPTION?          E$FD1                       .  YES, EDIT IN          LA        A0,($CFS(',V-OPT')) .          TEP,U     A5,MMVOPT         . V-OPTION?          E$FD1                       .  YES, EDIT IN          LA        A0,($CFS(',READ ')) .          TEP,U     A5,MMROLY         . READ ONLY?          E$FD1                       .  YES, EDIT IN          LA        A0,($CFS(',WRITE')) .          TEP,U     A5,MMWOLY         . WRITE ONLY?          E$FD1                       .  YES, EDIT IN          LA        A0,($CFS(',S-OPT')) .          TEP,U     A4,MMSTRT         . STORE THROUGH?          E$FD1                       .   YES, EDIT IN          LA        A0,AHFLGS,X4      . MISC FLAGS          TOP,U     A0,AHFCFB         . IS THIS CRIT-BACKUP COPY?          J         PR232             .  NO, SKIP          E$MSGR                      .  YES, '  (BACKUP COPY)'PR232          LA        A0,AHHOST,X4      . HOST-ID OF FILE          TNE       A0,HOSTID         . SAME AS CURRENT HOST?          J         PR233             .  YES, DO NOT DISPLAY          TG,U      A0,1              . WITHIN <STD> RANGE 1-4?          TG,U      A0,4+1            .          J         PR233             .  NO, SKIP          E$MSG     PRTM2A            .  YES, EDIT '   *HOST: '          LA        A0,AHHOST,X4      .          AA,U      A0,$CFS('A')-1    . FORM LETTER CODE, A-D          E$CHAR                      . EDIT INPR233          P$RINT    (0114,LINE)       . PRINT 3RD LINE OF OUTPUT          E$CLEAR                     . CLEAR EDIT          E$COL     8                 . SKIP OVER          E$MSG     PRTMS3            . 'NO. OF TRACKS ASSIGNED: '          E$DECF    6,AHTKCT,X4       . TRACK COUNT          JP        A14,PR234         . DON'T KNOW ASG CT IF FAS-ARCHIVED          E$MSGR                      . '    TOTAL ASSIGNMENTS:'          E$DECF    6,AHRFCT,X4       . REFERENCE COUNTPR234          P$RINT    (0116,LINE)       . PRINT 4TH LINE OF OUTPUTPR235          E$CLEAR                     . CLEAR EDIT          E$COL     8                 . SKIP          E$MSG     PRTMS4            . 'CAT: '          E$DAY1    AHCATT,X4         . CATALOG DATE          E$MSGR                      . ' AT '          E$TIME    AHCATT,X4         . CATALOG TIME          JZ        A14,PR237         . SKIP REF INFO IF ARCHIVE$ ENTRY          E$MSGR                      . ', LAST REF: '          E$DAY1    AHREFT,X4         . LAST REFERENCE DATE          E$MSGR                      . ' AT '          E$TIME    AHREFT,X4         . LAST REFERENCE TIMEPR237          P$RINT    (0116,LINE)       . PRINT 5TH LINE OF OUTPUT          TZ        SAVMOD            . FAS SAVE-HISTORY MODE?          J         PR260             .  YES, SKIP LINES 6 AND 7          E$CLEAR                     . CLEAR EDIT          E$COL     8                 . SKIP          E$MSG     PRTMS5            . 'MATCHING CLASS>QUAL*FILE:  '          LX,U      X7,AHMIST,X4      . ADDRESS OF MATCHING INFO IN HIST BUFF          DL        A0,($CFS('DEFAULT     ')) . ASSUME DEFAULT CLASS          LA        A4,AHMIVF,X7      . VERSION TYPE OF MI RECORD          TNE,U     A4,AHMIV2         . IS THIS ENTRY FROM 2R2+?          LA        A0,AHMCLS,X7      .  YES, LOAD REAL CLASS-ID          TE        A0,($CFS('DEFAUL')) . DEFAULT CLASS?          LA,U      A1,0              .  NO, LIMIT TO 6 CHARS          E$FD2                       . EDIT CLASS-ID          E$CHAR    $CFS('>')         .          E$CHAR    $CFS(' ')         .          TNE,U     A4,AHMIV2         . IS MI RECORD IN 2R2+ FORMAT?          J         PR238             .  YES, SKIP          E$FD2     AHMQUAL,X7        . MATCHING QUALIFIER (2R1)          E$CHAR    $CFS('*')         .          E$FD2     AHMFILE,X7        . MATCHING FILENAME (2R1)          J         PR239             .PR238          DL        A0,AHQUAL,X4      . FULL QUALIFIER OF ARCHIVED FILE          LA        A4,AHMQWC,X7      . WILDCARD COUNT OF MATCHING ENTRY          LMJ       X10,FMTMAT        . FORMAT AND OUTPUT          E$CHAR    $CFS('*')         .          DL        A0,AHFILE,X4      . FULL FILENAME OF ARCHIVED FILE          LA        A4,AHMFWC,X7      . WILDCARD COUNT OF MATCHING ENTRY          LMJ       X10,FMTMAT        . FORMAT AND OUTPUTPR239          P$RINT    (0116,LINE)       . PRINT 6TH LINE OF OUTPUT          E$CLEAR                     . CLEAR EDIT          E$COL     8                 . SKIP          LA        A0,AHMTYPE,X7     . REASON FOR ARCHIVE          TE,U      A0,$CFS('R')      . REF LIMIT EXCEEDED?          J         PR240             .  NO, SKIP          E$MSG     PRTMS6R           .  YES, 'DAYS SINCE REF WHEN ARCHIVED: '          LA        A0,AHMVLF,X7      . GET DAYS SINCE REF          J         PR250             . BACK TO COMMON CODEPR240          TE,U      A0,$CFS('C')      . CYCLE LIMIT EXCEEDED?          J         PR260             .  NO, WE DON'T KNOW??? SKIP THIS LINE          E$MSG     PRTMS6C           .  YES, 'REL CYCLE NO. WHEN ARCHIVED: '          LA,U      A0,1              .          ANA       A0,AHMVLF,X7      . COMPUTE REL CYC NUMBERPR250          E$DECV                      . EDIT DSR OR RCN INTO IMAGE          E$MSGR                      . '(<CYC><REF> LIMIT: '          E$DECV    AHMVLC,X7         . EDIT APPROPRIATE LIMIT INTO IMAGE          E$MSGR                      . ')'          P$RINT    (0116,LINE)       . PRINT 7TH LINE OF OUTPUTPR260          E$CLEAR                     . CLEAR EDIT          E$COL     8                 . SKIP OVER          LA,U      A0,$CFS('SAV')    . ASSUME SAVE-HIST MODE          TNZ       SAVMOD            . IS SAVE-HIST MODE ON?          J         PR262             .  NO, SAY 'ARCHIVED'          JN        A14,PR263         .  YES, SKIP IF NOT FAS-ARCHIVED          E$FD1     ($CFS('FAS-'))    . SYS$*ARCHIVE$, SAY 'FAS-ARCHIVED'PR262          LA        A0,($CFS('ARCHIV')) .PR263          E$FD1                       . EDIT 1ST WORD INTO IMAGE          E$MSG     PRTMS7            . 'ED '          E$DAY1    AHARCT,X4         . ARCHIVE/BACKUP DATE          E$MSGR                      . ' AT '          E$TIME    AHARCT,X4         . ARCHIVE/BACKUP TIME          E$MSGR                      . ' TO POS '          LA        A0,AHSTFP,X4      . STARTING FILE POSITION          TZ        SAVMOD            . FAS SAVE-HISTORY MODE?          J         PR265             .  YES, DON'T SCREW AROUND WITH POSITION          DSL       A0,36             .  NO, PREPARE FOR DIVIDE          DI,U      A0,3              . DIVIDE BY 3 (COMPENSATE FOR TLS)          AA,U      A0,1              . FUDGEPR265          E$DECV                      . EDIT INTO IMAGE          E$MSGR                      . ' REEL '          LX,U      X7,AHBRST,X4      . ADDRESS OF REEL LIST          LXI,U     X7,1              . LOOP INCREMENT          LA        A4,AHBRCT,X4      . BACKUP REEL COUNT          LR        R7,AHBRCT,X4      . INTO R7 ALSO          TG,U      A4,AHBRMX+1       . MORE THAN MAX ALLOWED?          LR,U      R7,AHBRMX         .  IF SO, USE MAX FOR LOOP          JGD       R7,$+1            . DECR FOR JGD          J         PR275             .  SKIP COMMA FOR FIRST REELPR270          E$CHAR    $CFS(',')         . SEPARATORPR275          E$FD1     0,*X7             . EDIT NEXT REEL NUMBER INTO IMAGE          JGD       R7,PR270          . BACK FOR MORE IF MULTI-REEL ARCHIVE          TLE,U     A4,AHBRMX+1       . MORE THAN MAX ALLOWED?          J         PR276             . NO, SKIP          E$COPY    2,($CFS(' +    ')) .  YES, INDICATE IN OUTPUTPR276          P$RINT    (0116,LINE)       . PRINT 8TH LINE OF OUTPUT          E$CLEAR                     . CLEAR EDIT          E$COL     8                 . SKIP          LA,U      A0,$CFS('SAV')    . ASSUME SAVE-HIST MODE          TZ        SAVMOD            . STANDARD ARCHIVE MODE, OR          JN        A14,$+2           .  IS THIS A FAS-ARCHIVED ENTRY?          LA        A0,($CFS('ARCHIV')) .   YES, SAY 'ARCHIVE'          E$FD1                       . EDIT 1ST WORD INTO IMAGE          ON        M$EXPPERM>0       . THIS CODE FOR PERM-EXP ONLY          LA        A0,AHEXP,X4       . LOAD EXPIRATION FOR FILE          TE,U      A0,M$EXPPERM      . PERMANENT RETENTION?          J         PR280             .  NO, SKIP          E$MSG     PRTM8A            .  YES, EDIT 'E TAPE HAS PERM RETN'          J         PR285             .PR280          OFF       M$EXPPERM>0       . END OF PERM-EXP ONLY CODE          E$MSG     PRTMS8            . 'E TAPE WILL EXPIRE ON '          LA        A0,AHARCT,X4      . GET ARCHIVE/BACKUP DATE (TDATE$)          LMJ       X11,JULOUT        . CONVERT TO JULIAN          ER        ERR$              . BLOW UP IF ERROR, PROBABLE CORRUPTION          AA        A4,AHEXP,X4       . ADD EXPIRATION PERIOD = EXP DATE          LMJ       X11,JULIN         . CONVERT BACK TO TDATE$          E$DAY1                      . EDIT EXPIRATION DATE          E$MSGR                      . '  ('          E$DECV    AHEXP,X4          . EXPIRATION PERIOD          E$MSGR                      . ' DAYS FROM CREATION)'PR285          P$RINT    (0116,LINE)       . PRINT 9TH LINE OF OUTPUT          TEP       A15,(1*/('Z'-'D')) . DEBUG MODE,          TNZ       PRIV              .  AND PRIVILEGED USER?          J         PR290             .   NO, SKIP AHF STATUS LINE          E$CLEAR                     .   YES, CLEAR EDIT          E$COL     8                 . SKIP          E$MSG     PRTMS9            . ' THIS INFO RECORDED IN '          E$FD2     AHFFAC+4          . QUALIFIER          E$MSGR                      . *          E$FD2     AHFFAC+2          . FILENAME          E$MSGR                      . (          LA        A0,AHFFAC+6       .          LSSL      A0,24             . ISOLATE HIST FILE CYCLE NUMBER          SSL       A0,24             .          E$DECV                      . EDIT INTO IMAGE          E$MSGR                      . '), SECTOR '          E$DECV    AHFPKT+5          . EDIT SECTOR NUMBER OF MAIN HIST DATA          E$MSGR                      . ' ***'          P$RINT    (0114,LINE)       . PRINT 10TH LINE OF IMAGEPR290          TNZ       SLREL,X6          . IS THIS FILE MARKED FOR RELOAD?          J         PR300             .  NO, SKIP          TZ        SLRLNK,X6         .  YES, WILL IT BE LOADED TO A DIFF Q*F?          J         PR295             .   YES, SKIP          DL        A0,SBQUAL         . SUBSTITUTE QUALIFIER          JZ        A0,PR300          . SKIP IF NONE GIVEN          DTE       A0,SLQUAL,X6      . SAME AS ORIGINAL QUALIFIER?          J         $+2               .  NO          J         PR300             .  YES, SKIP          E$CLEAR                     . CLEAR EDIT          E$SKIP    8                 . SKIP          E$MSG     PRTMS10           . 'FILE''S CONTENTS WILL BE LOADED INTO '          TNZ       HOSTID            . IS MHFS CONFIG ON SYSTEM?          J         PR292             .  NO, SKIP DIRECTORY EDIT          LA,U      A0,$CFS('STD')    . SETUP FOR STANDARD DIRECTORY          LA        A1,SLHOST,X6      . HOST-ID OF FILE          TNE,U     A1,077            . RELOAD INTO SHARED DIR?          LA        A0,($CFS('SHARED')) .  YES, USE SHARED DIR-ID          E$FD1                       . EDIT INTO IMAGE          E$CHAR    $CFS('#')         . SEPARATORPR292          E$FD2     SBQUAL            . QUALIFIER          E$MSGR                      . *          E$FD2     AHFILE,X4         . FILENAME          E$CHAR    $CFS('(')         .          E$DECV    AHCYCL,X4         . CYCLE          E$CHAR    $CFS(')')         .          J         PR298             .PR295          LX        X4,SLRLNK,X6      . LOAD LINK TO REPL LIST ENTRY          E$CLEAR                     . CLEAR EDIT          E$SKIP    8                 . SKIP          E$MSG     PRTMS10           . 'FILE''S CONTENTS WILL BE LOADED INTO '          TNZ       HOSTID            . IS MHFS CONFIG ON SYSTEM?          J         PR296             .  NO, SKIP DIRECTORY EDIT          LA,U      A0,$CFS('STD')    . SETUP FOR STANDARD DIRECTORY          LA        A1,RPHOST,X4      . HOST-ID OF FILE          TNE,U     A1,077            . RELOAD INTO SHARED DIR?          LA        A0,($CFS('SHARED')) .  YES, USE SHARED DIR-ID          E$FD1                       . EDIT INTO IMAGE          E$CHAR    $CFS('#')         . SEPARATORPR296          E$FD2     RPQUAL,X4         . QUALIFIER          E$MSGR                      . *          E$FD2     RPFILE,X4         . FILENAME          TNZ       RPCYCL,X4         . WAS CYCLE GIVEN BY USER?          J         PR298             .  NO, SKIP          E$CHAR    $CFS('(')         .          E$DECV    RPCYCL,X4         . CYCLE          E$CHAR    $CFS(')')         .PR298          E$MSGR                      . .          P$RINT    (0116,LINE)       . PRINT NEW Q*F STATUS MESSAGEPR300          JGD       R6,PR100          . LOOP BACK FOR OTHER SEL LIST ENTRIESPR990          P$RINT    (0100,$)          . PRINT A BLANK LINE FOR READABILITY          J         MS100             . GO SOLICIT NEXT COMMAND...         FORMAT AND EDIT A MATCHING QUAL/FILE.           A0,A1 = ORIGINAL NAME, A4 = WILDCARD COUNT.FMTMAT          JNZ       A4,FM100          . SKIP IF ANY WILDCARDS IN MATCHING ENT          E$FD2                       .  IF NOT, SIMPLY EDIT WHAT WE HAVE          J         FM300             .   AND RETURNFM100          DS        A0,IMAGE          . STORE QUAL OR FILE NAME          LA,U      A1,12             .          ANA       A1,A4             . A1 = IDENTICAL CHAR COUNT          JZ        A1,FM200          . SKIP IF ZERO          LA,U      A0,IMAGE          .          E$COPY                      . IF NOT, COPY THIS MANY TO OUTPUTFM200          LA,U      A0,($CFS('############')) . WHERE TO GET THE REST          LA        A1,A4             . WILDCARD COUNT          E$COPY                      . APPEND APPROPRIATE AMOUNTFM300          J         0,X10             . RETURN...         SPECIFY OR DISPLAY A SUBSTITUTE QUALIFIER (SUBSTITUTE).SUBSEL          LA        A0,(1,SUBPAR)     . PARAMETER LIST FOR SUBSTITUTE CMD          LMJ       X10,PARSCN        . PARSE REMAINDER OF CMD LINE          J         SB900             . SKIP IF ERROR RETURN          TZ        SBQUAL            . HAS A SUBSTITUTE QUAL BEEN GIVEN?          J         SB200             .  YES, SKIP          P$RINT    ERRPRT(85)        . 'A SUBSTITUTE QUAL HAS NOT BEEN GIVEN'          J         SB900             .SB200          E$CLEAR                     . CLEAR EDIT          E$FD2     ($CFS('*RELOADED')) .          E$MSG     SBQMSG            . ' FILES WILL HAVE SUB QUALIFIER: <'          E$FD2     SBQUAL            . INSERT SUBSTITUTE QUALIFIER          E$MSGR                      . '>'          P$RINT    (0114,LINE)       . PRINT STATUS MESSAGESB900          J         MS100             . GO SOLICIT NEXT COMMAND/..         REMOVE ENTRIES FROM SELECTION LIST OR CLEAR RELOAD FLAG(S)  (OMIT).OMISEL          SZ        OMTREL            . CLEAR OMIT-RELOAD FLAG          JUMP,,OS100  ',',OS050      . JUMP IF OPTION LETTER FOLLOWSOS050          GNCH,,OS920  'R',OS070      . MUST BE 'R' OPTION, OTHERS NOT ALLOWEDOS070          SP1       OMTREL            . 'R' OPT FOUND, SET OMIT-RELOAD FLAG          GNCH                        . GET NEXT CHAROS100          LNA,U     A14,2             . FLAG: PARAMS REQ, 'REL' NOT ALLOWED          LMJ       X10,SELPSC        . SCAN USER PARAMETER(S)          J         OS990             . SYNTAX ERROR, DO NOT CONTINUE          TZ        OMTREL            . OMIT RELOAD FLAG ONLY?          J         OS150             .  YES, SKIP: THIS ALREADY DONE BY SELPSC          LX        X6,(SLSIZE,SELLST-SLSIZE) . INPUT PTR FROM SELECTION LIST          LX        X7,(1,SELLST)     . OUTPUT POINTER TO SELECTION LIST          LR        R6,SELCNT         . COUNT OF SELECTED ENTRIES          JGD       R6,$+1            . DECREMENT FOR LOOP          DSL       A4,72             . A4 = REMAINING SELECTED, A5 = RELOADEDOS120          TZ        SLSEL+SLSIZE,*X6  . WAS THIS ENTRY SELECTED (DROPPED)?          J         OS130             .  YES, DO NOT TRANSFER BACK TO LIST          AA,U      A4,1              .  NO, INCREMENT REMAINING SELECTED COUNT          TZ        SLREL,X6          . WAS THIS ENTRY FLAGGED FOR RELOAD?          AA,U      A5,1              .  YES, INCREMENT REMAINING RELOAD COUNT          LA,U      A0,,X6            . A0 = ADDRESS OF REMAINING RECORD          LXI,U     A0,1              . INCREMENT FOR TRANSFER          LR,U      R1,SLSIZE         . TRANSFER <SLSIZE> WORDS (ONE RECORD)          BT        X7,,*A0           .  MOVE DATA TO NEXT OPEN SLOT ON LISTOS130          JGD       R6,OS120          . BACK FOR MORE          SA        A4,SELCNT         . SAVE REMAINING SELECTED COUNT          SA        A5,RELCNT         .  AND REMAINING TO-BE-RELOADED COUNT          JNZ       A5,OS150          . SKIP IF AT LEAST ONE ENTRY TO BE REL          SZ        RPLCNT            .  IF NOT, CLEAR REPLACEMENT LIST COUNTOS150          E$CLEAR                     . CLEAR EDIT          E$DECV    SELCNT            . REMAINING SELECTED COUNT          E$MSG     OMTMSG            . ' FILES NOW ON SELECTION LIST ('          E$DECV    RELCNT            . REMAINING TO-BE-RELOADED COUNT          E$MSGR                      . ' MARKED FOR RELOAD)'          P$RINT    (0112,LINE)       . PRINT STATUS MESSAGE          TNZ       SELCNT            . ANYTHING LEFT ON SELECTION LIST?          SZ        SBQUAL            .  NO, CLEAR SUBSTITUTE QUALIFIER          J         MS100             . GO GET NEXT COMMANDOS920          P$RINT    ERRPRT(4)         . 'COMMAND SYNTAX ERROR'OS990          J         MS100             . GO GET NEXT COMMAND...         EXIT SELECT MODE WITHOUT RELOADING (EXIT).EXTSEL          TNZ       RELCNT            . ANY FILES TO BE RELOADED?          J         EX100             .  NO, ALLOW EXIT          P$RINT    ERRPRT(50)        . ' SELECTION LIST WILL BE CLEARED'EX080          SZ        IMAGE             . ZERO USER ANSWER WORD          LA,U      A0,EXTTRD         .          ER        TREAD$            . 'DO YOU STILL WANT TO EXIT? (YN)'          LA,S1     A0,IMAGE          . GET USER RESPONSE          TNE,U     A0,$CFS('N')      .          J         MS100             . IGNORE EXIT IF 'N'          TE,U      A0,$CFS('Y')      .          J         EX080             . ASK AGAIN IF NOT 'Y'          SZ        RELCNT            . ZERO RELOAD COUNTEX100          SZ        SELCNT            . ZERO SELECTION COUNT (EXIT SELECT MODE)          SZ        RPLCNT            . ZERO REPLACEMENT LIST COUNT          SZ        SBQUAL            . CLEAR SUBSTITUTE QUALIFIER          J         MS100             . GO SOLICIT NEXT COMMAND/.        SEARCH FOR A QUALIFIER ENTRY IN THE QT CHAIN..         ENT: A4,A5 = TARGET QUALIFIER..         EXIT: A0 = BUFFER ADDRESS.               A3 = POINTER WITHIN BUFFER (ZERO IF NO MORE ENTRIES)..         RETURNS: 0,X11 ERROR.                  1,X11 NO FIND (A0,A3 ARE NEXT OPEN ENTRY).                  2,X11 FIND.SRQUAL          LA        A2,CURCLS         . CURRENT ACCESSED STORAGE CLASS          JNZ       A2,$+2            . SKIP IF NONZERO          LA        A2,($CFS('DEFAUL')) . IF UNDEFINED, USE DEFAULT          LMJ       X10,SRCLASS       . SEARCH CLASS-ID TABLE FOR IT          J         SQ910             .  NO FIND, ERROR          LA        A2,ACCEQL,A0      . A2 = MS ADDR OF 1ST QT IN CLASS          LA,U      A8,0              . INIT, NO OPEN SLOTS          LA,U      A3,QTBUF1         . ADDRESS OF FIRST QT BUFFERSQ100          LMJ       X10,RDBUFF        . READ THE NEXT QT FROM THE ACF          J         SQ990             .  EXIT IF ERROR READING TABLE          SA        A0,QTSAVE         . SAVE ADDRESS OF QT BUFFER          LX,U      X6,ACQTBG,A0      . GET ADDRESS OF 1ST QUAL ENTRY IN QT          LXI,U     X6,ACQTES         . LOOP INCREMENT = ENTRY SIZE          LR,U      R8,ACQTMX-1       . LOOP COUNT = MAX ENTRIES - 1SQ120          DL        A6,ACQEQL,*X6     . LOAD QUALIFIER FROM NEXT SLOT          TE,U      A6,0              . IS THIS SLOT OCCUPIED?          J         SQ130             .  YES, SKIP          JNZ       A8,SQ150          .  NO, SKIP IF OPEN SLOT ALREADY FOUND          LA,U      A8,,X6            .   IF NOT, SAVE 1ST OPEN SLOT ADDRESS          ANA,U     A8,ACQTES         . ADJUST FOR PREVIOUS INCREMENT          LA        A0,QTSAVE         . QT BUFFER ADDRESS          SA        A0,QTSAV2         . SAVE ADDRESS OF BUFF WITH 1ST OPEN SLOT          J         SQ150             . CONTINUE WITH LOOPSQ130          DTE       A4,A6             . IS THIS THE QUAL WE WERE TARGETING?          J         SQ150             .  NO, SKIP          LA,U      A3,,X6            . YES, LOAD ADDRESS WITHIN QUAL TABLE          ANA,U     A3,ACQTES         . ADJUST FOR PREVIOUS INCREMENT          J         SQ200             . RETURN FINDSQ150          JGD       R8,SQ120          . BACK FOR OTHER ENTRIES IN THIS TABLE          LA        A0,QTSAVE         . AT END OF LOOP, LOAD BUFFER ADDRESS          LA        A2,ACQTNX,A0      . GET LINK TO NEXT QT IN THE CHAIN          JZ        A2,SQ400          . FINISHED WITH SEARCH IF ZERO          LA,U      A3,QTBUF1         . IF NOT, LOAD NEXT QT BUFF ADDRESS          JZ        A8,$+2            . HAVE WE FOUND AN OPEN SLOT ALREADY?          LA,U      A3,QTBUF2         .  YES, USE ALTERNATE BUFFER          J         SQ100             . BACK TO TOP, CONTINUE WITH NEXT QTSQ200          LA        A0,QTSAVE         . BUFF ADDRESS CONTAINING TARGET ENTRY          J         2,X11             . RETURN FINDSQ400          LA        A3,A8             . ADDRESS OF NEXT OPEN SLOT          JZ        A3,$+2            . SKIP IF ZERO          LA        A0,QTSAV2         .  IF NOT, LOAD ADDR OF APPROPRIATE BUFF          J         1,X11             . RETURN NO FINDSQ910          P$RINT    ERRPRT(68)        . 'STORAGE CLASS IS NO LONGER DEFINED'          SZ        CURCLS            . ZERO CURRENT ACCESSED CLASSSQ990          J         0,X11             . RETURN ERROR...         SEARCH THE CLASS-ID TABLE FOR A USER-SPECIFIED STORAGE CLASS..         ENT: A2 = CLASS-ID (FD, LJSF)..         EXIT: A0 = ADDRESS OF MATCHING ENTRY..         RETURNS: 0,X11 NO FIND (A3 = NEXT OPEN SLOT, ZERO=NONE).                  1,X11 FIND.SRCLASS          LA,U      A0,ACCTBG-ACCTES,X8 . INIT, A0 = PTR TO CLASS-ID TABLE          LXI,U     A0,ACCTES         . SIZE OF ONE ENTRY (LOOP INCREMENT)          LR,U      R1,ACMXCL-1       . LOOP COUNT = MAX ENTRIES - 1          LA,U      A3,0              . INIT NEXT OPEN POINTER = 0SC100          LA        A1,ACCECL+ACCTES,*A0 . GET NEXT CLASS-ID          TNE       A1,A2             . IS THIS THE ONE WE'RE LOOKING FOR?          J         SC200             .  YES, RETURN FIND (A0 = ADDRESS)          JNZ       A1,SC150          . SKIP IF THIS SLOT IS OCCUPIED          JNZ       A3,SC150          .  OR IF WE ALREADY HAVE AN OPEN SLOT          LA,U      A3,,A0            .   IF NOT, A3 = FIRST OPEN ADDRESSSC150          JGD       R1,SC100          . BACK FOR REST          J         0,X10             . RETURN NO FINDSC200          J         1,X10             . RETURN FIND/..         SEARCH FOR A FILE ENTRY IN AN FT CHAIN..         ENT: A0 = FIRST FT ADDRESS (IN FTBUF1).              A4,A5 = TARGET FILENAME..         EXIT: A0 = BUFFER ADDRESS.               A3 = POINTER WITHIN BUFFER (ZERO IF NO MORE ENTRIES)..         RETURNS: 0,X11 ERROR.                  1,X11 NO FIND (A0,A3 ARE NEXT OPEN ENTRY).                  2,X11 FIND.SRFILE          LA,U      A8,0              . INIT, NO OPEN SLOT ADDRESS          LX,U      X6,ACFTBF1,A0     . ADDRESS OF FIRST FILE ENTRY IN 1ST FT          LXI,U     X6,ACFTES         . LOOP INCREMENT = SIZE OF FILE ENTRY          LR,U      R8,ACFTMX1-1      . LOOP COUNT = MAX ENTRIES/1ST BUFF - 1SF100          SA        A0,FPSAVE         . SAVE FT BUFFER ADDRESSSF120          DL        A6,ACFEFL,*X6     . LOAD FILENAME FROM NEXT ENTRY          TE,U      A6,0              . IS THIS ENTRY OPEN?          J         SF130             .  NO, SKIP          JNZ       A8,SF150          .  YES, SKIP IF OPEN ENTRY ALREADY FOUND          LA,U      A8,,X6            .   IF NOT, SAVE ADDRESS OF THIS ENTRY          ANA,U     A8,ACFTES         . ADJUST FOR PREVIOUS INCREMENT          LA        A0,FPSAVE         . ADDRESS OF FILE TABLE BUFFER          SA        A0,FPSAV2         . SAVE ADDRESS OF BUFF WITH 1ST OPEN SLOT          J         SF150             . CONTINUE SEARCHSF130          DTE       A4,A6             . IS THIS THE TARGET FILENAME?          J         SF150             .  NO, SKIP          LA,U      A3,,X6            .  YES, LOAD ADDRESS OF FILE ENTRY          ANA,U     A3,ACFTES         . ADJUST FOR PREVIOUS INCREMENT          J         SF200             . RETURN FINDSF150          JGD       R8,SF120          . BACK FOR MORE ENTRIES IN THIS BUFFER          LA        A0,FPSAVE         . WHEN DONE, LOAD ADDRESS OF CURR BUFFER          LA        A2,ACFTNX,A0      . GET LINK TO NEXT FILE TABLE          JZ        A2,SF400          . FINISHED IF ZERO          LA,U      A3,FTBUF2         . USE FTBUF2 FOR NEXT FT BUFFER          JZ        A8,$+2            . HAS OPEN SLOT BEEN FOUND?          LA,U      A3,FTBUF3         .  IF SO, USE FTBUF3          LMJ       X10,RDBUFF        . READ NEXT FILE TABLE FROM ACF          J         SF990             .  EXIT IF ERROR RETURNED          DL        A6,CURQAL         . CURRENT ACCESSED QUALIFIER          DTE       A6,ACFTQL,A0      . COMPARE WITH VERIFICATION QUAL FROM FT          J         SF900             .  IF NOT EQUAL, RETURN ERROR          LXM,U     X6,ACFTBF2,A0     . ADDR OF 1ST FILE ENTRY IN SUBSEQ FTS          LR,U      R8,ACFTMX2-1      . LOOP COUNT = MAX ENTRIES/SUBSEQ FTS - 1          J         SF100             . BEGIN SEARCHING NEXT FILE TABLESF200          LA        A0,FPSAVE         . ADDR OF BUFF CONTAINING TARGET FILE ENT          J         2,X11             . RETURN FINDSF400          LA        A3,A8             . ADDRESS OF 1ST OPEN SLOT          JZ        A3,$+2            . SKIP IF ZERO          LA        A0,FPSAV2         .  IF NOT, LOAD APPROPRIATE BUFF ADDR          J         1,X11             . RETURN NO FINDSF900          P$RINT    ERRPRT(14)        . 'INTERNAL BUFFER LINK AMBIGUITY'          SZ        CURQAL            . CLEAR CURRENT ACCESSED QUALIFIER          SZ        CURQAP            .  AND POINTERSF990          J         0,X11             . RETURN ERROR/..         UPDATE THE PACK-ID TABLE..         ENT: A6 = CLASS-ID (FD, LJSF).              PCKLST CONTAINS PACK-ID(S) TO ADD/REMOVE (PCKCNT = COUNT).              REMFLG IS SET IF PACK-ID(S) ARE TO BE REMOVED..         RETURNS: 0,X11 ERROR.                  1,X11 NORMAL.UPDPCK          LA,U      A1,ACPTBG,X8      . ADDRESS OF PACK-ID TABLE          LXI,U     A1,1              . INCREMENT FOR BT          LA        A2,(1,PKTEMP)     . TEMPORARY PACK-ID TABLE BUFFER          LR,U      R1,ACMXPK*ACPTES  . TRANSFER CT = PACK-ID TBL SIZE          BT        A2,,*A1           . TRANSFER TO TEMPORARY STORAGE          LX        X4,(2,PCKLST)     . POINTER TO INPUT PARAMETER TABLE          LR        R4,PCKCNT         . COUNT OF PACK-IDS TO ADD OR REMOVE          JGD       R4,$+1            . DECREMENT FOR LOOPUP100          LA        A4,,*X4           . GET NEXT INPUT PACK-ID          JNZ       A4,$+2            . SKIP IF NONZERO          ER        ERR$              .  IF ZERO, STOP HERE - SOMETHING WRONG          LX        X5,(ACPTES,PKTEMP-ACPTES) . POINTER TO TEMP PACK-ID TBL          LA,U      A5,0              . INIT, NO OPEN SLOTS          LR,U      R5,ACMXPK-1       . LOOP COUNTER = MAX PACK-IDS - 1UP140          TE        A4,ACPEPK+ACPTES,*X5 . DOES INPUT PACKID = TABLE ENTRY?          J         UP160             .  NO, SKIP          TZ        REMFLG            .  YES, ARE WE REMOVING PACK-IDS?          J         UP150             .   YES, SKIP          TNE       A6,ACPECL,X5      .   NO, DOES CURR CLASS = FOUND CLASS?          J         UP145             .    YES, NONFATAL ERROR          E$CLEAR                     . CLEAR EDIT          E$MSG     PCKER1            . '*ERROR - PACK '          E$FD1     A4                . INPUT PACK-ID          E$MSGR                      . ' IS ALREADY A MEMBER OF CLASS <'          LA        A0,ACPECL,X5      . REGISTERED CLASS-ID OF FOUND PACK          LA,U      A1,0              . ASSUME 7TH CHAR = NULL          TNE       A0,($CFS('DEFAUL')) . DEFAULT CLASS?          LA,U      A1,$CFS('T')      .  YES, APPEND 'T'          E$FD2                       . EDIT REGISTERED CLASS-ID          E$MSGR                      . '>'          P$RINT    (0114,LINE)       . PRINT STATUS MESSAGE          J         UP990             .  AND RETURN ERRORUP145          E$CLEAR                     . CLEAR EDIT          E$MSG     PCKER2            . '*WARNING - PACK '          E$FD1     A4                . INPUT PACK-ID          E$MSGR                      . ' IS ALREADY A MEMBER OF THIS CLASS'          P$RINT    (0114,LINE)       . PRINT STATUS MESSAGE          J         UP190             .  AND CONTINUE, NO ACTION FOR THIS PACKUP150          TE        A6,ACPECL,X5      . REMOVE PACK - DO CLASSES MATCH?          J         UP182             .  NO, ERROR - SKIP          SZ        ACPEPK,X5         .  YES, ZERO MATCHING PACK-ID          SZ        ACPECL,X5         .   AND CLASS-ID IN TEMPORARY TABLE          J         UP190             . GO PROCESS NEXT PACK IN COMMANDUP160          JNZ       A5,UP180          . SKIP IF OPEN SLOT ALREADY FOUND          TNZ       ACPEPK,X5         .  IF NOT, IS THIS SLOT AVAIL?          LA,U      A5,,X5            .   YES, USE IT - A5 = ADDRESSUP180          JGD       R5,UP140          . LOOP BACK FOR NEXT PACK-ID TABLE ENTRY          TNZ       REMFLG            .  NO FIND - ARE WE REMOVING?          J         UP185             .   NO, CONTINUEUP182          E$CLEAR                     . CLEAR EDIT          E$MSG     PCKER3            . '*ERROR - PACK '          E$FD1     A4                . INPUT PACK-ID          E$MSGR                      . ' IS NOT A MEMBER OF THIS CLASS'          P$RINT    (0114,LINE)       . PRINT STATUS MESSAGE          J         UP990             .  AND RETURN ERRORUP185          JNZ       A5,UP188          . ADD PACK - SKIP IF OPEN SLOT FOUND          P$RINT    ERRPRT(66)        .  IF NOT, 'NO MORE PACKS MAY BE ADDED'          J         UP990             .   RETURN ERRORUP188          LA        A0,A5             . A0 = POINTER TO NEXT OPEN SLOT          SA        A4,ACPEPK,A0      . STORE NEXT PACK-ID          SA        A6,ACPECL,A0      .  AND MATCHING CLASS-ID IN NEXT SLOTUP190          JGD       R4,UP100          . LOOP BACK FOR OTHER PACK PARAMETERS          LA,U      A1,ACPTBG,X8      . A1 = POINTER TO CURRENT PACK-ID TABLE          LXI,U     A1,1              . INCREMENT FOR BT          LA        A2,(1,PKTEMP)     . POINTER TO TEMP TBL (UPDATED CORRECTLY)          LR,U      R1,ACMXPK*ACPTES  . TABLE SIZE          BT        A1,,*A2           . MOVE TEMP BACK TO PERM TABLE          J         1,X10             . RETURNUP990          J         0,X10             . ERROR RETURN/..         UPDATE AN ACCOUNT TABLE..         ENT: A0 = FIRST FT BUFFER ADDRESS.              ACTLST CONTAINS ACCOUNTS TO ADD/REMOVE (ACTCNT = COUNT).              REMFLG IS SET IF ACCOUNT(S) ARE TO BE REMOVED..         RETURNS: 0,X11 ERROR.                  1,X11 NORMAL.UPDACC          LA,U      A1,ACFTBA,A0      . ADDRESS OF ACCOUNT LIST          LXI,U     A1,1              . INCREMENT FOR BT          LA        A2,(1,ACTEMP)     . TEMPORARY ACCOUNT LIST BUFFER          LR,U      R1,ACFTMA*2       . WORD COUNT = MAX ACCT ENTRIES X 2          BT        A2,,*A1           . TRANSFER TO TEMPORARY STORAGE          LA        A3,(2,ACTLST)     . POINTER TO INPUT PARAMETER TABLE          LR        R2,ACTCNT         . COUNT OF ACCOUNTS TO ADD OR REMOVE          JGD       R2,$+1            . DECREMENT FOR LOOPUA100          DL        A4,,*A3           . GET NEXT INPUT ACCOUNT          JNZ       A4,$+2            . SKIP IF NONZERO          ER        ERR$              .  IF IT IS ZERO SOMETHING IS VERY WRONG          LA        A1,(2,ACTEMP-2)   . POINTER TO TEMP ACCOUNT LIST          LA,U      A2,0              . INIT, NO OPEN SLOTS          LR,U      R1,ACFTMA-1       . LOOP COUNTER = MAX ACCOUNTS - 1UA140          DTE       A4,2,*A1          . DOES INPUT ACCOUNT = TABLE ENTRY?          J         UA160             .  NO, SKIP          TNZ       REMFLG            .  YES, ARE WE REMOVING ACCOUNTS?          J         UA900             .   NO, CANNOT ADD IF IT'S ALREADY THERE          SZ        0,A1              .   YES, ZERO THIS ENTRY IN THE TABLE          SZ        1,A1              .          J         UA190             . CONTINUE LOOPUA160          JNZ       A2,UA180          . SKIP IF OPEN SLOT ALREADY FOUND          TNZ       0,A1              .  IF NOT, IS THIS SLOT EMPTY?          LA,U      A2,,A1            .   YES, LOAD ADDRESS OF OPEN SLOTUA180          JGD       R1,UA140          . LOOP BACK FOR OTHER EXISTING ENTRIES          TZ        REMFLG            . ARE WE REMOVING ACCOUNTS?          J         UA920             .  YES, ERROR - INPUT ACCT NOT FOUND          JZ        A2,UA940          .  NO, ERROR IF NO OPEN SLOT FOUND          DS        A4,,A2            . STORE NEXT INPUT ACCT IN NEXT OPEN SLOTUA190          JGD       R2,UA100          . LOOP BACK FOR OTHER INPUT ACCOUNTS..         NO ERRORS WERE FOUND.  REPLACE THE PERMANENT ACCOUNT LIST.         WITH THE UPDATED TEMPORARY LIST CONTENTS..          LA,U      A1,ACFTBA,A0      . GET ADDRESS OF ACCOUNT LIST IN 1ST FT          LXI,U     A1,1              . INCREMENT FOR BT          LA        A2,(1,ACTEMP)     . POINTER FOR TEMP ACCOUNT LIST          LR,U      R1,ACFTMA*2       . WORD COUNT FOR TRANSFER          BT        A1,,*A2           . MOVE TEMP LIST BACK TO PERM LIST          J         1,X11             . RETURN NORMAL STATUS..         ERROR RETURNS.UA900          P$RINT    ERRPRT(28)        . 'DUPLICATE ACCOUNT(S)'          J         UA990             .UA920          P$RINT    ERRPRT(29)        . 'ONE OR MORE ACCOUNT(S) NOT PREV ADDED'          J         UA990             .UA940          P$RINT    ERRPRT(30)        . 'ACCOUNT TABLE OVERFLOW'UA990          J         0,X11             . RETURN ERROR STATUS/..         KEYWORD/PARAMETER SCAN ROUTINE..         ENT: A0 = (KEYWORD CT, TABLE ADDR)..         EXIT: PARAMETER TABLE ENTRIES ARE FILLED AS ENCOUNTERED..         RETURNS 1,X10 NORMAL.                 0,X10 ERROR (A MESSAGE IS PRINTED).PARSCN          SA        A0,PARDEF         . STORE KEYWORD TABLE COUNT, ADDRESS          LA        A0,(1,PARFND)     . POINTER TO 'FOUND' FLAG LIST          LA,U      A1,(0)            .          LR        R1,PARCNT         . KEYWORD CT FOR THIS CALL, FROM PARDEF          BT        A0,,*A1           . INIT, CLEAR ALL 'FOUND' FLAGS          SZ        PARDONE           . CLEAR FINISHED FLAG          JUMPNB,,PS920  'AL',PS120  'EN',PS500 . NEXT MUST BE KEYWORD OR EOL..         PROCESS THE NEXT KEYWORD.PS120          SSL       A4,18             . MOVE MOST SIG 3 CHARS TO A4 LOWER          LX        X6,PARADR         . KEYWORD TABLE ADDRESS          LXI,U     X6,2              . TWO WORDS PER ENTRY          LR        R1,PARCNT         . KEYWORD COUNT          SE,H1     A4,,*X6           . SEARCH FOR VALID KEYWORD          J         PS940             .  NO FIND, ERROR          ANX,U     X6,2              . ADJUST FOR INCREMENT          LA,U      A3,,X6            . ADDRESS OF MATCHING ENTRY          ANA       A3,PARADR         . MAKE RELATIVE          SSL       A3,1              . COMPUTE KEYWORD NUMBER, DIV BY 2          TZ        PARFND,A3         . HAVE WE ALREADY PROCESSED THIS KEYWORD?          J         PS950             .  YES, ERROR          SP1       PARFND,A3         .  NO, SET 'FOUND' FLAG FOR IT          LA,U      A7,0              . INIT PARAM COUNT FOR THIS KEYWORD = 0          LX,H2     X7,1,X6           . ADDRESS OF PARAM TABLE FOR THIS KEYWORD          SZ        PRNFLG            . CLEAR PARENTHESIS FLAG          JUMPNB,,PS920  '=',PS140    . NEXT CHAR MUST BE '='PS140          GNCHNB,,PS205  '(',PS180    . CHECK FOR PARENTHETICAL FIELDPS180          SP1       PRNFLG            . SET PARENTHESIS FLAG..         PROCESS THE NEXT PARAMETER IN A PARAMETER LIST.PS200          GNCHNB                      . GET NEXT CHAR AFTER PARENPS205          LA,S5     A0,,X6            . GET PARAM TYPE FOR THIS KEYWORD          TG,U      A0,3              . LESS THAN 3? (GEN ALPHA)          J         PS220             .  NO, SKIP          JUMP,PS990,PS920  'A1',PS210 . NEXT PARAM MUST BE GEN FORMAT ALPHAPS210          LA,S5     A0,,X6            . RESTORE PARAM TYPE          TE,U      A0,1              . IS TYPE = 1 (ALPHA, 12 CHARS)          TNE       A5,($CFS('      ')) .  OR IS VALUE < 7 CHARS IN LENGTH?          J         $+2               .   YES, CONTINUE          J         PS930             .    NO, 'PARAM SIZE ERROR'          DS        A4,,X7            . STORE IN PARAM LIST          AX,U      X7,2              . INCR PARAM TABLE ADDR FOR THIS KEYWORD          J         PS300             . CONT SCAN FOR THIS KEYWORDPS220          TE,U      A0,3              . IS PARAM TYPE = 3? (NUMERIC)          J         PS230             .  NO, SKIP          JUMP,PS990,PS920  'NU',PS225 . NEXT PARAM MUST BE NUMERICPS225          SA        A5,,X7            . STORE IN PARAM LIST          AX,U      X7,1              . INCR PARAM TABLE ADDR FOR THIS KEYWORD          J         PS300             . CONT SCAN FOR THIS KEYWORDPS230          TE,U      A0,4              . PARAM TYPE MUST = 4 (ALPHA W/WILDCARD)          ER        ERR$              .  IF NOT, ABORT          LA,U      A2,0              . INIT CHAR COUNT = 0          JUMP,PS990,PS920  'A1',PS235  '#',PS240 . PARAM MUST BE ALPHA OR #PS235          DL        A0,A4             . PLACE PARAM IN A0,A1          TG,U      A3,12             . 12 OR MORE CHARS IN PARAM?          J         PS250             .  YES, SKIP - DON'T CHECK FOR WILDCARD          LA        A2,A3             .  NO, SAVE CHAR COUNT          JUMP,,PS250  '#',PS240      . CHECK FOR TRAILING WILDCARDPS240          LA,U      A3,12             .          ANA,U     A3,,A2            . COMPUTE WILD CHAR CT (12 - ACTUAL)          MSI,U     A3,6              . CONVERT TO BIT COUNT          ANA,U     A3,1              . DECREMENT          DSL       A0,1              .          AA        A0,(1*/35)        . SET HIGH ORDER BIT A0, A1          DSA       A0,,A3            . SET REMAINING BITS DEP ON WILD CHAR CT          LDSC      A0,1,A3           . MOVE TO A0, A1 LOWERPS245          GNCH,,PS250  '#',PS245      . EAT ANY REMAINING WILDCARD CHARSPS250          DS        A0,,X7            . STORE IN PARAM TABLE FOR CURR KEYWORD          AX,U      X7,2              . INCR PARAM TABLE POINTERPS300          AA,U      A7,1              . INCR PARAM COUNT          JUMPNB,,PS920  ',',PS320  ')',PS340  'EN',PS360 . BRANCH ON NEXT CHARPS320          TNZ       PRNFLG            . IS CURR SCAN INSIDE PARENS?          J         PS400             .  NO, COMMA IS KEYWORD SEPARATOR          TG,S4     A7,,X6            .  YES, IS PARAM COUNT LESS THAN MAX?          J         PS960             .   NO, ERROR          J         PS200             .   YES, CONT PARAM SCAN FOR CURR KEYWORDPS340          TNZ       PRNFLG            . IS CURR SCAN INSIDE PARENS?          J         PS920             .  NO, TRAILING PAREN IS SYNTAX ERROR          GNCHNB,,PS920  ',',PS400  'EN',PS380 . NEXT CHAR MUST BE COMMA OR EOLPS360          TZ        PRNFLG            . IS CURR SCAN INSIDE PARENS?          J         PS920             .  YES, EOL IS SYNTAX ERRORPS380          SP1       PARDONE           . SET FINISHED FLAGPS400          LA,H1     A0,1,X6           . GET ADDR OF PARAM CT WORD FOR KEYWORD          JZ        A0,PS420          .  SKIP IF NONE SUPPLIED          SA        A7,,A0            .   OTHERWISE STORE PARAM COUNTPS420          TZ        PARDONE           . FINISHED WITH SCAN?          J         PS500             .  YES, SKIP          GNCHNB,,PS920  'AL',PS120   .   NO, NEXT KEYWORD MUST FOLLOW COMMA..         KEYWORD/PARAMETER SCAN IS COMPLETE..PS500          LX        X6,PARADR         . ADDRESS OF KEYWORD TABLE          LXI,U     X6,2              . LOOP INCREMENT, 2 WORDS/ENTRY          LA        A3,(1,PARFND)     . POINTER TO 'FOUND' FLAG LIST          LR        R1,PARCNT         . KEYWORD TABLE COUNT          JGD       R1,$+1            . DECREMENT FOR LOOPPS520          LA,H1     A1,1,X6           . ADDRESS OF PARAM CT WORD FOR KEYWORD          LA,S6     A0,,*X6           . GET 'REQUIRED' FLAG FOR KEYWORD          TZ        0,*A3             . WAS THIS KEYWORD FOUND?          J         PS530             .  YES, SKIP          JNZ       A0,PS970          .  NO, ERROR IF 'REQUIRED' FLAG WAS SET          JZ        A1,$+2            . SKIP IF NO PARAM COUNT WORD SUPPLIED          SZ        0,A1              .  OTHERWISE, SET = 0, IND MISSING KEYWDPS530          JGD       R1,PS520          . BACK FOR OTHER KEYWORDS          J         1,X10             . RETURN NORMAL STATUS..         ERROR RETURNS.PS920          LA        A0,ERRPRT(4)      . 'SYNTAX ERROR'          J         PS980             .PS930          LA        A0,ERRPRT(63)     . 'PARAMETER SIZE ERR - MAX = 6'          J         PS980             .PS940          LA        A0,ERRPRT(5)      . 'UNRECOGNIZED PARAMETER'          J         PS980             .PS950          LA        A0,ERRPRT(6)      . 'DUPLICATE PARAMETER'          J         PS980             .PS960          LA        A0,ERRPRT(10)     . 'TOO MANY SPECIFICATIONS'          J         PS980             .PS970          LA        A0,ERRPRT(7)      . 'MISSING PARAMETER(S)'PS980          ER        PRINT$            . PRINT ERROR MESSAGEPS990          J         0,X10             . RETURN ERROR STATUS...         CONVERT INTERNAL QUAL/FILE FORMAT IN A2 TO PRINTABLE IN A0.FMTDSP          LR,U      R1,11             . LOOP COUNT - 1 (12 CHARS)FD100          LDSC      A2,6              . SHIFT NEXT CHAR TO A3 LOWER          AND,U     A3,077            . PUT ONE CHAR ONLY IN A4 LOWER          TNE,U     A4,077            . IS IT THE WILDCARD?          LA,U      A4,$CFS('#')      .  YES, SUBSTITUTE '#' FOR PRINTING          LDSL      A0,6              . CLEAR CHAR IN A1 LOWER          AA        A1,A4             . REPLACE WITH CHAR FROM A4          JGD       R1,FD100          . BACK FOR OTHER CHARACTERS          J         0,X11             . RETURN/..         SUMMARY, PRTF, RELOAD, OMIT PARAMETER SCAN..         ENT: A14 < 1, PARAM(S) REQ, A14 >= 1, 'ALL' ASSUMED IF NONE FOUND.              A14 >= 0, ALLOW KEYWORD 'RELOAD'..         EXIT: FOR ALL ENTRIES SELECTED, 'SLSEL' FIELD = 1 (0 IF NOT SEL)..         RETURNS 1,X10 NORMAL.                 0,X10 ERROR (A MESSAGE IS PRINTED).SELPSC          LX        X6,(SLSIZE,SELLST) . SELECTION LIST POINTER          LR        R1,SELCNT         . ENTRY COUNT OF SELECTION LIST          JGD       R1,$+1            . DECREMENT FOR LOOP          LA,U      A9,0              . INIT, NO ITEMS SELECTEDSP100          SZ        SLSEL,*X6         . CLEAR SELECTED FLAG FOR NEXT ENTRY          JGD       R1,SP100          . LOOP BACK FOR OTHER ENTRIES          JUMPNB,SP990,SP920  'AL',SP140  'NU',SP200  'EN',SP120 . JUMP ON TYPESP120          TG,U      A14,1             . IS AT LEAST ONE PARAM REQUIRED?          J         SP150             .  NO, SKIP - ASSUME 'ALL'          LA        A0,ERRPRT(7)      .  YES, 'MISSING PARAMETER(S)'          J         SP980             .   ERROR EXITSP140          TE        A4,($CFS('ALL   ')) . TEST FOR KEYWORD 'ALL'          J         SP170             .   NO, SKIP          JUMPNB,,SP920  'EN',SP150   .   YES, NEXT MUST BE EOL, IF NOT, ERRORSP150          LX        X6,(SLSIZE,SELLST) . SELECTION LIST POINTER          LX,U      X7,0              . CLEAR LINK TO REPLACEMENT LIST          LA        A8,SELCNT         . SELECTION LIST ENTRY COUNT          JGD       A8,$+1            . DECREMENT FOR LOOP          J         SP400             . GO MARK ALL ENTRIES SELECTEDSP170          SSL       A4,18             . ISOLATE MOST SIGNIFICANT 3 CHARS          LA,U      A5,0              . SET FLAG TO MATCH NON-MARKED ENTRIES          TNE,U     A4,$CFS('REM')    . 'REMAINING' KEYWORD?          J         SP175             .  YES, START LIST SCAN          JN        A14,SP920         . SKIP, 'REL' NOT ALLOWED IF A14 IS NEG          TE,U      A4,$CFS('REL')    . 'RELOAD' KEYWORD?          J         SP920             .  NO, INVALID KEYWORD          LA,U      A5,1              . SET FLAG TO MATCH MARKED ENTRIESSP175          LX        X6,(SLSIZE,SELLST-SLSIZE) . SELECTION LIST POINTER          LR        R1,SELCNT         . SELECTION LIST ENTRY COUNT          JGD       R1,$+1            . DECREMENT FOR LOOPSP180          LA,U      A0,0              . SET RELOAD FLAG = 0          TZ        SLREL+SLSIZE,*X6  . IS THIS ENTRY MARKED FOR RELOAD?          LA,U      A0,1              . YES, SET FLAG = 1          TE,U      A5,,A0            . IS THIS ENTRY TO BE SELECTED?          J         SP190             .  NO, SKIP          SP1       SLSEL,X6          .  YES, SET SELECTED FLAG          LA,U      A9,1              .   AND SET GLOBAL SELECTED FLAGSP190          JGD       R1,SP180          . LOOP BACK FOR OTHER ENTRIES          J         SP450             . CONTINUE SCANSP200          LA        A7,A5             . SET FIRST NUMBER OF RANGE          LA        A8,A5             . DEFAULT LAST NUMBER = FIRST          JUMP,,SP920  '=',SP210 ':',SP220 ',',SP250 ' ',SP250 'EN',SP250 .SP210          TE,XU     A14,-1            . IS THIS 'RELOAD' COMMAND?          J         SP920             .  NO, DO NOT ALLOW '=' TO FOLLOW NUMBER          J         SP250             .  YES, '=' AFTER NUMBER ALLOWEDSP220          GNCH,SP990,SP920  'NU',SP240 . NEXT FIELD AFTER COLON MUST BE NUMBERSP240          LA        A8,A5             . SET LAST VALUE OF RANGESP250          LA        A0,ERRPRT(34)     . 'NUMBER(S) OUT OF RANGE'          TG        A8,SELCNT         . IS SECOND NUMBER LESS THAN MAX?          LA        A8,SELCNT         .  NO, LOAD MAXIMUM          TG,U      A7,1              . IS FIRST NUMBER LESS THAN ONE, OR          TLE       A8,A7             .  IS FIRST NUMBER > LAST NUMBER?          J         SP980             .  YES, ERROR          ANA       A8,A7             . COMPUTE A8 = NBR OF ENTRIES/RANGE - 1          ANA,U     A7,1              . MAKE STARTING ENTRY 0-RELATIVE          MSI,U     A7,SLSIZE         . COMPUTE RELATIVE OFFSET INTO SEL LIST          LX        X6,(SLSIZE,SELLST) . POINTER TO SELECTION LIST          AX        X6,A7             . ADD OFFSET, POINT TO 1ST ENTRY OF RANGE          LX,U      X7,0              . CLEAR LINK TO REPLACEMENT LIST          JUMP,,SP400  '=',SP300      . TEST FOR SPECIAL RELOAD SYNTAXSP300          LA        A0,RPLCNT         . REPLACEMENT LIST COUNT          TLE,U     A0,MAXRPL         . IS REPL LIST FULL?          J         SP320             .  NO, SKIP          LA        A0,ERRPRT(44)     .  YES, 'TOO MANY SPECS, INCR <MAXRPL>'          J         SP980             .   PRINT ERR MESSAGE AND EXITSP320          AU,U      A0,1              . A1 = NEW REPLACEMENT LIST COUNT          SA        A1,RPLCNT         . SAVE FOR FUTURE USE          MSI,U     A0,RPLSIZ         . COMPUTE OFFSET INTO REPL LIST          LX,U      X7,RPLLST,A0      . LOAD ABS ADDR OF NEW ENT INTO X7          LA        A0,SLHOST,X6      . ORIGINAL FILE HOSTID          SA        A0,RPHOST,X7      . INIT REPLACEMENT = SAME DIR          GNCH,SP990,SP920  'A1',SP330 . NEXT FIELD MUST BE QUAL OR DIRSP330          DS        A4,RPQUAL,X7      . STORE IN REPL LIST          JUMP,,SP920  '*',SP340  '#',SP332 . BRANCH ON SEP CHARSP332          LA,U      A0,0              . CODE FOR STD-DIR RELOAD          LA        A1,RPQUAL,X7      . GET SUPPLIED DIR-ID          TNE       A1,($CFS('STD   ')) . STANDARD DIR SPECIFIED?          J         SP335             .  YES, SKIP          TE        A1,($CFS('SHARED')) .  NO, SHARED DIR SPECIFIED?          J         SP920             .   NO, SYNTAX ERROR          LA,U      A0,077            . CODE FOR SHARED-DIR RELOAD          TZ        HOSTID            . IS MHFS CONFIG ON SYSTEM?          J         SP335             .  YES, SKIP          LA        A0,ERRPRT(75)     .  NO, 'MHFS NOT CONFIGURED'          J         SP980             .  PRINT ERR MESSAGE AND EXITSP335          SA        A0,RPHOST,X7      . SAVE NEW HOSTID IN REPL REC          GNCH,SP990,SP920  'A1',SP338 . NEXT FIELD MUST BE QUALSP338          DS        A4,RPQUAL,X7      . STORE IN REPL LIST          JUMP,,SP920  '*',SP340      . CHECK FOR PROPER SEPARATOR CHARSP340          GNCH,SP990,SP920  'A1',SP350 . NEXT FIELD MUST BE FILENAMESP350          DS        A4,RPFILE,X7      . STORE IN REPL LIST          SZ        RPCYCL,X7         . INIT CYCLE TO ZERO (NOT GIVEN)          JUMP,,SP400  '(',SP360  '.',SP380 . GET CYCLE OR TERM CHARSP360          GNCH,SP990,SP920  'NU',SP365  . GET CYCLE NUMBERSP365          LA        A0,ERRPRT(33)     . 'INVALID VALUE FOR CYCLE'          TG,U      A5,1              . CHECK CYCLE NUMBER FOR VALID RANGE          TG,U      A5,1000           . MUST BE GT ZERO, LT 1000          J         SP980             .  IF NOT, PRINT ERR MESSAGE AND ERR EXIT          SA        A5,RPCYCL,X7      . SAVE VALID CYCLE NUMBER          JUMP,,SP920  ')',SP370      . MUST HAVE PROPER TRAIL CHARSP370          GNCH,,SP400  '.',SP380      . TRAILING PERIOD NOT REQUIREDSP380          GNCH                        . EAT TRAILING PERIOD IF GIVENSP400          JP        A14,SP420         . SKIP IF NOT 'RELOAD' OR 'OMIT' COMMAND          TNZ       SLREL,X6          . ALREADY MARKED FOR RELOAD?          J         SP410             .  NO, SKIP          SZ        SLREL,X6          .  YES, ZERO RELOAD INDICATOR          LA        A0,RELCNT         .          ANA,U     A0,1              . DECREMENT RELOADED FILE COUNT          JP        A0,$+2            .          ER        ERR$              . BLOW UP IF COUNT GOES NEGATIVE          SA        A0,RELCNT         . SAVE NEW COUNTSP410          SX        X7,SLRLNK,X6      . SET/CLEAR LINK TO REPL Q*FSP420          SP1       SLSEL,*X6         . MARK NEXT ENTRY SELECTED          JGD       A8,SP400          . LOOP BACK FOR REST OF ENTRIES          LA,U      A9,1              . SET GLOBAL SELECTED FLAGSP450          JUMPNB,,SP920  ',',SP470  'EN',SP500 . NEXT CHAR MUST BE COMMA OR EOLSP470          GNCHNB,SP990,SP920  'NU',SP200  'AL',SP170 . NEXT MUST BE ALPHA OR NUMSP500          JNZ       A9,SP800          . RETURN NORMAL IF ANY ENTRIES SELECTED          LA        A0,ERRPRT(38)     .  OTHERWISE, 'NO ITEMS SELECTED'          J         SP980             .   RETURN ERRORSP800          J         1,X10             . RETURN NORMALSP920          LA        A0,ERRPRT(4)      . 'COMMAND SYNTAX ERROR'SP980          ER        PRINT$            . PRINT ERROR MESSAGESP990          J         0,X10             . RETURN ERROR STATUS/..         SORT ROUTINES...         SRTREL - RELEASE RECORD TO SORT..         ENT: A0 = RECORD ADDRESS..         RETURNS: 0,X11 IF SORT TABLE OVERFLOW.                  1,X11 NORMAL.SRTREL          TZ        SRTCNT            . SORT COUNT SHOULD BE 0 WHILE RELEASING          ER        ERR$              .  IF NOT, ABORT - SOMETHING WRONG HERE          LA        A1,SRTPTR         . POINTER TO NEXT SORT RECORD          AU,U      A1,SRSIZE         . A2 = POINTER TO NEXT AFTER THIS REL          TG,U      A2,MAXSRT*SRSIZE+1 . TEST FOR SORT TABLE OVERFLOW          J         SRL90             .   SKIP IF OVERFLOW          SA        A2,SRTPTR         .   IF NOT, STORE NEW POINTER          LXI,U     A0,1              . INCREMENT FOR TRANSFER          AH        A1,(1,SRTTBL)     . ABS ADDRESS OF SORT RECORD IN A1          LR,U      R1,SRSIZE         . SIZE OF SORT REC          BT        A1,,*A0           . TRANSFER TO SORT TABLE          J         1,X11             . RETURN NORMAL STATUSSRL90          P$RINT    ERRPRT(19)        . 'TOO MANY ITEMS TO SORT, INCR <MAXSRT>'          J         0,X11             . RETURN ERROR STATUS...         SRTRTN - SORT ALL RECORDS (ASCENDING).         THIS IS A SIMPLE BUBBLE-UP SORT, COMPARISON IS BY THE.         ABSOLUTE VALUE OF THE FIRST TWO WORDS IN EACH RECORD...         RETURNS: 0,X11 ALWAYS.SRTRTN          LA        A0,SRTPTR         . POINTER TO NEXT SORT RECORD          DSL       A0,36             . PREPARE FOR DIVIDE          DI,U      A0,SRSIZE         . DIVIDE BY REC SIZE TO GET REC COUNT          SA        A0,SRTCNT         . STORE COUNT          ANA,U     A0,1              . DECREMENT FOR LOOP          LR        R3,A0             . OUTER LOOP COUNTSR100          JGD       R3,$+2            . DECREMENT OUTER LOOP BY ONE EACH PASS          J         SR800             .  EXIT WHEN FINISHED          LR        R2,R3             . INNER LOOP COUNT = NEW OUTER LOOP CT          LA        A0,(SRSIZE,SRTTBL-SRSIZE) . INIT SORT TBL PTR FOR THIS PASS          LA,U      A1,0              . CLEAR EXCHANGE FLAGSR200          DL        A4,SRSIZE,*A0     . GET COMPARISON DATA FROM FIRST RECORD          JP        A4,SR250          . SKIP IF POSITIVE          TN        SRSIZE,A0         .  IF NOT, IS SECOND RECORD NEG?          J         SR400             .   NO, EXCHANGE RECORDS          J         SR300             .   YES, TREAT AS BOTH POSITIVESR250          TP        SRSIZE,A0         . FIRST REC POS, IS SECOND POS?          J         SR500             .  NO, RECORDS ARE IN CORRECT ORDERSR300          DAN       A4,SRSIZE,A0      . SUBTRACT 2ND VALUE FROM 1ST          JN        A4,SR500          . IF RESULT IS NEG, RECS ARE IN ORDER          DJZ       A4,SR500          . DO NOT EXCH IF RECS ARE EQUAL, EITHERSR400          LA,U      A1,,A0            . ADDRESS OF 1ST RECORD          LXI,U     A1,1              . INCREMENT, EXCHANGE ONE WORD AT A TIME          LR,U      R1,SRSIZE-1       . LOOP COUNT - 1SR450          LA        A4,,A1            . PICK UP NEXT WORD FROM 1ST RECORD          LA        A5,SRSIZE,A1      .  AND NEXT FROM 2ND RECORD          SA        A5,,A1            . EXCHANGE WORDS          SA        A4,SRSIZE,*A1     .   AND INCREMENT POINTER          JGD       R1,SR450          . LOOP FOR REST OF DATASR500          JGD       R2,SR200          . LOOP FOR NEXT COMPARISON          JNZ       A1,SR100          . BACK TO START IF AN EXCHANGE WAS MADESR800          LA,U      A0,SRTTBL-SRSIZE  . INIT ADDRESS FOR SRTRET ROUTINE          SA        A0,SRTPTR         .          J         0,X11             . RETURN...         SRTRET - RETURN A RECORD..         EXIT: A0 = NEXT RECORD ADDRESS..         RETURNS: 0,X11 NO MORE RECORDS.                  1,X11 NORMAL.SRTRET          LR        R1,SRTCNT         . REMAINING COUNT OF SORTED RECORDS          JGD       R1,$+2            . DECREMENT AND SKIP          J         SRT90             .  SKIP IF NO MORE RECORDS TO RETURN          SR        R1,SRTCNT         . OTHERWISE, STORE REMAINING COUNT          LA        A0,SRTPTR         . LOAD PREVIOUS POINTER          AA,U      A0,SRSIZE         . PLUS RECORD SIZE = POINTER TO NEXT REC          SA        A0,SRTPTR         . STORE POINTER          J         1,X11             . RETURN NORMAL STATUSSRT90          SZ        SRTPTR            . ZERO POINTER          SZ        SRTCNT            .  AND COUNT          J         0,X11             . RETURN NO MORE RECORDS IN TABLE/.        ASSIGN THE ARCHIVE CONTROL FILE..         ENT: A14=0 INITIALIZE.              A14=1 NORMAL ASG.              A14=-1 CONVERT LEVEL 2R1 TO LEVEL 2R2+..         RETURNS 0,X10 ERROR.                 1,X10 NORMALACFASG          TZ        SAVMOD            . FAS SAVE-HISTORY MODE?          ER        ERR$              .  IF SO, WE SHOULDN'T BE DOING THIS          LX,U      X8,ACHBUFF        . SET X8 = ADDRESS OF ACF HEADER BUFFER          TNZ       ACFFLG            . HAVE WE ASSIGNED THE FILE,          TEP,U     A15,1*/('Z'-'Y')  .  OR USING A TEST CONTROL FILE?          J         AF050             .   YES, SKIP          LA,U      A0,ASGACF         .  NO, ASSIGN VIA CSF$          ER        CSF$              .   @ASG,AIZ SYS$*ARCCTL$          JN        A0,AF300          . SKIP IF ERROR STATUS RETURNED BY CSF$          LA,U      A0,USEACF         .          ER        CSF$              .  @USE CTL$USE,SYS$*ARCCTL$          SP1       ACFFLG            . SET FILE ASSIGNED FLAGAF050          TZ        ACFINT            . HAVE WE OPENED/INITIALIZED THE FILE?          J         AF200             .  YES, SKIP          LA        A0,(R$,0,0)       .  NO, SETUP TO READ ACF HEADER          LA        A1,(ACHDSZ,ACHBUFF) .          DS        A0,ACFPKT+3       . READ <ACHDSZ> WORDS INTO <ACHBUFF>          SZ        ACFPKT+5          .  FROM SECTOR ZERO          I$OW      ACFPKT            . ISSUE I/O          JNZ       A14,AF100         . SKIP IF THIS IS A NORMAL OPEN          LA,S1     A0,ACFPKT+3       . THIS IS INITIALIZE - LOAD STATUS          TNE,U     A0,5              . IS IT I/O 5? (EMPTY FILE)          J         AF150             .  YES, CONTINUE          JNZ       A0,AF100          .  NO, SKIP IF STATUS IS NONZERO (ERROR)          P$RINT    ERRPRT(2)         .   OTHERWISE, 'MUST BE EMPTY TO INIT'          J         AF900             .   ERROR EXITAF100          LMJ       X9,STATUS         . CHECK STATUS          J         AF900             .  I/O ERROR, EXIT          LA        A0,ACHDLB,X8      . GET HEADER LABEL WORD          TNE       A0,($CFS('*ACFL*')) . IS IT VALID LABEL?          J         AF110             .   YES, CONTINUE          P$RINT    ERRPRT(3)         .   NO, 'BAD ACF HEADER'          J         AF900             .    ERROR EXITAF110          DL        A0,ACHDPA,X8      . PRIVILEGED ACCOUNT NUMBER          DTE       A0,USRACC         . ARE WE USING THIS ACCOUNT?          J         AF120             .  NO, SKIP          SP1       PRIV              .  YES, SET PRIV FLAG          JP        A14,AF120         . SKIP IF NOT DOING CONVERSION          LA        A0,ACHDLV,X8      . CREATION/UPDATE LVL OF ACF          TNE,U     A0,ACLEV1         . IS FILE FROM LEVEL 2R1?          J         AF200             .  YES, RETURN GOOD STATUS          P$RINT    ERRPRT(61)        .  NO, 'CONVERSION ALREADY PERFORMED'          J         AF900             .   ERROR EXITAF120          JP        A14,AF125         . SKIP IF NORMAL OPEN          P$RINT    ERRPRT(1)         .  IF NOT, 'UNRECOGNIZED COMMAND'          J         AF900             .  ERROR EXITAF125          LA        A0,ACHDLV,X8      . CREATION LEVEL OF CONTROL FILE          TNE,U     A0,ACLEVL         . IS IT COMPATIBLE WITH THIS MARS LVL?          J         AF130             .  YES, SKIP          P$RINT    ERRPRT(52)        .  NO, 'ACF LEVEL INCOMPATIBLE'          J         AF900             .   RETURN ERROR STATUSAF130          TNZ       PRIV              . PRIVILEGED USER?          J         AF180             .  NO, ACCOUNT/USERID SUB NOT ALLOWEDAF150          DL        A0,TSTACC         . TEST ACCOUNT NUMBER FROM @MARS CALL          JZ        A0,AF160          . SKIP IF NONE SPECIFIED          DS        A0,USRACC         .  OTHERWISE, USE THIS ACCOUNT          SZ        PRIV              .   AND MARK NONPRIVILEGEDAF160          LA        A0,TSTUSR         . TEST USERID FROM PROCESSOR CALL          JZ        A0,AF180          . SKIP IF NONE SPECIFIED          SA        A0,USERID         .  OTHERWISE, USE THIS USERID          SSL       A0,12             . SHIFT OFF LOWER 2 CHARS          SA        A0,USER4          . STORE UPPER 4 CHARS FOR LATER USEAF180          SP1       ACFINT            . SET ACF OPEN/INIT FLAGAF200          J         1,X10             . RETURN NORMAL STATUSAF300          LA        A4,A0             . SAVE CSF$ STATUS          E$CLEAR                     . CLEAR EDIT          E$MSG     BADCSF            . 'BAD STATUS ON ATTEMPTED ASSIGN OF '          E$FD1     ($CFS('ACF'))     . TELL USER WHICH FILE          E$MSGR                      . ' - '          E$OCTF    12,A4             . EDIT STATUS          P$RINT    (0112,LINE)       . PRINT ERROR MESSAGEAF900          J         0,X10             . RETURN ERROR STATUS/..         READ AND LOCK THE ACF HEADER.LOCK          LA        A0,(RDL$,0,0)     . READ AND LOCK FUNCTION CODE          LA        A1,(ACHDSZ,ACHBUFF) . READ INTO <ACHBUFF> AS ALWAYS          DS        A0,ACFPKT+3       .          SZ        ACFPKT+5          . READ FROM SECTOR ZERO          I$OW      ACFPKT            . ISSUE I/O          LMJ       X9,STATUS         . CHECK STATUS          ER        ERR$              . ABORT IF ERROR STATUS HERE          SP1       ACHRDL            . SET READ/LOCK FLAG          J         0,X11             . RETURN..         UNLOCK THE ACF HEADER.UNLOCK          TNZ       ACHLCK            . HAS THE HEADER BEEN LOCKED?          J         UL100             .  NO, SKIP THIS          LA        A0,(UNL$,0,0)     . SET UP TO UNLOCK          TZ        ACHWRT            . HAS THE HEADER BEEN MODIFIED?          LA        A0,(W$,0,0)       .  YES, SET UP TO WRITE BACK          LA        A1,(ACHDSZ,ACHBUFF) . WRITE FROM <ACHBUFF>          DS        A0,ACFPKT+3       .          SZ        ACFPKT+5          . WRITE TO SECTOR ZERO          I$OW      ACFPKT            . ISSUE I/O          LMJ       X9,STATUS         . CHECK STATUS          ER        ERR$              . ABORT IF ERROR STATUS HERE          SZ        ACHLCK            . CLEAR HEADER LOCKED/MODIFIED FLAGUL100          J         0,X11             . RETURN/..         ASSIGN THE ARCHIVE HISTORY FILE.             OR THE SAVE HISTORY FILE..         RETURNS 0,X10 ERROR.                 1,X10 NORMAL.AHFASG          TNZ       AHFFLG            . HAVE WE ALREADY ASSIGNED THE FILE,          TEP,U     A15,1*/('Z'-'Z')  .  OR USING A TEST HISTORY FILE?          J         AH100             .   YES, SKIP          TZ        SAVMOD            . FAS SAVE-HISTORY MODE?          J         AH050             .  YES, SKIP          LA,U      A5,$CFS('AHF')    .  NO, ASSIGN SYS$*ARCHIST$          LA,U      A0,ASGAHF         .          ER        CSF$              .   @ASG,AIZ SYS$*ARCHIST$          JN        A0,AH300          . SKIP IF ERROR STATUS RETURNED          LA,U      A0,USEAHF         .          ER        CSF$              .  @USE HISTIN$,SYS$*ARCHIST$          J         AH080             .AH050          LA,U      A5,$CFS('SHF')    . ASSIGN SYS$*SAVHIST$          LA,U      A0,ASGSHF         .          ER        CSF$              .   @ASG,AIZ SYS$*SAVHIST$          JN        A0,AH300          . SKIP IF ERROR STATUS RETURNED          LA,U      A0,USESHF         .          ER        CSF$              .  @USE HISTIN$,SYS$*SAVHIST$AH080          SP1       AHFFLG            . SET AHF OR SHF ASSIGNED FLAGAH100          TZ        AHFHDF            . HAVE WE OPENED THE FILE?          J         AH200             .  YES, SKIP          I$OW      AHHDPK            .  NO, ISSUE I/O TO READ THE HEADER          LMJ       X9,STATUS         . CHECK STATUS          J         AH900             .  EXIT IF ERROR STATUS RETURNED          LA,U      A3,AHFHDR         . ADDRESS OF AHF HEADER BUFFER          LA        A0,AHHLBL,A3      . GET LABEL FROM HEADER          TNE       A0,HSTLBL         . IS THE LABEL CORRECT?          J         AH120             .   YES, CONTINUE          P$RINT    ERRPRT(41)        .   NO, 'HIST FILE HAS BAD HEADER'          J         AH900             .    ERROR EXITAH120          TNZ       SAVMOD            . ARE WE IN STANDARD (ARCHIVE) MODE,          TNZ       AHHAIP,A3         .  AND IS ARCHIVE-IN-PROGRESS SET?          J         AH150             .   NO, SKIP          P$RINT    ERRPRT(59)        . 'WARNING - ARCHIVE IN PROGRESS'          P$RINT    ERRPRT(60)        . ' SELECTED FILE(S) MAY NOT BE CURRENT'AH150          LA        A0,(10,AHFFAC)    . FITEM$ PACKET FOR AHF FILE          ER        FITEM$            .  NOW WE WILL HAVE THE CORRECT F-CYCLE          SP1       AHFHDF            . SET AHF-OPENED FLAGAH200          J         1,X10             . RETURN NORMAL STATUSAH300          LA        A4,A0             . SAVE CSF$ STATUS          E$CLEAR                     . CLEAR EDIT          E$MSG     BADCSF            . 'BAD CSF$ STATUS ON ASSIGN OF '          E$FD1     A5                . TELL THE USER WHICH FILE IT IS          E$MSGR                      . ' - '          E$OCTF    12,A4             . EDIT STATUS          P$RINT    (0112,LINE)       . PRINT ERROR MESSAGEAH900          J         0,X10             . RETURN ERROR STATUS/..         BUFFER ALLOCATION ROUTINE..         ENT: A3 = BUFFER ADDRESS IN MEMORY..         EXIT: A0 = BUFFER ADDRESS IN MEMORY.               A2 = MASS STORAGE ADDRESS OF BUFFER..         RETURNS 0,X11 ERROR.                 1,X11 NORMAL.BUFALC          TNZ       ACHLCK            . HAS THE ACF HEADER BEEN LOCKED?          ER        ERR$              .  IF NOT, ABORT - WE SHOULDN'T BE HERE          LA        A2,ACHDNB,X8      . GET LINK TO NEXT FREE BUFFER          JZ        A2,BA100          . SKIP IF ZERO          LMJ       X10,RDBUFF        .  IF NOT, READ BUFFER INTO MEMORY          J         BA990             . EXIT IF ERROR STATUS RETURNED          LA        A1,ACBFSZ-1,A0    . GET LAST WORD OF BUFFER          TE        A1,($CFS('*RELB*')) . HAS THIS BUFFER BEEN RELEASED?          J         BA900             .   NO, ERROR          LA        A1,,A0            .   YES, GET LINK TO NEXT FREE BUFFER          SA        A1,ACHDNB,X8      .    AND REPLACE IN ACF HEADER          J         BA200             .BA100          LA        A2,ACHDNW,X8      . GET NEXT AVAIL WRITE ADDRESS          SA        A2,,A3            . STORE AT BEGINNING OF MEMORY BUFFER          LA,U      A1,ACBFSC,A2      . COMPUTE NEXT AVAIL ADDRESS AFTER THIS          SA        A1,ACHDNW,X8      .  AND REPLACE IN ACF HEADER          LA,U      A0,1,A3           . LOAD ADDRESS OF MEMORY BUFFERBA200          SP1       ACHWRT            . SET ACF HEADER-MODIFIED FLAG          LA,U      A1,,A0            . ADDRESS OF BUFFER IN MEMORY          LXI,U     A1,1              . INCREMENT FOR BT          LA,U      A3,(0)            . TRANSFER ZEROES          LR,U      R1,ACBFSZ         . STANDARD ACF BUFFER SIZE          BT        A1,,*A3           . ZERO-FILL THE NEW BUFFER          J         1,X11             . RETURN NORMAL STATUSBA900          P$RINT    ERRPRT(26)        . 'BUFFER VERIFICATION ERROR'BA990          J         0,X11             . RETURN ERROR STATUS/..         BUFFER RELEASE ROUTINE..         ENT: A2 = MASS STORAGE ADDRESS OF BUFFER..         RETURNS 0,X11 ERROR.                 1,X11 NORMAL.BUFREL          TNZ       ACHLCK            . HAS THE ACF HEADER BEEN LOCKED?          ER        ERR$              .  IF NOT, ABORT - SHOULD NOT BE HERE          LA,U      A3,RBBUFF         . GET ADDRESS OF RELEASE-BUFFER IN MEMORY          LMJ       X10,RDBUFF        . READ BUFFER FROM ACF          J         BR900             .  EXIT IF ERROR STATUS RETURNED          LA        A1,ACHDNB,X8      . ADDRESS OF NEXT FREE BUFF FROM ACF HDR          SA        A1,,A0            . STORE AS FIRST WORD OF RELEASED BUFFER          SA        A2,ACHDNB,X8      . REPLACE WITH ADDRESS OF THIS BUFFER          SP1       ACHWRT            . SET ACF HEADER-MODIFIED FLAG          LA        A1,($CFS('*RELB*')) . RELEASED-BUFFER FLAG WORD          SA        A1,ACBFSZ-1,A0    . STORE IN LAST WORD OF BUFF TO RELEASE          LMJ       X10,WRTBUF        . WRITE RELEASED BUFFER BACK TO ACF          J         BR900             .  EXIT IF ERROR STATUS RETURNED          J         1,X11             . OTHERWISE, RETURN NORMAL STATUSBR900          J         0,X11             . RETURN ERROR STATUS/..         READ AN ACF BUFFER INTO MEMORY..         ENT: A3 = MEMORY ADDRESS.              A2 = MASS STORAGE ADDRESS..         EXIT: A0 = MEMORY ADDRESS.               A2 = MASS STORAGE ADDRESS..         RETURNS 0,X10 ERROR.                 1,X10 NORMAL.RDBUFF          LA        A0,(R$,0,0)       . SET UP TO READ          LA,U      A1,1,A3           .  BEGINNING SECOND WORD OF MEMORY BUFF          LXI,U     A1,ACBFSZ         .  USE DEFAULT ACF BUFFER SIZE          DS        A0,ACFPKT+3       .          SA        A2,ACFPKT+5       . SECTOR ADDRESS          I$OW      ACFPKT            . ISSUE I/O          LMJ       X9,STATUS         . CHECK STATUS          J         0,X10             .  RETURN ERROR STATUS          SA        A2,,A3            . STORE SECTOR ADDR AS 1ST WD OF MEM BUFF          LA,U      A0,1,A3           . POINT TO FIRST WORD OF DATA          J         1,X10             . RETURN NORMAL STATUS...         WRITE A BUFFER TO THE ACF..         ENT: A0 = MEMORY ADDRESS..         RETURNS 0,X10 ERROR.                 1,X10 NORMAL.WRTBUF          TNZ       ACHLCK            . HAS THE ACF BEEN LOCKED?          ER        ERR$              .  IF NOT, ABORT - SHOULD NOT BE WRITING          ANA,U     A0,1              . POINT TO START OF MEMORY BUFFER          LA        A1,(W$,0,0)       . SET UP PACKET TO WRITE          SA        A1,ACFPKT+3       .          LA,U      A1,1,A0           . WRITE FROM 2ND WORD OF MEM BUFFER          LXI,U     A1,ACBFSZ         .  USE DEFAULT ACF BUFFER SIZE          SA        A1,ACFPKT+4       .          LA        A1,,A0            . GET SECTOR ADDRESS OF BUFFER (WORD 1)          SA        A1,ACFPKT+5       . STORE IN PACKET          I$OW      ACFPKT            . ISSUE I/O          LMJ       X9,STATUS         . CHECK STATUS          J         0,X10             .  RETURN ERROR STATUS          J         1,X10             .  RETURN NORMAL STATUS/..         I/O STATUS CHECK ROUTINE.STATUS          TNZ,S1    3,A0              . IS STATUS IN I/O PACKET = 0?          J         1,X9              .  YES, RETURN NORMAL          SX        X4,SAVX4          .  NO, ERROR - SAVE X4, X11          SX        X11,SAVX11        .          LX,U      X4,,A0            . SET X4 = PACKET ADDRESS          LXI,U     X4,1              . LOOP INCREMENT          P$RINT    ERRPRT(11)        . 'I/O ERROR - PACKET DUMP FOLLOWS'          E$CLEAR                     . CLEAR EDIT          LA,U      A4,5              . LOOP 6 TIMESST100          E$OCTF    12,,*X4           . EDIT NEXT OCTAL VALUE INTO OUTPUT          E$SKIP    1                 .          JGD       A4,ST100          . BACK FOR MORE          P$RINT    (0116,LINE)       . PRINT PACKET DUMP          LX        X4,SAVX4          . RESTORE X4,X11          LX        X11,SAVX11        .          J         0,X9              . RETURN ERROR STATUS...         THIS ROUTINE IS CALLED (VIA THE <CMDERR> PROC) WITH A PRINT$.         CONTROL WORD IN A0.  IF THE PREVIOUS INPUT WAS FROM AN @ADD AND.         THIS IS THE FIRST ERROR GENERATED BY THE COMMAND, ECHO THE COMMAND.         BACK TO THE USER BEFORE PRINTING THE ERROR MESSAGE..CMDERP          SA        A0,PCWSAV         . SAVE A0          LA        A0,CMDPAR         . STATUS FROM PREVIOUS TREAD$          TOP       A0,(1*/34)        . WAS INPUT FROM @ADD?          J         CE100             .  NO, SKIP          LSSL      A0,18             .  YES, WORD COUNT TO A0 UPPER          AH        A0,(0100,IMAGE)   . FORM PCW FOR LAST COMMAND          ER        PRINT$            . ECHO COMMAND TO USER          SZ,H1     CMDPAR            . ZERO CONTROL BITS IN CASE 2ND CALLCE100          LA        A0,PCWSAV         . RESTORE A0          ER        PRINT$            . PRINT ERROR MESSAGE          J         0,X11             .  AND RETURN/.          $FDATA..         ENTRY/CLASS-UPDATE MODE COMMAND TABLE.CMDENT          +         'SEL',SELCMD      . SELECTCMDENTU          +         'EXI',EXTCMD      . EXITCMDCCES   EQU       $-CMDENT          . LENGTH OF FAS SAV-HIST CMD TBL          +         'ACC',ACCESS      . ACCESS          +         'ADD',ADPCMD      . ADD PACK (PRIV ONLY)          +         'REM',RMPCMD      . REMOVE PACK (PRIV ONLY)          +         'LIS',LSTCMD      . LIST CLASS/PACK/QUAL (PRIV ONLY)          +         'REG',REGSTR      . REGISTER QUAL (PRIV ONLY)          +         'DER',DERGST      . DEREGISTER QUAL (PRIV ONLY)          +         'ALT',ALTQAL      . ALTER QUAL (PRIV ONLY)CMDCCEU   EQU       $-CMDENTU         . LENGTH OF CLASS-UPDATE CMD TABLE          +         'DEF',DEFCMD      . DEFINE CLASS (PRIV ONLY)          +         'REL',RELCMD      . RELEASE CLASS (PRIV ONLY)          +         'INI',INIT        . INITIALIZE (PRIV, FILE MUST BE EMPTY)          +         'CON',CONVRT      . CONVERT (PRIV ONLY)CMDCCE    EQU       $-CMDENT          . LENGTH OF ENTRY MODE CMD TABLE..         ACCESS MODE COMMAND TABLE.CMDACC          +         'ACC',ACCESS      . ACCESS          +         'ADD',ADDCMD      . ADD FILE/ACCOUNT          +         'MOD',MODCMD      . MODIFY FILE          +         'REM',REMCMD      . REMOVE FILE/ACCOUNT          +         'LIS',LSTCMD      . LIST FILE/ACCOUNT          +         'EXI',EXTCMD      . EXITCMDCCA    EQU       $-CMDACC..         SELECT MODE COMMAND TABLE.CMDSEL          +         'SEL',SELCMD      . SELECT          +         'REL',RELSEL      . RELOAD          +         'SUM',SUMSEL      . SUMMARY          +         'PRT',PRTSEL      . PRTF          +         'COM',COMSEL      . COMMIT          +         'OMI',OMISEL      . OMIT          +         'SUB',SUBSEL      . SUBSTITUTE          +         'EXI',EXTSEL      . EXITCMDCCS    EQU       $-CMDSEL..         COMMAND CONTROL TABLE, H1 = LENGTH, H2 = ADDR OF COMMAND TABLE.CMDTBL    +         CMDCCE,CMDENT     . ENTRY MODE COMMANDS          +         CMDCCES,CMDENT    . FAS SAVE-HIST ENTRY MODE COMMANDS          +         CMDCCEU,CMDENTU   . CLASS-UPDATE MODE COMMANDS          +         CMDCCA,CMDACC     . ACCESS MODE COMMANDS          +         CMDCCS,CMDSEL     . SELECT MODE COMMANDS.CMDVAL    +         ERRPRT(31)        . ENTRY MODE ERROR MESSAGE          +         ERRPRT(46)        . FAS SAVE-HIST ENT MODE ERROR MESSAGE          +         ERRPRT(71)        . CLASS-UPDATE MODE ERROR MESSAGE          +         ERRPRT(42)        . ACCESS MODE ERROR MESSAGE          +         ERRPRT(37)        . SELECT MODE ERROR MESSAGE...         KEYWORD/PARAMETER TABLES..         MOST COMMAND SYNTAX IS DETERMINED BY THESE TABLES.  EACH.         APPLICABLE COMMAND HAS ONE OR MORE ALLOWED KEYWORDS.  THE.         <PARSCN> ROUTINE IS DRIVEN BY THE TABLE CONTENTS, AS FOLLOWS:..         0,H1 = FIRST 3 CHARS OF KEYWORD (OTHERS IGNORED).         0,S4 = MAX PARAMETERS PER KEYWORD.         0,S5 = PARAMETER TYPE:.                1 = GENERAL ALPHANUMERIC.                2 = GENERAL ALPHANUMERIC (MAX 6 CHARACTERS).                3 = DECIMAL NUMBER.                4 = ALPHANUMERIC WITH OPTIONAL TRAILING WILDCARD.         0,S6 = REQUIRED FLAG (1=REQ, 0=NOT REQ).         1,H1 = ADDRESS OF WORD TO RECIEVE PARAMETER COUNT (OPTIONAL).         1,H2 = ADDRESS OF PARAMETER LIST.PD        FORM      18,6,6,6,18,18    . KEYWORD ENTRY CONTROL FORM.DEFPAR    PD        'CLA',1,2,1,,DFCLAS          . DEFINE COMMAND          PD        'PAC',10,2,0,PCKCNT,PCKLST   ..RELPAR    PD        'CLA',1,2,1,,RLCLAS          . RELEASE COMMAND.REGPAR    PD        'QUA',1,4,1,,REQUAL          . REGISTER COMMAND          PD        'OWN',1,4,0,OWNFLG,REOWN     .          PD        'MXR',1,3,0,MXRFLG,REGMXR    .          PD        'ACC',ACFTMA,1,0,ACTCNT,ACTLST ..DERPAR    PD        'QUA',1,4,1,,DRQUAL          . DEREGISTER COMMAND.ALQPAR    PD        'QUA',1,4,1,,ALQUAL          . ALTER COMMAND          PD        'OWN',1,4,0,OWNFLG,ALOWN     .          PD        'MXR',1,3,0,MXRFLG,ALMXR     ..ACCPAR    PD        'CLA',1,1,0,ACCLSF,ACCLAS    . ACCESS COMMAND          PD        'QUA',1,4,0,ACQUAF,ACQUAL    ..ADPPAR    PD        'PAC',10,2,1,PCKCNT,PCKLST   . ADD, REM PACK COMMAND.ADDPAR    PD        'FIL',1,4,0,FILFLG,ADDFIL    . ADD, MOD, REM FILE/ACCT CMDS          PD        'ACC',ACFTMA,1,0,ACTCNT,ACTLST .          PD        'CYC',1,3,0,ADDCCT,ADDCYC    .  (CYC, REF, EXP, FLA ARE          PD        'REF',1,3,0,ADDRFC,ADDREF    .    FOR ADD, MODIFY ONLY)          PD        'EXP',1,3,0,ADDEXC,ADDEXP    .          PD        'FLA',FLTLEN,1,0,FLGCNT,FLGLST ..SELPAR    PD        'QUA',1,4,1,,SEQUAL          . SELECT COMMAND          PD        'FIL',1,4,0,SEFFLG,SEFILE    .          PD        'CYC',1,3,0,SECFLG,SECYCL    .          ON        M$MHFSHARED>0     . LAST PARAM ONLY FOR SHARED-HFS          PD        'HOS',1,4,0,SEHFLG,SEHOST    .          OFF       M$MHFSHARED>0     .SPCNT     EQU       ($-SELPAR)/2      ..SUBPAR    PD        'QUA',1,1,0,,SBQUAL          . SUBSTITUTE COMMAND..         TABLE OF VALID HOST-ID CHARS AND INTERNAL VALUES.          ON        M$MHFSHARED>0     . THIS CODE FOR SHARED-ONLYHIDTBL          +         'A',1             . STD DIR, HOSTS A-D          +         'B',2             .          +         'C',3             .          +         'D',4             .          +         'S',077           . SHARED DIR (COMMON TO ALL HOSTS)          +         'L',0             . LOCAL STD DIR (CODE=LOCAL HOSTID)HIDLEN    EQU       $-HIDTBL          .          OFF       M$MHFSHARED>0     . END OF SHARED-ONLY CODE..         EXPIRATION DEFINITION TABLE..         H1 = CONFIGURED EXPIRATION VALUE.         H2 = NONZERO IF <CRT> FLAG ALLOWED FOR THIS EXPIRATION.EXDFTB DO M$EXPZERO>0 , + 0,0               . EXP-ZERO (PURGE/DELETE)I DO M$EXPACNT , +  M$EXPA(I)         . FILL WITH USER-DEFINED EXP PERIODSEXDFCT    EQU       $-EXDFTB..         FLAG KEYWORD CONTROL TABLE..         H1 = FIRST 3 CHARS OF FLAG KEYWORD (OTHERS IGNORED).         S4 = SET IF PRIVILEGE IS REQUIRED TO TURN ON FLAG.         S5,S6 = BINARY FLAG VALUE AS DEFINED IN <ACFDEF>.FLGTBL          +         'DCY',ACFFAC         . GROUP CYCLES BY DAY          +         'CRT',ACFFCF         . CRITICAL FILE - BACKUP TO 2 TAPES          +         'AVF',ACFFVF         . ARCHIVE V-OPT ALLOWED          +         'LST',ACFFLR         . LIST-REQUESTED          +         'DNN',ACFFDN         . DO NOT NOTIFY WHEN FILE EXPIRESFLTLNP    EQU       $-FLGTBL          +         'BYP',ACFFBY+010000  . BYPASS          +         'BCC',ACFFBC+010000  . BYPASS CURRENT CYCLE DO M$EXPZERO>0 , + 'DEL',ACFFDF+010000  . DELETE FILE EVEN IF NO CURR BACKUPFLTLEN    EQU       $-FLGTBL.ERR(1)    'UNRECOGNIZED COMMAND'ERR(2)    'FILE MUST BE EMPTY TO BE INITIALIZED'ERR(3)    'ARCHIVE CONTROL FILE HAS BAD HEADER - NOTIFY SYSTEMS'ERR(4)    'COMMAND SYNTAX ERROR'ERR(5)    'UNRECOGNIZED PARAMETER'ERR(6)    'DUPLICATE PARAMETER'ERR(7)    'MISSING PARAMETER(S)'ERR(8)    'YOUR ACCOUNT IS NOT AUTHORIZED TO USE THIS COMMAND.'ERR(9)    'THAT QUALIFIER HAS ALREADY BEEN REGISTERED.'ERR(10)   'TOO MANY SPECIFICATIONS'ERR(11)   'BAD I/O STATUS - PACKET DUMP FOLLOWS:'ERR(12)   'YOUR ACCOUNT IS NOT AUTHORIZED TO ACCESS THAT QUALIFIER.'ERR(13)   'THAT QUALIFIER HAS NOT BEEN REGISTERED.'ERR(14)   'INTERNAL BUFFER LINK AMBIGUITY - NOTIFY SYSTEMS'ERR(15)   'A QUALIFIER MUST BE ACCESSED PRIOR TO USING THIS COMMAND.'ERR(16)   'ONE OR BOTH OF THE <CYCLIM>, <REFDAYS> PARAMS ARE REQUIRED.'ERR(17)   'INVALID VALUE FOR <CYCLIM>, <REFDAYS> OR <EXPIRATION>'ERR(18)   'UNABLE TO ASSIGN OUTPUT FILE <MARS$OUT$>'ERR(19)   'TOO MANY ITEMS TO SORT, INCREASE INTERNAL PARAMETER <MAXSRT>'ERR(20)   'NO FILE ENTRIES HAVE BEEN MADE FOR THIS QUALIFIER.'ERR(21)   'THAT FILE HAS NOT BEEN ADDED FOR THIS QUALIFIER.'ERR(22)   'NO QUALIFIERS ARE CURRENTLY REGISTERED FOR THIS STORAGE CLASS.'ERR(23)   'ANY ACCOUNT MAY ACCESS THIS QUALIFIER.'ERR(24)   'TOO MANY CHAINED BUFFS TO RELEASE, POSS INT ERR, TRY INCR <MAXREL>'ERR(25)   'POSSIBLE FILE CORRUPTION - NOTIFY SYSTEMS IMMEDIATELY!'ERR(26)   'ALLOCATED BUFFER VERIFICATION ERROR - NOTIFY SYSTEMS'ERR(27)   'CONFLICTING PARAMETERS'ERR(28)   'DUPLICATE ACCOUNT(S)'ERR(29)   'ONE OR MORE ACCOUNT(S) NOT PREVIOUSLY ADDED FOR THIS QUALIFIER'ERR(30)   'ACCOUNT TABLE OVERFLOW (MAX=10)'ERR(31)   'VALID COMMANDS ARE: ACCESS, SELECT, EXIT'ERR(32)   'QUALIFIER AND FILENAME CANNOT BOTH BE MASTER WILDCARD'ERR(33)   'INVALID VALUE FOR <CYCLE>'ERR(34)   'NUMBER(S) OUT OF RANGE OR OUT OF SEQUENCE'ERR(35)   'INTERNAL ERROR, X1 = ADDRESS: NOTIFY SYSTEMS'ERR(36)   'THIS PROGRAM CAN ONLY BE USED IN DEMAND MODE.'ERR(37)  'VALID COMMANDS ARE: SELECT,SUMMARY,PRTF,RELOAD,SUBSTITUTE,COMMIT,';          'OMIT,EXIT'ERR(38)   'NO ITEMS SELECTED.'ERR(39)   'ENTER <EXIT> TO LEAVE SELECT MODE WITHOUT RELOADING.'ERR(40)   'PLEASE WAIT...'ERR(41)   'HISTORY FILE HAS BAD HEADER - NOTIFY SYSTEMS.'ERR(42)   'VALID COMMANDS ARE: ADD, MODIFY, REMOVE, LIST, EXIT'ERR(43)   'NO MATCHING ENTRIES FOUND.'ERR(44)   'TOO MANY RELOAD REPLACEMENT SPECS - INCREASE <MAXRPL>'ERR(45)   '* FAS SAVE-HISTORY MODE *'ERR(46)   'VALID COMMANDS ARE: SELECT, EXIT'ERR(47)  'RELOAD CONTROLLER IS NOT RUNNING OR WRONG S/W LEVEL - NOTIFY SYSTEMS.'ERR(48)   'ERROR STARTING RELOAD RUN, TRY AGAIN OR NOTIFY SYSTEMS.'ERR(49)   'INTERNAL ERROR - RELOAD CONTROL MAY REQ RE-INIT - NOTIFY SYSTEMS.'ERR(50)   '*WARNING: SELECTION LIST WILL BE CLEARED, NO FILES WILL BE RELOADED'ERR(51)   'CANNOT SET *AVF* OR *DNN* ON MASTER WILDCARD FILE ENTRY'ERR(52)   'ACF CREATION LEVEL INCOMPATIBLE WITH THIS VERSION OF MARS'ERR(53)   'SELECT OPTION IGNORED IN SAVE-HISTORY MODE'ERR(54)   'TOO MANY MULTI-REEL RELOADS, INCREASE <MAXMRR>'ERR(55)   'CANNOT SET *CRT* ON ENTRY CONTAINING A WILDCARD'ERR(56)   '*WARNING: *CRT* FLAG NOT ALLOWED FOR THIS EXPIRATION - REMOVED*'ERR(57)   'STANDARD AND BACKUP COPIES MAY NOT BE SELECTED SIMULTANEOUSLY'ERR(58)   '*WARNING: BACKUP ARCHIVE TAPE(S) MAY BE OFFSITE*'ERR(59)   '*WARNING - ARCHIVE IS IN PROGRESS*'ERR(60)   ' (FILES(S) JUST ARCHIVED WILL NOT BE SELECTABLE UNTIL ARCHIVE FINS)'ERR(61)   'HEADER CONVERSION ALREADY PEFORMED'ERR(62)   '*HEADER CONVERSION COMPLETED*'ERR(63)   'PARAMETER SIZE ERROR - MAXIMUM = 6 CHARACTERS'ERR(64)   'SPECIFIED STORAGE CLASS HAS ALREADY BEEN DEFINED'ERR(65)   'NO MORE CLASSES MAY BE DEFINED (MAXIMUM = ':$CD(ACMXCL):')'ERR(66)  'NO MORE PACK-IDS MAY BE ADDED (MAX = ':$CD(ACMXPK):' FOR ALL CLASSES)'ERR(67)   'SPECIFIED STORAGE CLASS IS UNDEFINED.'ERR(68)   'STORAGE CLASS IS NO LONGER DEFINED.'ERR(69)   'FIX$$$  (FIXED STORAGE)'ERR(70)   'CURRENT STORAGE CLASS CONTAINS NO PACK-IDS.'ERR(71)   'VALID COMMANDS ARE: ACCESS, EXIT'ERR(72)   'SPECIFIED CLASS HAS REGISTERED QUALIFIER(S) - CANNOT RELEASE.'ERR(73)   'INVALID VALUE FOR <MXR> PARAMETER'ERR(74)   'INVALID <HOST> SPECIFICATION'ERR(75)   'MHFS IS NOT CONFIGURED ON SYSTEM, SHARED RELOADS NOT ALLOWED'ERR(76)   '*SHARED FILE(S) CANNOT BE RELOADED, SHARING IS NOT AVAILABLE*'ERR(77)   'MHFS IS NOT CONFIGURED, <M$MHFSHARED> MUST = ZERO'ERR(78)   'INVALID HOSTID RETURNED BY MSCON$-DIRID$ FUNCTION'ERR(79)   'YOU MUST BE PRIVILEGED TO SET PERMANENT RETENTION FOR A FILE.'ERR(80)   'ERROR PROCESSING MSCON$-MSALL$ INFORMATION - RELOAD ABORTED.'ERR(81)   'ORIGINAL REMOVABLE-PACK NO LONGER AVAILABLE:'ERR(82)   'CANNOT SET *DEL* IF QUALIFIER OR FILENAME HAS A WILDCARD'ERR(83)   '*WARNING: *DEL* FLAG NOT ALLOWED FOR NONZERO EXP - REMOVED*'ERR(84)   'CANNOT SET EXPIRATION = ZERO ON MASTER WILDCARD FILE ENTRY'ERR(85)   'NO SUBSTITUTE QUALIFIER HAS BEEN GIVEN.'ERR(86)   'OWNER ACCOUNT CANNOT BE PARTIAL WILDCARD.'NERR      EQU       86ERR(NERR+1)I DO NERR ,ERRPRT(I) +  0100+ERR(I+1)-ERR(I),ERR(I)INTMSG    'INITIALIZATION COMPLETE - MASTER ACCOUNT = &'          $IF       M$MHFSHARED=0SYMDID    EQU       'STD#'            . REQUIRED DIR-ID FOR NON-SHARED SYS          $ELSESYMDID    EQU       'SHARED#'         . REQUIRED DIR-ID FOR SHARED SYS          $ENDFASGACF    '@ASG,AIZ ':SYMDID:'SYS$*ARCCTL$/':$CFS(M$CFRK):'/':$CFS(M$CFWK):' . 'USEACF    '@USE CTL$USE,':SYMDID:'SYS$*ARCCTL$ . 'FREACF    '@FREE ':SYMDID:'SYS$*ARCCTL$ . 'ASGAHF    '@ASG,AIZ ':SYMDID:'SYS$*ARCHIST$/':$CFS(M$HFRK):' . 'USEAHF    '@USE HISTIN$,':SYMDID:'SYS$*ARCHIST$ . 'FREAHF    '@FREE ':SYMDID:'SYS$*ARCHIST$ . 'ASGSHF    '@ASG,AIZ ':SYMDID:'SYS$*SAVHIST$/':$CFS(M$HFRK):' . 'USESHF    '@USE HISTIN$,':SYMDID:'SYS$*SAVHIST$ . 'FRESHF    '@FREE ':SYMDID:'SYS$*SAVHIST$ . 'BADCSF    'BAD CSF$ STATUS ON ATTEMPTED ASSIGN OF & - &'RMMSG     'THE MAXIMUM REFERENCE LIMIT FOR THIS QUALIFIER IS & DAYS.&'LUPMSG    '*LAST UPDATED BY: &  (& - &)&'ADDERR    'FILE ''&'' HAS ALREADY BEEN ADDED FOR THIS QUALIFIER.&'EXDFMSG   'STANDARD EXPIRATION PERIOD OF & DAYS IS USED.&'CHGMSG    '* & CHANGE& TO QUALIFIER: &'SELOVF    'TOO MANY FILES SELECTED.  THE MAXIMUM IS &.&'SELADD    ' ADDITIONAL (& TOTAL)&'SELMSG    ' FILES SELECTED&'NOTREL    '*ENTRY & NOT RELOADED BECAUSE ENTRY & HAS SAME QUAL, FILE, CYCLE*&'RELOVF    'A MAXIMUM OF & FILES MAY BE RELOADED PER SINGLE REQUEST.&'RELMSG    ' FILES SELECTED FOR RELOAD.&'RELTOT    ' TOTAL FILES WILL BE RELOADED.&'SBQMSG    ' FILES WILL HAVE SUBSTITUTE QUALIFIER: <&>&'MSCERR    ' MSCON$ - EXIST$ ERROR CODE: &'RFSMSG    '*ENTRY & - WILL BE RELOADED TO FIXED STORAGE*&'EXTERR    ' ALREADY EXISTS - CANNOT RELOAD AT THIS TIME.&'CYCERR    ' CYCLE NUMBER OUTSIDE OF CURRENT ALLOWABLE RANGE&'AHLERR    ' BAD LINK TO HISTORY AREA: &'          ON        M$PVTACC>0PVTERR    ' INCORRECT ACCOUNT NUMBER FOR PRIVATE FILE&'          OFF       M$PVTACC>0          ON        M$PVTACC=0PVTERR    ' INCORRECT PROJECT-ID FOR PRIVATE FILE&'          OFF       M$PVTACC=0KEYERR    ' CANNOT RELOAD KEYED FILE INTO DIFFERENT NAME&'BCERR     ' HAS TOO MANY BACKUP REELS FOR INTERACTIVE RELOAD&'NOTMSG    'RELOAD NOTIFICATION TO TERMINAL, USERID OR NONE? <T,U,N>'NML       EQU       $-NOTMSGRLDMSG    'START BATCH RUN TO RELOAD FILE(S)? <Y,N>'RML       EQU       $-RLDMSGRLDONE    'BATCH RUN <RL&> HAS BEEN STARTED TO PERFORM THE RELOAD.&'EXTASK    'DO YOU STILL WANT TO EXIT? (YN)'EML       EQU       $-EXTASKREGMSG    'REGISTER  QUAL=&,OWN=&,MXR=&'ACCMSG    'ACCESS  QUAL=&'ADDACM    'ADD  ACCOUNT=(&)&'ADDFLM    'ADD  FILE=&,CYC=&,REF=&,EXP=&,FLAG=(&)&'EXTMSG    'EXIT&'LFOMSG    ' COMMANDS WRITTEN TO FILE: MARS$OUT$.&'LPMSG     'STORAGE CLASS <&> APPLIES TO FILES ON THESE PACK-IDS:&'PCKER1    '*ERROR - PACK & IS ALREADY A MEMBER OF STORAGE CLASS <&>&'PCKER2    '*WARNING: PACK & IS ALREADY A MEMBER OF THIS STORAGE CLASS&'PCKER3    '*ERROR - PACK & IS NOT A MEMBER OF THIS STORAGE CLASS&'ASGLOF    '@ASG,T MARS$OUT$,F///1000 . 'BRKLOF    '@BRKPT MARS$OUT$ . 'TRDPKT    +         0106,LINE          +         MS600,IMAGENOTTRD    +         0100+NML,NOTMSG          +         MS700,IMAGECOMTRD    +         0100+RML,RLDMSG          +         MS700,IMAGEEXTTRD    +         0100+EML,EXTASK          +         MS700,IMAGECONTRD    +         0102,('CONTINUE:   '++077*/6)          +         MS600,IMAGE.QALHDG    ' QUALIFIER    OWNER ACCT  ACC ACCTS  REG FILES  '          'MAXREF  LAST USERID  DATE'QHL       EQU       $-QALHDGACCHDG    'ACCOUNTS WHICH CAN ACCESS THIS QUALIFIER:'AHL       EQU       $-ACCHDGFILHDG DO 7 ,   ' '          '   D  C  A  L  D  B  B  D'FHL       EQU       $-FILHDG DO 7 ,   ' '          '   C  R  V  S  N  Y  C  E'          ' QUALIFIER*FILENAME       CYC   REF   EXP '          '   Y  T  F  T  N  P  C  L' DO FHL-1 , '- - - '          '-     'CLSHDG    '   CLASS    QUALIFIER CT    PACK CT'CHL       EQU       $-CLSHDGSUMHDG          $IF       M$MHFSHARED=0          ' REF/*R  QUALIFIER    FILENAME     CYC   TRKS   CAT     REF '          $ELSE          ' REF/*R H QUALIFIER    FILENAME     CYC  TRKS   CAT     REF '          $ENDF          '    ARC     EXP   'SHL       EQU       $-SUMHDGSUMHDS          $IF       M$MHFSHARED=0          ' REF/*R  QUALIFIER    FILENAME     CYC   TRKS   CAT     REF '          $ELSE          ' REF/*R H QUALIFIER    FILENAME     CYC  TRKS   CAT     REF '          $ENDF          '    SAVE    EXP   'SSL       EQU       $-SUMHDSDASHES DO 14 ,  '- - - 'PRTMS1    '* *  PROJ: &     ACCNT: & * *&'PRTMS2    'MODES: &  (BACKUP COPY)&'PRTM2A    '   *HOST: &'PRTMS3    'NO. OF TRACKS ASSIGNED: &      TOTAL ASSIGNMENTS:&'PRTMS4    'CAT: & AT &, LAST REF: & AT &'PRTMS5    'MATCHING CLASS>QUAL*FILE:  &'PRTMS6R   'DAYS SINCE REFERENCE WHEN ARCHIVED: &  (REFERENCE LIMIT: &)&'PRTMS6C   'RELATIVE CYCLE NO. WHEN ARCHIVED: &  (CYCLE LIMIT: &)&'PRTMS7    'ED & AT & TO POS & REEL &'PRTMS8    'E TAPE WILL EXPIRE ON &  (& DAYS FROM CREATION)&'PRTM8A    'E TAPE HAS PERMANENT RETENTION&'PRTMS9    '*** THIS INFO RECORDED IN &*&(&), SECTOR & ***&'PRTMS10   '*** FILE''S CONTENTS WILL BE LOADED INTO: &*&. ***&'OMTMSG    ' FILES NOW ON SELECTION LIST (& MARKED FOR RELOAD)&'/.$(0)USRACC    +         0D                . USER ACCOUNT NUMBERUSERID    +         0D                . USERIDSITEID    +         0                 . SITEIDUSER4     +         0                 . FIRST 4 CHARS USERID, RJZFGENRUN    +         0                 . GENERATED RUNIDUSRPROJ   +         0D                . USER PROJECT-IDTSTACC    +         0D                . TEST ACCT NBR (MUST BE PRIV TO USE)TSTUSR    +         0D                . TEST USERIDINFPKT    +         USRID$,0,0        . INFO$ PACKET TO OBTAIN USERID, SITEID          +         2,USERID          .          +         SITID$,0,0        .          +         1,SITEID          .SAVMOD    +         0                 . SET IF IN FAS SAVE-HISTORY MODEHSTLBL*   '*AHFL*'                    . HISTORY FILE LABEL WORDIMGLEN    +         0                 . WORD LENGTH OF NEXT COMMANDCMDPAR    +         0                 . RETURNED STATUS (A0) FROM TREAD$ INPUTPCWSAV    +         0                 . PRINT CTL WORD SAVE FOR <CMDERP>ACHLCK    EQUF      $                 . ACF HEADER-LOCK WORDACHRDL    EQUF      $,,H1             . SET IF RDL$ PERFORMED ON ACF HEADERACHWRT    EQUF      $,,H2             . SET IF ACF HEADER HAS BEEN MODIFIED          +         0                 .ACFFLG    EQUF      $,,H1             . SET IF ACF FILE HAS BEEN ASSIGNEDACFINT    EQUF      $,,H2             . SET IF ACF FILE HAS BEEN OPENED/INIT          +         0                 .AHFFLG    EQUF      $,,S4             . SET IF AHF FILE HAS BEEN ASSIGNEDAHFHDF    EQUF      $,,S5             . SET IF AHF FILE HAS BEEN OPENED          +         0                 .PRIV      +         0                 . SET IF USER IS PRIV (ACCT = ACHDPA)PRIVX     +         0                 . SET IF USER HAS DLOC$ ASSIGNEDHOSTID    +         0                 . LOCAL HOSTID, 0 = MHFS NOT CONFIGMHFSUP    +         0                 . SET IF SHARING IS UP AND AVAILABLEINTMOD    +         0                 . SET IF INITIAL-UPDATE MODEEOFFLG    +         0                 . SET IF USER ENTERS @EOFCHGCNT    +         0                 . CHANGE COUNT FOR CURRENT QUALIFIERDFCLAS    +         0D                . 'DEFINE' CLASS-IDRLCLAS    +         0D                . 'RELEASE' CLASS-IDREQUAL    +         0D                . 'REGISTER' QUALIFIERREOWN     +         0D                . 'REGISTER' OWNER ACCOUNTMXRFLG    +         0                 . SET IF <MXR> PARAM WAS GIVENREGMXR    +         0                 . VALUE OF <MXR> PARAMETERDRQUAL    +         0D                . 'DEREGISTER' QUALIFIERDRQPTR    +         0                 . 'DEREGISTER' QUALIFIER POINTERUPDP1     +         0                 . POINTER TO 1ST QT/FT TO WRITE BACKUPDP2     +         0                 . POINTER TO 2ND QT/FT TO WRITE BACKUPDP3     +         0                 . POINTER TO 3RD QT/FT TO WRITE BACKALQUAL    +         0D                . 'ALTER' QUALIFIEROWNFLG    +         0                 . SET IF 'OWNER' PARAM WAS GIVENALOWN     +         0D                . 'ALTER' OWNER ACCOUNTALMXR     +         0                 . VALUE OF <MXR> IF GIVENACCLAS    +         0D                . 'ACCESS' CLASS-IDACQUAL    +         0D                . 'ACCESS' QUALIFIERACCLSF    +         0                 . SET IF 'CLASS' PARAM W/ACCESS CMDACQUAF    +         0                 . SET IF 'QUAL' PARAM W/ACCESS CMDMODFLG    EQUF      $,,S1             . SET IF 'MODIFY' COMMANDREMFLG    EQUF      $,,S2             . SET IF 'REMOVE' COMMANDMRFLGS    EQUF      $,,H1             . FIELD USED TO CLEAR MODFLG, REMFLG          +         0                 .FILFLG    +         0                 . SET IF 'FILE' PARAM ON ADD, MOD, REMADDFIL    +         0D                . ADD, MOD, REM FILENAMEADDCCT    +         0                 . SET IF 'CYCLE' PARAM ON ADD, MODADDCYC    +         0                 . ADD, MOD CYCLE LIMITADDRFC    +         0                 . SET IF 'REF' PARAM ON ADD, MODADDREF    +         0                 . ADD, MOD REFERENCE LIMITADDEXC    +         0                 . SET IF 'EXP' PARAM ON ADD, MODADDEXP    +         0                 . ADD, MOD EXPIRATION PERIODLSTFND    +         0                 . SET IF MATCH FOUND WITH 'LIST' COMMANDLSTMTC    +         0                 . MATCHING CHAR COUNT FOR 'LIST' (0=ALL)LSTMAT    +         0D                . MATCH PARAMETER FOR 'LIST'LSTPRT    +         0                 . SET IF 'LIST,P' COMMAND GIVENLSTOUT    +         0                 . SET IF 'LIST,C' COMMAND GIVENLFOCNT    +         0                 . OUTPUT LINES WRITTEN WITH 'LIST,C'LQAFLG    +         0                 . SET IF 'ACC' CMD WRITTEN (LIST,C QUAL)LQONSV    +         0D                . TEMP SAVE OWNER ACCOUNT (LIST QUAL)LQRMSV    +         0                 . TEMP SAVE MAX REFLIM (LIST QUAL)LQIDSV    +         0                 . TEMP SAVE UPDATING USERID (LIST QUAL)LQUTSV    +         0                 . TEMP SAVE UPDATE TIME (LIST QUAL)FLGCNT    +         0                 . COUNT OF 'FLAG' PARAMS SUPPLIEDFLGLST    RES       FLTLEN*2          . FLAG PARAMETER LIST, E.G. BYP, ACYFLGADD    +         0                 . FLAG BIT MASK TO ADD TO ENTRYFLGREM    +         0                 . FLAG BIT MASK TO REMOVE FROM ENTRYSELFLGS   EQUF      $,,H1             . SELECTION FLAGSSELALL    EQUF      $,,S1             . 'SEL,A' - SELECT ALL FILESSELREL    EQUF      $,,S2             . 'SEL,R' - PREV-RELOADED ONLYSELBCK    EQUF      $,,S3             . 'SEL,B' - SELECT BACKUP ARCHIVE COPIES          +         0                 .SELCNT    +         0                 . SELECTION LIST ENTRY COUNTBCKFLG    +         0                 . SET IF SEL LIST HAS BACKUP COPIESSEQUAL    +         0D                . 'SELECT' QUALIFIERSEFILE    +         0D                . 'SELECT' FILENAMESEFFLG    +         0                 . SET IF 'FILE' GIVEN W/'SELECT' COMMANDSEHOST    +         0D                . 'SELECT' HOST-ID (A-D, S, L)SEHFLG    +         0                 . SET IF 'HOST' GIVEN W/'SELECT' COMMANDSECYCL    +         0                 . 'SELECT' CYCLE NUMBERSECFLG    +         0                 . SET IF 'CYC' GIVEN W/'SELECT' COMMANDRPLCNT    +         0                 . REPLACEMENT LIST ENTRY COUNTRELCNT    +         0                 . COUNT OF FILES MARKED FOR RELOADRELNEW    +         0                 . FILE COUNT, MOST RECENT RELOAD CMDRELHP     +         0                 . NUMBER OF HIGHER PRIORITY MATCHING FILEOMTREL    +         0                 . SET IF OMIT,RNOTTYP    +         0                 . TYPE OF RELOAD NOTIFICATIONSBQUAL    +         0D                . SUBSTITUTE QUALIFIERAUTOSM    +         0                 . SET WHEN 'SEL' JUMPS INTO 'SUM' CODECURCLS    +         0D                . CURRENT ACCESSED CLASS-IDCURQAL    +         0D                . CURRENT ACCESSED QUAL (ACCESS MODE)CURQAP    +         0                 . CURRENT QUALIFIER POINTERCURMXR    +         0                 . CURRENT MAX REF LIMIT + 1QTSAVE    +         0                 . POINTER TO 1ST SAVED QTQTSAV2    +         0                 . POINTER TO 2ND SAVED QTFPSAVE    +         0                 . POINTER TO 1ST SAVED FTFPSAV2    +         0                 . POINTER TO 2ND SAVED FTPARCNT    EQUF      $,,H1             . KEYWORD TABLE COUNT FOR GIVEN CMDPARADR    EQUF      $,,H2             . KEYWORD TABLE ADDRESS FOR GIVEN CMDPARDEF    +         0                 .PRNFLG    +         0                 . SET IF SCANNING PARAMS INSIDE ( )PARDONE   +         0                 . SET WHEN PARAMETER SCAN COMPLETESRTPTR    +         0                 . SORT TABLE POINTERSRTCNT    +         0                 . SORT RECS REMAINING TO RETURNSAVX4     +         0                 . REGISTER SAVESSAVX11    +         0                 .DIDPKT    +         DIRID$            . MSCON$ - DIRID$ PACKET          +         0D                .          +         3,DIDBUF          .DIDBUF    RES       3                 . BUFFER FOR RETURNED DIRID$ INFOMSAPKT    +         $-$,MSALL$        . MSCON$-MSALL$ PACKET          +         MSASIZ,MSABUF     .          RES       3                 .          $ASCIIIDPKT     I$DPKT    33,IMAGE  'MARS 3R1/':$CAS(M$SITECD) 020 . ID$ PACKET          $FDATAACFPKT    I$OD      'CTL$USE',R$ 0 0 . PACKET FOR READING, WRITING THE ACFAHFFAC    'HISTIN$'                   . AHF FITEM$ PACKET          RES       8                 .AHHDPK    I$OD      'HISTIN$',R$  28,AHFHDR  0 . PACKET FOR READING AHF HEADERAHFPKT    I$OD      'HISTIN$',R$  28,AHBUFF  $-$ . PKT TO READ MAIN HIST DATAALTPKT    'MARS$OUT$'                 . SYMB$ PACKET - 'LIST,C' OUTPUT          +         W$,0              . DO 3 ,   +         0                 .          +         1,0               . DO 3 ,   +         0                 .EXPKT     +         EXIST$            . MSCON$ - EXIST$ PKT, USED FOR FILE          RES       4                 .  VERIFICATION PRIOR TO RELOAD          +         28,0,$-$          . READ 28 WORDS          +         LIBUFF            .  INTO LEAD ITEM BUFFER          +         0,0,0             .EPKT      E$PKT     14,LINE           . EDIT$ PACKETLINE      RES       22                . EDIT$ OUTPUT BUFFERIMAGE     RES       33                . COMMAND INPUT BUFFERPARFND    RES       MAXPAR            . FIND-FLAGS, USED BY <PARSCN>AHFHDR*   RES       28                . AHF HEADER BUFF, ALSO USED BY FINDFILEAHBUFF    RES       28                . AHF HIST DATA BUFFERLIBUFF    RES       28                . LEAD ITEM BUFFER, DATA RET BY MSCON$DRPTRS    RES       MAXREL+1          . RELEASE BUFFER PTR LIST ('DER' COMMAND)ACTCNT    +         0                 . COUNT OF ACCOUNT NUMBERS IN PARAM LISTACTLST    RES       ACFTMA*2          . ACCOUNT PARAM LIST (REG, ADD/REM ACCT)ACTEMP    RES       ACFTMA*2          . TEMP ACCT PARAM LIST, USED BY <UPDACC>PCKCNT    +         0                 . COUNT OF PACK-IDS IN PARAM LISTPCKLST    RES       10*2              . PACK-ID PARAM LIST (DEF, ADD/REM PACK)PKTEMP    RES       ACMXPK*ACPTES     . TEMP PACK-ID TABLE, USED BY <UPDPCK>ACHBUFF   RES       ACHDSZ            . ACF HEADER BUFFERQTBUF1    RES       ACBFSZ+1          . 1ST QT BUFFERQTBUF2    RES       ACBFSZ+1          . 2ND QT BUFFERFTBUF1    RES       ACBFSZ+1          . 1ST FT BUFFERFTBUF2    RES       ACBFSZ+1          . 2ND FT BUFFERFTBUF3    RES       ACBFSZ+1          . 3RD FT BUFFERRBBUFF    RES       ACBFSZ+1          . SAVE AREA FOR RELEASE BUFFER..         THE QUALIFIER POINTER TABLE IS USED WITH THE 'LIST QUAL' COMMAND.         (ACCESS MODE).  THE SELECTION LIST IS USED ONLY IN SELECT MODE...         SINCE THESE TABLES WILL NEVER NEED TO BE USED SIMULTANEOUSLY,.         THEY MAY OVERLAP IN MEMORY.  RESERVE THE LARGER SIZE REQUIREMENT..LNQLTB    EQU       MAXSRT*3          . LENGTH OF QUAL PTR TABLE (LIST QUAL)LNSELL    EQU       MAXSEL*SLSIZE     . LENGTH OF SELECTION LIST (SELECT, ETC)QALTBL                                .SELLST                                .          RES       (LNQLTB>LNSELL)*LNQLTB+(LNQLTB<(LNSELL+1))*LNSELL ..RPLLST    RES       MAXRPL*RPLSIZ     . REPLACEMENT FILENAME LISTMRRTBL    RES       MAXMRR*(RCBRMX-1) . MULTI-REEL RELOAD TABLESRTTBL    RES       MAXSRT*SRSIZE     . SORT RECORD TABLEMSABUF    EQU       SRTTBL+M$RELDMAX*SRSIZE . USE PART OF SORT TBL FOR MSALL$MSASIZ    EQU       $-MSABUF          . AVAIL SIZE FOR MSALL$ INFO          END       START@ELT,SIP MARSREL$.MAP/MARS,,,041343062733,006IBANK,M I$1,01000IN MARS$.MARS,.CHRCON,.JULDATE,.FINDFILE,.CERU$/MARSEQU DIRID$/050NOT TPF$.DBANK,MC D$1,040000FORM I$1DBANK,UX MRCBNKEND@ELT,SIP MARSREL$.MFDEDT,,,203355130137,023. PROGRAM TO PRODUCE AN EDITED MFD EXTRACT FROM THE RAW DIRECTORY.. CALL: @MFDEDT,<OPTS>  <OUTPUT-FILE>.,<BUFFER COUNT>..   <OUTPUT-FILE> IS A DISC FILE TO CONTAIN THE EDITED DIRECTORY..                 IF NOT GIVEN, <$MFDB$> IS ASSUMED...   <BUFFER COUNT> IS THE NUMBER OF DIRECTORY ITEM BUFFERS TO ALLOCATE..                  IF NOT GIVEN, THIS DEFAULTS TO <DIBFNO>.  ALLOWABLE.                  VALUES ARE 100-UP (THEORETICAL MAXIMUM IS ABOUT 5200.                  WITH SORT, 6500 WITHOUT SORT)...   VALID OPTIONS:..  A - CREATE DAD TABLE ENTRIES FOR FIXED DISC FILES..  B - CREATE DAD TABLE ENTRIES FOR REMOVABLE DISC FILES..  C - CREATE TDIR$ ON CACHE DISK IF POSSIBLE..  D - USE FILE TDIR$ AS SYSTEM INPUT - DON'T GET ANOTHER ONE..  E - DON'T PROCESS SHARED FILE EXTENSION ITEMS.  THIS WILL RESULT IN.      THE FLAG <MFSYMF> ALWAYS BEING SET TO ZERO FOR SHARED FILES, BUT.      MAY SIGNIFICANTLY REDUCE MEMORY REQUIREMENTS...  F - DON'T FREE TDIR$ OR SORT FILES, 'R$CORE' AND 'XA' IF AUTO-ASSIGNED..  G - ALLOW FORWARD READS IF THE DIRECTORY ITEM BUFFER OVERFLOWS..  K - DON'T SLASH READ/WRITE KEYS..  L - LIST PACKIDS, INITIAL TRACK AND POSITION AVAILABILITY.      (USE WITH B,M OPTS IF INFORMATION FOR REM-PACKS WANTED ALSO)..  M - INCLUDE DIRECTORY & MBT 'DAD TABLES' IN OUTPUT FILE..  N - SORT ON ACCOUNT NUMBER, THEN QUAL/FILE/CYCLE..  Q - READ AS MANY DAD TABLES AS POSSIBLE INTO CORE..  R - PERFORM LDAT SUBSTITUTION IN R-DISC DAD TABLE ENTRIES..  S - SORT OUTPUT ON QUAL/FILE/CYCLE..  T - CREATE REEL TABLE ENTRIES FOR TAPE FILES..  U - PROCESS THE SHARED DIRECTORY (MHFS SYSTEMS ONLY)..  X - CREATE TDIR$ BUT DON'T PRODUCE EDITED DIRECTORY..  Y - PROCESS THE STANDARD DIRECTORY (ASSUMED IF 'U' OMITTED)..  Z - DON'T ZERO OUT TDIR$ (ASSUMED WITH 'D' OPTION).$(1)      AXR$          LIT          MFDDEF          D$BDEFMAXLDT    EQU       300               . HIGHEST LDAT INDEXMAXDAS    EQU       6000              . MAX TRKS IN COMBINED DAS CHAINSMAXPOS    EQU       3555              . MAX POSITIONS/DEVICE (CURR M9760-B)LEVWRD    EQU       012010000         . LEVEL WORDDIBFNO    EQU       2000              . INIT DIRECTORY ITEM BUFFER COUNTDBTKCT    EQU       4                 . #TRACKS/IO (DOUBLE BUFFERED READ/WRITE)MINREL    EQU       250               . MIN REL BUFF PER FLUSH CALLMAXSQF    EQU       50                . MAX FILES WITH SAME QUAL, FILENAMERATBMX    EQU       5000              . MAX OPEN FORWARD READSRASEG     EQU       260               . MAX FORWARD READS / FLUSH CALLRAMIN     EQU       10                . MIN FWD READS FOR FLUSH TO CONTINUEMSALLAD   EQU       4                 . SECTOR ADDRESS OF MSALL$ INFO... INCORE DIRECTORY ITEM HEADER DEFINITIONS.DINXFB    EQUF      0,,H2             . PTR TO NEXT FREE BUFFERDIPTRB    EQUF      0,,H1             . PTR TO PREVIOUS BUFFERDIPTRF    EQUF      0,,H2             . PTR TO NEXT BUFFERDILDAT    EQUF      1,,T1             . LDAT INDEX OF THIS ENTRYDISECT    EQUF      1,,S3             . SECTOR NUMBERDINXFL    EQUF      1,,H2             . PTR TO NEXT MAIN ITEM SECT 0DIBEGN    EQU       2                 . BEGINNING OF RAW MFD DATADIBFLN    EQU       DIBEGN+28         . SIZE OF DIRECTORY ENTRY BUFFERS.. DIRECTORY LEAD ITEM EQUATES.LIQUAL    EQU       1                 . QUALIFIERLIFILE    EQU       3                 . FILENAMELIRKEY    EQU       7                 . READ KEYLIWKEY    EQU       8                 . WRITE KEYLITYPE    EQUF      9,,S1             . FILE TYPE (0=FIXED, 1=TAPE, 040=REM)LIRNGE    EQUF      9,,S4             . RANGE OF F-CYCLES - USE AS COUNTLIHCYC    EQUF      9,,T3             . HIGHEST ABS F-CYCLELIFLAG    EQUF      10,,S2            . SET WHEN LI READ, CLEARED WHEN MATCHEDLIDRID    EQUF      10,,S3            . DIRECTORY ID, 0=STD, 1=SHR.. DIRECTORY MAIN ITEM SECTOR 0 EQUATES.M0DADL    EQU       0                 . LINK TO FIRST DADTM0QUAL    EQU       1                 . QUALIFIERM0FILE    EQU       3                 . FILENAMEM0PROJ    EQU       5                 . PROJECTM0ACCT    EQU       7                 . ACCOUNTM0TOFW    EQU       10                . TIME OF FIRST WRITE AFTER BACKUPM0DISF    EQUF      11,,S1            . DISABLE-FLAGSM0LILK    EQU       11                . LINK TO LEAD ITEMM0DESC    EQUF      12,,T1            . DESCRIPTOR FLAGSM0FILF    EQUF      12,,S3            . FILE-FLAGSM0PCHR    EQUF      13,,S1            . PCHAR-FLAGSM0M1LK    EQU       13                . LINK TO MAIN ITEM SECTOR ONEM0MNEM    EQU       14                . EQUIPMENT MNEMONICM0SYMQ    EQUF      15,,H1            . LINK TO FIRST SMOQUE$ ENTRYM0ASGS    EQUF      15,,H2            . ASSIGN COUNTM0S1LK    EQUF      16                . LINK TO SHARED FILE EXT SECTORM0INHI    EQUF      17,,S2            . INHIBIT FLAGSM0NBRA    EQUF      17,,T2            . NUMBER OF RUNS ASSIGNEDM0CYCL    EQUF      17,,T3            . ABSOLUTE F-CYCLEM0REFT    EQU       18                . LAST REFERENCE DATE/TIMEM0CATT    EQU       19                . CATALOG DATE/TIMEM0INIT    EQUF      20,,H1            . INITIAL RESERVEM0TPDN    EQUF      20,,S1            . TAPE DENSITYM0TPFM    EQUF      20,,S2            . TAPE FORMAT FLAGSM0NOGR    EQUF      20,,H2            . NUMBER OF GRANULES IN FILEM0TPCT    EQUF      20,,H2            . TAPE FILE REEL COUNTM0MXGR    EQUF      21,,H1            . MAXIMUM GRANULES IN FILEM0TPLB    EQUF      21,,S3            . CONTAINS LABELED TAPE FLAGM0HITR    EQUF      23,,H1            . HIGHEST TRACK WRITTENM0TPR1    EQU       26                . TAPE FILE REEL 1M0TPR2    EQU       27                . TAPE FILE REEL 2.. DIRECTORY MAIN ITEM SECTOR 1 EQUATES.M1M2LK    EQU       0                 . LINK TO MAIN ITEM SECTOR TWOM1QUAL    EQU       1                 . QUALIFIERM1FILE    EQU       3                 . FILENAMEM1NUM1    EQU       5                 . CONTAINS '*NO.1*' IF SECTOR ONEM1BUWC    EQUF      7,,T1             . NUMBER OF BACKUP WORDSM1CYCL    EQUF      7,,T3             . ABSOLUTE F-CYCLEM1BKUT    EQU       8                 . BACKUP DATE/TIMEM1NOBL    EQUF      9,,H2             . NUMBER OF TRACKS WRITTEN TO SAVE TAPEM1STFP    EQUF      10,,T2            . STARTING FILE POSITION ON SAVE TAPEM1BIST    EQU       11                . START OF BACKUP INFOM1BI34    EQU       13                . WORDS 3-6 SET IN SECTOR 1 BUFFERM1BI56    EQU       15                .  BY FLUSH PRIOR TO OUTPUT CALLM1PKCT    EQUF      17,,T3            . PACK COUNT (R-DISC ONLY)M1PKID    EQU       18                . FIRST PACKID.. DIRECTORY MAIN ITEM SECTOR 2+ EQUATES.M2MNLK    EQU       0                 . LINK TO NEXT SECTORM2QUAL    EQU       1                 . QUALIFIERM2FILE    EQU       3                 . FILENAMEM2NUMN    EQU       5                 . CONTAINS '*NO.N*' IF SECTOR 2+M2WRD7    EQU       7                 . WORD CONTAINING P-BIT AND B-BITM2CYCL    EQUF      7,,T3             . ABSOLUTE F-CYCLEM2BKIN    EQU       8                 . START OF BACKUP INFO IF B-BIT IS SET.. SHARED FILE EXTENSION ITEM DEFINITIONS.S1SQHA    EQUF      1,,H1             . SMOQUE$ LINK, HOST AS1SQHB    EQUF      2,,H1             . SMOQUE$ LINK, HOST BS1SQHC    EQUF      3,,H1             . SMOQUE$ LINK, HOST CS1SQHD    EQUF      4,,H1             . SMOQUE$ LINK, HOST DS1NUM1    EQU       10                . CONTAINS '*SF.1*' IF SHARED EXTS1CYCL    EQUF      13,,T3            . ABSOLUTE F-CYCLES1QUAL    EQU       14                . QUALIFIERS1FILE    EQU       16                . FILENAME.. DAD TABLE DEFINITIONS.DTLINK    EQU       0                 . LINK TO NEXT DADTDTWD5     EQU       5                 . DADT WORD 5 (FRA OF 1ST WORD).FATERR*   PROC                        . FATAL ERROR          SA        A0,SAVA0          . SAVE REGISTER A0          P$RINT    ERRPRT(FATERR(1,1)) . PRINT SPECIFIC ERROR MESSAGE          LA        A0,SAVA0          . RESTORE A0          ER        ERR$              .  AND BLOW UP          END                         ./..START          SA        A5,A15            . SAVE OPTIONS          LMJ       X11,IDONLY$       . GENERATE ID LINE          P$RINT    (0107,IDBUFF)     .  AND PRINT IT          TEP,U     A15,1*/('Z'-'X')  . IS THIS A GET-TDIR$ ONLY REQUEST?          J         DE010             .  YES, SKIP AHEAD          LA        A5,A15            .  NO, AND OFF OPTIONS THAT REQUIRE SORT          AND       A5,(1*/('Z'-'A')++1*/('Z'-'B')++1*/('Z'-'M')++1*/('Z'-'T'))          TOP,U     A15,1*/('Z'-'N')  . IS ACCOUNT NUMBER SORT REQUESTED?          J         DE005             .  NO, SKIP          TOP,U     A15,1*/('Z'-'S')  .  YES, BE SURE 'S' OPTION IS ALSO SET          AA,U      A15,1*/('Z'-'S')  .   SET 'S'IF NOT ALREADY SETDE005          TEP,U     A15,1*/('Z'-'S')  . IS SORT REQUESTED?          J         DE008             .  YES, SKIP          JZ        A6,DE008          .  NO, SKIP IF NO SORT-REQUIRED OPTS SET          FATERR    18                .   'ILLEGAL OPTION(S) S,N REQ W/A,B,M,T'DE008          TOP       A15,(1*/('Z'-'A')) . IS 'A' OR 'B' SET          TEP       A15,(1*/('Z'-'B')) .  (DAD TABLE OUTPUT) ?          J         DE009             .   YES, SKIP          TEP,U     A15,1*/('Z'-'Q')  .    NO, IS 'Q' SET (SAVE DADTS IN MEM)?          ANA,U     A15,1*/('Z'-'Q')  .      IF SO, CLEAR IT - NOT NEEDED NOWDE009          TOP       A15,(1*/('Z'-'D')) . PROCESS EXISTING DIRECTORY?          J         DE010             .  NO, SKIP          LA,U      A0,1              .  YES, SET MHFS-CONFIG FLAG          SP1,S5    DIDBUF            .   AND SET HOST-ID = 1          J         DE012             . SKIP LOCAL CONFIG CHECKDE010          LA,U      A0,DIDPKT         . DIRID$ PACKET          ER        MSCON$            . REQUEST MHFS STATUS          JN        A0,DE011          . IF MSCON$ ERR STAT, NO MHFS          LA,S6     A0,DIDBUF         . STATUS BITS          TEP,U     A0,1              . IS MHFS CONFIG AND AVAIL?          J         DE012             .  YES, SKIPDE011          DSL       A3,72             . ZERO DIRECTORY AND HOST-ID          TOP,U     A15,1*/('Z'-'U')  . SHARED DIRECTORY REQUEST?          J         DE018             .  NO, SKIP          P$RINT    ERRPRT(24)        .  YES, 'SHARED DIR IS NOT AVAIL'          ER        ERR$              .  ABORTDE012          TOP,U     A15,1*/('Z'-'U')  . SHARED DIRECTORY REQUEST?          J         DE014             .  NO, SKIP          TOP,U     A15,1*/('Z'-'Y')  .  YES, IS STD DIR ALSO REQ?          J         DE013             .   NO, CONTINUE          P$RINT    ERRPRT(25)        .  YES, 'CANNOT USE BOTH U, Y OPTS'          ER        ERR$              . ABORTDE013          LA,U      A3,1              . SET DIR-ID = SHARED          AND,U     A0,1*/4++1*/5     . SHARED UNAVAIL/REJECT BITS          JZ        A1,DE015          . CONTINUE IF NEITHER SET          P$RINT    ERRPRT(26)        .  IF SET, 'SHARING IS DOWN, U OPT ILLEGL'          ER        ERR$              .  ABORTDE014          LA,U      A3,0              . SET DIR-ID = 0 (STD)          TEP       A15,(1*/('Z'-'D')) . PROCESS EXISTING DIRECTORY?          J         DE015             .  YES, SKIP          LA        A0,ERRPRT(27)     . 'MHFS IS CONFIG - Y OPT ASSUMED'          TOP,U     A15,1*/('Z'-'Y')  . STD DIR EXPLICIT REQUEST?          ER        PRINT$            .  NO, INFORM USER OF DEFAULTDE015          LA,S5     A4,DIDBUF         . GET HOST-ID          TG,U      A4,1              . MUST BE IN RANGE 1-4          TG,U      A4,5              .          J         $+2               .  NO, ERROR          J         DE016             .  YES, CONTINUE          P$RINT    ERRPRT(28)        . 'INVALID HOST-ID'          ER        ERR$              . ABORTDE016          LA        A0,ERRPRT(29),A3  . MESSAGE FOR DIRECTORY BEING PROCESSED          ER        PRINT$            .  PRINT ITDE018          SA,H1     A3,DGPKT          . SAVE DIRECTORY-ID IN DGET$ PACKET          SA,H1     A3,MSPKT          . SAVE DIRECTORY-ID IN MSALL$ PACKET          SA        A3,DIRID          . SAVE DIR-ID, HOST-ID FOR FUTURE USE          SA        A4,HOSTID         .          TEP,U     A15,1*/('Z'-'X')  . GET-TDIR$ ONLY REQUEST?          J         DE025             .  YES, SKIP          LA        A0,(50,INFBUF)    .          LMJ       X11,RINF$         . READ INFOR TABLE          J         DE020             .  SKIP IF NOT CALLED AS A PROCESSOR          LA,U      A0,1              . GET SPEC ONE FROM CALL CARD          LMJ       X11,SELT$         .          J         DE020             .  SKIP IF NONE GIVEN          DL        A0,WPKT           . IF FOUND, ATTATCH USE NAME OF '$MFDB$'          LMJ       X11,DUSE$         .  TO USER FILE          SP1       USRFIL            . SET USER-SPECIFIED FILE FLAGDE020          LA        A0,(9,MFFAC)      . $MFDB$ FITEM$ PACKET          ER        FITEM$            . GET ASSIGNMENT INFO          LA,U      A0,MFASGA         . @ASG,A $MFDB$          DL        A1,MFFAC          . FILE NAME IN CASE OF ERROR          TNZ,S1    MFFAC+6           . IS FILE ALREADY ASSIGNED?          ER        CSF$              .  NO, ASSIGN IT NOW          JP        A0,DE021          . SKIP IF GOOD STAT / ASG NOT REQ          TZ        USRFIL            . DID USER SPECIFY OUTPUT FILE NAME?          J         DE036             .  YES, ERROR IF CANNOT ASSIGN          LA        A0,(MTL,MFASGT)   . @ASG,T $MFDB$          ER        CSF$              . ASSIGN TEMPORARY OUTPUT FILE          P$RINT    ERRPRT(34)        . 'TEMP OUTPUT FILE ASSIGNED:'          P$RINT    (0100+MTL,MFASGT) . DISPLAY CSF$ IMAGEDE021          TOP       A15,(1*/('Z'-'D')) . ARE WE TO USE EXISTING TDIR$?          J         DE022             .  NO, SKIP          LA        A0,(9,TDFAC)      . TDIR$ FITEM$ PACKET          ER        FITEM$            . GET ASSIGNMENT INFO          DL        A1,TDFAC          . GET FILE NAME FOR ERROR PRINT          TNZ,S1    TDFAC+6           . IS FILE ASSIGNED TO RUN?          J         DE036             .  NO, PRINT ERROR AND ABORT          P$RINT    ERRPRT(4)         .  YES, 'MSALL$ INFO OMITTED'          J         DE050             . SKIP TO INPUT INITIALIZATIONDE022          TEP,U     A15,1*/('Z'-'Z')  . OMIT SECURITY CLEAR OF TDIR$?          J         DE025             .  YES, SKIP          LA,U      A0,1              .  NO, SET FLAG FOR SECURITY CLEAR          JNZ       A6,DE024          . CLEAR DURING READ NOT POSS IF ABMT SET          SA        A0,ZFIRST         .  OTHERWISE, SET CLEAR DURING READ FLAG          J         DE025             .DE024          SA        A0,ZLAST          . SET FLAG FOR CLEAR AFTER READ... GET SYSTEM FORMAT MFD VIA MSCON$.DE025          LA,U      A0,TDASG          . ASSIGN STAT-REQ COPY OF TDIR$          ER        CSF$              .  @ASG,T TDIR$,F/1//1          JN        A0,DE035          . SKIP IF ERROR          TEP,U     A15,1*/('Z'-'M')  . ARE MBTS REQUESTED,          TOP       A15,(1*/('Z'-'B')) .  FOR REM-PACKS?          J         DE030             .    NO, SKIP          SP1       DGAFLG            .    YES, MUST DO A DGETALL$          LA,U      A0,DGETALL$       . DGETALL$ FUNCTION CODE          SA,H2     A0,DGPKT          . REPLACE IN PACKET (OVER DGET$)DE030          LA,U      A0,DGPKT          . PACKET ADDRESS          ER        MSCON$            . ISSUE DGET$/DGETALL$          LA        A0,DGPKT+3        . NUMBER OF TRACKS REQ FOR OUTPUT          TLE,U     A0,1              . MUST BE GREATER OR EQUAL TO ONE          LMJ       A2,DE038          .  IF NOT, ABORT          AA,U      A0,100            . ADD 100 FOR FUDGE FACTOR          SA        A0,DGPKT+3        . BACK INTO PACKET          TLE,U     A0,MAXDAS+1       . HIGHER THAN MAX ALLOWED DIR TRKS?          J         DE031             .  NO, SKIP          E$DIT     EPKT              .  YES, OPEN EDIT          E$MSG     MXDERR            . '<MAXDAS> MUST BE SET GTR THAN '          E$DECV    DGPKT+3           . HIGHEST TRACK ADDRESS OF RAW MFD          P$RINT    (0116,LINE)       . INFORM USER OF ERROR STATUS          ER        ERR$              .  AND BLOW UPDE031          LA,U      A0,TDFREE         .          ER        CSF$              . FREE STATUS-REQ COPY OF TDIR$          TOP       A15,(1*/('Z'-'C')) . ASSIGN TDIR$ ON CACHE DISK?          J         DE032             .  NO, SKIP          E$DIT     EPKT              .  YES, OPEN EDIT          E$MSG     TDASGC            . '@ASG,TZ TDIR$,FMD/'          E$DECV    DGPKT+3           . REQUIRED INITIAL RESERVE          E$MSGR                      . '/TRK/<MAXDAS>,REM001 . '          LA,U      A0,LINE           . ADDRESS OF GENERATED IMAGE          ER        CSF$              . ISSUE REQ TO CSF$          JP        A0,DE033          . SKIP IF GOOD STATUS          P$RINT    (0100+CML,CASMSG) .  IF NOT, 'CACHE ASG FAIL, DEF TO FIXED'DE032          E$DIT     EPKT              . OPEN EDIT          E$MSG     TDASGM            . '@ASG,T TDIR$,F70C/'          E$DECV    DGPKT+3           . REQUIRED INITIAL RESERVE          E$MSGR                      . '/TRK/3000 . '          LA,U      A0,LINE           . ADDRESS OF GENERATED IMAGE          ER        CSF$              . ISSUE REQ TO CSF$          JN        A0,DE035          . ABORT IF BAD STATUSDE033          LA,U      A0,DGPKT          . DIRECTORY REQUEST PACKET          ER        MSCON$            . ISSUE DGET$/DGETALL$          JP        A0,$+2            . SKIP IF GOOD STATUS          LMJ       A2,DE038          .  IF NOT, ABORT          E$CLEAR                     . CLEAR EDIT          E$MSG     BEGMSG            . 'DGET'          LA,U      A0,'ALL'          .          TZ        DGAFLG            . IS THIS DGETALL$ REQ?          E$FD1                       .  YES, APPEND 'ALL'          E$MSGR                      . '$ COMPLETE - TRACK SIZE: '          E$DECV    DGPKT+3           . TRACKS REQUIRED FOR OUTPUT DIRECTORY          P$RINT    (0110,LINE)       . PRINT STATUS MESSAGE          TOP,U     A15,1*/('Z'-'X')  . IS THIS A DIRECTORY-ONLY RUN?          J         DE042             .  NO, CONTINUE          P$RINT    (0101,('*DONE*')) .  YES, ISSUE COMPLETION MESSAGE          ER        EXIT$             .   AND EXIT NORMALLYDE035          DL        A1,DGPKT+1        . GET DGET$ FILE NAMEDE036          DS        A1,FILERR+4       . STORE FILE NAME IN MESSAGE          SA        A0,SAVA0          . SAVE STATUS          P$RINT    (0206,FILERR)     . 'COULDN'T ASSIGN FILE: <NAME>'          LA        A0,SAVA0          . RESTORE STATUS          ER        ERR$              .  AND ABORTDE038          FATERR    3                 . 'ERROR DOING DGET$, A2=ADDRESS'/.. INITIALIZATION..         ENTER HERE TO PROCESS A NEW DIRECTORY.DE042          LA,U      A0,MSPKT          . MSCON$-MSALL$ PACKET          ER        MSCON$            . REQUEST MSALL$ INFO FROM EXEC          TP        A0                . CHECK STATUS          LMJ       A2,DE070          .  IF ERROR STATUS, ABORT          LA,H1     A0,MSPKT+2        . WORDS RETURNED BY MSALL$          AA,U      A0,111            . INCREMENT FOR COVERED QUOTIENT          DSL       A0,36             . PREPARE FOR DIVIDE          DI,U      A0,112            . A0 = COUNT OF 4-SECT BLOCKS REQUIRED          LSSL      A0,2              . CONVERT TO SECTORS          AU,U      A0,MSALLAD        . A1 = NEXT AVAIL ADDR TO WRITE          AA,U      A1,63             . INCR FOR COVERED QUOTIENT          SSL       A1,6              . DIVIDE BY 64          LSSL      A1,6              . MULT BY 64 (START ON TRACK BOUNDARY)          SA        A1,BEGADR         . STORE STARTING SECTOR OF MFD RECORDS          MSI,U     A0,28             . WORD COUNT OF MSALL$ INFO          SA,H1     A0,MSWRT+4        . STORE IN WRITE PACKET          I$OW      MSWRT             . WRITE MSALL$ INFO TO MFDDB OUTPUT FILE          TZ,S1     MSWRT+3           . CHECK I/O STATUS          LMJ       A2,DE070          . ABORT IF ERROR STATUS..         PROCESS THE MSALL$ INFO - SET UP DESTAB, PIDTBL FOR EACH DEVICE.          LR,H2     R5,BUFF           . COUNT OF EQUIPMENT TYPES          JGD       R5,$+2            . DECREMENT FOR JGD          LMJ       A2,DE070          .  IF ZERO OR NEGATIVE, ABORT          LX        X5,(1,0)          . POINTER TO EQUIPMENT INDEX TABLE          LXI,U     X6,10             . INCREMENT FOR UNIT TABLE LENGTHDE044          LXM,H1    X6,BUFF+1,X5      . ADDRESS OF NEXT UNIT TABLE          LA,H2     A0,BUFF+1,*X5     . ADDRESS OF EQUIPMENT SUMMARY TABLE          LA        A4,BUFF+2,A0      . GET SPECIFIC EQUIPMENT MNEMONIC          LA        A1,(2,0)          . POINTER TO KNOWN EQUIPMENT TABLE          LR,U      R1,DSTBLN         . LENGTH OF KNOWN EQUIPMENT TABLE          SE        A4,DSCTAB,*A1     . SEARCH FOR VALID EQUIPMENT TYPE          J         DE045             . PRINT ERROR IF NO FIND          LA        A5,DSCTAB-1,A1    . PICK UP DRUM IND, POSITION CT OF UNIT          J         DE046             . SKIP AHEADDE045          E$DIT     EPKT              . OPEN EDIT          E$MSG     BADDEV            . 'EQUIPMENT MNEMONIC ''          E$FD1     A4                . SPECIFIC EQUIP TYPE          E$MSGR                      . '' IS NOT CONFIGURED IN DSCTAB'          P$RINT    (0112,LINE)       . PRINT ERROR MESSAGE          TEP,U     A15,1*/('Z'-'M')  . DIR AND MBT ALLOCATION INFO WANTED?          ER        ERR$              .  YES, ABORT - EQUIP INFO REQUIRED          LA,U      A5,0              .  NO, CONTINUE - INFO NOT NEEDEDDE046          LR,T1     R6,BUFF,A0        . UNIT COUNT OF THIS TYPE          JGD       R6,DE048          . DECREMENT FOR JGD, SKIP FORWARD          J         DE049             .  SKIP IF ZERO OR NEGATIVEDE048          LA,H1     A0,BUFF,X6        . LDAT INDEX OF THIS UNIT          TNZ       A0                . IS IT GREATER THAN ZERO?          LMJ       A2,DE070          .  NO, ABORT          TG,U      A0,MAXLDT+1       . IS IT LESS THAN MAX CONFIGURED?          J         DE110             .  NO, ABORT          LA        A2,BUFF+7,*X6     . GET PACK-ID OF THIS UNIT          SA        A5,DESTAB-1,A0    . STORE (DRUM,MAX POS) FOR LATER USE          SA        A2,PIDTBL-1,A0    . STORE PACK-ID FOR LATER USE          JGD       R6,DE048          . BACK FOR NEXT UNIT OF SAME TYPEDE049          JGD       R5,DE044          . BACK FOR NEXT EQUIPMENT TYPE/.. INITIALIZE TO BEGIN DIRECTORY READ.DE050          D$BOO     WPKT  BEGADR      . OPEN DOUBLE-BUFFERED I/O TO OUTPUT FILE          I$OW      RDMFD             . READ THE FIRST 28 WORDS OF MFD HEADER          TZ,S1     RDMFD+3           . CHECK I/O STATUS          LMJ       X11,DE900         .  IF ERROR, ABORT          LA,H1     A0,BUFF+2         . TRACK NUMBER OF FIRST MFD TRACK          ANA,U     A0,1              . DECREMENT          LA,U      A7,,A0            . A7 = TDIR$ TRACK ADDRESS          LSSL      A0,6              . CONVERT TO SECTOR ADDRESS          SA        A0,RPKT+5         . STORE IN D/B READ PACKET          ANA,U     A0,64             . DECREMENT          SA        A0,ZERPKT+5       . STORE IN SECURITY-CLEAR PACKET          LA,H2     A0,BUFF+2         . COUNT OF TRACKS WRITTEN          LA        A1,BUFF           . DATE OF DIRECTORY CREATION          SA        A0,LASTRK         . STORE TRACK COUNT          SA        A1,TDATE          .  AND CREATION DATE          TZ        HOSTID            . NON-MHFS OPERATION,          TEP       A15,(1*/('Z'-'D')) .  OR INPUT DIRECTORY SUPPLIED BY USER?          J         DE051             .   YES, SKIP          LA        A0,BUFF+15        .   NO, GET DIR NAME FROM TDIR$          LA        A1,DIRID          . DIRECTORY-ID WE'RE PROCESSING          TNE       A0,DIDBUF+1,A1    . CORRECT DIRECTORY NAME?          J         DE051             .  YES, CONTINUE          P$RINT    ERRPRT(31)        .  NO, 'INCORRECT DIRECTORY NAME'          ER        ERR$              .  ABORTDE051          D$BIO     RPKT              . OPEN D/B READ OF DIRECTORY FILE          LA,U      A6,LASTD$+(DIBFNO*DIBFLN) . LARGEST ADDR FOR STD EXECUTION          LA,U      A0,010206         .          LMJ       X11,SINF$         . LOOK FOR SPEC 2 ELTNAME (BUFFER CT)          J         DE053             .  SKIP IF NO FIND          ANA,U     A3,1              . FIND - DECR CHAR COUNT FOR LOOP          LA,U      A5,0              . INIT ACCUMULATOR = 0DE052          LDSC      A0,6              . NEXT CHAR TO A1 LOWER          AND,U     A1,077            . ISOLATE CHAR IN A2          ANA,U     A2,'0'            . CONVERT TO BINARY          TG,U      A2,0              . CHECK FOR LEGAL RANGE, 0-9          TG,U      A2,9+1            .          J         DE053             . SKIP (IGNORE FIELD) IF ERROR          MSI,U     A5,10             . MULT ACCUMULATOR BY TEN          AA,U      A5,,A2            .  AND ADD IN NEXT DIGIT          JGD       A3,DE052          . BACK FOR NEXT DIGIT          TLE,U     A5,100            . ALL DONE - IS VALUE AT LEAST 100?          J         DE053             . SKIP (IGNORE FIELD) IF OUT OF RANGE          MSI,U     A5,DIBFLN         . BUFF CT TIMES WORD SIZE = WORDS NEEDED          AU,U      A5,LASTD$         .  PLUS LAST-D ADDRESS = HIGHEST ADDR REQDE053          LA        A5,A6             . HIGHEST ADDRESS TO A5          TEP,U     A15,1*/('Z'-'S')  . WILL OUTPUT BE SORTED?          AA,U      A5,40000          .  YES, ADD 40000 FOR SORT WORK AREA          TLE       A5,(01000000)     . TOO MUCH MEMORY REQUESTED,          TEP,U     A15,1*/('Z'-'Q')  .  OR RETAIN DADTS IN MEMORY?          LA        A5,(0777777)      .   YES, USE LARGEST ADDR POSSIBLE          LA        A0,A5             . INTO A0 FOR MCORE$ REQUEST          ER        MCORE$            . GRAB AS MUCH MAIN MEMORY AS WE NEED          LA,U      A4,LASTD$+1       . FIRST AVAIL ADDR FOR NON-SORT RUN          TOP,U     A15,1*/('Z'-'S')  . WILL OUTPUT BE SORTED?          J         DE062             .  NO, SKIP          LA        A0,(9,RCFAC)      .  YES, SET UP R$CORE AND XA FILES          ER        FITEM$            . GET ASSIGN INFO ON R$CORE          LA,U      A0,RCFREE         . @FREE R$CORE          TZ,S1     RCFAC+6           . WAS FILE ASSIGNED?          ER        CSF$              .  YES, FREE IT          LA,U      A0,RCASG          . @ASG,T R$CORE,///40          ER        CSF$              . ASSIGN WITH PROPER MEMORY REQ (40K)          JP        A0,$+2            . CHECK ASSIGN STATUS          ER        ERR$              . ERR ASSIGNING R$CORE (SHOULDN'T HAPPEN)          LA        A0,(9,XAFAC)      .          ER        FITEM$            . GET ASSIGN INFO ON XA FILE          TZ,S1     XAFAC+6           . IS FILE ALREADY ASSIGNED?          J         DE054             .  YES, SKIP - HOPE USER KNOWS RIGHT SIZE          E$DIT     EPKT                NO, OPEN EDIT TO FORM ASSIGN IMAGE          E$MSG     XAASGM            . '@ASG,T XA,F/'          LA        A4,LASTRK         . NUMBER OF TRACKS WRITTEN IN TDIR$          TG,U      A4,MAXDAS+1       . WITHIN REASONABLE LIMITS?          ER        ERR$              . NO, ABORT - SOMETHING WRONG          SSL       A4,1              . DIVIDE BY 2          AA,U      A4,100            . FUDGE FACTOR          E$DECV    A4                . INIT RES = (TDIR$ SIZE)/2 + 100          E$MSGR                      . '/TRK/'          E$DECV    A4                . USE SAME VALUE FOR MAXIMUM          E$MSGR                      . ' . '          LA,U      A0,LINE           .          ER        CSF$              . ASSIGN XA FILE          JP        A0,$+2            . CHECK CSF$ STATUS          ER        ERR$              . ERROR ASSIGNING XA - SHOULD NOT HAPPENDE054          LA        A0,(0200000,40000) . SET UP SORT ADDRESS PARAMETER          LA        A1,(0770000,LASTD$+1) . SORT WILL USE FIRST AFTER LASTD$          TEP,U     A15,1*/('Z'-'N')  . SORT BY ACCOUNT NUMBER?          J         DE058             .  YES, SKIP          LA        A2,RPFL           .  NO, GET LAST WORD OF SORT BY FILE PKT          DS        A0,RPFL           .   ADD ADDRESS PARAMETER TO END OF PKT          SA        A2,RPFL+2         .   AND REPLACE PACKET TERMINATOR          R$OPN     RPF               . OPEN BY-FILE SORTDE055          J         DE060             . CONTINUEDE058          LA        A2,RPNL           .  GET LAST WORD OF SORT BY ACCT PKT          DS        A0,RPNL           .   ADD ADDRESS PARAMETER TO END OF PKT          SA        A2,RPNL+2         .   AND REPLACE PACKET TERMINATOR          R$OPN     RPN               . OPEN BY-ACCOUNT SORTDE060          LA,U      A4,LASTD$+40000+1 . FIRST AVAIL ADDRESS FOR RUN WITH SORTDE062          LA        A0,(1,DASTAB)     . POINTER TO DASTAB (MDLINK, CDLINK)          LA,U      A1,(0)            . PREPARE TO ZEROFILL          LR,U      R1,MAXDAS         . TABLE SIZE          BT        A0,,*A1           . CLEAR DASTAB TABLE          LXI,U     X5,28             . X5 = PTR TO DIR ITEM, LOAD INCREMENT          LX        X7,(1,DASTAB)     . X7 = POINTER TO DAS LOOKUP TABLE          LA        A12,('*NO.1*')    . A12 = STD CONTENTS OF MI-SECT 1 WORD 5          LA        A13,('*NO.N*')    . A13 = STD CONTENTS OF MI-SECT 2+ WORD 5          LA,U      A14,0             . INIT OUTPUT FILE COUNT          SZ        FILPTR+DINXFL     . ZERO CURRENT FORWARD POINTER          DL        A0,A4             . LOAD MEMORY START, END ADDR INTO A0,A1          ANA,U     A1,,A0            . MAKE A1 = WORD COUNT          AA,U      A1,1              .          LMJ       X11,INIT          . INITIALIZE MEMORY BUFFER CHAIN          LX,U      X8,,A0            . X8 = NEXT BUFFER ADDRESS          D$BI      RPKT  DE900,DE900 . READ THE 1ST DIRECTORY TRACK          J         DE102             . ENTER MAIN PROCESSING LOOPDE070          FATERR    14                . 'INTERNAL ERR WHILE PROC. MSALL$ INFO'/.. PROCESS THE NEXT DAS TRACK.DE100          D$BI      RPKT  DE900,DE900 . GET THE NEXT TRACK FROM DB-IODE102          TN        DAS+27            . IS PREVIOUS DAS LAST FOR DEVICE?          J         DE108             .  NO, SKIP          LA,U      A0,28,A1          .  YES, GET ADDR OF 1ST DIR TRK SECT 1          LXI,U     A0,1              . INCREMENT FOR TRANSFER          LA        A2,(1,FDT1)       . POINTER TO SAVE AREA          LR,U      R1,28             . TRANSFER 28 WORDS          BT        A2,,*A0           . MOVE 1ST DT SECT 1 TO SAVE AREA          SZ        DASTKO            . ZERO DAS TRACK OFFSET          TNZ,S1    0,A1              . NEW FORMAT DIRECTORY?          J         DE108             .  NO, SKIP          TZ,S6     FDT1+020          .  YES, IS DAS TRK OFFST EVEN MULT OF 64?          LMJ       A2,DE180          .   NO, ERROR          LA,H2     A4,FDT1+020       .   YES, GET DAS TRACK OFFSET (SECTORS)          SSL       A4,6              . CONVERT TO TRACKS          SA        A4,DASTKO         . SAVE DAS TRACK OFFSET (TRACKS)          JGD       A4,$+2            . DECREMENT FOR LOOP AND SKIP          LMJ       A2,DE180          .  ERROR IF ALREADY ZERO          LA,U      A3,,X7            . DAS LOOKUP TABLE POINTERDE106          SA        A7,MDLINK,A3      . SAVE TDIR$ TRACK ADDR IN DASTAB          SZ        CDLINK,A3         . ZERO LINK TO INCORE ITEM CHAIN          AA,U      A7,1              . INCREMENT TDIR$ TRACK ADDRESS          D$BI      RPKT  DE900,DE900 . READ NEXT DIR TRK          TLEM,U    A3,DASTAB+MAXDAS  . INCR DASTAB PTR, CHECK FOR TABLE OVFL          J         $+2               .  NO OVERFLOW, CONTINUE          LMJ       A2,DE425          . GO PRINT ERROR AND ABORT          JGD       A4,DE106          . BACK FOR NEXT SKIPPED TRACKDE108          LXM,U     X5,,A1            . X5 = ADDRESS OF DAS DATA BLOCK          TP        0,X5              . IS LDAT INDEX POSITIVE?          LMJ       A2,DE180          .  NO, ABORT          TN        DAS+27            . IS PREVIOUS DAS LAST FOR DEVICE?          J         DE150             .  NO, CONTINUE ON SAME DEVICE          LA,H1     A0,,X5            .  YES, GET LDAT INDEX OF NEXT DEVICE          TLE,U     A0,MAXLDT+1       . IS THIS INDEX WITHIN SUPPORTED RANGE?          J         DE120             .  YES, CONTINUEDE110          FATERR    11                . 'TABLE OVERFLOW - INCREASE <MAXLDT>'DE120          TLE,U     A0,1              . IS LDAT LESS THAN ONE?          LMJ       A2,DE180          .  YES, ABORT - ILLEGAL VALUE          LX,U      X6,,A0            .  NO, SET X6 = NEW LDAT INDEX          TNZ       RDAHED            . HAVE FORWARD READS BEEN ENABLED?          J         DE122             .  NO, SKIP          LA,U      A2,,X7            .  YES, A2 = DASTAB INDEX          TE        A2,DSLINK,X6      . BETTER BE SAME AS WE HAD BEFORE          LMJ       A2,DE180          .  IF NOT, INTERNAL ERROR -- ABORT          J         DE123             . SKIP AHEADDE122          TZ        DSLINK,X6         . WAS LDAT PREVIOUSLY USED?          LMJ       A2,DE180          .  YES, ERROR - ABORT          SX        X7,DSLINK,X6      . STORE ADDR OF 1ST DASTAB ENTRY FOR LDAT          LA        A2,DASTKO         . A2 = DAS TRK OFFSET (E43=0)          SA        A2,DSCNT,X6       . INITIALIZE TRACK COUNT FOR THIS LDATDE123          AX        X7,DASTKO         . ADJUST DASTAB POINTER IF E44+          LA        A6,FDT1+4         . GET PACK-ID FOR THIS DEVICE          TEP       A15,(1*/('Z'-'D')) . DIRECTORY SUPPLIED BY USER?          J         DE125             .  YES, SKIP - MSALL$ INFO IS ABSENT          TE        A6,PIDTBL-1,A0    . IS IT SAME AS PREDICTED BY MSALL$?          LMJ       A2,DE180          .  NO, ABORTDE125          SZ        SKIPUNIT          . CLEAR SKIP-UNIT FLAG          TNE,H1    A0,FDT1+5         . DOES LDAT FROM SECTOR ONE MATCH DAS?          J         DE130             .  YES, THIS IS FIXED PACK - CONTINUE          TZ,H1     FDT1+5            .  NO, IS IT ZERO (REMOVABLE)?          LMJ       A2,DE180          .   NO, ABORT..         DON'T PROCESS FILE ITEMS FROM THE R-PACK DIRECTORY, SINCE THEY.         ARE DUPLICATED IN THE FIXED DIRECTORY.  IF THE R-PACK DIRECTORY.         IS INCLUDED, THIS IS TO OBTAIN BITMAP INFORMATION ONLY..          SP1       SKIPUNIT          .   YES, SET SKIP-UNIT FLAG FOR DEVICE          TEP,U     A15,1*/('Z'-'L')  . PACK ALLOC INFORMATION WANTED?          J         DE140             .  YES, DON'T CLUTTER PRINT W/INFO MSG          E$DIT     EPKT              . OPEN EDIT          E$MSG     SKPMSG            . 'ITEMS NOT RET FROM PCK DIR FOR R-PACK'          E$FD1     A6                . EDIT PACK-ID          J         DE145             . PRINT MSG AND RESTORE A1DE130          TOP,U     A15,1*/('Z'-'L')  . PACK ALLOC INFORMATION WANTED?          J         DE150             .  NO, SKIPDE140          E$DIT     EPKT              . OPEN EDIT          TZ,S3     FDT1+8            . VERSION ZERO FORMAT?          J         DE143             .  NO, SKIP          E$MSG     PAKMSG            . '*PACK: '          E$COPY    6,FDT1+4          . FIELDATA PACKID          E$MSGR                      . ' INITIAL TRACKS: '          LA,H1     A0,FDT1+2         . INITIAL TRACK AVAIL (LOCAL)          TZ        DIRID             . SHARED DISK?          LA,H2     A0,FDT1+2         .  YES, LOAD INITIAL SHARED AVAIL          E$DECF    6                 . EDIT INITIAL TRACK AVAILABILITY          E$MSGR                      . ' INITIAL POSITIONS: '          LA,H2     A0,FDT1+2         . INITIAL POSITION AVAIL (LOCAL)          TZ        DIRID             . SHARED DISK?          LA,H1     A0,FDT1+2         .  YES, LOAD INITIAL SHARED AVAIL          E$DECF    6                 . EDIT INITIAL POSITION AVAIL          J         DE145             .DE143          E$MSG     PAKMSG1           . VERSION 1 MSG, '*PACK: '          E$COPY    6,FDT1+4          . FIELDATA PACKID          E$MSGR                      . ' INITIAL GRANULES: '          E$DECF    7,FDT1+2          . MAX AVAIL GRANULES          E$MSGR                      . ' AVAILABLE GRANULES: '          E$DECF    7,FDT1+3          . CURRENT AVAIL GRANULESDE145          P$RINT    (0114,LINE)       . PRINT STATUS OR UNIT SKIPPED MESSAGE          LA,U      A1,,X5            . RESET A1 TO POINT TO DAS DATA BLOCKDE150          TNZ       RDAHED            . HAVE WE ALREADY READ HERE?          INC       DSCNT,X6          .  NO, INCR DIR TRK CT FOR THIS LDAT          NOP                         .          LA        A0,(1,DAS)        . POINTER TO DAS STORAGE BUFFER          LXI,U     A1,1              . INCREMENT FOR TRANSFER          LR,U      R1,28             . TRANSFER 28 WORDS          BT        A0,,*A1           . MOVE DATA TO STORAGE BUFFER          LX        X4,(3,DAS)        . X4 = POINTER TO BUFFER          LR,U      R4,8              . EACH DAS CAN DESCRIBE UP TO 9 DIR TRKS          LR,U      R5,30             . LOOP CTR FOR 1ST HALF DAS TRACK          LA        A6,1,X4           . BIT MAP FOR 1ST HALF DAS TRACK          LSSL      A6,1              . SHIFT OFF BIT FOR DAS SECTOR          LA,U      A8,1              . INIT SECTOR NUMBER = 1          J         DE220             . JOIN NON-DAS TRACK PROCESSINGDE180          FATERR    10                . 'INTERNAL ERROR READING DAS CHAIN'/.. PROCESS THE NEXT NON-DAS TRACK.DE200          TNZ       RDAHED            . HAVE WE ALREADY READ HERE?          INC       DSCNT,X6          .  NO, INCR DIR TRK CT FOR THIS LDAT          NOP                         .          TP        3,*X4             . IS NEXT DIR TRACK ALLOCATED?          J         DE420             .  NO, SKIP          D$BI      RPKT  DE900,DE900 . READ NEXT NON-DAS TRACK          LXM,U     X5,,A1            . X5 = ADDRESS OF FIRST ITEM          ANX,U     X5,28             . COMPENSATE FOR INCR AT TOP OF LOOP          LR,U      R5,31             . DAS ALLOCATION BITS DESCRIBE 32 SECTORS          LA        A6,1,X4           . GET DAS ALLOCATION BITS          LA,U      A8,0              . INIT FIRST SECTOR ADDR = 0..         PROCESS THE FIRST HALF OF A DIRECTORY TRACK.DE220          TNZ       ZFIRST            . ARE WE CLEARING THE FILE AS WE READ IT?          J         DE230             .  NO, SKIP          TP        ZERPKT+3          .  YES, IS PREV CLEAR I/O IN PROGRESS?          ER        WAIT$             .    YES, WAIT          LA        A0,ZERPKT+5       . ADDR OF CLEARED SECTOR          AA,U      A0,64             . ADD A TRACK          SA        A0,ZERPKT+5       . UPDATE ADDRESS          I$O       ZERPKT            . ISSUE ASYNCH I/O TO CLEAR NEXT TRACKDE230          TNZ       RDAHED            . HAVE WE ALREADY DONE THIS?          J         DE235             .  NO, SKIP          TE        A7,MDLINK,X7      .  YES, TRACK ADDR SHOULD = PREV VALUE          LMJ       A2,DE180          .   IF NOT, SOMETHING WRONG - ABORTDE235          SA        A7,MDLINK,X7      . STORE TDIR$ TRACK ADDRESS IN DASTAB          SA        A7,CURTRK         . SAVE CURRENT TRACK ADDRESS          SZ        CDLINK,X7         . ZERO LINK TO INCORE ITEM CHAIN          LX,U      X9,,X7            . X9 = DASTAB POINTER FOR THIS TRACK          AA,U      A7,1              . INCREMENT TDIR$ TRACK ADDRESS          TZ        SKIPUNIT          . ARE WE SKIPPING THIS UNIT (REMOVABLE)?          J         DE410             .  YES, JUMP AHEAD          LR,U      R6,1              .  NO, LOAD LOOP CTR FOR 1ST HALF TRACK          J         DE270             . BEGIN ITEM SCAN..         PROCESS THE SECOND HALF OF A DIRECTORY TRACK.DE250          LA        A6,2,X4           . GET BIT MASK FOR 2ND HALF TRACK          LR,U      R5,31             . PROCESS 32 SECTORS/..         PROCESS THE NEXT DIRECTORY SECTOR.DE270          LA        A4,28,*X5         . FIRST WORD OF NEXT MFDF ITEM          JP        A6,DE400          . SKIP IF SECTOR NOT ALLOCATED          SSL       A4,32             . CONTROL BITS TO A4 LOWER          AND,U     A4,07             . A5 = BITS 34-32          TNE,U     A5,1              . IS THIS A SEARCH ITEM?          J         DE400             .  YES, IGNORE IT          TE,U      A5,2              . IS THIS A LEAD ITEM?          J         DE275             .  NO, SKIP          SP1       LIFLAG,X5         .  YES, SET LEAD ITEM INIT FLAG          J         DE280             .   AND CHECK FOR FORWARD READSDE275          JNZ       A5,DE300          . SKIP IF ANY OTHER BITS SET          TE        A12,M1NUM1,X5     . IS THIS MAIN ITEM EXT SECTOR?          TNE       A13,M2NUMN,X5     .          J         DE280             .  YES, NOT DAD TABLE          TZ        DIRID             . PROCESSING STD DIRECTORY,          TEP       A15,(1*/('Z'-'E')) .  OR SKIP SHARED EXT ITEMS?          J         DE290             .   YES, SKIP          LA        A0,S1NUM1,X5      .   NO, PICK UP EXTENSION IDENTIFIER          TE        A0,('*SF.1*')     . IS THIS SHARED FILE EXT SECTOR?          J         DE290             .  NO, CHECK FOR DAD TABLEDE280          TNZ       RATBCT            . ANY OPEN FORWARD READS?          J         DE300             .  NO, SKIP - KEEP THIS ITEM          LA,U      A0,,X7            .  YES, FORM MFDF ADDRESS FOR SEARCH          ANA       A0,DSLINK,X6      . A0 = DAS-RELATIVE TRACK ADDRESS          LSSL      A0,6              . CONVERT TO SECTOR          AA        A0,A8             . ADD SECTOR OFFSET          LXI,U     A0,,X6            .  AND LDAT INDEX          LSSL      A0,6              . LEFT SHIFT TO MATCH TABLE ENTRIES          LA        A1,(1,RATBL-1)    . POINTER TO OPEN FORWARD READ TABLE          LR        R1,RATBCT         . ENTRY COUNT OF RATBLDE285          SE        A0,1,*A1          . SEARCH TABLE FOR CURRENT ADDRESS          J         DE300             .  NO FIND, KEEP THIS ITEM          LA        A2,RATBCT         .  FIND - A2 = ENTRY COUNT          ANA,U     A2,1              . DECREMENT          SA        A2,RATBCT         .  AND REPLACE          LA        A2,RATBL,A2       . A2 = LAST TABLE ENTRY          SA        A2,,A1            . STORE OVER THE ONE WE JUST FOUND          JZ        A5,DE400          . SKIP THIS ITEM NOW IF NOT LEAD ITEM          LA        A2,LIRNGE,X5      . A2 = CYCLE COUNT OF THIS ITEM          TLE,U     A2,2              . TWO OR MORE CYCLES REMAINING?          J         DE400             .  NO, SKIP - THIS ITEM CAN BE BYPASSED          ANA,U     A2,1              .  YES, DECREMENT REM CYCLE COUNT          SA        A2,LIRNGE,X5      .    AND REPLACE          SZ        LIFLAG,X5         . MARK THIS ITEM AS BEING USED          ANA,U     A1,1              . BACKUP PTR TO CHECK REPLACED ENTRY          J         DE285             .  AND RESUME SEARCH FROM WHERE LEFT OFFDE290          TEP,U     A15,1*/('Z'-'Q')  .  ARE WE RETAINING DAD TABLES IN MEMORY?          TZ,S1     DTWD5,X5          .   AND IS S1, WD 5 = 0 (TRUE FOR DADTS)?          J         DE400             .    NO,  IGNORE THIS ITEMDE300          LA        A2,DINXFB,X8      . A2 = ADDRESS OF NEXT (+1) FREE BUFFER          LA,U      A0,DIBEGN,X8      . A0 = DATA ADDR OF CURRENT FREE BUFFER          LXI,U     A0,1              . INCREMENT FOR TRANSFER          LA,U      A1,,X5            . A1 = ADDRESS OF CURRENT ITEM          LXI,U     A1,1              . INCREMENT FOR TRANSFER          LR,U      R1,28             . TRANSFER 28 WORDS          BT        A0,,*A1           . MOVE ITEM TO CURRENT FREE BUFFER          SX        X8,DIPTRF,X9      . CURR BUFF ADDR TO DASTAB OR PREV BUFF          SX        X9,DIPTRB,X8      . ALSO STORE BACKWARDS LINK IN CURR BUFF          SZ        DIPTRF,X8         . ZERO POINTER TO NEXT FREE BUFFER          SX        X6,DILDAT,X8      . STORE LDAT INDEX OF THIS ENTRY          SA        A8,DISECT,X8      .  AND DAS-TRACK-RELATIVE SECTOR NUMBER          TE,U      A5,4              . MAIN ITEM SECTOR ZERO?          J         DE310             .  NO, SKIP          LA        A0,FILPTR+DINXFL  .  YES, PLACE IN FILE POINTER CHAIN          SX        X8,FILPTR+DINXFL  .   STORE CURRENT ITEM ADDRESS          SA        A0,DINXFL,X8      .    AND PREV ADDR IN CURRENT ITEMDE310          LX,U      X9,,X8            . SET X9 = ADDR OF NEW ENTRY          LX,U      X8,,A2            . SET X8 = NEXT FREE BUFFER          JNZ       A2,DE400          . SKIP IF MORE BUFFERS AVAILABLE          LMJ       X11,FLUSH         .  IF NOT, FLUSH OUT ALL COMPLETE FILES          TZ,U      0,X8              . ARE THERE MORE FREE BUFFERS NOW?          J         DE380             .  YES, SKIP          TZ        RDAHED            . ARE FORWARD READS ALREADY ENABLED?          J         DE360             .  YES, CONTINUE          TEP       A15,(1*/('Z'-'G')) .  NO, DOES USER WANT THIS FEATURE?          J         DE315             .   YES, SKIP          FATERR    17                .   NO, ABORT WITH 'BUFFER OVERFLOW' MSG..         THE FOLLOWING CODE DUPLICATES THE LOOP DE100-DE200 ... DE410-DE430..         THE REMAINDER OF THE INPUT DIRECTORY IS READ IN ORDER TO ESTABLISH.         FINAL VALUES FOR <DSCNT>, <DSLINK> AND <MDLINK> FOR ALL DEVICES IN.         THE FIXED POOL.  THIS WILL ALLOW THE <GETSEC> ROUTINE TO FORWARD.         READ ITEMS WHICH MUST BE PROCESSED IN ORDER TO FREE UP SPACE IN.         THE DIRECTORY ITEM BUFFER.  THE MFDF ADDRESS OF EACH FORWARD-READ.         ITEM IS TABLED UNTIL THE ACTUAL ITEM IS ENCOUNTERED IN THE NORMAL.         SEQUENTIAL READ PROCESS, AT WHICH TIME THE ITEM IS DISCARDED.         (EXCEPT FOR LEAD ITEMS WITH MULTIPLE CYCLES)...         THE FORWARD-READ PROCESS IS I/O INTENSIVE AND IS NOT INTENDED TO.         BE USED UNTIL THE MAXIMUM BUFFER SPACE HAS BEEN REQUESTED, SO THE.         USER MUST ENABLE THIS FEATURE WITH THE 'G' OPTION..DE315          P$RINT    ERRPRT(37)        . 'BUFFER OVERFLOW - STARTING FWD READS'          TP        RPKT+3            .          ER        WAIT$             . WAIT FOR OUTSTANDING I/O TO COMPLETE          LA        A0,(1,RPSAVE)     . SAVE AREA FOR D/B INPUT PACKET          LA        A1,(1,RPKT)       . THE PACKET ITSELF          LR,U      R1,RPKTLN         . LENGTH OF THE PACKET          BT        A0,,*A1           . MOVE PACKET TO SAVE AREA          LA        A0,(1,DASSV)      . SAVE AREA FOR <DAS> BUFFER          LA        A1,(1,DAS)        . DAS BUFFER          LR,U      R1,28             . LENGTH IS 28 WORDS          BT        A0,,*A1           . MOVE DAS BUFFER TO SAVE AREA          SX        X4,SAVX4          . SAVE DAS POINTER          SX        X5,SAVX5          . SAVE POINTER TO NEXT INPUT ITEM          SX        X6,SAVX6          . SAVE LDAT TABLE POINTER          SX        X7,SAVX7          . SAVE DASTAB TABLE POINTER          SA        A7,SAVA7          . SAVE TDIR$ TRACK ADDRESS          SR        R4,SAVR4          . SAVE REMAINING DAS ENTRIES LOOP CT          J         DE350             . BEGIN IN THE MIDDLE (WHERE WE ARE NOW)DE320          D$BI      RPSAVE  DE900,DE900 . GET THE NEXT DAS TRACK          TN        DASSV+27          . IS PREVIOUS DAS LAST FOR DEVICE?          J         DE328             .  NO, SKIP          LA,U      A0,28,A1          .  YES, GET ADDR OF 1ST DIR TRK SECT 1          LXI,U     A0,1              . INCREMENT FOR TRANSFER          LA        A2,(1,FDT1)       . POINTER TO SAVE AREA          LR,U      R1,28             . TRANSFER 28 WORDS          BT        A2,,*A0           . MOVE 1ST DT SECT 1 TO SAVE AREA          SZ        DASTKO            . ZERO DAS TRACK OFFSET          TNZ,S1    0,A1              . NEW FORMAT DIRECTORY?          J         DE328             .  NO, SKIP          TZ,S6     FDT1+020          .  YES, IS DAS TRK OFFST EVEN MULT OF 64?          LMJ       A2,DE180          .   NO, ERROR          LA,H2     A4,FDT1+020       .   YES, GET DAS TRACK OFFSET (SECTORS)          SSL       A4,6              . CONVERT TO TRACKS          SA        A4,DASTKO         . SAVE DAS TRACK OFFSET (TRACKS)          JGD       A4,$+2            . DECREMENT FOR LOOP AND SKIP          LMJ       A2,DE180          .  ERROR IF ALREADY ZERO          LA,U      A3,,X7            . DAS LOOKUP TABLE POINTERDE326          SA        A7,MDLINK,A3      . SAVE TDIR$ TRACK ADDR IN DASTAB          SZ        CDLINK,A3         . ZERO LINK TO INCORE ITEM CHAIN          AA,U      A7,1              . INCREMENT TDIR$ TRACK ADDRESS          D$BI      RPKT  DE900,DE900 . READ NEXT DIR TRK          TLEM,U    A3,DASTAB+MAXDAS  . INCR DASTAB PTR, CHECK FOR TABLE OVFL          J         $+2               .  NO OVERFLOW, CONTINUE          LMJ       A2,DE425          . GO PRINT ERROR AND ABORT          JGD       A4,DE326          . BACK FOR NEXT SKIPPED TRACKDE328          LXM,U     X5,,A1            . X5 = ADDRESS OF DAS DATA BLOCK          TP        0,X5              . IS LDAT INDEX POSITIVE?          LMJ       A2,DE180          .  NO, ABORT          TN        DASSV+27          . IS PREVIOUS DAS LAST FOR DEVICE?          J         DE330             .  NO, CONTINUE ON SAME DEVICE          LA,H1     A0,,X5            .  YES, GET LDAT INDEX OF NEXT DEVICE          TG,U      A0,MAXLDT+1       . IS INDEX WITHIN SUPPORTED RANGE?          J         DE110             .  NO, ABORT WITH 'TABLE OVERFLOW'          TG,U      A0,1              . IS LDAT LESS THAN ONE,          TZ        DSLINK,A0         .  OR WAS IT PREVIOUSLY USED?          LMJ       A2,DE180          .   YES, ABORT          LX,U      X6,,A0            .   NO, SET X6 = NEW LDAT INDEX          SX        X7,DSLINK,X6      . STORE ADDR OF 1ST DASTAB ENTRY FOR LDAT          AX        X7,DASTKO         . ADJUST DASTAB POINTER IF E44+          LA        A2,DASTKO         . A2 = DAS TRK OFFSET (E43=0)          SA        A2,DSCNT,X6       . INITIALIZE TRACK COUNT FOR THIS LDAT          TNE,H1    A0,FDT1+5         . DOES LDAT FROM SECTOR ONE MATCH DAS?          J         DE330             .  YES, THIS IS FIXED PACK - CONTINUE          TZ,H1     FDT1+5            .  NO, IS IT ZERO (REMOVABLE)?          LMJ       A2,DE180          .   NO, ABORTDE330          INC       DSCNT,X6          . INCR DIR TRACK COUNT FOR THIS LDAT          NOP                         .          LA        A0,(1,DASSV)      . POINTER TO DAS STORAGE BUFFER          LXI,U     A1,1              . INCREMENT FOR TRANSFER          LR,U      R1,28             . TRANSFER 28 WORDS          BT        A0,,*A1           . MOVE DATA TO STORAGE BUFFER          LX        X4,(3,DASSV)      . X4 = DAS BUFFER POINTER          LR,U      R4,8              . EACH DAS CAN DESCRIBE UP TO 9 DIR TRKS          J         DE345             . ALMOST FINISHED WITH DAS TRACKDE340          INC       DSCNT,X6          . INCREMENT TRACK COUNT FOR NON-DAS TRACK          NOP                         .          TP        3,*X4             . IS NEXT DIR TRACK ALLOCATED?          J         DE352             .  NO, SKIP          D$BI      RPSAVE  DE900,DE900 . READ NEXT NON-DAS TRACKDE345          SA        A7,MDLINK,X7      . STORE TDIR$ TRACK ADDRESS IN DASTAB          SZ        CDLINK,X7         .  AND ZERO LINK TO INCORE ITEM CHAIN          AA,U      A7,1              . INCREMENT TDIR$ TRACK ADDRESSDE350          TG        A7,LASTRK         . MORE DIRECTORY TRACKS TO READ?          J         DE355             .  NO, SKIPDE352          TLEM,U    X7,DASTAB+MAXDAS  . INCR DASTAB PTR, CHECK FOR TABLE OVFL          J         $+2               .  NO OVERFLOW - CONTINUE          J         DE425             .  OVERFLOW, ABORT WITH APPROPRIATE MSG          JGD       R4,DE340          . BACK FOR OTHER TRACKS IN DAS CHAIN          J         DE320             . BACK FOR NEXT DAS TRACKDE355          TP        RPSAVE+3          .          ER        WAIT$             . WAIT FOR OUTSTANDING I/O TO FINISH          SZ,S1     RPSAVE+3          . ZERO STATUS IN SECONDARY PACKET          SZ,H2     RPSAVE+3          .  ALSO COUNT OF WORDS TRANSFERRED          LA,H2     A0,RPKT+6         . MEMORY ADDRESS OF ACTIVE BUFFER          SA,H2     A0,RPSAVE+4       .  SAVE IN SECONDARY PACKET          LA        A0,RPKT+5         . SECTOR ADDRESS OF IN-PROGRESS BUFFER          ANA,H2    A0,RPKT+7         .  MINUS BUFFER SIZE, = ACTIVE ADDRESS          JP        A0,$+2            . IS ADDRESS POSITIVE?          LMJ       A2,DE180          .  NOPE, SOMETHING VERY WRONG HERE          SA        A0,RPSAVE+5       .  YES, SAVE IN SECONDARY PACKET          I$OW      RPSAVE            . RESTORE ACTIVE BUFFER CONTENTS          SZ,S1     RPKT+3            . ZERO STATUS IN ORIGINAL PACKET          SZ,H2     RPKT+3            .  AND COUNT OF WORDS TRANSFERRED          I$O       RPKT              .  INITIATE I/O FOR IN-PROGRESS BUFFER          LX        X4,SAVX4          . RESTORE REGISTERS          LX        X5,SAVX5          .          LX        X6,SAVX6          .          LX        X7,SAVX7          .          LA        A7,SAVA7          .          LR        R4,SAVR4          .          SP1       RDAHED            . FORWARD READS ARE NOW ENABLED..         THIS IS THE END OF THE FORWARD-READ ENABLE CODE.  AT THIS POINT.         IT IS POSSIBLE TO DO FORWARD READS TO CLEAR THE DIRECTORY ITEM.         BUFFER, AND NOW THE ONLY LIMITING FACTOR IS THE SPACE REMAINING.         IN THE OPEN FORWARD-READ TABLE (RATBL).  THIS IS A MUCH LESS.         SEVERE LIMITATION THAN BEFORE, BECAUSE EACH ENTRY IN <RATBL>.         USES ONE WORD (VS. 28 WORDS/ENTRY IN THE DIRECTORY ITEM BUFFER)..DE360          LA,U      A0,RATBMX         . MAXIMUM ENTRIES IN <RATBL>          ANA       A0,RATBCT         .  MINUS CURRENT, = REMAINING ENTRIES          TG,U      A0,RASEG+1        . MORE THAN MAX/FLUSH CALL?          LA,U      A0,RASEG          .  YES, LIMIT FWD READS TO THIS AMOUNT          TG,U      A0,RAMIN*2        . IS THERE ROOM LEFT IN THE TABLE?          J         DE365             .  YES, CONTINUE          FATERR    38                .  NO, ABORT W/ 'INCREASE <RATBMX>' MSGDE365          SA        A0,RDACT          .  YES, SAVE PERMITTED FORWARD-READ COUNT          LMJ       X11,FLUSH         . FLUSH OUT A BUNCH OF ENTRIES (WE HOPE)          TZ,U      0,X8              . ARE THERE MORE FREE BUFFERS NOW?          J         DE370             .  YES, CONTINUE WITH NORMAL PROCESSING          LA        A4,RDACT          . FOR DEBUG          LA        A5,RATBCT         .          FATERR    39                . 'UNABLE TO CLEAR WITH FWD READS' (UGH!)DE370          SZ        RDACT             . DON'T DO MORE FORWARD READS FOR AWHILE..         THIS IS WHERE WE NORMALLY COME WHEN BUFFERS ARE FREED BY <FLUSH>.DE380          LX,U      X9,,X7            . AFTER FLUSH, SET X9 = 1ST ITEM IN          LA,U      A0,64             .  DASTAB CHAIN, LOOP UP TO 64 TIMESDE390          TNZ       DIPTRF,X9         . IS THERE A BUFFER FOLLOWING THIS ONE?          J         DE400             .  NO, X9 = LAST IN CHAIN          LX        X9,DIPTRF,X9      .  YES, LOAD ADDRESS OF NEXT IN CHAIN          JGD       A0,DE390          . BACK FOR MORE          LMJ       A2,DE920          . IF > 64 BUFFERS IN CHAIN, ABORT..         PROCESSING COMPLETE FOR THE NEXT SECTOR (INPUT PHASE).DE400          LSSL      A6,1              . SHIFT NEXT ALLOCATION BIT TO A6 UPPER          AA,U      A8,1              . INCREMENT DAS-TRACK RELATIVE ADDRESS          JGD       R5,DE270          . LOOP BACK FOR OTHER ITEMS IN HALF TRACK          JGD       R6,DE250          . LOOP BACK FOR 2ND HALF OF DIR TRACK..         PROCESSING COMPLETE FOR THE NEXT TRACK (INPUT PHASE).DE410          TG        A7,LASTRK         . MORE DIRECTORY TRACKS TO READ?          J         DE450             .  NO, SKIPDE420          TLEM,U    X7,DASTAB+MAXDAS  . INCR DASTAB PTR, CHECK FOR TABLE OVFL          J         DE430             .  NO OVERFLOW, CONTINUEDE425          FATERR    12                .  'TABLE OVERFLOW - INCREASE <MAXDAS>'DE430          JGD       R4,DE200          . BACK FOR OTHER TRACKS IN DAS CHAIN          J         DE100             . BACK FOR NEXT DAS TRACK/..         ALL DIRECTORY TRACKS HAVE BEEN READ.DE450          SP1       FINAL             . SET FINAL-PASS FLAG          LA,U      A0,99999          . VERY LARGE NUMBER          SA        A0,CURTRK         . SET CURTRK >> , ALL CAN BE READ          TZ        FILPTR+DINXFL     . ANY MORE FILES TO PROCESS?          LMJ       X11,FLUSH         .  YES, FLUSH THEM OUT          TOP,U     A15,1*/('Z'-'S')  . ARE WE SORTING OUTPUT?          J         DE455             .  NO, SKIP          R$SORT                      .  YES, TELL SORT TO DO HIS THINGDE455          LA,U      A6,,X7            . LOAD LAST DASTAB ADDRESS          ANA,U     A6,DASTAB         .  COMPUTE A6 = MFDF TRACK COUNT          LX        X7,(1,DASTAB)     . SET X7 = POINTER TO DASTAB TABLEDE460          LA        A3,CDLINK,*X7     . GET LINK TO NEXT ITEM OF CURR TRACK          JZ        A3,DE475          . SKIP IF NONE THERE          LR,U      R1,63             . IF ITEM(S) IN CHAIN, SET UP LOOP CTRDE462          LA        A4,DIBEGN,A3      . GET CONTROL BITS FOR NEXT ITEM          SSL       A4,32             . SHIFT BITS 35-32 TO A4 UPPER          AND,U     A4,07             . BITS 34-32 TO A5          TE,U      A5,2              . IS THIS A LEAD ITEM?          J         DE464             .  NO, SKIP          TNZ       LIFLAG+DIBEGN,A3  .  YES, HAS ITEM BEEN REFERENCED?          J         DE472             .   YES, OK - GET NEXT ITEM          LA        A0,ERRPRT(5)      .    NO, 'THIS LEAD ITEM NOT MATCHED'          J         DE470             .     PRINT ERROR AND ITEM DATADE464          TE,U      A5,4              . IS THIS A MAIN ITEM SECTOR ZERO?          J         DE466             .  NO, SKIP          LA        A0,ERRPRT(6)      .  YES, 'MAIN ITEM SECTOR 0 NOT MATCHED'          J         DE470             .   PRINT ERROR AND ITEM DATADE466          LA        A0,ERRPRT(7)      .  'MAIN ITEM EXT SECTOR NOT MATCHED'          TE        A12,M1NUM1+DIBEGN,A3 . IS THIS MAIN ITEM SECTOR ONE?          TNE       A13,M2NUMN+DIBEGN,A3 .  OR SECTOR 2+?          J         DE470             .      YES, CORRECT MESSAGE          TZ        DIRID             . PROCESSING STD DIRECTORY,          TEP       A15,(1*/('Z'-'E')) .  OR SKIP SHARED EXT ITEMS?          J         DE468             .   YES, SKIP          LA        A1,S1NUM1+DIBEGN,A3 .   NO, PICK UP EXTENSION IDENTIFIER          TE        A1,('*SF.1*')     . IS THIS SHARED FILE EXT SECTOR?          J         DE468             .  NO, SKIP          ER        PRINT$            . YES, 'MAIN ITEM EXT NOT MATCHED'          LXI,U     A0,0100+10        . NEXT PRINT = ONE SPACE, TEN WORDS          LXM,U     A0,S1NUM1+DIBEGN,A3 . PRINT WORDS 10-19 OF SF EXT SECTOR          ER        PRINT$            .          J         DE472             . CONT WITH NEXT BUFF IN CHAINDE468          TEP,U     A15,1*/('Z'-'Q')  . ARE WE HOLDING DAD TABLES?          J         DE472             .  YES, SKIP          LA        A0,ERRPRT(8)      .  NO, 'UNTYPED DIR ITEM NOT MATCHED'DE470          ER        PRINT$            . PRINT ERROR MESSAGE          LXI,U     A0,0100+10        . NEXT PRINT = ONE SPACE, TEN WORDS          LXM,U     A0,DIBEGN,A3      . ADDRESS OF UNMATCHED DATA          ER        PRINT$            . PRINT FIRST 10 WORDS OF DATADE472          LA        A3,DIPTRF,A3      . GET POINTER TO NEXT BUFFER IN CHAIN          JZ        A3,DE475          . SKIP IF NO MORE TO PROCESS          JGD       R1,DE462          .  OTHERWISE, LOOP BACK          LMJ       A2,DE920          . ABORT IF MORE THAN 64 BUFFERS IN CHAINDE475          JGD       A6,DE460          . BACK FOR NEXT MFDF TRACK          TOP,U     A15,1*/('Z'-'S')  . ALL DONE - CHECK FOR SORT OPERATION          J         DE500             .  WE'RE FINISHED IF NOT SORTING NOW..         WRITE SORTED OUTPUT FILE.          TEP,U     A15,1*/('Z'-'M')  . ARE DIR AND MBT 'DAD TABLES' DESIRED?          LMJ       X9,MISCOUT        .  YES, CALL MISCOUT TO FORMAT AND OUTPUT          LA,U      A14,0             . SET FILE NUMBER TO ZERO          SZ        MSCT              . ZERO COUNT OF M/S FILES          SZ        TPCT              . ZERO COUNT OF TAPE FILES          R$RET     DE500             . RETURN FIRST RECORD          LX,U      X4,,A0            . X4 = ENTRY ADDRESS          LXI,U     X4,1              . INCREMENT FOR TRANSFER          LX,U      X10,0             . INIT FILE POINTER FOR OUTDAD = 0DE480          LX        X6,(1,OUTLST)     . X6 = POINTER TO OUTPUT LIST          LA,U      A6,0              . INIT LOOP COUNT = 0 (SET FOR JGD)DE481          LA        A0,X6             . A0 = POINTER TO CURRENT OUT BUFF          LR,U      R1,28             . SET UP FOR TRANSFER          BT        A0,,*X4           . MOVE DATA FROM SORT TO OUTPUT BUFFDE482          R$RET     DE485             . RETURN THE NEXT RECORD FROM SORT          LXM,U     X4,,A0            . X4 = SORT RECORD ADDRESS          SX        X4,SAVX4          .  SAVE FOR LATER USE          DL        A0,MFFILE,X4      . NEW FILE NAME          DTE       A0,MFFILE,X6      .  SAME AS NAME ON LIST?          J         DE486             .   NO, SKIP          DL        A0,MFQUAL,X4      . NEW FILE QUALIFIER          DTE       A0,MFQUAL,X6      .  SAME AS QUAL ON LIST?          J         DE486             .   NO, SKIP          TEP,U     A15,1*/('Z'-'N')  . SAME Q*F - SORT BY ACCT NUMBER?          J         DE484             .  YES, SKIP          AX,U      X6,28             .  NO, INCREMENT LIST POINTER          AA,U      A6,1              .   AND LOOP COUNT          TLE,U     A6,MAXSQF         . CHECK FOR OVERFLOW          J         DE481             .  NO OVERFLOW, TRANSFER TO NEXT SLOT          P$RINT    ERRPRT(35)        .  OVERFLOW DETECTED, PRINT ERROR MSG          ER        ERR$              .   AND ABORTDE484          LA        A0,MFCYCL,X4      . NEW FILE CYCLE          TE        A0,MFCYCL,X6      .  SAME AS CYCLE ON LIST?          J         DE495             .   NO, GO OUTPUT LIST FILE NOW          P$RINT    ERRPRT(15)        .   YES, 'DUPL ENTRY - OLDER IGNORED'          LA,U      A0,,X6            . ADDRESS TO A0 FOR ERROR PRINT          LXI,U     A0,0100+10        . PRINT 1ST TEN WORDS OF DUPL ENTRY          ER        PRINT$            .          LMJ       X11,CKCATT        . CALL CKCATT TO FIND MOST RECENT ENTRY          J         DE481             .  NEW ENTRY IS MOST RECENT - OVERWRITE          J         DE482             .  LIST ENTRY IS NOST RECENT, SKIP NEWERDE485          SP1       EOFFLG            . EOF RETURN FROM SORT - SET FLAGDE486          TOP,U     A15,1*/('Z'-'N')  . DIFF Q*F - SORT BY ACCT NUMBER?          JNZ       A6,DE488          .  NO, CHECK FOR DUP IF TABLE COUNT > 1          J         DE495             .  GO OUTPUT SINGLE ENTRYDE488          LXM,U     X6,OUTLST         . X6 = POINTER TO SAME-NAME LIST          LXM,U     X4,OUTLST+28      . X4 = POINTER TO 2ND ENTRY ON LIST          ANU,U     A6,1              . A7 = COMPARISON LOOP COUNTDE489          LMJ       X11,CKCATT        . CALL CKCATT TO FIND MOST RECENT ENTRY          LXM,U     X6,,X4            .  NEW ENTRY IS MOST RECENT - SAVE PTR          AX,U      X4,28             . INCREMENT POINTER TO NEXT ENTRY          JGD       A7,DE489          . LOOP BACK UNTIL LIST EMPTY          LA        A7,MFLILD,X6      . A7 = LEAD ITEM LDAT OF MOST RECENT ENT          LX,U      X4,0              . SET 2ND FILE POINTER = 0          LXM,U     X6,OUTLST         . X6 = POINTER TO SAME-NAME LISTDE490          TNE       A7,MFLILD,X6      . IS LI LDAT OF NXT FILE SAME AS NEWEST?          J         DE491             .  YES, SKIP          P$RINT    ERRPRT(36)        .  NO, 'DUP FILE, ALLOC ON DIFF DEV IGN'          LA,U      A0,,X6            . A0 = ADDRESS OF ITEM IN ERROR          LXI,U     A0,0100+10        . PRINT 1ST TEN WORDS OF ITEM          ER        PRINT$            .          AX,U      X6,28             . INCREMENT LIST POINTER          J         DE498             .  JUMP TO END OF LOOPDE491          TNZ,U     0,X4              . HAS FILE FROM THIS LIST BEEN OUTPUT?          J         DE495             .  NO, OUTPUT CURRENT FILE          LA        A0,MFCYCL,X4      .  YES, COMPARE F-CYCLES          TE        A0,MFCYCL,X6      . ARE CYCLES IDENTICAL? (SAME Q*F(C))          J         DE495             .  NO, OUTPUT CURRENT FILE          P$RINT    ERRPRT(15)        .  YES, 'DUPL ENTRY - OLDER IGNORED'          LA,U      A0,,X6            . A0 = ADDRESS OF DUPLICATE ITEM          LXI,U     A0,0100+10        . PRINT 1ST TEN WORDS          ER        PRINT$            .          LMJ       X11,CKCATT        . CALL CKCATT TO FIND MOST RECENT          J         DE492             . OUTPUT ENTRY IS MORE RECENT          LA        A1,X4             . CURRENT ENTRY IS MORE RECENT - OVERLAY          J         DE496             .  OUTPUT ENTRY WITH CURRENT ENTRYDE492          AX,U      X6,28             . OUTPUT ENTRY IS MORE RECENT - INCR PTR          J         DE498             .  AND SKIP TO END OF LOOPDE495          TZ,U      0,X10             . HAS A FILE BEEN OUTPUT?          LMJ       X11,OUTDAD        .  YES, OUTPUT DAD TABLES IF REQUIRED          D$BO      WPKT  DE910       . GET ADDRESS OF NEXT OUTPUT BUFFER          LXI,U     A1,1              . INCREMENT FOR TRANSFER          LX        X4,A1             . X4 = POINTER TO OUTPUT ITEM          LX,U      X10,,A1           . X10 = POINTER FOR OUTDAD ROUTINE          AA,U      A14,1             . INCREMENT FILE COUNT          LA        A0,MFTYPE,X6      . LOAD FILE TYPE          TE,U      A0,1              . DISC FILE?          INC       MSCT              .  YES, INCREMENT M/S COUNT          NOP                         .          TNE,U     A0,1              . TAPE FILE?          INC       TPCT              .  YES, INCREMENT TAPE FILE COUNT          NOP                         .DE496          LR,U      R1,28             . TRANSFER 28 WORDS          BT        A1,,*X6           . MOVE DATA TO OUTPUT BUFFERDE498          JGD       A6,DE490          . BACK FOR NEXT FILE UNTIL LIST EMPTY          LX        X4,SAVX4          . RESTORE X4 (SORT REC POINTER)          TNZ       EOFFLG            . HAS SORT RETURNED END OF FILE?          J         DE480             .  NO, BEGIN LIST AGAIN WITH NEXT ITEM          LMJ       X11,OUTDAD        .  YES, CALL OUTDAD FOR LAST ITEM          J         DE500             ...         CKCATT IS CALLED FROM ABOVE TO DETERMINE WHICH OF TWO MFD ENTRIES.         HAS THE MOST RECENT CATALOG DATE.  X6 = ADDRESS OF LIST ENTRY,.         X4 = ADDRESS OF NEW ENTRY.  RETURNS 0,X11 IF NEW ENTRY IS MOST.         RECENT, 1,X11 IF LIST ENTRY IS MOST RECENT..CKCATT          LA,S3     A0,MFCATT,X4      . CATALOG YEAR FROM NEW ENTRY          LA,T1     A1,MFCATT,X4      . CATALOG MONTH/DAY FROM NEW ENTRY          TG,S3     A0,MFCATT,X6      . IS YEAR LESS THAN LIST ENTRY,          TLE,T1    A1,MFCATT,X6      .  IF NOT, IS MONTH/DAY LESS?          J         1,X11             .    YES, LIST ENTRY IS MOST RECENT          LA,H2     A0,MFCATT,X4      . COMPARE CATALOG TIMES          TLE,H2    A0,MFCATT,X6      .          J         1,X11             . LIST ENTRY IS MOST RECENT          J         0,X11             . NEW ENTRY IS MOST RECENT/.. ALL DONE- CLEAN UP AND GET OUT.DE500          D$BO      WPKT  DE910       . GET BUFFER FOR EOF SENTINAL          LA        A0,('*EOF**')     .          SA        A0,,A1            . PUT SENTINAL IN BUFFER          D$BOC     WPKT  DE910       . CLOSE OUTPUT TO FILE          LA        A0,(1,BUFF)       . USE BUFF FOR HEADER          LA,U      A1,(0)            .          LR,U      R1,112            . HEADER HAS 112 WORDS          BT        A0,,*A1           . ZEROFILL HEADER          LA,U      A3,BUFF           . A3 = HEADER ADDRESS          LA        A0,('*MFDB*')     . SOFTWARE LABEL          SA        A0,MFLABL,A3      .  STORE IN HEADER          SA        A14,MFFLCT,A3     . STORE FILE COUNT          LA        A0,TDATE          . DIRECTORY CREATION DATE          LA        A1,(LEVWRD)       . LEVEL WORD          LA        A2,BEGADR         . START ADDRESS OF FILE RECORDS          SA        A0,MFTDAT,A3      .  STORE IN HEADER          SA        A1,MFLVWD,A3      .          SA        A2,MFFLAD,A3      .          LA,H1     A0,MSPKT+2        . WORD COUNT OF MSALL$ INFO          LA,U      A1,MSALLAD        . SECTOR ADDRESS OF MSALL$ INFO          SA        A0,MFMSCT,A3      .  STORE IN HEADER          SA        A1,MFMSAD,A3      .          SA        A15,MFOPWD,A3     . STORE MFDEDT EXECUTE OPTIONS          LA        A0,DIRID          . DIRECTORY-ID          LA        A1,HOSTID         . HOST-ID OR ZERO IF NO MHFS          SA        A0,MFHDID,A3      .  STORE IN HEADER          SA        A1,MFHHID,A3      .          I$OW      WRHDR             . WRITE HEADER TO OUTPUT FILE          TZ,S1     WRHDR+3           . CHECK STATUS          LMJ       X11,DE910         .  IF ERROR, ABORT          TNZ       ZFIRST            . IS SECURITY CLEAR PENDING,          TNZ       ZLAST             .  AND REQUESTED?          J         DE600             .   NO, SKIP          LA        A0,(1792*4,FRSTI$) .  YES, SET UP DIRECTORY CLEAR PACKET          LA        A1,ZERPKT+5       . FIRST TRACK -1 TO CLEAR          AA,U      A1,64             . ADJUST TO FIRST TRACK (+64 SECTORS)          DS        A0,ZERPKT+4       . STORE IN DIRECTORY CLEAR PACKET          LA        A2,LASTRK         . LAST TRACK WITH VALID MFD INFO          LSSL      A2,6              . CONVERT TO SECTORDE550          I$OW      ZERPKT            . OVERWRITE NEXT 4 TRKS WITH MFDEDT IBANK          AA,U      A1,64*4           . ADD 4 TO TRACK ADDRESS          SA        A1,ZERPKT+5       . BACK IN PACKET          TLE,U     A1,,A2            . ARE WE AT OR PAST MAX TRACK?          J         DE550             .  NO, CONTINUEDE600          TEP       A15,(1*/('Z'-'F')) . ARE TDIR$, XA, R$CORE TO REMAIN?          J         DE620             .  YES, SKIP          LA,U      A0,TDFREE         . @FREE TDIR$          TOP       A15,(1*/('Z'-'D')) . WAS TDIR$ SUPPLIED AS INPUT?          ER        CSF$              .  NO, FREE IT NOW          TOP,U     A15,1*/('Z'-'S')  . IS SORT PACKAGE BEING USED?          J         DE620             .  NO, SKIP          LA,U      A0,RCFREE         .  YES, PREPARE TO FREE SORT FILES          TNZ,S1    RCFAC+6           . WAS 'R$CORE' ALREADY ASSIGNED?          ER        CSF$              .  NO, @FREE R$CORE NOW          LA,U      A0,XAFREE         .          TNZ,S1    XAFAC+6           . WAS 'XA' ALREADY ASSIGNED?          ER        CSF$              .  NO, @FREE XA NOWDE620          E$DIT     EPKT              . OPEN EDIT          E$MSG     ENDMSG            . 'END MFDEDT.  TOTAL FILES: '          E$DECV    A14               . TOTAL FILE COUNT          E$MSGR                      . ' ('          E$DECV    MSCT              . DISC FILE COUNT          E$MSGR                      . ' DISC, '          E$DECV    TPCT              . TAPE FILE COUNT          E$MSGR                      . ' TAPE.)'          P$RINT    (0214,LINE)       . WRITE FIRST STATUS LINE          TNZ       DADCT             . WERE DAD TABLES WRITTEN TO OUTPUT?          J         DE650             .  NO, SKIP          E$CLEAR                     .  YES, CLEAR EDIT          E$MSG     ENDM2             . 'TOTAL EXTENSION ENTRIES: '          E$DECV    DADCT             . DAD TABLE COUNT          E$MSGR                      . '  MAX PER FILE: '          E$DECV    MAXDAD            . MAX DAD TABLES PER FILE          P$RINT    (0114,LINE)       . PRINT SECOND STATUS LINEDE650          TNZ       RDTCT             . WERE ANY DAD TABLES RELEASED (Q OPT)?          J         DE670             .  NO, SKIP          E$CLEAR                     .  YES, CLEAR EDIT          E$DECV    RDTCT             . COUNT OF ALLOCATED BUFFERS RELEASED          E$MSG     ENDM3             . ' ALLOC BUFFS RELEASED, INSUFF MEMORY'          P$RINT    (0114,LINE)       . PRINT THIRD STATUS LINEDE670          TNZ       RDATOT            . WERE ANY FORWARD READS REQUIRED?          J         DE690             .  NO, SKIP          E$CLEAR                     .  YES, CLEAR EDIT          E$DECV    RDATOT            . FORWARD READ COUNT          E$MSG     ENDM4             . ' FWD READS WERE PERF, MAX OPEN = '          E$DECV    RATBMU            . MAX OPEN FORWARD READS          E$MSGR                      . ', RESIDUE = '          E$DECV    RATBCT            . UNUSED ENTRIES IN FWD READ TABLE          P$RINT    (0114,LINE)       . PRINT FOURTH STATUS LINEDE690          E$CLEAR                     . CLEAR EDIT          E$MSG     ENDM5             . 'FLUSH CALLS: '          E$DECV    FLCT              . NUMBER OF TIMES 'FLUSH' ROUTINE CALLED          E$MSGR                      . '  AVAIL BUFFERS: '          E$DECV    DIBFCT            . COUNT OF TOTAL BUFFERS AVAILABLE          E$MSGR                      . '  AVG RB/FC: '          LA        A0,RBTOT          . TOTAL RELEASED BUFFERS          DSL       A0,36             . PREPARE FOR DIVIDE          DI        A0,FLCT           . DIVIDE BY FLUSH CALLS          E$DECV                      . PRINT AVERAGE REL BUFFS / FLUSH CALL          E$MSGR                      . '  MIN RB/FC: '          E$DECV    RBMIN             . PRINT MINIMUM REL BUFFS / FLUSH CALL          P$RINT    (0114,LINE)       . PRINT LAST STATUS LINE          ER        EXIT$             . ALL DONEDE900          FATERR    1                 . 'INPUT I/O ERROR, X11 = ADDRESS'DE910          FATERR    2                 . 'OUTPUT I/O ERROR, X11 = ADDRESS'DE920          FATERR    16                . 'INTERNAL LINKAGE ERROR, A2 = ADDRESS'/.. ROUTINE TO OUTPUT ALL COMPLETE INCORE ENTRIES.FLUSH          SX        X11,FLSX11        . SAVE RETURN          TNZ       FINAL             . LAST PASS?          INC       FLCT              .  NO, INCREMENT FLUSH COUNT          NOP                         .          SZ        RBCT              . ZERO RELEASED BUFFER COUNT          TNZ       FILPTR+DINXFL     . ANY MORE MAIN ITEMS IN CHAIN?          J         FL700             .  NO, SKIP          LX,U      X2,FILPTR         .  YES, SET UP FOR SCAN          LR        R3,DIBFCT         . MAX BUFFERS IN CHAINFL100          SX        X2,PREVX2         . SAVE CURRENT X2 AS PREVIOUS          LX        X2,DINXFL,X2      . LOAD POINTER TO NEXT ENTRY          LA        A0,DIBEGN+M0LILK,X2 . GET LINK TO LEAD ITEM          LA,U      A1,1              . FORWARD READS WILL BE TABLED          LMJ       X11,GETSEC        . GET MEMORY ADDRESS OF LEAD ITEM          J         FL600             .  SKIP IF NO FIND          LX,U      X1,DIBEGN,A0      .  FIND, X1 = ADDRESS OF LEAD ITEM          LX,U      X3,0              . INIT ADDR OF MAIN ITEM SECTOR 1 = ZERO          LA        A0,DIBEGN+M0M1LK,X2 . GET LINK TO MAIN ITEM SECTOR 1          AND       A0,(1*/30-1)      . SET A1 = ADDRESS LESS PCHAR FLAGS          JZ        A1,FL180          . SKIP IF NO MAIN ITEM SECTOR 1          LA,U      A1,1              . FORWARD READS WILL BE TABLED          LMJ       X11,GETSEC        .  LOOK FOR MAIN ITEM SECTOR 1          J         FL600             .  SKIP IF NO FIND          LX,U      X3,DIBEGN,A0      . SET X3 = ADDRESS OF MAIN ITEM SECTOR 1          TZ        RDACT             . ARE FORWARD READS ALLOWED?          J         FL180             .  YES, SKIP - ALL ITEMS ARE READABLE          LA        A0,M1M2LK,X3      . LINK TO MAIN ITEM SECTOR 2          JN        A0,FL180          . SKIP IF NONE TO GET          LMJ       X11,GETSEC        . OTHERWISE, GO LOOK FOR IT          J         FL600             . NOT FOUND, SKIP THIS FILE FOR NOW          LR,U      R2,9              . ALLOW A MAX OF 10 EXTENSIONS PAST 1FL150          LA        A0,DIBEGN+M2MNLK,A0 . LINK TO NEXT EXTENSION          JN        A0,FL180          . SKIP WHEN END OF CHAIN IS REACHED          LMJ       X11,GETSEC        . LOOK FOR NEXT EXTENSION          J         FL600             . SKIP THIS FILE IF NOT FOUND          JGD       R2,FL150          . BACK FOR MORE          LMJ       A2,DE920          . TOO MANY EXTS, ABORT RATHER THAN LOOPFL180          LX,U      X9,0              . INIT SHARED FILE EXT ADDR = 0          TZ        DIRID             . PROCESSING STD DIRECTORY,          TEP       A15,(1*/('Z'-'E')) .  OR SKIP SHARED EXT ITEMS?          J         FL200             .   YES, SKIP          LA        A0,DIBEGN+M0S1LK,X2 .   NO, GET LINK TO EXT SECTOR          AND       A0,(1*/30-1)      . A1 = MFDF ADDRESS          JZ        A1,FL200          . SKIP IF NO EXT SECTOR FOR FILE          LA,U      A1,1              . FORWARD READS WILL BE TABLED          LMJ       X11,GETSEC        .  LOOK FOR EXTENSION SECTOR          J         FL600             . SKIP FILE FOR NOW IF NOT FOUND          LX,U      X9,DIBEGN,A0      . FIND, SET X9 = ADDRESSFL200          AX,U      X2,DIBEGN         . ADJUST X2 TO POINT TO MAIN-0 DATA ONLY          LA        A0,M0DESC,X2      . DESCRIPTOR FLAGS          AND,U     A0,1*/5           . A1 = BIT 5 (TAPE FILE)          SSL       A1,5              . SHIFT TO BIT 0          XOR       A1,LITYPE,X1      . COMPARE WITH LEAD ITEM TYPE CODE          JNB       A2,FL210          . BIT 0 SHOULD BE THE SAME IN BOTH FIELDS          P$RINT    ERRPRT(19)        .  IF NOT, 'FILE TYPE INCONSISTENT:'          J         FL225             . GO PRINT OUT ITEM CONTENTSFL210          DL        A0,LIQUAL,X1      . QUALIFIER FROM LEAD ITEM          DL        A2,LIFILE,X1      . FILENAME FROM LEAD ITEM          DTE       A0,M0QUAL,X2      . BETTER EQUAL SAME FROM MAIN ZERO          J         FL220             .  NOPE, ERROR          DTE       A2,M0FILE,X2      . CHECK FILE NAME ALSO          J         FL220             .  NOPE, ERROR          LA        A4,M0CYCL,X2      . LOAD CYCLE FROM MAIN ZERO          TNZ,U     0,X9              . IS THERE A SHARED FILE EXT SECTOR?          J         FL215             .  NO, SKIP          DTE       A0,S1QUAL,X9      .   YES, COMPARE QUALIFIER          J         FL220             .    SKIP IF NOT THE SAME          TNE       A4,S1CYCL,X9      . QUALIFIER IS EQUAL, COMPARE CYCLE          DTE       A2,S1FILE,X9      .  AND FILENAME          J         FL220             .  SKIP IF NOT EQUALFL215          TNZ,U     0,X3              . IS THERE A MAIN ITEM SECTOR 1?          J         FL240             .   NO, SKIP          DTE       A0,M1QUAL,X3      .   YES, COMPARE QUALIFIER          J         FL220             .    SKIP IF NOT THE SAME          TNE       A4,M1CYCL,X3      . QUALIFIER IS EQUAL, COMPARE CYCLE          DTE       A2,M1FILE,X3      .  AND FILENAME          J         FL220             .  SKIP IF NOT EQUAL          J         FL230             . CONTINUE, COMPARISON CHECKS OUTFL220          P$RINT    ERRPRT(9)         . 'QUAL, FILE AND/OR F-CYCLE AMBIGUITY:FL225          LXI,U     A0,0100+14        . PRINT 14 WORDS, ONE SPACE          LXM,U     A0,,X1            . ADDRESS OF LEAD ITEM          ER        PRINT$            . DUMP 1ST 14 WORDS OF LEAD ITEM          LXM,U     A0,,X2            .          ER        PRINT$            . DUMP 1ST 14 WORDS OF MAIN ITEM SECT 0          LXM,U     A0,,X3            .          TZ,U      0,X3              . IS THERE A MAIN 1?          ER        PRINT$            .  IF SO, PRINT IT ALSO          TNZ,U     0,X9              . IS THERE A SHARED FILE EXT SECTOR?          J         FL228             .  NO, SKIP          LXI,U     A0,0100+10        .  YES, PRINT 2 LINES (10 WORDS EACH)          LXM,U     A0,,X9            . PRINT WORDS 0-9          ER        PRINT$            .          LXM,U     A0,10,X9          . PRINT WORDS 10-19 ALSO          ER        PRINT$            .FL228          J         FL320             . DON'T OUTPUT, RELEASE ONLY MAIN-ZEROFL230          SZ        M1BI34,X3         . INIT (ZERO) WORDS 3-6 OF BACKUP INFO          SZ        M1BI34+1,X3       .          SZ        M1BI56,X3         .          SZ        M1BI56+1,X3       .          LA        A0,M1M2LK,X3      . LINK TO MI SECTOR 2          JN        A0,FL240          . SKIP IF NO FURTHER EXTENSIONS          LR,U      R2,9              . HANDLE A MAX OF TEN EXTENSIONS          LA,U      A4,0              . CLEAR BACKUP-FOUND FLAGFL232          LA,U      A1,1              . FORWARD READS WILL BE TABLED          LMJ       X11,GETSEC        . LOCATE NEXT EXTENSION SECTOR          LMJ       A2,DE920          . WE JUST FOUND THIS - ERR IF CAN'T NOW          LA,U      A3,DIBEGN,A0      . A3 = ADDRESS OF CURRENT EXTENSION          DL        A0,M0QUAL,X2      . QUALIFIER FROM MI SECTOR ZERO          LA        A2,M0CYCL,X2      . ABS F-CYCLE          TNE       A2,M2CYCL,A3      .          DTE       A0,M2QUAL,A3      .          J         FL236             . ERROR IF QUAL, CYCLE DON'T MATCH          DL        A0,M0FILE,X2      . FILENAME FROM MI SECTOR ZERO          TNE       A13,M2NUMN,A3     .          DTE       A0,M2FILE,A3      .          J         FL236             . ERROR IF FILENAME, IDENTIFER MISMATCH          JNZ       A4,FL238          . SKIP IF BACKUP INFO ALREADY FOUND          LA        A0,M2WRD7,A3      . WORD 7 OF SECTOR 2+          TOP       A0,(1*/34)        . IS B-BIT (BACKUP) SET?          J         FL238             . NO, SKIP          DL        A0,M2BKIN,A3      . BACKUP WORDS 3,4          DS        A0,M1BI34,X3      . STORE IN MAIN-1 BUFFER          DL        A0,M2BKIN+2,A3    . BACKUP WORDS 5,6          DS        A0,M1BI56,X3      . STORE IN MAIN-1 BUFFER          LA,U      A4,1              . SET BACKUP-FOUND FLAG          J         FL238             .FL236          P$RINT    ERRPRT(23)        . 'FILENAME, TYPE IN MI-EXT INCONSISTENT'          LXI,U     A0,0100+10        . PRINT CONTROL WORD          LXM,U     A0,,X2            . DUMP 1ST 10 WORDS OF MAIN ITEM SECT 0          ER        PRINT$            .          LXM,U     A0,,A3            . DUMP 1ST 10 WORDS OF MAIN ITEM EXT          ER        PRINT$            .          J         FL240             . EXIT MI-EXT LOOP, DON'T REL THIS BUFFFL238          LA,U      A0,,A3            . ADDRESS OF CURRENT EXTENSION          LA        A3,M2MNLK,A3      . LINK TO NEXT EXTENSION          LMJ       X11,RELBUF        . RELEASE CURRENT EXTENSION          JN        A3,FL240          . SKIP IF NO MORE IN CHAIN          LA        A0,A3             . A0 = LINK TO NEXT EXTENSION          JGD       R2,FL232          . PROCESS NEXT EXTENSION          LMJ       A2,DE920          . TOO MANY IN CHAIN, ABORTFL240          LA        A4,M0CYCL,X2      . LOAD CYCLE FROM MAIN ZERO          TG,U      A4,1              . CHECK FOR VALID RANGE, 1-999          TG,U      A4,1000           .          J         FL248             . SKIP IF OUT OF RANGE          ANA,U     A4,1              . ADJUST FOR COMPARE          TG        A4,LIHCYC,X1      . IS CYCLE <= HIGHEST ALLOWED?          J         FL245             .  NO, SKIP          AA,U      A4,32             .  YES, ADJUST FOR 2ND TEST          TG        A4,LIHCYC,X1      . IS CYCLE <= (HIGHEST ALLOWED - 32) ?          J         FL250             .  NO, WITHIN RANGE          J         FL248             .  YES, ERRORFL245          ANA,U     A4,967            . PREPARE FOR CYCLE WRAP CHECK          TG        A4,LIHCYC,X1      . IS CYCLE <= (HIGHEST ALLOWED + 967) ?          J         FL250             .  NO, WITHIN RANGEFL248          P$RINT    ERRPRT(33)        . 'ABS F-CYC OUT OF ALLOWABLE RANGE:'          LXI,U     A0,0100+10        . PRINT CONTROL WORD          LXM,U     A0,,X2            . DUMP 1ST 10 WORDS OF MAIN-ZERO          ER        PRINT$            .          LXM,U     A0,10,X2          . DUMP 2ND 10 WORDS OF MAIN-ZERO          ER        PRINT$            .          J         FL300             . DO NOT OUTPUT THIS FILEFL250          LMJ       X11,OUTPUT        . ALL CHECKS ARE OK, MAKE ENTRY FOR FILE          SZ        LIFLAG,X1         . MARK LEAD ITEM AS 'USED'          LA        A0,LIRNGE,X1      . COUNT OF CYCLES DESCRIBED BY LEAD ITEM          JZ        A0,FL260          . RELEASE IF ALREADY ZERO          ANA,U     A0,1              . DECREMENT          SA        A0,LIRNGE,X1      . REPLACE IN ITEM          JNZ       A0,FL300          . DO NOT RELEASE IF NONZEROFL260          LA,U      A0,,X1            . ADDRESS OF LEAD ITEM          LMJ       X11,RELBUF        . RELEASE LEAD ITEM BUFFERFL300          LA,U      A0,,X3            . ADDRESS OF MAIN ITEM SECTOR ONE          JZ        A0,FL310          . SKIP IF ZERO          LMJ       X11,RELBUF        .  IF NOT, RELEASE MAIN ITEM SECT 1 BUFFFL310          LA,U      A0,,X9            . ADDRESS OF SHARED FILE EXT SECTOR          JZ        A0,FL320          . SKIP IF ZERO          LMJ       X11,RELBUF        .  IF NOT, RELEASE ITFL320          LA,U      A0,,X2            . ADDRESS OF MAIN ITEM SECTOR ZERO          ANX,U     X2,DIBEGN         . ADJUST X2 TO POINT TO START OF BUFFER          LA        A1,DINXFL,X2      . GET LINK TO NEXT MAIN ITEM SECTOR ZERO          LX        X2,PREVX2         . RESTORE PREVIOUS X2          SA        A1,DINXFL,X2      . INSERT NEXT BUFFER IN MAIN ITEM CHAIN          LMJ       X11,RELBUF        . RELEASE USED MAIN ITEM BUFFERFL600          TNZ       DINXFL,X2         . MORE MAIN ITEMS IN CHAIN?          J         FL700             .  NO, FINISHED FOR NOW          LA        A0,RDACT          . ARE FORWARD READS BEING DONE?          JZ        A0,FL620          .  NO, SKIP          TLE,U     A0,RAMIN          .  YES, MORE FLUSH CYCLES ALLOWED?          J         FL700             .   NO, EXIT NOWFL620          JGD       R3,FL100          . CONTINUE FLUSH PROCESS          LMJ       A2,DE920          . INTERNAL ERROR, TOO MANY BUFFS IN CHAIN..         ALL COMPLETE ENTRIES HAVE BEEN OUTPUT AND BUFFERS RELEASED.FL700          LA        A0,RBCT           . COUNT OF RELEASED BUFFERS          TZ        FINAL             . FINAL PASS?          J         FL780             .  YES, SKIP          DSL       A10,72            . ZERO DADT REMOVAL CT, CRIT-FLAG          TNZ,U     0,X8              . HAVE NO BUFFERS BEEN RELEASED,          TZ        ZFIRST            .  AND IS THE ENTIRE FILE STILL GOOD?          J         FL705             .   NO, SKIP          LA,U      A11,1             .   YES, SET CRITICAL-FLAG          J         FL710             . RELEASE MAIN ITEM EXTENSIONS NOWFL705          TEP,U     A15,1*/('Z'-'Q')  .  NO, ARE WE BUFFERING DAD TABLES,          TG,U      A0,MINREL         .   AND HAVE TOO FEW ITEMS BEEN RELEASED?          J         FL770             .    NO, SKIP..         RELEASE SOME BUFFERED DAD TABLES TO MAKE MORE ROOM.         TO STORE OTHER TYPES OF DIRECTORY ITEMS.FL710          LA,U      A5,MINREL         . MINIMUM NUMBER TO RELEASE          ANA,U     A5,1,A0           . SUBTRACT ITEMS ALREADY FLUSHED          LA,U      A4,,X7            . A4 = POINTER TO DASTAB TABLE          ANA,U     A4,DASTAB         . SUBTRACT TOP, = COUNT OF DAS TRACKS          LX        X3,(1,DASTAB)     . X3 = POINTER TO DASTAB TABLEFL720          LA        A3,CDLINK,*X3     . GET LINK TO CHAIN FOR NEXT DIR TRACK          JZ        A3,FL750          . SKIP IF NO MORE ITEMS FOR THIS TRACK          LR,U      R1,64-1           . PROCESS UP TO 64 ITEMSFL730          LA        A0,DIBEGN,A3      . WORD ZERO OF NEXT ITEM          LSSL      A0,1              . SHIFT OFF BIT 35          SSL       A0,32+1           . A0 = BITS 34-32          JNZ       A0,FL740          . SKIP IF ANY OF THESE BITS SET          TE        A12,DIBEGN+M1NUM1,A3 . CHECK FOR MAIN ITEM SECTOR 1          TNE       A13,DIBEGN+M2NUMN,A3 .  OR SECTOR 2+          J         FL734             .  IF SO, RELEASE ONLY IF CRITICAL          TZ        DIRID             . PROCESSING STD DIRECTORY,          TEP       A15,(1*/('Z'-'E')) .  OR SKIP SHARED EXT ITEMS?          J         FL735             .   YES, SKIP          LA        A0,DIBEGN+S1NUM1,A3 .   NO, GET SHARED EXT-SECTOR ID          TE        A0,('*SF.1*')     . IS THIS SHARED FILE EXT SECTOR?          J         FL735             .  NO, OK TO RELEASEFL734          JZ        A11,FL740         . MI- OR SHARED- EXT, REL ONLY IF CRITFL735          LA,U      A0,DIBEGN,A3      . A0 = STARTING DATA ADDRESS OF ITEM          LA        A3,DIPTRF,A3      . GET POINTER TO NEXT ITEM          LMJ       X11,RELBUF        . RELEASE CURRENT ITEM, NEED MORE MEMORY          AA,U      A10,1             . INCREMENT RELEASE COUNT          JGD       A5,FL745          . LOOP AHEAD UNTIL ENOUGH ITEMS RELEASED          J         FL760             .  WHEN THIS HAPPENS, FINISH UPFL740          LA        A3,DIPTRF,A3      . GET POINTER TO NEXT ITEMFL745          JZ        A3,FL750          . SKIP IF NO MORE ITEMS FOR THIS TRACK          JGD       R1,FL730          . LOOP BACK FOR MORE          LMJ       A2,DE920          .  IF > 64 ITEMS/TRACK, SOMETHING WRONGFL750          JGD       A4,FL720          . LOOP BACK FOR OTHER DIR TRACKSFL760          AA        A10,RDTCT         . A10 = TOTAL DAD TABLES RELEASED          SA        A10,RDTCT         .  UPDATE TOTAL WORD          LA        A0,RBCT           . TOTAL BUFFERS REL FOR THIS FLUSH CALLFL770          TLE       A0,RBMIN          . REL FEWER THIS TIME THAN EVER BEFORE?          SA        A0,RBMIN          .  YES, SAVE MINIMUM REL/FLUSH CALL          AA        A0,RBTOT          . A0 = TOTAL RELEASED BUFFERS          SA        A0,RBTOT          .  UPDATE TOTAL WORDFL780          LX        X11,FLSX11        .          J         0,X11             . RETURN/.. ROUTINE TO BUILD AN OUTPUT ITEM FROM A COMPLETE CHAIN OF. INCORE ITEMS.OUTPUT          SX        X11,OUTX11        . SAVE RETURN          LA,U      A1,RECORD         . A1 = SORT RECORD ADDRESS          TEP,U     A15,1*/('Z'-'S')  . ARE WE SORTING OUTPUT?          J         OT020             .  YES, SKIP          D$BO      WPKT  DE910       .  NO, GET NEXT D/B OUTPUT BUFF ADDRESSOT020          LX,U      X10,,A1           . X10 = OUTPUT BUFFER (28 WORDS)          LA,U      A0,(0)            .          LXI,U     A1,1              .          LR,U      R1,28             .          BT        A1,,*A0           . CLEAR OUTPUT BUFFER          DL        A0,M0QUAL,X2      . QUALIFIER          DL        A2,M0FILE,X2      . FILENAME          LA        A4,M0CYCL,X2      . CYCLE          AND,U     A4,07777          . CYCLE TO A5 LOWER          LA        A4,M0DESC,X2      . DESCRIPTOR BITS          LSSL      A4,24             .          SSL       A4,24             . CLEAR SIGN BITS          LA        A10,LITYPE,X1     . FILE TYPE          DS        A0,MFQUAL,X10     .  STORE IN OUTPUT BUFFER          DS        A2,MFFILE,X10     .          SA        A5,MFCYCL,X10     .          SA        A4,MFDESC,X10     .          SA        A10,MFTYPE,X10    .          DL        A0,M0ACCT,X2      . ACCOUNT NUMBER          DL        A2,M0PROJ,X2      . PROJECT ID          LA        A4,LIRKEY,X1      . READ KEY          LA        A5,LIWKEY,X1      . WRITE KEY          TEP,U     A15,1*/('Z'-'K')  . ARE KEYS TO BE LEFT ALONE?          J         OT100             .  YES, SKIP          TE        A4,('      ')     .          LA        A4,('//////')     .  NO, SLASH READ KEY IF NON-BLANK          TE        A5,('      ')     .          LA        A5,('//////')     .  SLASH WRITE KEY IF NON-BLANKOT100          DS        A0,MFACCT,X10     . STORE IN OUTPUT          DS        A2,MFPROJ,X10     .          SA        A4,MFRKEY,X10     .          SA        A5,MFWKEY,X10     .          LA        A0,LIDRID,X1      . DIRECTORY ID (0=STD, 1=SHR)          TNE       A0,DIRID          . IS IT EXPECTED VALUE?          J         OT110             .  YES, SKIP          P$RINT    ERRPRT(32)        .  NO, 'INCONSISTENT DIRECTORY-ID:'          LXI,U     A0,0100+12        .          LXM,U     A0,,X1            .          ER        PRINT$            . PRINT 1ST 12 WORDS OF OFFENDING LI          LA        A0,DIRID          . GET CORRECT DIRECTORY-IDOT110          SA        A0,MFDRID,X10     . STORE IN OUTPUT          LA        A0,M0DISF,X2      . DISABLE FLAGS          LA        A1,M0PCHR,X2      . PCHAR-FLAGS          LA        A2,M0INHI,X2      . INHIBIT BITS          LA        A3,M0ASGS,X2      . ASSIGN COUNT          LA        A4,M0NBRA,X2      . COUNT OF RUNS CURRENTLY ASSIGNED          TG,U      A4,64             .  MAX = 63          LA,U      A4,63             .          LA        A5,M0FILF,X2      . FILE-FLAGS          SA        A0,MFDISF,X10     .  STORE IN OUTPUT          SA        A1,MFPCHR,X10     .          SA        A2,MFINHI,X10     .          SA        A3,MFASGS,X10     .          SA        A4,MFNBRA,X10     .          SA        A5,MFFILF,X10     .          LA        A0,M0LILK,X2      . LINK TO LEAD ITEM          LSSL      A0,6              .          SSL       A0,24             . LDAT INDEX TO A0 LOWER          LA,U      A1,,X2            . ADDRESS OF MAIN ITEM SECTOR ZERO          ANA,U     A1,DIBEGN         . ADJUST TO POINT TO START OF BUFFER          LA        A1,DILDAT,A1      . LDAT INDEX OF MAIN-ZERO          LA        A2,M0M1LK,X2      . LINK TO MAIN ITEM SECTOR ONE          LSSL      A2,6              .          SSL       A2,24             . LDAT INDEX TO A2 LOWER          LA        A3,M0DADL,X2      . LINK TO FIRST DAD TABLE          JP        A3,$+2            .  SKIP IF VALID LINK          LA,U      A3,0              .   IF NOT, USE ZERO          LSSL      A3,6              .          DSL       A3,24             . LDAT INDEX TO A3 LOWER          SSL       A4,18             . REMAINDER OF ADDRESS TO A4 LOWER          SA        A0,MFLILD,X10     . STORE IN OUTPUT: LEAD ITEM LDAT INDEX          SA        A1,MFM0LD,X10     .  MAIN ZERO LDAT INDEX          SA        A2,MFM1LD,X10     .  MAIN ONE LDAT INDEX          SA        A3,MFD1LD,X10     .  FIRST DADT LDAT INDEX          SA        A4,MFD1LK,X10     .   AND REMAINDER OF ADDRESS          LA        A0,M0MNEM,X2      . ASSIGN MNEMONIC          LA        A1,M0CATT,X2      . CATALOG DATE/DIME          LA        A2,M0REFT,X2      . LAST REFERENCE DATE/TIME          SA        A0,MFMNEM,X10     .  STORE IN OUTPUT          SA        A1,MFCATT,X10     .          SA        A2,MFREFT,X10     .          TZ        DIRID             . PROCESSING SHARED DIRECTORY?          J         OT130             .  YES, SKIP          TZ        M0SYMQ,X2         . IS FILE IN STD-SYMBIONT QUEUE?          SP1       MFSYMF,X10        .  YES, SET QUEUED FLAG          J         OT140             .OT130          TNZ,U     0,X9              . IS THERE A SHARED FILE EXT SECTOR?          J         OT140             .  NO, SKIP          TNZ       S1SQHA,X9         . IS FILE IN SYMBIONT QUEUE ON HOST A,          TZ        S1SQHB,X9         .  OR HOST B?          SP1       MFSYMF,X10        .   YES, SET QUEUED FLAG          TNZ       S1SQHC,X9         . IS FILE IN SYMBIONT QUEUE ON HOST C,          TZ        S1SQHD,X9         .  OR HOST D?          SP1       MFSYMF,X10        .   YES, SET QUEUED FLAGOT140          TNE,U     A10,1             . IS THIS A TAPE FILE?          J         OT300             .  YES, SKIP.. PROCESS DISC FILE INFO.          LA        A0,MSCT           . COUNT OF DISC FILES          AA,U      A0,1              .  INCREMENT          SA        A0,MSCT           .  AND REPLACE          LA        A0,M0MXGR,X2      . MAXIMUM GRANULES          LA        A1,M0HITR,X2      . HIGHEST TRACK WRITTEN          LA,U      A2,0              . A2 = MFTOBK          TZ        M0TOFW,X2         . IS TIME-OF-FIRST-WRITE-AFTER-BACKUP = 0?          LA,U      A2,1              .  NO, MFTOBK WILL BE SET TO ONE          LA        A3,M0NOGR,X2      . NUMBER GRANULES QUOTA GROUP 1I DO 7 ,  AA        A3,M0NOGR+I,X2    .  ADD NUMBER FROM GROUPS 2-8          LA        A4,M0PCHR,X2      . PCHAR FLAGS          TEP,U     A4,MMPOGR         . POSITION GRANULARITY?          LSSL      A3,6              .  YES, CONVERT TO TRACKS          TG        A3,(01000000)     . MORE THAN 262K TRACKS?          LA        A3,(0777777)      .  YES, LOAD MAX TO FIT IN HALFWORD          LA        A4,M0INIT,X2      . INITIAL RESERVE          SA        A0,MFMXGR,X10     .  STORE IN OUTPUT          SA        A1,MFHITR,X10     .          SA        A2,MFTOBK,X10     .          SA        A3,MFNOTR,X10     .          SA        A4,MFINIT,X10     .          J         OT400             . GO PROCESS BACKUP INFO.. PROCESS TAPE FILE INFO.OT300          LA        A0,TPCT           . COUNT OF TAPE FILES (CATALOGED)          AA,U      A0,1              .  INCREMENT          SA        A0,TPCT           .  AND REPLACE          LA        A0,M0DESC,X2      . DESCRIPTOR BITS          AND,U     A0,-MMJOPT        . ZERO BIT WE WILL USE FOR J-OPTION          LA        A0,M0TPLB,X2      . GET LABELING FLAGS          TEP,U     A0,040            . IS BIT 5 SET?          AA,U      A1,MMJOPT         .  YES, SET J-OPTION IN DESC-BITS          SA        A1,MFDESC,X10     . REPLACE DESCRIPTOR BITS          LA        A0,M0TPCT,X2      . REEL COUNT          TLE,U     A0,64             . MORE THAN 63?          J         OT340             .  NO, SKIP          P$RINT    ERRPRT(13)        .  YES, 'REEL COUNT EXCEEDED, MAX=63'          LXI,U     A0,0100+10        .          LXM,U     A0,,X2            .          ER        PRINT$            . PRINT 1ST TEN WORDS OF MAIN-ZERO          LA,U      A0,63             . USE 63 AS REEL COUNTOT340          SA        A0,MFTPCT,X10     . STORE REEL COUNT          LA        A0,M0TPFM,X2      . TAPE FORMAT BITS          LA        A1,M0TPDN,X2      . DENSITY BITS          LA        A2,M0TPR1,X2      . REEL 1          LA        A3,M0TPR2,X2      . REEL 2          SA        A0,MFTPFM,X10     .  STORE IN OUTPUT          SA        A1,MFTPDN,X10     .          SA        A2,MFTPR1,X10     .          SA        A3,MFTPR2,X10     ... PROCESS BACKUP INFO (MAIN ITEM SECTOR 1).OT400          TNZ,U     0,X3              . IS THERE A MAIN ITEM SECTOR ONE?          J         OT600             .  NO, SKIP          LA        A5,M0DESC,X2      . DESCRIPTOR BITS          TOP,U     A5,MMBKUP         . IS FILE BACKED UP?          J         OT480             . NO, DO NOT SAVE BACKUP INFORMATION          LA        A4,M1BUWC,X3      . GET COUNT OF BACKUP WORDS          TG,U      A4,7              .          LA,U      A4,6              . ALLOW A MAX OF 6 FOR FOLLOWING TESTS          JGD       A4,$+2            . DECREMENT FOR LOOP          J         OT460             . SKIP IF ZERO OR NEGATIVE          LA,U      A0,M1BIST,X3      . START ADDR OF BACKUP INFO IN MAIN-1          LXI,U     A0,1              . LOOP INCREMENT          LA,U      A1,MFBUR1,X10     . START ADDR OF OUTPUT REEL TABLE          LXI,U     A1,1              .          LA,U      A3,0              . INIT REEL COUNT = 0OT420          TNZ,S1    0,A0              . START OF LEVEL-2 INFO?          J         OT440             .  YES, SKIP          LA        A2,,*A0           . GET NEXT BACKUP WORD          TLE,U     A3,4              . SAVE IN OUTPUT          SA        A2,,*A1           .  UNLESS 4 REELS ALREADY SAVED          AA,U      A3,1              . INCREMENT REEL COUNT          JGD       A4,OT420          . BACK FOR MORE          LA        A3,M1BUWC,X3      . SET A3 TO FULL COUNT IF NO L-2 FOUND          TG,U      A3,64             .          LA,U      A3,63             . ALLOW A MAX OF 63OT440          SA        A3,MFBUNO,X10     . SAVE REEL COUNTOT460          LA        A0,M1BKUT,X3      . DATE/TIME OF BACKUP          LA        A1,M1STFP,X3      . STARTING POSITION ON 1ST REEL          LSSL      A1,24             .          SSL       A1,24             . CLEAR SIGN EXTENSION          SA        A0,MFBKUT,X10     . STORE IN OUTPUT BUFFER          SA        A1,MFSTFP,X10     .          TNE,U     A10,1             . IS THIS A TAPE FILE?          J         OT600             .  YES, SKIP          TOP,U     A5,MMUNLD         . IS FILE UNLOADED?          J         OT480             . NO, SKIP          LA        A0,M1NOBL,X3      . NUMBER OF BLOCKS SAVED ON TAPE          TG        A0,MFNOTR,X10     . IS BLOCKS SAVED > NBR TRACKS FROM M0?          SA        A0,MFNOTR,X10     .  YES, REPLACE TRACK COUNTOT480          TE,U      A10,040           . IS FILE ON R-DISC?          J         OT600             . NO, SKIP          LA        A0,M1PKCT,X3      . PACK COUNT          LA        A1,M1PKID,X3      . FIRST PACKID          SA        A0,MFPKCT,X10     . STORE IN OUTPUT          SA        A1,MFPKID,X10     .OT600          TOP,U     A15,1*/('Z'-'S')  . ARE WE SORTING OUTPUT?          J         OT800             .  NO, SKIP          R$REL     (28,RECORD)       .  YES, RELEASE COMPLETED RECORDOT800          AA,U      A14,1             . INCREMENT TOTAL FILE COUNT          LX        X11,OUTX11        .          J         0,X11             . RETURN/.. ROUTINE TO OUTPUT ONE OR MORE DAD TABLES FOR A FILE.OUTDAD          SX        X11,ODSX11        . SAVE RETURN          LA        A9,MFD1LD,X10     . LDAT INDEX OF 1ST DADT          JZ        A9,OD800          . IF ZERO, NO DADTS FOR THIS FILE          LSSL      A9,18             . SHIFT TO CORR POS FOR MFDF ADDR          AA        A9,MFD1LK,X10     . ADD DADT LINK TO FORM COMPLETE ADDR          DL        A0,MFQUAL,X10     . QUALIFIER          DL        A2,MFFILE,X10     . FILENAME          LA        A4,MFCYCL,X10     . F-CYCLE          DS        A0,LASTF          .  STORE FOR POSSIBLE USE IN ERR MESSAGE          DS        A2,LASTF+2        .          SA        A4,LASTF+4        .          SZ        SPANFLG           . INIT SPAN-PACK FLAG TO ZERO          LA        A0,MFTYPE,X10     . GET FILE TYPE          LXI,U     A3,1              . FOR FUTURE BLOCK TRANSFER          LA,U      A8,0              . INIT R-PACK LDAT INDEX = 0          DSL       A10,72            . ZERO PACK-ID, DADT COUNT          TNE,U     A0,MMFIXD         . IS THIS A FIXED DISC FILE, AND          TOP       A15,(1*/('Z'-'A')) .  IS FIXED DADT OUTPUT REQUESTED?          J         OD100             .    NO, SKIP          J         OD150             .    YES, OUTPUT DADTS FOR THIS FILEOD100          TNE,U     A0,MMTAPE         . IS THIS A TAPE FILE, AND          TOP,U     A15,1*/('Z'-'T')  .  IS TAPE REEL TABLE OUTPUT REQUESTED?          J         OD120             .   NO, SKIP          J         OD200             .   YES, OUTPUT REEL TABLES FOR THIS FILEOD120          TNE,U     A0,MMREMD         . IS THIS AN R-DISC FILE, AND          TOP       A15,(1*/('Z'-'B')) .  IS R-DISC DADT OUTPUT REQUESTED?          J         OD800             .    NO, NO MORE PROCESSING FOR THIS FILE          LA        A10,MFPKID,X10    .    YES, GET FIRST PACK-ID          TOP,U     A15,1*/('Z'-'R')  . IS R-DISC LDAT SUBSTITUTION TO BE DONE?          J         OD150             .  NO, SKIP          LA        A0,(1,0)          .  YES, SET UP FOR TABLE SEARCH          LR,U      R1,MAXLDT         . MAXLDT = LENGTH OF PACK-ID TABLE          SE        A10,PIDTBL,*A0    . SEARCH TABLE FOR MATCH ON THIS PACK          J         OD550             .  NO FIND, ERROR          JZ        A10,OD550         .  ERROR ALSO IF PACK-ID IS ZERO          LA,U      A8,,A0            . A8 = LDAT INDEX OF FIRST PACK          LA,U      A10,0             . ZERO PACK-IDOD150          LA        A0,MFDESC,X10     . DESCRIPTOR BITS          TEP,U     A0,MMUNLD         . IS THIS FILE UNLOADED?          J         OD800             .  YES, DO NOT OUTPUT DAD TABLES FOR ITOD200          LA        A0,A9             . LINK TO NEXT DADT          LA,U      A1,0              . FORWARD READS WILL NOT BE TABLED          LMJ       X11,GETSEC        . CALL GETSEC TO RETRIEVE DATA          J         OD500             .  SKIP IF ERROR RETURN FROM GETSEC          AA,U      A11,1             . INCREMENT DADT COUNT          LXM,U     A3,DIBEGN,A0      . A3 = START ADDRESS OF DADT DATA          JZ        A8,OD300          . SKIP IF NO R-DISC LDAT SUBSTITUTION          LA,U      A2,4-3,A3         . SET UP A2 = POINTER TO DAD ENTRIES          LXI,U     A2,3              . FOR LOOP INCREMENT, 3 WORDS/ENTRY          LR,U      R1,7              . UP TO 8 DADS IN ONE TABLEOD250          LA,XH2    A0,2+3,*A2        . GET DEVICE INDEX          LA,H1     A1,2,A2           .  AND FLAG BITS          JN        A0,OD280          . SKIP IF HOLE DAD          TOP,U     A1,2              . CHECK FOR R-DISC FLAG          J         OD520             .  ERROR IF THIS IS NOT SET          TNE,U     A0,1              . DEVICE INDEX ONE?          J         OD270             .  YES, SUBSTITUTE CORRECT LDAT INDEX          SZ        0,A2              .  NO, ZERO DEVICE REL ADDR          LA,U      A0,0400000        .   AND MARK AS HOLE DAD          SA,H2     A0,2,A2           .          SP1       SPANFLG           . SET R-DISC SPAN DEVICE FLAG          J         OD275             . CONTINUE WITH OTHER DAD ENTRIESOD270          SA,H2     A8,2,A2           . STORE LDAT INDEX IF DEVICE INDEX = 1OD275          ANA,U     A1,2              . REMOVE R-DISC FLAG BIT          SA,H1     A1,2,A2           .  AND REPLACE REMAINING FLAGSOD280          TOP,U     A1,4              . IS THIS THE LAST DAD IN THE TABLE?          JGD       R1,OD250          .  NO, LOOP BACK FOR MOREOD300          D$BO      WPKT  DE910       . GET ADDRESS OF NEXT OUTPUT RECORD          LXI,U     A1,1              . INCREMENT FOR TRANSFER          SSL       A9,18             . SHIFT LDAT INDEX TO A9 LOWER          DS        A9,,A1            . STORE LDAT, PACKID/0 IN OUT WDS 0,1          LA        A9,DTLINK,A3      . GET LINK TO NEXT DADT IN CHAIN          LR,U      R1,26             . TRANSFER 26 WORDS (ALL EXCEPT 0,1)          BT        A1,2,*A3          . MOVE WORDS 2-27 TO OUTPUT          JP        A9,OD200          . BACK TO TOP IF MORE DADTS IN CHAIN          TNZ       SPANFLG           . ALL DONE - DOES FILE SPAN R-PACKS?          J         OD700             .  NO, EXIT WITHOUT ERROR          P$RINT    ERRPRT(21)        .  YES, 'R-DISC LDATS>1 NOT SUBSTITUTED'          E$DIT     EPKT              . OPEN EDIT          J         OD600             . GO DISPLAY AFFECTED FILEOD500          E$DIT     EPKT              . OPEN EDIT          E$MSG     BADLNK            . 'BAD LINK OF '          E$OCTF    12,A9             . EDIT OCTAL LINK VALUE          E$MSGR                      . ' FROM DAD TABLE #'          J         OD530             . FINISH UP FURTHER ONOD520          E$DIT     EPKT              . OPEN EDIT          E$MSG     BADDAD            . 'R-PACK DAD AMBIGUITY, DAD TABLE #'OD530          E$DECV    A11               . EDIT DAD TABLE NUMBER          E$MSGR                      . ', FILE '          J         OD600             . GO DISPLAY AFFECTED FILEOD550          E$DIT     EPKT              . OPEN EDIT          E$MSG     BADPID            . 'PACKID UNKNOWN, UNMOUNTED FOR FILE 'OD600          E$FD2     LASTF             . QUALIFIER          E$CHAR    '*'               .          E$FD2     LASTF+2           . FILENAME          E$CHAR    '('               .          E$DECV    LASTF+4           . F-CYCLE          E$CHAR    ')'               .          P$RINT    (0200+12,LINE)    . PRINT ERROR MESSAGE CONTAINING FILENAME          E$DITX                      . CLOSE EDITOD700          TG        A11,MAXDAD        . MORE DADTS/THIS FILE THAN ANY BEFORE?          SA        A11,MAXDAD        .  YES, STORE MAXIMUM/FILE          AA        A11,DADCT         . ADD CUMULATIVE TOTAL          SA        A11,DADCT         .  AND UPDATEOD800          LX        X11,ODSX11        .          J         0,X11             . RETURN/... ROUTINE TO SEARCH FOR AN INCORE ENTRY, A0=LINK.  IF THE CORRESPONDING <MDLINK> IS NONZERO, THE MFD FILE CAN BE READ ALSO.GETSEC          LSSL      A0,6              . SHIFT OFF UPPER 6 BITS OF ADDRESS          SA        A0,GSADDR         . SAVE ADDRESS FOR RATBL LOOKUP          SA        A1,GSTBFL         . SAVE TABLE FORWARD-READ FLAG          DSL       A0,18+6           . SHIFT LDAT INDEX TO A0 LOWER          DSL       A1,24             . SHIFT TRACK NUMBER TO A1 LOWER          SSL       A2,30             . SHIFT SECTOR NUMBER TO A2 LOWER          TG,U      A0,1              . IS LDAT WITHIN LEGAL RANGE?          TG,U      A0,MAXLDT+1       .          J         GS900             .  NO, ERROR          TZ        DSLINK,A0         . IS THIS AN UNKNOWN LDAT, OR          TG        A1,DSCNT,A0       .  IS THE TRACK NUMBER OUT OF RANGE?          J         GS900             .   YES, ERROR          AA        A1,DSLINK,A0      . COMPUTE A1 = INDEX INTO DASTAB TABLE          LA        A0,CDLINK,A1      . GET LINK TO INCORE ENTRY          JZ        A0,GS400          . IF ZERO, ITEM IS NOT IN MEMORY          LR,U      R1,64-1           . LOOP 64 TIMESGS200          TNE       A2,DISECT,A0      . ARE WE POINTING TO CORRECT SECTOR?          J         GS800             .  YES, RETURN SUCCESS          LA        A0,DIPTRF,A0      .  NO, GET LINK TO NEXT BUFFER IN CHAIN          JZ        A0,GS400          .   IF ZERO, ITEM IS NOT IN MEMORY          JGD       R1,GS200          . LOOP BACK FOR NEXT ENTRY          LMJ       A2,DE920          .  SHOULD NEVER BE >64 ITEMS IN CHAINGS400          LA        A1,MDLINK,A1      . GET LINK TO TDIR$ TRACK          JZ        A1,GS900          .  IF ZERO, CANNOT LOCATE ITEM          TG        A1,CURTRK         . IS ADDRESS LESS THAN CURRENT TRK,          TNZ       GSTBFL            .  OR IS TABLING NOT REQUIRED?          J         GS450             .   YES, READ ITEM NOW          TE        A1,CURTRK         . DON'T DO FWD READ AT CURRENT TRACK          TNZ       RDACT             . THIS IS FWD READ, ARE THEY ENABLED?          J         GS900             .  NO, RETURN NO FIND          INC       RDATOT            .  YES, INCREMENT FORWARD READ COUNT          NOP                         .          LSSL      A1,6              . CONVERT TDIR$ TRACK ADDRESS TO SECTOR          AA,U      A1,,A2            .  ADD SECTOR OFFSET FOR THIS ITEM          LA        A0,RATBCT         . ENTRY COUNT OF OPEN FWD READ TABLE          TG,U      A0,RATBMX         . IS THERE ROOM FOR ANOTHER ENTRY?          LMJ       A2,DE920          .  NO, ABORT - THIS SHOULD NEVER HAPPEN          LA        A2,GSADDR         .  YES, A2 = MFDF ADDRESS << 6          SA        A2,RATBL,A0       . SAVE IN NEXT OPEN SLOT          AA,U      A0,1              . INCREMENT          SA        A0,RATBCT         .  AND SAVE UPDATED COUNT          TG        A0,RATBMU         . IS THIS MORE THAN WE'VE NEEDED BEFORE?          SA        A0,RATBMU         .  YES, SAVE HIGH WATER MARK          DEC       RDACT             . DECREMENT REMAINING FORWARD READ CT          NOP                         .  FOR THIS FLUSH CYCLE          J         GS460             . GO READ ITEM NOWGS450          LSSL      A1,6              . CONVERT TDIR$ TRACK ADDRESS TO SECTOR          AA,U      A1,,A2            .  ADD SECTOR OFFSET FOR THIS ITEMGS460          LA        A0,GWPTR          . POINTER TO PREVIOUS LOCAL BUFFER          AA,U      A0,DIBEGN+28      . INCREMENT TO NEXT AVAIL ADDRESS          TG,U      A0,GWMAX          . ARE WE AT END OF RANGE?          LA,U      A0,GWBUFF         .  YES, START AT TOP AGAIN          SA        A0,GWPTR          . SAVE POINTER FOR NEXT TIME          SZ        DIPTRB,A0         . NO BACK POINTER FOR LOCAL BUFFER          AA,U      A0,DIBEGN         . READ ITEM INTO BUFF+DIBEGN          LXI,U     A0,28             . READ 28 WORDS          DS        A0,RDMFD+4        . STORE IN TDIR$ READ PACKET          TNZ       ZFIRST            . ARE WE CURRENTLY CLEARING TDIR$?          J         GS500             .  NO, SKIP          ANA,U     A1,64             .  YES, COMPUTE COMPARISON ADDRESS          TG        A1,ZERPKT+5       . HAS THIS ADDRESS BEEN CLEARED YET?          J         GS500             .  NO, SKIP          P$RINT    ERRPRT(22)        .  YES, 'INT ERR - READING ZEROED DATA'          DL        A0,RDMFD+4        . RESTORE REGISTERS          ER        ERR$              .  AND DIEGS500          I$OW      RDMFD             . READ DIRECTORY ITEM FROM TDIR$          TZ,S1     RDMFD+3           . CHECK STATUS          J         GS900             .  RETURN ERROR IF NONZERO I/O STATUS          LA        A0,GWPTR          . LOAD ADDRESS OF BUFFER TO RETURNGS800          J         1,X11             . RETURN FINDGS900          J         0,X11             . RETURN NO FIND/... INITIALIZE A CHAIN OF BUFFERS.INIT          LXI,U     A0,DIBFLN         . LOOP INCREMENT = BUFFER SIZE          DSL       A1,36             . A1 = WORDS AVAIL, PREPARE FOR DIVIDE          DI,U      A1,DIBFLN         . COMPUTE A1 = BUFFERS AVAILABLE          SA        A1,DIBFCT         . STORE FOR LATER PRINTED OUTPUT          SA        A1,RBMIN          . INITIALIZE MINIMUM REL BUFF/FLUSH CALL          ANA,U     A1,2              . ADJUST FOR JGD AND FIRST BUFFER          SZ        0,A0              . ZERO LINK IN FIRST BUFFERIN100          SA        A0,DIBFLN+DINXFB,*A0 . STORE LINK TO PREV BUFF IN NEXT BUFF          JGD       A1,IN100          . LOOP BACK FOR OTHER BUFFERS          J         0,X11             . RETURN... RELEASE A BUFFER TO THE GENERAL BUFFER POOL.RELBUF          ANA,U     A0,DIBEGN         . POINT A0 TO START OF WHOLE BUFFER          LA        A1,DIPTRB,A0      . GET POINTER TO PREVIOUS BUFFER          JZ        A1,RB200          . IF ZERO, THIS IS NOT A CHAINED BUFF          LA        A2,DIPTRF,A0      . GET POINTER TO NEXT BUFFER          SA        A2,DIPTRF,A1      . STORE IN PREVIOUS BUFFER FWD LINK          JZ        A2,RB100          . SKIP IF NO FORWARD LINK          SA        A1,DIPTRB,A2      .  OTHERWISE LINK PREV BUFF TO NEXT BUFFRB100          SX        X8,DINXFB,A0      . SAVE LINK TO NEXT FREE BUFFER          LX,U      X8,,A0            . RELEASED BUFF BECOMES NEXT FREE BUFFERRB200          INC       RBCT              . INCREMENT COUNT OF RELEASED BUFFERS          NOP                         .          J         0,X11             . RETURN/.. ROUTINE TO CREATE SIMULATED 'DAD TABLES' FOR DIRECTORY AND. HW/SW MBT'S. USED BY DIRECTORY VERIFICATION PROGRAM.MISCOUT          LA        A0,(30,MCBUFF)    .          SA        A0,RDMFD+4        . SET UP TO READ INTO MCBUFF          LXI,U     X4,3              . USED BY MDOUT TO INDEX TABLES          LX        X8,(1,0)          . CURRENT LDAT INDEX          LA,U      A6,'*D*'          . SENTINAL FOR DIRECTORY TABLES          LA,U      A8,1792           . ALL DIR DADS ARE 1 TRACK          LR,U      R4,0              . FORCE MDOUT TO GET A BUFFER          LR,U      R8,MAXLDT-1       . LOOP CTR FOR DIR TRK OUTPUTMC100          LA        A0,DSLINK+1,*X8   . NEXT LDAT PTR          JZ        A0,MC300          . SKIP IF ZERO          LA        A9,MDLINK,A0      . FIRST DAS TRK ADDR IN TDIR$          LSSL      A9,6              . CONVERT TO SECTOR          SA        A9,RDMFD+5        .          I$OW      RDMFD             . READ DAS + 2 WORDS OF HDR TABLE          TZ,S1     RDMFD+3           .          LMJ       A2,MC900          .          LA,U      A0,16             . OFFSET FOR SW MBT FOR DRUM DEV          TZ        DRMIND-1,X8       . IS THIS A DRUM?          J         MC130             . YES, USE OFFSET 16, SKIP 1ST TRK          LA        A7,MCBUFF+28      . ADDR OF MBT'S          SSL       A7,6              . FIRST DIR TRK ADDR FOR LDAT          MSI,U     A7,1792           . CONV TO WORD ADDR          LMJ       X10,MDOUT         . OUT TO DAD TBL          LA        A0,MCBUFF+29      . ADDR OF SW MBT          ANA       A0,MCBUFF+28      . MAKE RELATIVE TO HW MBT          AA,S6     A0,MCBUFF+28      . ADJUST FOR SECTOR OFFSET          LXI,S6    A0,MCBUFF+28      . ADDR OF HW MBTMC130          SA        A0,MBTADR-1,X8    . SAVE FOR LATER REFERENCEMC140          LX        X5,(3,3)          . INDEX INTO DAS          LR,U      R5,8              . UP TO 9 ENTRIESMC150          LA        A7,MCBUFF,*X5     . ADDR OF NXT DIR TRK          JN        A7,MC200          . NOT THERE IF NEG          LMJ       X10,MDOUT         . OUT TO DAD TBL          AA,U      A9,64             . INCR TDIR$ ADDR FOR NXT READMC200          JGD       R5,MC150          . LOOP FOR REST OF ENTRIES          JN        A7,MC300          . IF LAST IS NEG, GO TO NXT LDAT          SA        A9,RDMFD+5        .          I$OW      RDMFD             . READ NEXT DAS          TNZ,S1    RDMFD+3           .          TP        MCBUFF            . ERROR IF FIRST WORD IS NEG!!          LMJ       A2,MC900          .          J         MC140             . GO PROCESS THIS DASMC300          JGD       R8,MC100          . LOOP BACK FOR OTHER LDATS          ANX,U     X4,3              . BACK UP DAD POINTER          LA,U      A0,4              .          SA,H1     A0,2,X4           . MARK AS LAST DAD IN TABLE..    NOW PROCESS MBT'S.          LX,U      X7,0              . FIRST PASS IS HW MBT          LA,U      A6,'*H*'          . SENTINAL          LR,U      R7,1              . LOOP BACK ONCE FOR SW MBT          J         MC360             .MC350          LX,U      X7,1              . SECOND PASS IS SW MBT          LA,U      A6,'*S*'          . SENTINALMC360          LX        X8,(1,0)          . LDAT INDEX          LR,U      R4,0              . FORCE MDOUT INTO NEXT BUFFER          LR,U      R8,MAXLDT-1       . LOOP COUNTERMC400          LA        A0,DSLINK+1,*X8   . INDEX INTO DASTAB          JZ        A0,MC600          . SKIP IF ZERO          TNZ       DRMIND-1,X8       . IS THIS A DRUM?          J         MC420             . NO, SKIP          TE,U      A6,'*S*'          . YES - PROCESSING SW MBT?          J         MC600             . NOPE, SKIP - DRUMS HAVE NO HW MBTMC420          LA        A0,MDLINK,A0      . FIRST DIR TRK OF THIS LDAT          LSSL      A0,6              . CONVERT TO SECTOR          EX        MCADD,X7          . ADD EITHER HW OR SW OFFSET          SA        A0,RDMFD+5        .          LA        A9,MBTLEN-1,X8    . LENGTH OF MBT          TNZ       A9                .          LMJ       A2,MC900          . ERROR IF ZERO          AA,U      A9,1              . INCREMENT FOR CONTROL WORD          SA,H1     A9,RDMFD+4        .          I$OW      RDMFD             .          ANA,U     A9,2              . DECR FOR LOOP          LX        X5,(1,MCBUFF+1)   . MBT INDEX          DSL       A7,72             . INITIALIZE DRA(A7) & WORD CT(A8)MC450          LA        A4,,*X5           . GET NEXT BIT MAP          LR,U      R6,31             . 32 BITS/WORDMC500          JN        A4,MC530          . IF 1, TRK IS ALLOC/DOWN          JZ        A8,MC540          . DON'T OUTPUT IF ALREADY SKIPPING          LMJ       X10,MDOUT         . OUTPUT TRACK GROUP ALL/DWN          AA        A7,A8             . UPDATE DRA          LA,U      A8,0              . SET TRK COUNT=0          J         MC540             .MC530          AA,U      A8,1792           . INCR TRK COUNT ALL/DWN          J         MC550             .MC540          AA,U      A7,1792           . INCREMENT DRA IF NOT ALL/DWNMC550          LSSL      A4,1              .          JGD       R6,MC500          . LOOP BACK FOR OTHER BITS          JGD       A9,MC450          . LOOP BACK FOR OTHER WORDS          JZ        A8,MC600          . TEST IF CURRENTLY SKIPPING          LMJ       X10,MDOUT         . IF NOT, OUT LAST 'DAD' FOR MBTMC600          JGD       R8,MC400          . LOOP BACK FOR OTHER LDATS          ANX,U     X4,3              . BACK UP DAD PTR          LA,U      A0,4              .          SA,H1     A0,2,X4           . MARK LAST DAD IN TABLE          JGD       R7,MC350          . LOOP BACK ONCE FOR SW MBT'S          J         0,X9              . RETURN TO OUTPUT FILE INFOMC900          FATERR    20                . BITE THE BIG ONE..  SUBROUTINE TO OUTPUT ONE DAD ENTRY..  WHEN 8 DAD ENTRIES HAVE BEEN PROCESSED, A NEW.  DAD TABLE IS CREATED AUTOMATICALLY..MDOUT          JGD       R4,MT100          .          D$BO      WPKT  DE910       . GET SPACE FOR NXT DAD TBL          LXM,U     X4,4,A1           . ADDR OF FIRST DAD          LR,U      R4,7              . LOOP CTR          SA        A6,,A1            . SENTINALI DO 3 ,  SZ        I,A1              . CLR WORDS 1-3MT100          DS        A7,,X4            . SAVE DRA(A7) & WORD COUNT(A8)          SZ,H1     2,X4              . CLEAR DAD FLAGS          LA,U      A0,4              .          TNZ       R4                .          SA,H1     A0,2,X4           . SET LAST DAD FLG IF LAST IN TBL          SX,H2     X8,2,*X4          . SAVE LDAT INDEX          J         0,X10             . RETURN.MCADD          AA,H1     A0,MBTADR-1,X8    . OFFSET FOR HW MBT          AA,H2     A0,MBTADR-1,X8    . OFFSET FOR SW MBT/. ERROR MESSAGES.ERR(1)    'INPUT I/O ERROR - ADDRESS IN X11'ERR(2)    'OUTPUT I/O ERROR - ADDRESS IN X11'ERR(3)    'ERROR DOING SYSTEM DGET$ - A2=ADDRESS'ERR(4)    'WARNING - MSALL$ INFORMATION WILL BE OMITTED FROM OUTPUT FILE'ERR(5)    'FOLLOWING LEAD ITEM NOT MATCHED:'ERR(6)    'FOLLOWING MAIN ITEM SECTOR 0 NOT MATCHED:'ERR(7)    'FOLLOWING MAIN ITEM EXTENSION SECTOR NOT MATCHED:'ERR(8)    'FOLLOWING UNTYPED DIRECTORY ITEM NOT MATCHED:'ERR(9)    'QUALIFIER, FILE NAME, AND/OR CYCLE AMBIGUITY:'ERR(10)   'INTERNAL ERROR READING DAS CHAIN - A2=ADDR'ERR(11)   'TABLE OVERFLOW - <MAXLDT> SHOULD BE INCREASED'ERR(12)   'TABLE OVERFLOW - <MAXDAS> SHOULD BE INCREASED'ERR(13)   'TAPE REEL COUNT EXCEEDED - MAX=63:'ERR(14)   'INTERNAL ERROR WHILE PROCESSING MSALL$ INFO - A2=ADDR'ERR(15)   'DUPLICATE FILE ENTRY - OLDER VERSION IGNORED:'ERR(16)   'INTERNAL LINKAGE ERROR - A2=ADDRESS'ERR(17)   '*DIRECTORY BUFFER OVERFLOW - INCREASE OR USE ''G'' OPTION*'ERR(18)   'ILLEGAL OPTION(S)- CAN''T USE A,B,M, OR T WITHOUT S OR N'ERR(19)   'FILE TYPE IN MAIN ITEM INCONSISTENT WITH LEAD ITEM:'ERR(20)   'INTERNAL ERROR PROCESSING MBT ENTRIES, A2=ADDR'ERR(21)   'R-DISC DADT LDAT(S) > 1 NOT SUBSTITUTED FOR FILE SPANNING PACKS:'ERR(22)   'INTERNAL ERROR - ATTEMPT TO REREAD A CLEARED SECTOR FROM TDIR$'ERR(23)   'FILENAME, TYPE IN MI-SECT 2+ INCONSISTENT WITH MI-0:'ERR(24)   'MHFS IS NOT CONFIGURED, SHARED DIRECTORY IS NOT AVAILABLE'ERR(25)   'CANNOT COMBINE U, Y OPTIONS IN A SINGLE EXECUTION'ERR(26)   'FILE SHARING IS DOWN, SHARED DIRECTORY UNAVAILABLE'ERR(27)   'MHFS IS CONFIGURED - STANDARD DIRECTORY IS USED.'ERR(28)   'INVALID HOST-ID IN MSCON$-DIRID$ PACKET'ERR(29)   '*PROCESSING FILES FROM <STD> DIRECTORY*'ERR(30)   '*PROCESSING FILES FROM <SHARED> DIRECTORY*'ERR(31)   'INCORRECT DIRECTORY NAME IN INPUT FILE (TDIR$)'ERR(32)   'DIRECTORY-ID IN LEAD ITEM INCONSISTENT WITH EXPECTED:'ERR(33)   'ABSOLUTE F-CYCLE IS OUTSIDE OF ALLOWABLE RANGE:'ERR(34)   '*TEMPORARY OUTPUT FILE ASSIGNED:'ERR(35)   'SAME-NAME TABLE OVERFLOW, INCREASE <MAXSQF>'ERR(36)   'DUPLICATE FILE, ALLOCATED ON ALTERNATE DEVICE, IGNORED:'ERR(37)   '***** DIRECTORY BUFFER OVERFLOW - FORWARD READS WILL BE USED *****'ERR(38)   'TOO MANY OPEN FORWARD READS - INCREASE <RATBMX>'ERR(39)   'UNABLE TO CLEAR DIRECTORY ITEM BUFFER WITH FORWARD READS'ERR(40)I DO 39 ,ERRPRT(I)  +  0200+ERR(I+1)-ERR(I),ERR(I)MXDERR    '*DIRECTORY IS TOO LARGE - <MAXDAS> MUST BE SET HIGHER THAN &'BEGMSG    'DGET&$ COMPLETE - TRACK SIZE: &'ENDMSG    'END MFDEDT. TOTAL FILES: & (& DISC, & TAPE).&'ENDM2     'TOTAL EXTENSION ENTRIES: &  MAX PER FILE: &'ENDM3     ' ALLOCATED BUFFERS WERE RELEASED DUE TO INSUFFICIENT MEMORY&'ENDM4     ' FORWARD READS WERE PERFORMED, MAX OPEN = &, RESIDUE = &'ENDM5     'FLUSH CALLS: &  AVAIL BUFFERS: &  AVG RB/FC: &  MIN RB/FC: &'BADDEV    'EQUIPMENT MNEMONIC ''&'' IS NOT CONFIGURED IN DSCTAB&'SKPMSG    'FILE ITEMS NOT RETRIEVED FROM PACK DIRECTORY FOR R-PACK: &'PAKMSG    '*PACK: & - INITIAL TRACKS: &  INITIAL POSITIONS: &'PAKMSG1   '*PACK: & - INITIAL GRANULES: &  AVAILABLE GRANULES: &'BADLNK    'BAD LINK OF & FROM DAD TABLE #&, FILE &'BADDAD    'R-PACK DAD AMBIGUITY, DAD TABLE #&, FILE &'BADPID    'PACKID UNKNOWN OR NOT MOUNTED FOR FILE &'TDASG     '@ASG,T TDIR$,F/1//1 . 'TDFREE    '@FREE TDIR$ . 'TDASGM    '@ASG,T TDIR$,F/&/TRK/':$CD(MAXDAS):' . &'TDASGC    '@ASG,TZ TDIR$,F70C/&/TRK/':$CD(MAXDAS):' . &'XAASGM    '@ASG,T XA,F/&/TRK/& . &'CASMSG    'UNABLE TO ASSIGN TDIR$ ON F70C - USING F'CML       EQU       $-CASMSGXAFREE    '@FREE XA . 'RCFREE    '@FREE R$CORE . 'RCASG     '@ASG,T R$CORE,F///40 . 'MFASGA    '@ASG,A $MFDB$ . 'MFASGT    '@ASG,T  $MFDB$,F/':$CD(MAXDAS/50):'//':$CD(MAXDAS/5):' . 'MTL       EQU       $-MFASGT..         DISC DEVICE TABLE..         FORMAT:    F2    '<EQUIP MNEM>',<DRUM INDICATOR>,<MAX POSITIONS>*2.F2        FORM      36,18,18DSCTAB          F2        'FII   ',1,192*2          F2        'FIII  ',1,256*2          F2        'F8460 ',1,406*2          F2        'FH432 ',1,3*2          F2        'FH880 ',1,7*2          F2        'FH1782',1,19*2          F2        'D84050',0,14*2          F2        'D84054',0,7*2          F2        'D8414 ',0,48*2          F2        'D8424 ',0,96*2          F2        'D8425 ',0,96*2          F2        'D8430 ',0,153*2          F2        'D8433 ',0,303*2          F2        'D8434 ',0,593*2  . 448 WORD PREP          F2        'D8436 ',0,448*2          F2        'D8440 ',0,175*2          F2        'D8450 ',0,592*2  . 448 WORD PREP          F2        'D8450F',0,596*2  . 448 WORD PREP          F2        'D8451 ',0,772*2          F2        'D8459 ',0,596*2          F2        'D8459F',0,596*2          F2        'D8463 ',0,128*2          F2        'D8470 ',0,1260*2   . REFLECTS 1792 WORD PREP          F2        'D8470F',0,1264*2   . REFLECTS 1792 WORD PREP          F2        'D8480 ',0,1264*2   . 1792 WORD PREP          F2        'D8481 ',0,1299*2 . 112 WORD PREP          F2        'D9494 ',0,1862*2          F2        'MDISK ',0,3547*2  . M9760-B          F2        'D9614 ',0,3115*2   . M9740-30, 1792 WORD PREP          F2        'D7053 ',0,8*2    . SOLID STATE DISK          F2        'MEMFL ',0,100*2  . MAIN STORAGE DISK          F2        'SSDISK',0,1763*2          F2        'SCDISK',0,1763*2DSTBLN    EQU       ($-DSCTAB)/2/.$(0)DIDPKT    +         DIRID$            . MHFS STATUS REQUEST PACKET          +         0D                .          +         3,DIDBUF          .DIDBUF    RES       3                 . BUFFER FOR MHFS STATUS WORD, DIR NAMESDGPKT     +         DGET$             . PACKET FOR DOING DGET$/DGETALL$          'TDIR$   '                  . OUTPUT FILE NAME          +         0                 .          +         BUFF,BUFF+1792    . TRANSFER I/O BUFFERSMSPKT     +         MSALL$            . MSALL$ REQUEST PACKET          +         1792*4,BUFF       . LOCATION TO RETURN DATA DO 3 ,   +         0                 .RDMFD     I$OD      'TDIR$',R$  28,BUFF  0 . PKT USED FOR SINGLE I/O'S ON TDIR$RPKT      D$BRP     'TDIR$'  1792,1792*DBTKCT,,BUFF . PKT FOR D-B READ OF TDIR$RPKTLN    EQU       $-RPKT            . SIZE OF D-B READ PACKETRPSAVE    RES       RPKTLN            . D-B READ PACKET SAVE AREAZERPKT    I$OD      'TDIR$',W$  1792,FRSTI$  0 . PKT USED FOR SEC CLR OF TDIR$MSWRT     I$OD      '$MFDB$',W$  0,BUFF  MSALLAD . PKT TO WRITE MSALL$ INFOWPKT      D$BWP     '$MFDB$'  28,1792*DBTKCT,,BUFF2 . PKT FOR D-B WRT TO OUTPUTWRHDR     I$OD      '$MFDB$',W$  112,BUFF  0 . PKT TO WRITE $MFDB$ HEADEREPKT      E$PKT     14,LINE           . EDIT$ CONTROL PACKETRPF       R$FILE    ;                 . SORT CONTROL PKT (SORT BY Q/F/C)          'RSZW',28 ;          'FILES','XA'                ;          'KEY',1,24,'A','A'          ;          'KEY',119,2,'A','A'         ;          'DELLOG'  ;          'DELCON'  ;          'FPOC',DE055                ;          'LPOC',DE455                .RPFL      EQU       $-1          +         0D                . THIS AREA USED FOR CORE ADDRESSRPN       R$FILE    ;                 . SORT CONTROL PKT (SORT BY ACCT/Q/F/C)          'RSZW',28 ;          'FILES','XA'                ;          'KEY',25,12,'A','A'         ;          'KEY',1,24,'A','A'          ;          'KEY',119,2,'A','A'         ;          'DELLOG'  ;          'DELCON'  ;          'FPOC',DE060                ;          'LPOC',DE455                .RPNL      EQU       $-1          +         0D                . THIS AREA USED FOR CORE ADDRESSMFFAC     '$MFDB$   '                 . FITEM$ PACKET FOR OUTPUT FILE          RES       7                 .TDFAC     'TDIR$    '                 . FITEM$ PACKET FOR TDIR$ (D-OPT)          RES       7                 .RCFAC     'R$CORE   '                 . FITEM$ PACKET FOR CORE FILE          RES       7                 .XAFAC     'XA       '                 . FITEM$ PACKET FOR TEMP SORT FILE          RES       7                 .DIRID     +         0                 . DIRECTORY-ID BEING PROCESSEDHOSTID    +         0                 . HOST-ID (0 IF NO MHFS)USRFIL    +         0                 . SET IF USER SPECIFIED OUTPUT FILEDASTKO    +         0                 . OFFSET TO 1ST DAS TRK IF E44+ FMTSAVA0     +         0                 . A0 SAVESKIPUNIT  +         0                 . SET IF SKIPPING R-PACK DIRECTORY TRACKSDGAFLG    +         0                 . SET IF DGETALL$ FUNCTION IS USEDSPANFLG   +         0                 . SET IF R-PACK FILE SPANS PACKS, 'R' ONDIBFCT    +         0                 . COUNT OF AVAIL BUFFERS FOR DIR ITEMSFLCT      +         0                 . COUNT OF CALLS TO 'FLUSH' ROUTINERBCT      +         0                 . COUNT OF REL BUFFERS/FLUSH CALLRBTOT     +         0                 . TOTAL COUNT OF REL BUFFERSRBMIN     +         0                 . MINIMUM REL BUFFERS/FLUSH CALLRDTCT     +         0                 . DAD TABLES RELEASED FOR LACK OF MEMORYTPCT      +         0                 . TOTAL TAPE FILESMSCT      +         0                 . TOTAL DISC FILES (FIXED+REMOVAVLE)TDATE     +         0                 . DATE/TIME OF DIRECTORY CREATIONBEGADR    +         MSALLAD           . START SECT ADDR OF FILE ENTS IN $MFDB$DADCT     +         0                 . TOTAL DAD TABLES PROCESSEDMAXDAD    +         0                 . MAX DAD TABLES/FILEZFIRST    EQUF      $,,H1             . SET IF SEC CLR OF TDIR$ DONE AS READINGZLAST     EQUF      $,,H2             . SET IF SEC CLR DONE AFTER READ COMPLETE          +         0                 .EOFFLG    +         0                 . SET WHEN LAST RECORD RET FROM SORTSAVX4     +         0                 . SAVE-X4 FOR SORT RETURN/OUTPUT ROUTINESAVX5     +         0                 . MISC REGISTER SAVES FORSAVX6     +         0                 .  FORWARD READ LOOPSAVX7     +         0                 .SAVA7     +         0                 .SAVR4     +         0                 .RDAHED    +         0                 . SET IF FORWARD READ HAS BEEN DONERDACT     +         0                 . REMAINING FWD READS / FLUSH LOOPRDATOT    +         0                 . TOTAL FORWARD READS REQUIREDRATBCT    +         0                 . ENTRY COUNT OF OPEN FWD READ TABLERATBMU    +         0                 . MAX OPEN FORWARD READS REQUIREDGSADDR    +         0                 . MFD ADDRESS OF <GETSEC> ITEMGSTBFL    +         0                 . SET IF FORWARD READS ARE TO BE TABLEDPREVX2    +         0                 . USED BY FLUSH AS POINTER SAVEFINAL     +         0                 . SET=FINAL FLUSH CALL, TDIR$ READ COMPLCURTRK    +         0                 . CURRENT TDIR$ TRACK ADDRESSFLSX11    EQUF      $,,H1             . X11 SAVE FOR FLUSH ROUTINEOUTX11    EQUF      $,,H2             . X11 SAVE FOR OUTPUT ROUTINE          +         0                 .ODSX11    EQUF      $,,H1             . X11 SAVE FOR OUTDAD ROUTINE          +         0                 .FILPTR    +         0D                . NEXT FILE (DINXFL) LIST HEADLASTRK    +         0                 . ADDRESS OF LAST TDIR$ TRACK (+1)LASTF     RES       5                 . Q/F/C OF FILE BEING PROC BY 'OUTDAD'LINE      RES       14                . EDIT$ OUTPUT BUFFERINFBUF    RES       50                . INFOR BUFFERIDBUFF*   'MFDEDT 3R2B'  DO 5 ,  '  'FILERR    'COULDN''T ASSIGN FILE:   XXXXXXXXXXXX'DESTABDRMIND    EQUF      DESTAB,,H1        . SET IF DEVICE IS DRUMMBTLEN    EQUF      DESTAB,,H2        . LENGTH OF MBT          RES       MAXLDT            .PIDTBL    RES       MAXLDT            . PACK-ID TABLE, ADDR BY LDAT INDEXRECORD    RES       28                . OUTPUT RECORD FOR SORTFDT1      RES       28                . SAVE AREA FOR 1ST DIR TRK, SECT 0DAS       RES       27                . STORAGE AREA FOR NEXT DAS SECTOR          -         1                 . INITIALIZE AS EOF SECTORDASSV     RES       28                . SAVE AREA FOR <DAS> DURING FWD READ.GWPTR     +         GWBUFF            . POINTER TO GETSEC TEMP DATA AREAGWBUFF    RES       (DIBEGN+28)*5     . ALLOW 5 CONCURRENT ITEMSGWMAX     EQU       $                 . RESET GWPTR WHEN IT REACHES THIS VALUE.LDATAB    RES       MAXLDT+1          . PRIMARY LOOKUP TABLE, ADDR BY LDAT IDXDSCNT     EQUF      LDATAB,,H1        . DIRECTORY TRACKS/THIS DEVICEDSLINK    EQUF      LDATAB,,H2        . POINTER TO DASTAB ENTRY FOR 1ST DIR TRK.DASTAB    RES       MAXDAS            . CONTROL TABLE FOR DIRECTORY TRACKSMDLINK    EQUF      0,,H1             . TDIR$ TRACK ADDRESSCDLINK    EQUF      0,,H2             . ADDRESS OF 1ST CORE CHAIN ITEM FOR TRK.OUTLST    RES       MAXSQF*28         . SAME-NAME TABLE, USED BY OUTPUT                                      . ROUTINE TO CHECK FOR DUPLICATES.BUFF      RES       1792*DBTKCT*2     . INPUT BUFFER FOR D-B READ OF TDIR$BUFF2     RES       1792*DBTKCT*2     . OUTPUT BUFFER FOR D-B WRITE OF $MFDB$.MBTADR    RES       MAXLDT            . ADDRESS OF HW, SW MBT FOR EACH DEVICEMCBUFF    RES       MAXPOS*2+1        . BUFFER FOR STORING MBT FOR 'MISCOUT'RATBL     RES       RATBMX            . OPEN FORWARD READ MFDF ADDRESS TABLE.          END       START@ELT,SIP MARSREL$.MAP/MFDEDT,,,153651061033,006TYPE      REALTIMEIN MARS$.MFDEDTEQU DIRID$/050NOT TPF$.@ELT,SIP MARSREL$.MFDMRG,,,216065050534,023.         PROGRAM TO MERGE A STANDARD AND SHARED MFD EXTRACT INTO A SINGLE.         OUTPUT FILE                                   WRC 6/91..         INPUT: $MFDB$STD (STANDARD DIRECTORY EXTRACT, PRODUCED BY MFDEDT).                $MFDB$SHARED (SHARED DIRECTORY EXTRACT)..         OUTPUT: $MFDB$  (MERGED EXTRACT IN MFDEDT FORMAT)..         ALL FILES MUST BE PREASSIGNED PRIOR TO EXECUTION.  THIS PROGRAM.         WILL ABORT UNLESS ALL OF THE FOLLOWING CONDITIONS ARE MET:.          - BOTH EXTRACTS MUST BE CREATED ON THE SAME HOST WITH.            MFDEDT LEVEL 2R3 OR GREATER.          - BOTH MUST BE SORTED BY Q/F/C ('S' OPTION REQUIRED, NOT 'N').          - NEITHER MAY BE CREATED WITH 'A', 'B' OR 'M' OPTIONS.          - BOTH MUST BE CREATED WITHIN A 10 MINUTE TIME FRAME..         IF THIS PROGRAM IS EXECUTED WITH THE 'D' OPTION, ONLY FILES WHICH.         RESIDE IN BOTH DIRECTORIES (SAME QUALIFIER AND FILENAME) WILL BE.         INCLUDED IN THE OUTPUT EXTRACT FILE..$(1)      AXR$          LIT          MFDDEF          D$BDEFDBTKCT    EQU       2                 . SIZE OF I/O BUFFERS (4 REQUIRED)..         BEGIN HERE.START          SA        A5,A15            . SAVE OPTIONS          LA,U      A0,RDHSTD         . STD DIR EXTRACT HEADER READ PKT          LA        A5,ERRPRT(1)      . GEN ERROR MSG FOR STD DIR EXTRACT          LA,U      A6,0              . REQUIRED DIRECTORY-ID = 0          LMJ       X11,VERHDR        . READ AND VERIFY HEADER FOR STD EXTRACT          LX,U      X6,HDRSTD         . X6 = POINTER TO STD EXT HEADER BUFF          LR        R4,A4             . FILE COUNT - 1 FOR STD EXTRACT          LA,U      A0,RDHSHR         . SHARED DIR EXTRACT HEADER READ PKT          LA        A5,ERRPRT(2)      . GEN ERROR MSG FOR SHARED DIR EXTRACT          LA,U      A6,1              . REQUIRED DIRECTORY-ID = 1          LMJ       X11,VERHDR        . READ AND VERIFY HEADER FOR SHR EXTRACT          LX,U      X7,HDRSHR         . X7 = POINTER TO SHR EXT HEADER BUFF          LR        R5,A4             . FILE COUNT - 1 FOR SHARED EXTRACT          LA        A0,MFHHID,X6      . HOST-ID OF STD EXTRACT          TNE       A0,MFHHID,X7      . SAME AS HOST-ID OF SHARED EXTRACT?          J         MM100             .  YES, CONTINUE          P$RINT    ERRPRT(9)         .  NO, 'EXTRACTS PRODUCED ON DIFF HOSTS'          ER        ERR$              .   ABORTMM100          LA        A0,MFTDAT,X6      . STANDARD-DIR DATE/TIME          LMJ       X11,JULOUT        . CONVERT DATE TO JULIAN (A4)          J         MM110             . ABORT IF ERROR FROM DATE CONVERSION          MSI,U     A4,24*3600        . TIMES SECONDS/DAY          AA,H2     A4,MFTDAT,X6      .  PLUS TIME = JULIAN AGE SINCE 1/1/64          LA        A5,A4             . SAVE IN A5          LA        A0,MFTDAT,X7      . SHARED-DIR DATE/TIME          LMJ       X11,JULOUT        . CONVERT DATE TO JULIAN (A4)          J         MM110             . ABORT IF ERROR FROM DATE CONVERSION          MSI,U     A4,24*3600        . TIMES SECONDS/DAY          AA,H2     A4,MFTDAT,X7      .  PLUS TIME = JULIAN AGE OF SHARED DIR          ANA       A4,A5             . A4 = DIFFERENCE IN AGES (SECONDS)          LMA       A4,A4             . LOAD MAGNITUDE OF DIFFERENCE          TLE,U     A4,60*10          . WITHIN 10 MINUTES OF EACH OTHER?          J         MM120             .  YES, CONTINUEMM110          P$RINT    ERRPRT(10)        . 'INPUT EXTRACTS NOT WITHIN 10 MIN...'          ER        ERR$              .   ABORTMM120          D$BIO     RDSTD  MFFLAD,X6  . OPEN D-B I/O FROM STD EXTRACT          D$BIO     RDSHR  MFFLAD,X7  . OPEN D-B I/O FROM SHARED EXTRACT          LXI,U     X4,1              . LOAD INCREMENTS FOR REC PTR REGISTERS          LXI,U     X5,1              .          D$BI      RDSTD  MM900,MM900 . READ 1ST RECORD FROM STD EXTRACT          LXM,U     X4,,A1            . X4 = ADDRESS          D$BI      RDSHR  MM900,MM900 . READ 1ST RECORD FROM SHARED EXTRACT          LXM,U     X5,,A1            . X5 = ADDRESS          DSL       A6,72             . ZERO STANDARD, SHARED OUTPUT COUNTS..         COMPARE TWO ENTRIES (X4=STD, X5=SHARED).MM200          LA,S1     A0,MFQUAL,X4      . 1ST CHAR OF NEXT STD QUALIFIER          ANA,S1    A0,MFQUAL,X5      . SUBTRACT 1ST CHAR OF NEXT SHR QUAL          JN        A0,MM300          . PROCESS STD NEXT IF < SHARED          JNZ       A0,MM400          . PROCESS SHARED NEXT IF > STD          DL        A0,MFQUAL,X4      . IF EQUAL, COMPARE REM 11 CHARS          DAN       A0,MFQUAL,X5      .          JN        A0,MM300          . PROCESS STD NEXT IF < SHARED          DJZ       A0,$+2            . CONTINUE IF EQUAL          J         MM400             . PROCESS SHARED NEXT IF > STD          LA,S1     A0,MFFILE,X4      . 1ST CHAR OF NEXT STD FILENAME          ANA,S1    A0,MFFILE,X5      . SUBTRACT 1ST CHAR OF NEXT SHR FILE          JN        A0,MM300          . PROCESS STD NEXT IF < SHARED          JNZ       A0,MM400          . PROCESS SHARED NEXT IF > STD          DL        A0,MFFILE,X4      . IF EQUAL, COMPARE REM 11 CHARS          DAN       A0,MFFILE,X5      .          JN        A0,MM300          . PROCESS STD NEXT IF < SHARED          DJZ       A0,$+2            . IF EQUAL, PROCESS STD NEXT          J         MM400             . PROCESS SHARED NEXT IF > STD          TOP       A15,(1*/('Z'-'D')) . INCLUDE ONLY DUPLICATES?          J         MM302             .  NO, SKIP          DL        A0,MFQUAL,X4      .  YES, SAVE DUPLICATE QUALIFIER          DL        A2,MFFILE,X4      .   AND FILENAME          DS        A0,DPQUAL         .          DS        A2,DPFILE         .          J         MM302             . OUTPUT THIS STD FILE NEXT..         OUTPUT AN ENTRY FROM THE STANDARD DIRECTORY EXTRACT.MM300          TEP       A15,(1*/('Z'-'D')) . INCLUDE ONLY DUPLICATES?          J         MM305             .  YES, THIS IS NOT DUPL - SKIPMM302          D$BO      WRMRG  MM900      . GET NEXT OUTPUT REC ADDR          LXI,U     A1,1              . A1 = ADDR, LOAD INCR FOR TRANSFER          LR,U      R1,28             . RECORD HAS 28 WORDS          BT        A1,,*X4           . MOVE STD RECORD TO OUTPUT          AA,U      A6,1              . INCREMENT STD FILE COUNTMM305          D$BI      RDSTD  MM900,MM900 . READ THE NEXT STD RECORD          LXM,U     X4,,A1            . X4 = ADDRESS          TNZ,H1    0,X4              . IS THIS AN EXTENSION RECORD?          J         MM300             .  YES, BACK FOR NEXT          JGD       R4,MM320          . LOOP AHEAD, DECR REM REC COUNT          LA        A0,,X4            .  ALL DONE - LOAD 1ST WORD OF RECORD          TNE       A0,('*EOF**')     . BETTER BE EOF RECORD          J         MM310             .  YES - CONTINUE          P$RINT    ERRPRT(11)        .  NO - 'MISSING SOFTWARE EOF'          ER        ERR$              .   ABORT IF THIS HAPPENSMM310          TN        R5                . EOF - ANY SHARED RECS LEFT?          J         MM400             .  YES, MOVE THEM OVER          J         MM500             .  NO, MERGE IS COMPLETEMM320          TN        R5                . ANY SHARED RECORDS REMAINING?          J         MM200             .  YES, DO NEXT COMPARISON          J         MM300             .  NO, MOVE STD UNTIL EOF FOUND..         OUTPUT AN ENTRY FROM THE SHARED DIRECTORY EXTRACT.MM400          TOP       A15,(1*/('Z'-'D')) . INCLUDE ONLY DUPLICATES?          J         MM402             .  NO, SKIP - OUTPUT THIS FILE          DL        A0,MFQUAL,X5      .  YES, CHECK FOR DUPLICATE QUALIFIER          DTE       A0,DPQUAL         . SAME QUALIFIER?          J         MM405             .  NO, SKIP - DO NOT OUTPUT          DL        A0,MFFILE,X5      .  YES, CHECK FOR DUPLICATE FILENAME          DTE       A0,DPFILE         . SAME FILENAME?          J         MM405             .  NO, SKIP - DO NOT OUTPUTMM402          D$BO      WRMRG  MM900      . GET NEXT OUTPUT REC ADDR          LXI,U     A1,1              . A1 = ADDR, LOAD INCR FOR TRANSFER          LR,U      R1,28             . RECORD HAS 28 WORDS          BT        A1,,*X5           . MOVE SHARED RECORD TO OUTPUT          AA,U      A7,1              . INCREMENT SHARED FILE COUNTMM405          D$BI      RDSHR  MM900,MM900 . READ THE NEXT SHARED RECORD          LXM,U     X5,,A1            . X5 = ADDRESS          TNZ,H1    0,X5              . IS THIS AN EXTENSION RECORD?          J         MM400             .  YES, BACK FOR NEXT          JGD       R5,MM420          . LOOP AHEAD, DECR REM REC COUNT          LA        A0,,X5            .  ALL DONE - LOAD 1ST WORD OF RECORD          TNE       A0,('*EOF**')     . BETTER BE EOF RECORD          J         MM410             .  YES - CONTINUE          P$RINT    ERRPRT(12)        .  NO - 'MISSING SOFTWARE EOF'          ER        ERR$              .   ABORT IF THIS HAPPENSMM410          TN        R4                . EOF - ANY STD RECS LEFT?          J         MM300             .  YES, MOVE THEM OVER          J         MM500             .  NO, MERGE IS COMPLETEMM420          TN        R4                . ANY STD RECORDS REMAINING?          J         MM200             .  YES, DO NEXT COMPARISON          J         MM400             .  NO, MOVE SHARED UNTIL EOF FOUND..         MERGE PROCESS IS COMPLETE, WRITE NEW HEADER AND EXIT.MM500          D$BO      WRMRG  MM900      . GET ADDRESS OF FINAL OUTPUT RECORD          LA        A0,('*EOF**')     . STANDARD MFDDB EOF SENTINAL          SA        A0,,A1            . SET AS 1ST WORD OF RECORD          D$BOC     WRMRG  MM900      . CLOSE D-B OUTPUT TO MERGED EXTRACT          AU        A7,A6             . STD + SHARED FILE COUNT, TO A8          SA        A8,MFFLCT,X6      . STORE TOTAL IN OUTPUT HEADER          LA        A0,MFTDAT,X7      . SHARED DIRECTORY DATE/TIME          TG        A0,MFTDAT,X6      . LATER THAN STD DIRECTORY DATE/TIME?          SA        A0,MFTDAT,X6      .  YES, USE MOST RECENT TIMESTAMP          LA,U      A0,64             . FILE RECORDS BEGIN AT SECTOR 64          SA        A0,MFFLAD,X6      . SO INDICATE IN HEADER          SZ        MFMSCT,X6         . ZERO WORD COUNT OF MSALL$ INFO          SZ        MFMSAD,X6         .  AND ADDR, NONE AVAIL IN MERGED EXTRACT          LA        A0,MFOPWD,X6      . CONTROL OPTIONS          OR,U      A0,1*/('Z'-'U')++1*/('Z'-'Y') . SET U,Y - INDICATE BOTH DIRS          SA        A1,MFOPWD,X6      . STORE NEW OPTION MASK          LA,U      A0,077            . INDICATOR FOR MERGED DIRECTORIES          SA        A0,MFHDID,X6      .  STORE AS DIR-ID OF EXTRACT          I$OW      WRMHD             . WRITE MERGED EXTRACT HEADER          LMJ       X9,STATUS         . CHECK STATUS, ABORT IF ERROR          E$DIT     EPKT              . OPEN EDIT          E$MSG     MSG1              . 'END MFDMRG.  TOTAL FILES: '          E$DECV    MFFLCT,X6         . TOTAL FILE COUNT          E$MSGR                      . '  (STD='          E$DECV    A6                . COUNT OF FILES FROM STD DIRECTORY          E$MSGR                      . ', SHARED='          E$DECV    A7                . COUNT OF FILES FROM SHARED DIRECTORY          E$MSGR                      . ').'          P$RINT    (0114,LINE)       . PRINT STATUS LINE          ER        EXIT$             . ALL DONE..         I/O ERROR RETURNED FROM DOUBLE-BUFFERED INPUT OR OUTPUT.MM900          LMJ       X9,STATUS         . PRINT STATUS MESSAGE          ER        ERR$              .   AND ABORT/..         THIS ROUTINE IS CALLED TO VERIFY THE HEADER FOR EACH INPUT EXTRACT..VERHDR          ER        IOW$              . ISSUE I/O TO READ HEADER          LMJ       X9,STATUS         . CHECK STATUS, ABORT IF ERROR          LA,H2     A3,4,A0           . A3 = ADDRESS OF HEADER BUFFER          LA        A0,MFLABL,A3      . GET SOFTWARE LABEL          LA        A1,MFLVWD,A3      . GET MFDEDT REVISION LEVEL          SSL       A1,18             . ISOLATE MAJOR UPDATE NUMBER          LA        A2,ERRPRT(3)      . 'VALIDATION ERR OR INCORRECT S/W LEVEL'          TNE       A0,('*MFDB*')     . IS LABEL CORRECT,          TE,U      A1,012            .  AND IS LEVEL = MFDEDT 2R3?          J         VH900             .   NO, RETURN ERROR          LA        A2,ERRPRT(4)      . 'FILE COUNT IS ZERO OR NEGATIVE'          LA        A4,MFFLCT,A3      . LOAD FILE COUNT FROM HEADER          JGD       A4,$+2            . DECR FOR LOOP INIT AND SKIP          J         VH900             .  ERROR IF ZERO OR NEGATIVE          LA        A2,ERRPRT(5)      . 'EXTRACT NOT PRODUCED ON MHFS SYSTEM'          TNZ       MFHHID,A3         . HOST-ID > 0 INDICATES MHFS          J         VH900             .  IF NOT, ERROR          LA        A2,ERRPRT(6)      . 'EXTRACT NOT SORTED BY Q/F/C'          LA        A0,MFOPWD,A3      . OPTIONS USED ON @MFDEDT CALL          TEP,U     A0,1*/('Z'-'S')   . MUST HAVE 'S' OPTION (SORTED)          TEP,U     A0,1*/('Z'-'N')   .  BUT NOT 'N' (SORT BY ACCOUNT NBR)          J         VH900             .   ERROR IF OPTIONS INCORRECT          LA        A2,ERRPRT(7)      . 'CANNOT MERGE WITH A,B,M OPTIONS'          AND       A0,(1*/('Z'-'A')++1*/('Z'-'B')++1*/('Z'-'M')) .          JNZ       A1,VH900          .  ERROR IF ANY OF THESE OPTIONS SET          LA        A2,ERRPRT(8)      . 'INCORRECT DIRECTORY-ID IN HEADER'          TE        A6,MFHDID,A3      . IS DIR-ID = EXPECTED?          J         VH900             .  NO, ERROR          J         0,X11             .  YES, RETURN SUCCESSFUL VALIDATIONVH900          LA        A0,A5             . GENERAL ERR MSG, IND DIR BEING CHECKED          ER        PRINT$            .  PRINT GENERAL ERROR MESSAGE          LA        A0,A2             . SPECIFIC MESSAGE FOR ERROR DETECTED          ER        PRINT$            .  PRINT SPECIFIC MESSAGE          ER        ERR$              .   AND ABORT/..         I/O STATUS CHECK ROUTINE.STATUS          TNZ,S1    3,A0              . IS STATUS ZERO?          J         0,X9              .  YES, RETURN NORMAL          LX,U      X4,,A0            .  NO, LOAD PKT ADDRESS INTO X4          LXI,U     X4,1              . LOOP INCREMENT          P$RINT    ERRPRT(13)        . 'BAD I/O STATUS, PACKET DUMP FOLLOWS:'          E$DIT     EPKT              . OPEN EDIT          LA,U      A4,5              . LOOP COUNT - 1ST100          E$OCTF    12,,*X4           . EDIT NEXT OCTAL WORD INTO OUTPUT          E$SKIP    1                 . SKIP OVER ONE          JGD       A4,ST100          . BACK FOR REST OF PACKET          P$RINT    (0116,LINE)       . PRINT EDITED PACKET DUMP          ER        ERR$              . ABORT/.ERR(1)    '*FATAL ERROR IN VERIFICATION OF $MFDB$STD EXTRACT:'ERR(2)    '*FATAL ERROR IN VERIFICATION OF $MFDB$SHARED EXTRACT:'ERR(3)    'HEADER VALIDATION ERROR OR INCORRECT SOFTWARE REV LEVEL'ERR(4)    'FILE COUNT IS ZERO OR NEGATIVE'ERR(5)    'MFD EXTRACT WAS NOT PRODUCED ON A MHFS SYSTEM'ERR(6)    'MFD EXTRACT WAS NOT SORTED BY QUAL/FILE/CYCLE'ERR(7)    'CANNOT MERGE EXTRACT CREATED WITH A, B OR M OPTIONS'ERR(8)    'INCORRECT DIRECTORY-ID IN HEADER'ERR(9)    '*ERROR - INPUT EXTRACT FILES WERE PRODUCED ON DIFFERENT HOSTS'ERR(10)   '*ERROR - INPUT EXTRACTS WERE NOT CREATED WITHIN 10-MIN TIMEFRAME'ERR(11)   '*ERROR - $MFDB$STD IS MISSING SOFTWARE END-OF-FILE'ERR(12)   '*ERROR - $MFDB$SHARED IS MISSING SOFTWARE END-OF-FILE'ERR(13)   'NONZERO I/O STATUS, PACKET DUMP FOLLOWS:'ERR(14)I DO 13 ,ERRPRT(I)  +  0100+ERR(I+1)-ERR(I),ERR(I)MSG1      'END MFDMRG.  TOTAL FILES: &  (STD=&, SHARED=&).&'/.$(0)RDHSTD    I$OD      '$MFDB$STD',R$  28,HDRSTD  0 . STD EXTRACT HDR READ PACKETRDHSHR    I$OD      '$MFDB$SHARED',R$  28,HDRSHR  0 . SHR EXTRACT HDR READ PKTWRMHD     I$OD      '$MFDB$',W$  28,HDRSTD  0 . MERGED EXTRACT HEADER WRITE PKTRDSTD     D$BRP     '$MFDB$STD'  28,1792*DBTKCT,$-$ . STD EXT D-B INPUT PKTRDSHR     D$BRP     '$MFDB$SHARED'  28,1792*DBTKCT,$-$ . SHR EXT D-B INPUT PKTWRMRG     D$BWP     '$MFDB$'  28,1792*DBTKCT,64 . MERGED EXT D-B OUTPUT PKTEPKT      E$PKT     14,LINE           . EDIT$ PACKETLINE      RES       14                . EDIT$ OUTPUT BUFFERHDRSTD    RES       28                . STD INPUT/MERGED OUTPUT HDR BUFFERHDRSHR    RES       28                . SHARED INPUT HDR BUFFERDPQUAL    +         0D                . DUPLICATE QUALIFIERDPFILE    +         0D                . DUPLICATE FILENAME          END       START@ELT,SIP MARSREL$.MAP/MFDMRG,,,021772102233,006IN MARS$.MFDMRG,.JULDATENOT TPF$.@ELT,SIP MARSREL$.MRCBNK,,,171475112232,023.         MARS RELOAD CONTROL BANK                               WRC 8/90.          MGPDEF          RCBDEF.$(0)          T$CELL                      . INIT VALUE OF 1ST WORD 'RCHDTS' DO RCFEBG-1 , +    0                 . INIT HEADER, STATUS = 0          RES       M$RELDMAX*RCFESZ  . RESERVE SPACE FOR FILE ENTRY RECORDS.START          ER        ERR$              . BANK IS NOT MEANT TO BE EXECUTED.          END       START@ELT,SIP MARSREL$.MAP/MRCBNK,,,117314112332,006DBANK MRCBNK,034000$ALLIN MARS$.MRCBNKNOT TPF$.END@ELT,SIP MARSREL$.MSREP,,,156025123137,023. MASS STORAGE USAGE REPORT BY ACCOUNT - WRC 4/89.. INPUT: $MFDB$ (EDITED DIRECTORY, PRODUCED BY MFDEDT).        ARCCTL$ (SYS$*ARCCTL$, ONLY IF 'O' OPTION USED).. VALID OPTIONS:.. H - READ THE SYSTEM ID (UP TO 12 CHARS) FROM INPUT PARAMETER CARD.. O - FOR FILES WITH QUALIFIERS REGISTERED IN SYS$*ARCCTL$, USE THE.     'OWNER' ACCOUNT NUMBER INSTEAD OF THE ACTUAL ACCOUNT NUMBER... P - DO AN INTERNAL @@PRNT/@@NOPR FOR OUTPUT TO AN ATTACHED PRINTER.. T - PRINT TOTAL LINE ONLY.$(1)      AXR$          $LIT          MGPDEF          MFDDEF          D$BDEF.MAXACC    EQU       500               . MAX UNIQUE ACCOUNTS..         SORT RECORD DEFINITIONS.SRACCT    EQUF      0                 . ACCOUNT NUMBER..         USAGE CATEGORY OFFSETS.SRONLN    EQUF      2                 . ONLINE FIXEDSRUNLD    EQUF      4                 . UNLOADED FIXEDSRREM     EQUF      6                 . REMOVABLESRGVFX    EQUF      8                 . G/V OPT FIXED..         ENTRY DEFINITIONS (ONE ENTRY PER CATEGORY ABOVE).SENCNT    EQUF      0                 . FILE COUNTSSENTRK    EQUF      1                 . TRACK COUNTS.SRTPCT    EQUF      10                . COUNT OF TAPE FILES.SRSIZE    EQU       11                . SIZE OF SORT RECORD/..         BEGIN HERE.START          SA        A5,A15            . SAVE OPTIONS          I$OW      RDHDR             . READ MFDDB HEADER          TZ,S1     RDHDR+3           . VERIFY GOOD STATUS          J         MS900             .  BAD STATUS, ABORT          LA        A0,HDRBUF+MFLABL  . SOFTWARE LABEL          LA        A1,HDRBUF+MFLVWD  . SOFTWARE REV LEVEL          SSL       A1,18             . ISOLATE H1 OF REV LEVEL          TNE       A0,('*MFDB*')     . VERIFY CORRECT LABEL          TE,U      A1,012            .  AND SOFTWARE REV LEVEL          J         MS910             .   IF NOT CORRECT, ABORT          TEP,U     A15,1*/('Z'-'O')  . USE OWNER ACCOUNTS FROM SYS$*ARCCTL$?          LMJ       X11,ARSETUP       .  YES, READ/SORT REG QUALS, OWN ACCTS          LR        R4,HDRBUF+MFFLCT  . TOTAL INPUT FILE COUNT          JGD       R4,$+2            . DECREMENT AND SKIP          ER        ERR$              . ABORT IF ZERO OR NEGATIVE          LA        A0,HDRBUF+MFTDAT  . DATE/TIME OF DIRECTORY ACQUIRE          SA        A0,DIRDAT         . SAVE FOR LATER USE          D$BIO     RPKT  HDRBUF+MFFLAD . READ OPEN 1ST DATA SECT OF MFDDB          TOP       A15,(1*/('Z'-'H')) . IS SITE-ID CARD SUPPLIED?          J         MS100             .  NO, SKIP          R$EAD     (MS080,SITCOD)    .  YES, READ IT IN          J         MS100             .MS080          P$RINT    ERRPRT(5)         . 'SYSTEM-ID CARD MISSING, REQUIRED'          ER        ERR$              .  ABORT/..         GET THE NEXT FILE RECORD FROM THE INPUT MFDDB.MS100          D$BI      RPKT  MS900,MS900 . READ THE NEXT REC, A1 = ADDRESS          TNZ,H1    0,A1              . IS H1 OF WORD 0 = ZERO?          J         MS100             .  YES, BYPASS - NOT A FILE RECORD          LX        X4,A1             . X4 = FILE RECORD ADDRESS          TEP,U     A15,1*/('Z'-'T')  . ONLY WANT TOTALS?          J         MS210             .  YES, SKIP          DL        A4,MFQUAL,X4      . GET QUALIFIER          TE        A4,('TIP$  ')     . TIP FILE, OR          TOP,U     A15,1*/('Z'-'O')  .  SKIP OWNER ACCT SUBSTITUTION?          J         MS105             .   YES, DON'T LOOK FOR OWNER ACCOUNT          LMJ       X11,ARSRCH        .   NO, SEARCH FOR OWNER ACCT FOR QUAL          JNZ       A4,MS106          . SKIP IF OWNER ACCT FOUND (A4 = ACCT)MS105          DL        A4,MFACCT,X4      . LOAD A4 FROM ORIGINAL ACCOUNT NUMBERMS106..         SEARCH ACCOUNT TABLE FOR THE ACCOUNT OF THIS FILE.          LX        X5,(SRSIZE,SRTTBL-SRSIZE) . PTR TO ACCOUNT TABLE          LR        R1,SRTCNT         . CURRENT ENTRY COUNTMS120          SE        A4,SRSIZE+SRACCT,*X5 . SEARCH FOR FIRST-WORD ACCT MATCH          J         MS140             . NO FIND, SKIP          TE        A5,SRACCT+1,X5    . FIND, DOES 2ND WORD MATCH ALSO?          J         MS120             .  NO, KEEP LOOKING          J         MS200             .  YES, UPDATE THIS ENTRYMS140          LA        A0,SRTCNT         . CURRENT ENTRY COUNT          TLE,U     A0,MAXACC         . ARE WE AT MAXIMUM?          J         MS160             .  NO, CONTINUE          P$RINT    ERRPRT(1)         .  YES, 'TOO MANY ACCOUNTS'          ER        ERR$              .   ABORT..         FIRST OCCURRENCE OF THIS ACCOUNT, CREATE A RECORD FOR IT.MS160          AA,U      A0,1              . INCREMENT ENTRY COUNT          SA        A0,SRTCNT         .  AND REPLACE          AX,U      X5,SRSIZE         . X5 = POINTER TO NEW ENTRY          LA,U      A0,,X5            . INTO A0 FOR CLEAR OPERATION          LXI,U     A0,1              . INCREMENT FOR BT          LA,U      A1,(0)            . POINTER TO ZERO-FILL          LR,U      R1,SRSIZE         . RECORD SIZE          BT        A0,,*A1           . ZEROFILL NEXT RECORD          DS        A4,SRACCT,X5      . STORE ACCOUNT FOR THIS RECORD..         UPDATE MATCHING ACCOUNT RECORD AND TOTAL RECORD FOR THIS FILE.MS200          LA,U      A6,1              . FIRST UPDATE CALL          LMJ       X11,UPDREC        . UPDATE RECORD FOR THIS ACCOUNTMS210          LX,U      X5,TOTREC         . ADDRESS OF TOTAL RECORD          LA,U      A6,0              . SECOND UPDATE CALL          LMJ       X11,UPDREC        . UPDATE TOTAL RECORD FOR THIS FILE          JGD       R4,MS100          . BACK FOR NEXT FILE          TEP,U     A15,1*/('Z'-'T')  . ONLY WANT TOTALS?          J         MS295             .  YES, SKIP/..         FINISHED READING FILE DATA, SORT ACCOUNT TABLE ALPHABETICALLY.          LA        A0,SRTCNT         . ACCOUNT RECORD COUNT          ANA,U     A0,1              . DECREMENT FOR LOOP          LR        R3,A0             . OUTER LOOP COUNTMS220          JGD       R3,$+2            . DECREMENT OUTER LOOP BY ONE EACH PASS          J         MS290             . EXIT WHEN FINISHED          LR        R2,R3             . INNER LOOP COUNT = NEW OUTER LOOP CT          LA        A0,(SRSIZE,SRTTBL-SRSIZE) . INIT ACCT TBL PTR FOR THIS PASS          LA,U      A1,0              . CLEAR EXCHANGE FLAGMS230          DL        A4,SRSIZE,*A0     . GET ACCOUNT NUMBER FROM FIRST RECORD          JP        A4,MS240          . SKIP IF POSITIVE          TN        SRSIZE,A0         .  IF NOT, IS ACCT FROM 2ND RECORD NEG?          J         MS260             .   NO, EXCHANGE RECORDS          J         MS250             .   YES, TREAT AS BOTH POSITIVEMS240          TP        SRSIZE,A0         . FIRST ACCT POS, IS SECOND POS?          J         MS280             .  NO, RECORDS ARE IN CORRECT ORDERMS250          DAN       A4,SRSIZE,A0      . SUBTRACT 2ND ACCT FROM FIRST          JN        A4,MS280          . IF RESULT IS NEG, RECS ARE IN ORDER          DJZ       A4,MS280          . DO NOT EXCHANGE IF EQUAL, EITHERMS260          LA,U      A1,,A0            . ADDRESS OF 1ST RECORD          LXI,U     A1,1              . INCREMENT, EXCHANGE ONE WORD AT A TIME          LR,U      R1,SRSIZE-1       . LOOP COUNT - 1MS270          LA        A4,,A1            . PICK UP NEXT WORD FROM 1ST RECORD          LA        A5,SRSIZE,A1      .  AND NEXT FROM 2ND RECORD          SA        A5,,A1            . EXCHANGE WORDS          SA        A4,SRSIZE,*A1     .  AND INCREMENT POINTER          JGD       R1,MS270          . LOOP FOR REST OF DATAMS280          JGD       R2,MS230          . LOOP FOR NEXT COMPARISON          JNZ       A1,MS220          . BACK TO START IF AN EXCHANGE WAS MADE/..         PRINT SUMMARY REPORT.MS290          LX        X5,(SRSIZE,SRTTBL-SRSIZE) . X5 = PTR TO ACCOUNT TABLE          LR        R5,SRTCNT         . R5 = REM ENTRY COUNT          JGD       R5,$+1            . DECREMENT FOR JGDMS295          LA        A8,TOTREC+SRONLN+SENTRK . ONLINE FIXED TRACKS          AA        A8,TOTREC+SRUNLD+SENTRK .  PLUS UNLOADED FIXED TRACKS          AA        A8,TOTREC+SRREM+SENTRK .  PLUS REMOV TRACKS = TOTAL TRACKS          DSL       A10,72            . ZERO LINE COUNT AND 1ST-PAGE FLAG          E$DIT     EPKT              . OPEN EDIT..         FORMAT AND PRINT THE NEXT OUTPUT LINE.MS300          JGD       A10,MS320         . DECR REM LINE COUNT, SKIP IF > 0          LA        A4,(0777700+22,LINE) . DEFAULT PRINT CTL WORD, PAGE THROW          TOP,U     A15,1*/('Z'-'P')  . OUTPUT TO ATTACHED PRINTER?          J         MS310             .  NO, SKIP          JNZ       A11,MS310         .  YES, SKIP ALSO IF NOT 1ST PAGE          LA,U      A11,1             . SET NOT-1ST-PAGE          LA        A0,(2,('D,@@PRNT    ')) . TURN ON ATTACHED PRINTER          ER        PRTCN$            .          LA        A4,(0100+22,LINE) . DO NOT THROW A PAGE THIS TIMEMS310          E$CLEAR                     . CLEAR EDIT          E$COPY    12,SITCOD         . PLACE SYSTEM-ID IN CC 1-12          E$COL     66-$SL(M$SITENM)/2 . CENTER SITE NAME          E$MSG     HDG1M             .  AND EDIT INTO IMAGE          P$RINT    A4                . PRINT 1ST HEADING LINE (SITE NAME)MS312          E$CLEAR                     . CLEAR EDIT          E$MSG     HDG2M             . 'M/S USAGE BY ACCOUNT    DATE: '          E$DAY1    DIRDAT            . DATE OF DIRECTORY ACQUIRE          E$MSGR                      . '  TIME: '          E$TIME    DIRDAT            . TIME OF DIRECTORY ACQUIRE          P$RINT    (0126,LINE)       . PRINT 2ND HEADING LINE          P$RINT    (0100,$)          . SKIP DOWN          P$RINT    (0100+H3L,HDG3)   . FIRST SET OF COL HEADINGS          P$RINT    (0100+H4L,HDG4)   . SECOND SET          P$RINT    (0100+H4L,DASHES) . FOLLOW WITH A LINE OF DASHES          P$RINT    (0100,$)          .  AND SKIP ONE MORE LINE          TEP,U     A15,1*/('Z'-'T')  . ONLY WANT TOTALS?          J         MS340             .  YES, SKIP          LA,U      A10,M$LPP-9       . RESET LINE COUNTERMS320          E$CLEAR                     . CLEAR EDIT          E$COPY    12,SRACCT+SRSIZE,*X5 . ACCOUNT NAME FROM TABLE ENTRY          LMJ       X10,LINOUT        . OUTPUT REMAINDER IN GENERAL FORMAT          JGD       R5,MS300          . BACK FOR NEXT ACCOUNT RECORD          P$RINT    (0100,$)          . SKIP DOWNMS340          E$CLEAR                     . CLEAR EDIT          E$COPY    12,(' * TOTALS * ') . INDICATE TOTAL LINE          LX,U      X5,TOTREC         . POINT TO TOTAL RECORD          LMJ       X10,LINOUT        . OUTPUT REMAINDER IN GENERAL FORMAT          LA        A0,(2,('D,@@NOPR    ')) . TURN OFF ATTACHED PRINTER          TEP,U     A15,1*/('Z'-'P')  . DO WE WANT TO DO THIS?          ER        PRTCN$            .  YES          ER        EXIT$             . ALL DONE!..MS900          P$RINT    ERRPRT(3)         . 'I/O ERROR READING MFD DATA BASE'          ER        ERR$              .  ABORTMS910          P$RINT    ERRPRT(4)         . 'INPUT MFDDB HAS BAD HEADER'          ER        ERR$              .  ABORT/..         UPDATE AN ACCOUNT RECORD.         X4 = FILE RECORD ADDRESS, X5 = ACCT RECORD ADDRESS.UPDREC          LA        A0,MFTYPE,X4      . GET FILE TYPE          TE,U      A0,MMFIXD         . FIXED DISC?          J         UR150             .  NO, SKIP          LX,U      X6,SRONLN,X5      . X6 = ADDR OF ONLINE TOTALS          LA        A0,MFDESC,X4      . DESCRIPTOR BITS          TEP,U     A0,MMUNLD         . IS FILE UNLOADED?          LX,U      X6,SRUNLD,X5      .  YES, X6 = ADDR OF UNLOADED TOTALS          LMJ       X10,UPDENT        . UPDATE ENTRY FOR ONLINE OR UNLOADED          LA        A0,MFINHI,X4      . INHIBIT BITS          TOP,U     A0,MMGOPT         . IS THIS A G-OPTION          TEP,U     A0,MMVOPT         .  OR A V-OPTION FILE?          J         $+2               .   YES, CONTINUE          J         UR200             .   NO, FINISHED          LX,U      X6,SRGVFX,X5      . X6 = ADDR OF G,V-FIXED TOTALS          LMJ       X10,UPDENT        . UPDATE THIS ENTRY          J         UR200             . FINISHED WITH FIXED FILEUR150          TE,U      A0,MMREMD         . REMOVABLE DISC?          J         UR170             .  NO, SKIP          LX,U      X6,SRREM,X5       .  YES, X6 = ADDR OF REMOVABLE TOTALS          LMJ       X10,UPDENT        . UPDATE ENTRY FOR REMOVABLE          J         UR200             . FINISHED WITH REMOVABLE FILEUR170          TE,U      A0,MMTAPE         . TAPE FILE?          J         UR190             .  NO, SOMETHING IS WRONG HERE          INC       SRTPCT,X5         .  YES, INCREMENT CAT TAPE COUNT          NOP                         .          J         UR200             . FINISHED WITH CAT TAPE FILEUR190          JNZ       A6,UR200          . SKIP IF FIRST CALL          P$RINT    ERRPRT(2)         . 'UNKNOWN FILE TYPE: '          LA,U      A0,,X4            . ADDRESS OF FILE RECORD          LXI,U     A0,0100+10        . FORM PRINT CONTROL WORD          ER        PRINT$            . PRINT 1ST 10 WORDS OF FILE RECORDUR200          J         0,X11             . RETURN..         UPDENT CALLED FROM ABOVE WITH X6 = ENTRY ADDR BASED ON FILE TYPE.UPDENT          INC       SENCNT,X6         . INCREMENT FILE COUNT FOR TYPE          NOP                         .          LA        A0,SENTRK,X6      . TOTAL TRACK COUNT FOR TYPE          AA        A0,MFNOTR,X4      . ADD TRACK COUNT FOR THIS FILE          SA        A0,SENTRK,X6      . REPLACE IN ENTRY          J         0,X10             . RETURN/..         LINOUT IS CALLED TO FORMAT AND PRINT AN ACCOUNT RECORD.         X5 = ADDRESS (FROM ACCOUNT TABLE, OR TOTAL RECORD FOR ALL FILES).LINOUT          LX,U      X6,SRONLN         . ADDRESS OF ONLINE ENTRY          LMJ       X9,GRPOUT         . CALL GRPOUT TO FORMAT AND PRINT          LA        A6,SENTRK,X6      . A6 = TRACK COUNT FOR FIXED-ONLINE          LX,U      X6,SRUNLD         . ADDRESS OF UNLOADED ENTRY          LMJ       X9,GRPOUT         . CALL GRPOUT TO FORMAT AND PRINT          AA        A6,SENTRK,X6      . ADD TRACK COUNT FOR FIXED-UNLOADED          LX,U      X6,SRREM          . ADDRESS OF REMOVABLE ENTRY          LMJ       X9,GRPOUT         . CALL GRPOUT TO FORMAT AND PRINT          AA        A6,SENTRK,X6      . ADD REMOV TRK CT, A6 = TOT FOR ACCT          MSI,U     A6,1000           . TIMES 1000 FOR 1/10 PCT ACCURACY          DSL       A6,36             . PREPARE FOR DIVIDE          DI        A6,A8             . DIV BY TOTAL TRACK CT, ALL ACCOUNTS          DSL       A6,36             . A6 = PCT*10 , PREPARE FOR DIVIDE          DI,U      A6,10             . A6 = PCT, A7 = 1/10 PCT          E$DECF    5,A6              . EDIT PERCENTAGE OF TOTAL          E$CHAR    '.'               .          E$DECF    1,A7              . ADD TENTHS OF PERCENT          E$CHAR    '%'               .          E$DECF    8,SRGVFX+SENTRK,X5 . EDIT TRACK COUNT OF G,V-FIXED          E$DECF    8,SRGVFX+SENCNT,X5 . EDIT FILE COUNT OF G,V-FIXED          E$DECF    8,SRTPCT,X5       . CATALOGED TAPE COUNT          P$RINT    (0100+22,LINE)    . PRINT FORMATTED OUTPUT LINE          J         0,X10             .  AND RETURN..         GRPOUT IS CALLED FROM ABOVE TO EDIT TRACK COUNT, PCT OF TOT TRKS,.         FILE COUNT, PCT OF TOTAL FILES FOR EACH OF 3 CATEGORIES.         X5 = ACCOUNT RECORD ADDRESS, X6 = OFFSET FOR ENTRY.GRPOUT          LX,U      X7,TOTREC,X6      . X7 = ADDR OF ENTRY WITHIN TOTAL RECORD          AX,U      X6,,X5            . X6 = ADDR OF ENTRY IN CURR ACCOUNT REC          E$DECF    9,SENTRK,X6       . EDIT TRACK COUNT          LA        A4,SENTRK,X6      . A4 = TRACK COUNT          MSI,U     A4,1000           . TIMES 1000 FOR 1/10 PCT ACCURACY          DSL       A4,36             . PREPARE FOR DIVIDE          DI        A4,SENTRK,X7      . DIV BY TOTAL THIS CATEGORY, ALL ACCTS          DSL       A4,36             . A4 = PCT*10 , PREPARE FOR DIVIDE          DI,U      A4,10             . A4 = PCT, A5 = 1/10 PCT          E$DECF    4,A4              . EDIT PERCENTAGE OF CATEGORY TOTAL          E$CHAR    '.'               .          E$DECF    1,A5              . ADD TENTHS OF PERCENT          E$CHAR    '%'               .          E$DECF    6,SENCNT,X6       . EDIT FILE COUNT          LA        A4,SENCNT,X6      . A4 = FILE COUNT          MSI,U     A4,1000           . TIMES 1000 FOR 1/10 PCT ACCURACY          DSL       A4,36             . PREPARE FOR DIVIDE          DI        A4,SENCNT,X7      . DIV BY TOTAL THIS CATEGORY, ALL ACCTS          DSL       A4,36             . A4 = PCT*10 , PREPARE FOR DIVIDE          DI,U      A4,10             . A4 = PCT, A5 = 1/10 PCT          E$DECF    4,A4              . EDIT PERCENTAGE OF CATEGORY TOTAL          E$CHAR    '.'               .          E$DECF    1,A5              . ADD TENTHS OF PERCENT          E$CHAR    '%'               .          J         0,X9              . RETURN/.ERR(1)    'TOO MANY ACCOUNTS, INCREASE <MAXACC>'ERR(2)    'UNKNOWN FILE TYPE:'ERR(3)    'I/O ERROR READING MFD DATA BASE'ERR(4)    '*ERROR* INPUT MFDDB HAS BAD HEADER, OR WRONG SOFTWARE LEVEL'ERR(5)    '*ERROR* SYSTEM-ID PARAMETER CARD MISSING, REQUIRED'ERR(6)I DO 5 ,ERRPRT(I) + 0100+ERR(I+1)-ERR(I),ERR(I).HDG1M     '':$CFS(M$SITENM):'&'HDG2M DO 8 , ' '          '    MASS STORAGE USAGE BY ACCOUNT            DATE: &   TIME: &'HDG3      '  ACCOUNT '          '   ***** FIXED - ONLINE *****'          '  **** FIXED - UNLOADED **** '          ' ******** REMOVABLE *******  '          'SYST   * GV - FIXED *   TAPE 'H3L       EQU       $-HDG3HDG4      '  NUMBER '          '   TRACKS   PCT   FILES   PCT '          '  TRACKS   PCT   FILES   PCT  '          ' TRACKS   PCT   FILES   PCT   '          ' PCT   TRACKS   FILES   FILES'H4L       EQU       $-HDG4DASHES DO H4L , '- - - '/.$(0)SRTCNT    +         0                 . COUNT OF ACCOUNT RECORDSDIRDAT    +         0                 . DATE/TIME OF DIRECTORY ACQUIREEPKT      E$PKT     22,LINE           . EDIT$ PACKETSITCOD    '            '              . SYSTEM-ID PARAMETERLINE      RES       22                . EDIT$ OUTPUT BUFFERRDHDR     I$OD      '$MFDB$',R$  28,HDRBUF  0 . PKT FOR READ OF MFDDB HEADERRPKT      D$BRP     '$MFDB$'  28,1792*2,64 . PKT FOR D/B READ OF MFDDB FILE DATAHDRBUF    RES       28                . MFDDB HEADER BUFFERTOTREC    RES       SRSIZE            . TOTAL RECORD FOR ALL ACCOUNTSSRTTBL    RES       SRSIZE*MAXACC     . ACCOUNT RECORD TABLE          END       START@ELT,SIP MARSREL$.MAP/MSREP,,,221004033233,006IN MARS$.MSREP,.GETOWNNOT TPF$.@ELT,SIP MARSREL$.NOBACK,,,112242042335,023.         PROGRAM TO ERASE MFD BACKUP INFO FOR A SPECIFIED FILE   WRC 3/90.$(1)      AXR$START          SA        A5,A15            . SAVE OPTIONS          LA        A0,(50,INFBUF)    .          LMJ       X11,RINF$         . READ INFOR FROM PROCESSOR CALL          J         ER120             .  EXIT IF ERROR FROM RINF$          LMJ       X11,IDONLY$       . FORMAT ID LINE          P$RINT    (0107,IDBUFF)     .  AND PRINT IT          LA,U      A0,1              .          LMJ       X11,SELT$         . PICK UP SPECIFICATION 1          J         ER100             .  ERROR IF NOT FOUND          DL        A0,DPKT+1         . USE NAME ('NOBACK$')          LMJ       X11,DUSE$         . ATTACH USE NAME TO FILE          LA,U      A0,ASG            .  @ASG,AE NOBACK$          ER        CSF$              . ASSIGN FILE FOR DIRECTORY READ/UPDATE          JP        A0,NB100          . SKIP IF STATUS IS POSITIVE          LA        A4,A0             . NEG STATUS, SAVE FOR EDIT          E$DIT     EPKT              . OPEN EDIT          E$MSG     CSFERR            . '*COULD NOT @ASG,AE INPUT, STATUS: '          E$OCTF    12,A4             . CSF$ STATUS          P$RINT    (0114,LINE)       . PRINT ERROR MESSAGE          J         ER150             . ERROR TERMINATENB100          ER        TDATE$            . GET CURRENT DATE/TIME          SA        A0,DPKT+4         . STORE FOR BACKUP INFO UPDATE          LA,U      A0,DPKT           . MSCON$-DBACK1$ PACKET          ER        MSCON$            . SET DATE=NOW, REEL=XXXXXX, POS=1          JN        A0,NB900          .  SKIP IF ERROR FROM MSCON$          DSL       A0,72             . CLEAR A0,A1          DS        A0,DPKT+3         . ZERO PACKET WORDS 3-8          DS        A0,DPKT+5         .  (CLEAR ALL BACKUP INFO)          DS        A0,DPKT+7         .          LA,U      A0,DPKT           . MSCON$-DBACK1$ PACKET          ER        MSCON$            . ZERO DATE, REEL, POSITION          JN        A0,NB900          .  SKIP IF ERROR FROM MSCON$          LA        A0,(9,FACPKT)     . FITEM$ PACKET          ER        FITEM$            . GET EXTERNAL NAME INFO FOR FILE          E$DIT     EPKT              . OPEN EDIT          E$MSG     ENDMSG            . '*BACKUP INFO ERASED FOR FILE: '          E$FD2     FACPKT+4          . QUALIFIER          E$MSGR                      . *          E$FD2     FACPKT+2          . FILENAME          E$MSGR                      . (          LA        A0,FACPKT+6       . ABS F-CYCLE          LSSL      A0,24             . SHIFT T3 TO A0 LOWER          SSL       A0,24             .          E$DECV                      . EDIT IN          E$MSGR                      . ) *'          P$RINT    (0114,LINE)       . PRINT NORMAL COMPLETION MESSAGE          LA,U      A0,FREE           . FREE FILE          ER        CSF$              .          ER        EXIT$             .  AND EXIT NORMALLYNB900          LA        A4,A0             . SAVE MSCON$ ERROR STATUS          E$DIT     EPKT              . OPEN EDIT          E$MSG     MSCERR            . '*MSCON$-DBACK1$ ERROR, STATUS: '          E$OCTF    12,A4             . INSERT STATUS CODE          P$RINT    (0114,LINE)       . PRINT ERROR MESSAGE          LA,U      A0,FREE           . FREE FILE          ER        CSF$              .          J         ER150             . ERROR TERMINATEER100          LA        A0,(0100+E1L,ERR1) . 'SPEC 1 REQUIRED - OMITTED'ER120          ER        PRINT$            . PRINT ERROR MESSAGEER150          TOP       A15,(1*/('Z'-'C')) . CONTINUE AFTER ERROR?          ER        ERR$              .  NO, ABORT          ER        EXIT$             .  YES, EXIT QUIETLY.ASG       '@ASG,AE $NOBACK$ . 'FREE      '@FREE,B $NOBACK$ . 'ERR1      'SPECIFICATION 1 REQUIRED - OMITTED'E1L       EQU       $-ERR1CSFERR    '*COULD NOT @ASG,AE INPUT FILE - STATUS: &'MSCERR    '*MSCON$/DBACK1$ ERROR - STATUS: &'ENDMSG    '* BACKUP INFORMATION ERASED FOR FILE: &*&(&). *&'.$(0)DPKT      +         DBACK1$           . MSCON$ - DBACK1$ REQUEST PACKET          '$NOBACK$'                  . INTERNAL NAME OF FILE          +         1,0,0             . BACKUP WORD COUNT = 1 (REEL NBR)          +         0                 . DATE OF BACKUP CREATION          +         010001,1          . LEVELS = 1, BLOCKS = 0          +         0,1,0             . POSITION = 1          'XXXXXX'                    . REEL = 'XXXXXX'          RES       10                .FACPKT    '$NOBACK$  '                . FITEM$ PACKET FOR EXTERNAL NAME INFO          RES       7                 .IDBUFF*   'NOBACK 1R1A '              . IDONLY$ PACKET DO 5 , ' '                           .EPKT      E$PKT     12,LINE           . EDIT$ PACKETLINE      RES       12                . EDIT$ OUTPUT BUFFERINFBUF    RES       50                . INFOR$ BUFFER          END       START             .@ELT,SIP MARSREL$.MAP/NOBACK,,,177425141433,006IN MARS$.NOBACKNOT TPF$.@ELT,SIP MARSREL$.REBUILD,,,156373123137,023.         PROGRAM TO REBUILD THE ARCHIVE HISTORY FILE, REMOVING.         EXPIRED FILE ENTRIES, AND TO CREATE A NEW POINTER TABLE..         A REPORT OF NEWLY-ARCHIVED AND EXPIRED FILES IS ALSO GENERATED...         REBUILD CAN ALSO BE USED (WITH THE 'F' OPTION) TO UPDATE OR LIST.         THE FAS SAVE-HISTORY FILE.  AN INPUT MFD EXTRACT IS USED TO BUILD.         NEW ENTRIES, AND EXPIRED ENTRIES ARE REMOVED.  IN UPDATE MODE, NO.         LISTING IS PRODUCED.  IF A LISTING IS DESIRED, THE 'R' OPTION CAN.         BE USED TO LIST THE CONTENTS OF THE FAS SAVE-HISTORY FILE IN A.         SEPARATE EXECUTION..                                                                WRC 2/89..         INPUT:  HISTIN$ (ORIGINAL SYS$*ARCHIST$ OR SYS$*SAVHIST$).                 $MFDB$ (MFD DATA BASE, FAS SAVE UPDATE ONLY)..                 SITE-ID PARAMETER CARD, IF 'H' OPTION GIVEN.                 EXPIRATION PARAM FOR NEW SAVE-HISTORY ENTS, IF 'F' OPT GIVEN.                 LIST OF ONE OR MORE REEL-IDS, IF 'T' OPT GIVEN..         OUTPUT: HISTOUT$ (SYS$*ARCHIST$(+1) OR SYS$*SAVHIST$(+1)).                 SUMMARY REPORT (ARCHIVE UPDATE), OR.                 DETAIL LISTING (R-OPTION)..         THE FOLLOWING OPTIONS ARE AVAILABLE:..         A - THIS IS A SAVE-HISTORY UPDATE FROM A 'SAVALL'.  ANY BACKED UP.             FILES THAT WERE NOT SAVED SINCE THE LAST UPDATE WILL BE LISTED.             AND THE ERROR FLAG WILL BE SET, RESULTING IN A PRINTOUT.  THIS.             OPTION IS ONLY MEANINGFUL WHEN USED WITH 'F'...         B - DO NOT PRINT ERROR MESSAGE OR SET ERROR FLAG IF BACKUP REEL.             COUNT EXCEEDS 4 REELS.  USED ONLY IN CONJUNCTION WITH 'F'...         C - GENERATE A CONSOLE WARNING MESSAGE IF THERE WERE ACP ERROR(S).             DURING ARCHIVE..         D - USE THE LAST UPDATE DATE FROM THE INPUT HISTORY FILE (RATHER.             THAN TODAY'S DATE) AS BASIS FOR TIME RANGES, EXPIRATION..         E - NORMALLY ON A SHARED HISTORY FILE UPDATE, ONLY FILES FROM THE.             STANDARD DIRECTORY ON THE CURRENT HOST (AND SHARED DIRECTORY,.             IF NEW FILES ARE DETECTED) ARE CANDIDATES FOR EXPIRATION.  USE.             OF THIS OPTION WILL CONSIDER ALL FILES FOR EXPIRATION, REGARD-.             LESS OF ORIGINATING HOST.  USEFUL ONLY WHEN M$MHFSHARED > 0, IF.             MARS OPERATION IS HALTED FOR A PREVIOUSLY-ACTIVE HOST...         F - UPDATE OR LIST THE FAS SAVE-HISTORY FILE (SYS$*SAVHIST$)..             IF UPDATE (NO R-OPTION), EXPIRATION OF NEWLY-SAVED FILES IS.             SPECIFIED BY AN INPUT PARAMETER CARD...         H - READ THE SYSTEM-ID (UP TO 12 CHARS) FROM INPUT PARAMETER CARD..             THIS IS DISPLAYED IN THE HEADING OF ALL REPORTS...         M - USED ONLY WITH 'F'.  MERGE FAS ARCHIVE HISTORY ($MFDB$=EXTRACT).             WITH CURRENT HIST FILE.  EXP OF FILES SET BY A PARAM CARD IN THE.             FORMAT NNNN (DAYS FROM TODAY) OR +NNNN (DAYS FROM ORIG ARCHIVE)...         R - READ-ONLY MODE.  THE CONTENTS OF THE INPUT ARCHIST$ (OR.             SAVHIST$, IF 'F' IS USED) ARE LISTED.  NO UPDATES ARE DONE...         T - A LIST OF ONE OR MORE TAPE REELS IS SUPPLIED BY THE USER.             IMMEDIATELY FOLLOWING THE @XQT CARD.  EACH REEL-ID IS 1-6.             CHARACTERS, LJSF.  UP TO <MAXTAP> REELS MAY BE ENTERED..             THE LIST IS TERMINATED BY AN @EOF.  IF OPERATED IN UPDATE.             MODE, THE SPECIFIED REELS WILL BE EXPIRED AND ALL FILES WITH.             CURRENT BACKUPS ON THEM WILL BE REMOVED FROM THE DATABASE..             IF OPERATED IN READ-ONLY MODE, ONLY FILES WITH BACKUPS ON THE.             SPECIFIED REELS WILL BE LISTED...            *NOTE: IF YOU ARE USING THE FETCH PROCESSOR IN A BATCH ENVIRONMENT.            TO RELOAD ARCHIVED FILES, USE THE 'T' OPTION IN UPDATE MODE WITH.            EXTREME CAUTION.  IF A CURRENT FILE WAS ARCHIVED TO A TAPE WHICH.            HAS BEEN REMOVED, FETCH MAY AUTOMATICALLY SELECT AN EARLIER FILE.            WITHOUT ABORTING THE RUN.  FETCH WILL NOT AUTOMATICALLY SELECT.            A CRITICAL-FILE BACKUP TAPE IF THE ORIGINAL IS LOST...         U - UPDATE (+1) THE ARCHIVE RUN COUNT IN THE OUTPUT FILE HEADER..         W - USED ONLY WITH 'R'.  LIST ARCHIVE/SAVE INFORMATION THAT HAS.             BEEN GENERATED WITHIN THE PAST WEEK...         Z - USED ONLY WITH 'R'.  LIST ARCHIVE INFORMATION FOR RELOADED.             FILES ONLY.  DO NOT USE WITH 'F' - RELOAD STATUS IS NOT.             MAINTAINED IN THE FAS SAVE-HISTORY FILE./.$(1)      AXR$          $LIT          MGPDEF          AHFDEF          MFDDEF          D$BDEF.MAXEXR    EQU       100               . MAX NUMBER OF EXPIRED REELSMAXTAP    EQU       20                . MAX NUMBER OF USER-SPEC REELS ('T' OPT)RBLVL     EQU       0700+(M$MHFSHARED>0)*1 . INTERNAL LEVEL OF THIS PROGRAMDBFSIZ    EQU       1792*4            . DBI/DBO BUFFER SIZES..         SORT RECORD DEFINITIONS.SRTYPE    EQUF      0,,S1             . TYPE: 0=CURRENT, 1=EXPIRED/RELOADEDSRFLGS    EQUF      0,,S2             . AHFLGSSRRLDF    EQUF      0,,S3             . SET (=1) IF RELOADED, FD 'P' OR 'D'                                      .  IF PURGED OR DELETEDSREXP     EQUF      0,,H2             . EXPIRATION PERIOD (DAYS)SRQUAL    EQUF      1                 . QUALIFIERSRFILE    EQUF      3                 . FILENAMESRHSCJ    EQUF      5,,H1             . HOSTID (35-33), JUL CAT DATE (32-18)SRCTIM    EQUF      5,,H2             . TIME CATALOGUED (TDATE$ H2)SRCYCL    EQUF      6,,H1             . CYCLESRADJL    EQUF      6,,H2             . DATE ARCHIVED (JULIAN)SRLNKO    EQUF      7                 . OUTPUT ARCHIST$ LINKSRLNKI    EQUF      8                 . INPUT ARCHIST$ LINKSRTKCT    EQUF      9,,H1             . TRACK COUNTSRRCPS    EQUF      9,,H2             . REEL COUNT (S4), STARTING POSITION (T3)SRREEL    EQUF      10                . FIRST AND SECOND ARCHIVE REEL(S)SRMTYPE   EQUF      12,,S1            . REASON FOR ARCHIVE (R)EF, (C)YCLESRMQWC    EQUF      12,,S2            . WILDCARD COUNT OF MATCHING QUALSRMFWC    EQUF      12,,S3            . WILDCARD COUNT OF MATCHING FILESRREFD    EQUF      12,,H2            . LAST REFERENCE DATE (TDATE$ H1)SRMVLC    EQUF      13,,H1            . DSR/RFC FROM CONTROL FILESRMVLF    EQUF      13,,H2            . DSR/RFC OF THIS FILESRMCLS    EQUF      14                . CLASS-ID.SRSIZE    EQU       15                . SIZE OF SORT RECORD/..         INITIALIZE - GET DATE, OPEN SORT, CHECK OPTIONS.START          SA        A5,A15            . SAVE OPTIONS          ER        TDATE$            . GET TODAY'S DATE          SA        A0,CURTDA         . SAVE FOR LATER USE          LMJ       X11,JULOUT        . CONVERT TO JULIAN          ER        ERR$              . BLOW UP IF NOT CONVERTIBLE          SA        A4,CURJUL         . STORE CURRENT JULIAN DATE          ANA,U     A4,7              . SUBTRACT 7 = ONE WEEK AGO          SA        A4,LSWJUL         . STORE WEEK-AGO JULIAN DATE          LMJ       X11,JULIN         . CONVERT BACK TO TDATE$          SA        A0,LSWTDA         . STORE WEEK-AGO TDATE$ DATE          LA,U      A0,DIDPKT         .          ER        MSCON$            . PERFORM MSCON$-DIRID$ FUNCTION          JN        A0,RB050          . SKIP IF NEG STATUS RETURNED          LA,S6     A0,DIDBUF         . GET MHFS INDICATOR BITS          TEP,U     A0,1*/0           . IS MHFS CONFIG ON THIS SYSTEM?          J         RB060             .  YES, SKIPRB050          $IF       M$MHFSHARED=0     . ON FOR NON-SHARED CONFIG          J         RB070             . DOESN'T MATTER IF MHFS NOT AVAIL          $ELSE                       . ON FOR SHARED CONFIG          P$RINT    ERRPRT(16)        . 'MHFS NOT CONFIG, <M$MHFSHARED> MUST =0'          ER        ERR$              .  ABORT          $ENDF                       . END OF CONDITIONAL CODERB060          LA,S5     A0,DIDBUF         . HOST-ID OF THIS SYSTEM          SA        A0,HOSTID         . SAVE FOR LATER USE          TG,U      A0,1              . TEST FOR WITHIN RANGE 1-4          TG,U      A0,4+1            .          J         $+2               . NOT IN RANGE          J         RB070             . IN RANGE, CONTINUE          P$RINT    ERRPRT(17)        . 'INVALID HOST-ID RET BY DIRID$'          ER        ERR$              .  ABORTRB070          TOP       A15,(1*/('Z'-'H')) . IS SYSTEM-ID CARD SUPPLIED?          J         RB100             .  NO, SKIP          R$EAD     (RB080,SITCOD)    .  YES, READ IT IN          J         RB100             .RB080          P$RINT    ERRPRT(13)        . 'SYSTEM-ID CARD MISSING, REQUIRED'          ER        ERR$              .  ABORTRB100          TOP       A15,(1*/('Z'-'F')) . IS THIS A FAS HIST UPDATE?          J         RB110             .  NO, SKIP          LA        A0,('*SHFL*')     .  YES, USE FAS HIST FILE LABEL          SA        A0,HDRLBL         . STORE CORRECT LABEL WORD          TEP,U     A15,1*/('Z'-'R')  . READ-ONLY MODE?          J         RB110             .  YES, SKIP READ OF EXP PARAMETER          R$EAD     (RB108,LINE)      . GET PARAMETER CARD          LA,U      A0,,A0            . A0 = WORD COUNT          JZ        A0,RB108          . ERROR IF NOTHING THERE          LA        A0,LINE           . A0 = PARAMETER          LSSC      A0,6              . SHIFT 1ST CHAR TO S6          TOP,U     A15,1*/('Z'-'M')  . MERGE WITH FAS ARCHIVE HIST?          J         RB104             .  NO, DON'T ACCEPT REL (+) EXP PARAM          AND,U     A0,077            . FIRST CHAR TO A1          TE,U      A1,'+'            . IS EXP RELATIVE TO CREATION?          J         RB104             .  NO, SKIP          SP1       EXPREL            .  YES, SET FLAG          LSSC      A0,6              . POSITION NEXT CHAR INTO S6RB104          LA,U      A4,4              . ALLOW ONLY 4 NUMERIC CHARS          LA,U      A2,0              . INIT BINARY EXP = 0RB105          AND,U     A0,077            . NEXT CHAR TO A1          TNE,U     A1,' '            . END OF PARAM?          J         RB106             .  YES, SKIP          ANA,U     A1,'0'            .  NO, CONVERT TO BINARY          TG,U      A1,0              . VERIFY WITHIN RANGE          TG,U      A1,10             .          J         RB108             . NOT WITHIN RANGE, ERROR          MSI,U     A2,10             . MULT ACCUM BY TEN          AA,U      A2,,A1            . ADD IN CURRENT DIGIT          LSSC      A0,6              . POSITION NEXT DIGIT          JGD       A4,RB105          . CONTINUE LOOP          J         RB108             . ERROR, TOO MANY CHARS SUPPLIEDRB106          JZ        A2,RB108          . ERROR IF PARAM = 0          SA        A2,NEWEXP         . SAVE EXP PARAM FOR LATER USE          TOP,U     A15,1*/('Z'-'M')  . IS THIS A MERGE OF FAS ARCH HIST?          J         RB110             .  NO, SKIP          P$RINT    ERRPRT(11)        .  YES, '*MERGING FAS ARCH HIST... *'          E$DIT     EPKT              . OPEN EDIT          E$MSG     EXPMSG            . 'MERGED ENTS FROM ARCHIVE$ WILL EXPIRE'          E$DECV    NEWEXP            . EXP PERIOD          E$MSGR                      . ' DAYS FROM '          LA,U      A0,EXPMSA         . 'TODAY.'          TZ        EXPREL            . EXP REL TO ARCHIVE DATE?          LA,U      A0,EXPMSR         .  YES, 'DATE OF ARCHIVE.'          E$MSG                       . FINISH OFF STATUS MESSAGE          P$RINT    (0120,LINE)       . AND PRINT IT          J         RB110             . CONTINUE WITH INITIALIZATIONRB108          P$RINT    ERRPRT(12)        . 'SUPPLIED EXP MISSING OR INV FORMAT'          ER        ERR$              . ERROR EXIT..         OPEN THE INPUT HISTORY FILE.RB110          I$OW      RDHSTH            . READ AHF HEADER          LMJ       X9,STATUS         . CHECK STATUS          J         RB920             .  EXIT IF I/O ERROR          LX,U      X4,AHHDBF         . POINTER TO HEADER BUFFER          LA        A0,AHHLBL,X4      . GET LABEL WORD          TE        A0,HDRLBL         . IS IT CORRECT LABEL?          J         RB120             .  NO, SKIP          TOP       A15,(1*/('Z'-'D')) . USE LAST UPDATE DATE AS CURRENT?          J         RB115             .  NO, SKIP          LA        A0,AHHUPT,X4      .  YES, GET LAST DATE FROM HEADER          SA        A0,CURTDA         . SAVE AS CURRENT          LMJ       X11,JULOUT        . CONVERT TO JULIAN          J         RB120             . IF ERROR, TREAT AS BAD HEADER          SA        A4,CURJUL         . SAVE AS CURRENT JULIAN TIME          ANA,U     A4,7              . SUBTRACT 7 = ONE WEEK AGO          SA        A4,LSWJUL         . SAVE WEEK-AGO DATE, BASED ON HEADER          LMJ       X11,JULIN         . CONVERT BACK TO TDATE$ FORMAT          SA        A0,LSWTDA         . WEEK-AGO TDATE$, BASED ON HEADERRB115          LA        A0,AHHNXB,X4      . GET NEXT HIST SECTOR TO WRITE          ANA       A0,AHHSTB,X4      . SUBTRACT FIRST = HIST SECTOR COUNT          JGD       A0,RB125          . DECR FOR LOOP, SKIP IF > 0          TEP       A15,(1*/('Z'-'F')) . IF ZERO, MUST BE FAS SAVE OPERATION          TEP,U     A15,1*/('Z'-'R')  .  IN UPDATE MODE          J         RB120             .   IF NOT, ERROR EXIT          TNZ       AHHLEV,X4         . REBUILD LEVEL MUST BE ZERO (INIT FILE)          TE,XU     A0,-1             .  AND START MUST EQUAL NEXT          J         RB120             .  IF NOT, ERROR EXIT          P$RINT    ERRPRT(8)         . 'INPUT FILE EMPTY - INIT UPDATE PERF'          LR,XU     R4,-1             . SET INPUT LOOP CTR FOR EOF          SP1       MFDERF            .  AND SET ERROR FLAG TO GEN PRINT          J         RB140             . GO OPEN INPUT MFDDBRB120          P$RINT    ERRPRT(1)         . 'INPUT FILE IS EMPTY OR HAS BAD LABEL'          J         RB920             .  ERROR EXITRB125          LR,U      R4,,A0            . R4 = LOOP COUNT          LA,U      A4,1,A0           . SET A4 = SECTOR (ENTRY) COUNT          SR        R4,INPJGD         . STORE LOOP COUNT FOR LATER USE          LA        A0,AHHSFA,X4      . SHARED-UPDATE INDICATOR          SA        A0,SHRUPD         . SAVE FOR LATER USE          LA        A0,AHHSTB,X4      . GET STARTING SECTOR OF HIST ENTRIES          SA        A0,RDHIST+5       . STORE IN READ PACKET          SA        A0,INPSTB         . SAVE FOR LATER USE          LA        A0,(1,RDHIST)     . POINTER TO DOUBLE-BUFFER I/O PACKET          LA        A1,(1,RDHSAV)     . POINTER TO PACKET SAVE AREA          LR,U      R1,RDHSIZ         . PACKET SIZE          BT        A1,,*A0           . TRANSFER INITIALIZED PACKET TO SV AREA          D$BIO     RDHIST            . OPEN I/O TO HISTORY PORTION OF AHF          DL        A0,RDHIST         . INPUT FILENAME          DS        A0,FACPKT         .  INTO FITEM$ PACKET          LA        A0,(9,FACPKT)     .          ER        FITEM$            . ISSUE FITEM$ TO GET FULL FILE NAME          E$DIT     EPKT              . OPEN EDIT          E$MSG     INPMSG            . 'READING '          E$FD2     FACPKT+4          . INPUT QUALIFIER          E$MSGR                      . *          E$FD2     FACPKT+2          . FILENAME          E$MSGR                      . (          LA        A0,FACPKT+6       .          LSSL      A0,24             .          SSL       A0,24             .          E$DECV                      . CYCLE          E$MSGR                      . ') LAST UPDATED '          E$DAY1    AHHUPT,X4         . LAST UPDATE DATE          E$MSGR                      . ' AT '          E$TIME    AHHUPT,X4         . LAST UPDATE TIME          E$MSGR                      . ', WITH '          E$DECV    A4                . ENTRY COUNT          E$MSGR                      . ' ENTRIES.'          P$RINT    (0216,LINE)       . PRINT STATUS OF INPUT FILE          TOP,U     A15,1*/('Z'-'T')  . IS USER GOING TO SUPPLY TAPE LIST?          J         RB138             .  NO, SKIP          LA        A1,(1,0)          .  YES, SET UP POINTER          LR,U      R1,MAXTAP         . LOOP COUNTERRB130          LA,U      A0,TAPTBL,*A1     . ADDRESS OF NEXT REEL-ID          LXI,U     A0,RB135          . EOF TRANSFER ADDRESS          ER        READ$             . READ THE NEXT IMAGE          LA,U      A0,,A0            . A0 = WORDS READ          TNE,U     A0,1              . BETTER BE ONE, AND          JGD       R1,RB130          .  MUST HAVE ROOM IN TABLE          P$RINT    ERRPRT(10)        . IF NOT, 'FMT ERR OR <MAXTAP> EXCEEDED'          J         RB920             .  ABORTRB135          LA,U      A1,,A1            . A1 = REEL COUNT +1          ANA,U     A1,1              . ADJUST          SA        A1,TAPCNT         . SAVE REEL COUNT          JNZ       A1,RB138          . IF > 0, ALL IS OK          P$RINT    ERRPRT(4)         . IF NOT, 'NO TAPE REELS SPECIFIED'          J         RB920             .  ABORTRB138          TOP,U     A15,1*/('Z'-'R')  . READ-ONLY MODE, OR          TOP       A15,(1*/('Z'-'F')) .  NON-FAS OPERATION?          J         RB200             .   YES, SKIP          LR        R4,A4             .   NO, LOAD INPUT SHF COUNT          SP1       HSTGET            . SET GET FLAG FOR INPUT SHF..         OPEN THE INPUT MFDDB FILE (FAS SAVE UPDATE ONLY).RB140          I$OW      RDMFDH            . READ MFDDB HEADER          LMJ       X9,STATUS         . CHECK STATUS          J         RB920             .  EXIT IF I/O ERROR          LX,U      X5,MFHDBF         . ADDRESS OF HEADER BUFFER          LA        A0,MFLABL,X5      . GET FILE LABEL          TEP,U     A15,1*/('Z'-'M')  . MERGE WITH FAS ARCHIVE HISTORY?          J         RB142             .  YES, SKIP          LA        A1,MFLVWD,X5      .  NO, GET LEVEL WORD          SSL       A1,18             . H1 IS THE BASIC LEVEL ID          TNE       A0,('*MFDB*')     . IS LABEL = NORMAL?          TE,U      A1,012            .  AND IS MFDEDT LEVEL CORRECT?          J         RB145             .   NO, ERROR          LA        A0,MFOPWD,X5      . OPTIONS ON @MFDEDT CALL          TEP,U     A0,1*/('Z'-'S')   . MUST BE SORTED BY QUAL/FILE/CYCLE          TEP,U     A0,1*/('Z'-'N')   .  NOT BY ACCOUNT NUMBER          J         $+2               . ERROR IF SORTED IMPROPERLY          J         RB146             .  OTHERWISE, CONTINUE          P$RINT    ERRPRT(9)         . 'INPUT MFDDB MUST BE SORTED BY Q/F/C'          J         RB920             .  ERROR EXITRB142          TNE       A0,('*SADB*')     . IS LABEL OK FOR SPECIAL EXTRACT FILE?          J         RB146             .  YES, SKIPRB145          P$RINT    ERRPRT(7)         .  NO, 'FILE HAS BAD HEADER'          J         RB920             .   ERROR EXITRB146          $IF       M$MHFSHARED=0     . THIS CODE FOR NON-SHARED ONLY          TNZ       MFHDID,X5         . IS DIRECTORY-ID OF EXTRACT = 0?          J         RB148             .  YES, AS IT SHOULD BE          P$RINT    ERRPRT(14)        .  NO, 'SHARED INPUT NOT ALLOWED'          J         RB920             .  ABORT          $ELSE                       . THIS CODE FOR SHARED-ONLY          LA        A0,MFHHID,X5      . ORIGINATING HOSTID FROM MFDDB          JNZ       A0,RB147          . SKIP IF > 0 (MHFS INPUT)          P$RINT    ERRPRT(15)        .  IF ZERO, 'MHFS NOT CONFIG - REQUIRED'          J         RB920             .  ABORTRB147          SA        A0,HOSTID         . USE THIS AS HOSTID FOR EXP CHECK          LA        A0,MFHDID,X5      . DIRECTORY-ID FROM EXTRACT          SA        A0,SHRUPD         . IF NONZERO, SHARED FILES INCLUDED          $ENDF                       . END OF CONDITIONAL CODERB148          LR        R5,MFFLCT,X5      . INPUT MFDDB FILE COUNT          E$DIT     EPKT              . OPEN EDIT          E$MSG     MFDMSG            . 'INPUT MFD EXTRACT CREATED '          E$DAY1    MFTDAT,X5         . DATE CREATED          E$MSGR                      . ' AT '          E$TIME    MFTDAT,X5         . TIME CREATED          E$MSGR                      . ' WITH '          E$DECV    MFFLCT,X5         . FILE COUNT          E$MSGR                      . ' FILES.'          P$RINT    (0214,LINE)       . PRINT MFDDB STATUS LINE          LA        A0,MFTDAT,X5      . DATE/TIME CREATED (TDATE$)          LMJ       X10,JULDT         . CONVERT TO JULIAN          ER        ERR$              . ABORT IF NOT VALID TDATE$ FORMAT          SA        A4,CURJUL         . STORE JULIAN DATE OF CREATION          SA        A5,CURJTD         . STORE JULIAN TIME OF CREATION          D$BIO     RDMFD  MFFLAD,X5  . INIT D-B READ OF INPUT MFDDB          D$BOO     WRHIST  AHBEGN,,U . INIT D-B WRITE OF OUTPUT HIST FILE          SP1       MFDGET            . SET FLAG TO READ 1ST MFDDB ENTRY          LA        A4,R4             . ENTRY COUNT OF INPUT HISTORY FILE          AA        A4,R5             . ADD COUNT OF MFDDB FILE          LMJ       X10,SRTOPN        . OPEN SORT/..         GET NEXT ENTRIES FOR FAS SAVE-HISTORY FILE BUILD.RB150          TNZ       HSTGET            . READ THE NEXT HISTORY ENTRY?          J         RB160             .  NO, SKIP          JGD       R4,RB152          .  YES, DECR ENTRY COUNT AND SKIP          TN        R5                . NO MORE RECS IN SHF - ANY IN MFDDB?          J         RB155             .  YES, CONTINUE          J         RB195             .  NO, FINISHED WITH INPUT PHASERB152          D$BI      RDHIST  RB900,RB900 . GET THE NEXT SHF RECORD          ON        M$MHFSHARED>0     . THIS CODE FOR SHARED-ONLY          LA,U      A0,M$MHFDFHOST    . DEFAULT HOST-ID IF NONE DEFINED          TNZ       AHHOST,A1         . IS HOST-ID DEFINED IN HIST RECORD?          SA        A0,AHHOST,A1      .  NO, REPLACE WITH DEFAULT VALUE          OFF       M$MHFSHARED>0     . END OF SHARED-ONLY CODE          LX,U      X4,,A1            . X4 = ADDRESS OF NEXT SHF RECORDRB155          TNZ       MFDGET            . READ THE NEXT MFDDB ENTRY?          J         RB164             .  NO, SKIPRB160          JGD       R5,RB162          . DECR MFDDB ENTRY COUNT AND SKIP          TN        R4                . NO MORE RECS IN MFDDB - ANY IN SHF?          J         RB164             .  YES, CONTINUE          J         RB195             .  NO, FINISHED WITH INPUT PHASERB162          D$BI      RDMFD  RB900,RB900 . GET THE NEXT MFDDB RECORD          TNZ,H1    0,A1              . IS THIS A FILE ENTRY?          J         RB162             .  NO, IGNORE - GET NEXT ENTRY          LA        A0,MFTYPE,A1      . GET FILE TYPE          TE,U      A0,MMTAPE         . IS THIS A CATALOGUED TAPE, OR          TNZ       MFBKUT,A1         .  IS THE BACKUP TIME ZERO?          J         RB160             .   YES, GET NEXT ENTRY          LA        A0,MFDESC,A1      . DESCRIPTOR FLAGS          TEP,U     A0,MMBKUP         . IS THIS FILE MARKED BACKED UP, AND          TNZ       MFBUNO,A1         .  ARE THERE ONE OR MORE SAVE TAPES?          J         RB160             .   NO, GET NEXT ENTRY          ON        M$MHFSHARED=0     . THIS CODE FOR NON-SHARED ONLY          TZ        MFDRID,A1         . DIRECTORY ID (0=STD, 1=SHR)          J         RB160             . IGNORE THIS FILE UNLESS STD DIR          OFF       M$MHFSHARED=0     . END OF NON-SHARED CODE          LX,U      X5,,A1            . USE THIS ENTRY, X5 = ADDRESSRB164          SZ        GETFLGS           . CLEAR NEXT-RECORD GET FLAGS          TP        R4                . IS THERE AN INPUT SHF RECORD?          J         RB180             .  NO, PROCESS MFDDB RECORD ONLY          TP        R5                .  YES, IS THERE AN INPUT MFDDB RECORD?          J         RB172             .   NO, PROCESS SHF RECORD ONLY          DL        A0,AHQUAL,X4      .   YES, BEGIN RECORD COMPARISON          JP        A0,RB166          . SKIP IF SHF QUALIFIER POSITIVE          TN        MFQUAL,X5         . SHF QUAL NEG - IS MFDDB ALSO?          J         RB180             .  NO, PROCESS MFDDB ENTRY          J         RB167             .  YES, DO STD COMPARERB166          TP        MFQUAL,X5         . SHF QUAL POS - IS MFDDB ALSO?          J         RB172             .  NO, PROCESS SHF ENTRY NEXTRB167          DAN       A0,MFQUAL,X5      . COMPARE QUALIFIERS          JN        A0,RB172          . PROCESS SHF ENTRY IF QUAL < MFDDB          DJZ       A0,$+2            .          J         RB180             . PROCESS MFDDB ENTRY IF QUAL < SHF          DL        A0,AHFILE,X4      .          JP        A0,RB168          . SKIP IF SHF FILENAME POSITIVE          TN        MFFILE,X5         . SHF FILE NEG - IS MFDDB ALSO?          J         RB180             .  NO, PROCESS MFDDB ENTRY          J         RB169             .  YES, DO STD COMPARERB168          TP        MFFILE,X5         . SHF FILE POS - IS MFDDB ALSO?          J         RB172             .  NO, PROCESS SHF ENTRY NEXTRB169          DAN       A0,MFFILE,X5      . COMPARE FILENAMES          JN        A0,RB172          . PROCESS SHF ENTRY IF FILE < MFDDB          DJZ       A0,$+2            .          J         RB180             . PROCESS MFDDB ENTRY IF FILE < SHF          ON        M$MHFSHARED>0     . THIS CODE FOR SHARED-ONLY          LA        A0,MFHDBF+MFHHID  . INPUT HOST-ID FROM MFD EXTRACT          TZ        MFDRID,X5         . IS THIS A SHARED FILE?          LA,U      A0,077            .  YES, USE SHARED HOST-ID          TLE       A0,AHHOST,X4      . IS MFDDB HOSTID < SHF HOSTID?          J         RB180             .  YES, PROCESS MFDDB ENTRY NEXT          TE        A0,AHHOST,X4      .  NO, IS SHF HOSTID < MFDDB?          J         RB172             .   YES, PROCESS SHF ENTRY NEXT          OFF       M$MHFSHARED>0     . END OF SHARED-ONLY CODE          LA        A0,AHCYCL,X4      .          ANA       A0,MFCYCL,X5      . COMPARE F-CYCLES          JN        A0,RB172          . PROCESS SHF ENTRY IF CYCLE < MFDDB          JNZ       A0,RB180          . PROCESS MFDDB ENTRY IF CYCLE < SHF          LA        A0,AHARCT,X4      . SHF BACKUP TIME (TDATE$)          LMJ       X10,JULDT         . CONVERT TO JULIAN          ER        ERR$              . SHOULD BE PRE-VALIDATED, BLOW UP IF ERR          LA        A7,A5             . A7 = SHF JULIAN BACKUP TIME          LA        A0,MFBKUT,X5      . MFDDB BACKUP TIME (TDATE$)          LMJ       X10,JULDT         . CONVERT TO JULIAN          J         RB182             . IGNORE THIS ENTRY IF ERROR COMP. TIME          ANA       A7,A5             . A7 = DIFF IN BACKUP TIMES          LA        A0,AHBRST,X4      . SHF ENTRY BACKUP REEL          LA        A1,AHSTFP,X4      .  AND POSITION          TNE       A0,MFBUR1,X5      . SAME AS ENTRY FROM MFDDB?          TE        A1,MFSTFP,X5      .          J         RB1695            .  NO, SKIP          LMA       A0,A7             .  YES, GET ABS DIFF IN B/U TIMES          TLE,U     A0,3600           . LESS THAN ONE HOUR APART?          J         RB170             .  YES, TREAT AS IDENTICAL RECORDSRB1695          TLE,U     A7,1              . IS MFDDB ENTRY EARLIER?          J         RB172             .  NO, PROCESS SHF ENTRY NEXT          LX,U      X9,MFDER1         . 'BACKUP TIME EARLIER THAN HIST ENTRY'          TOP,U     A15,1*/('Z'-'M')  . IS THIS A MERGE W/FAS ARCHIVE HISTORY?          LMJ       X10,MFDERP        .  NO, THIS IS VALID ERROR - PRINT IT          J         RB180             . GO OUTPUT MFDDB ENTRY ANYWAY..         INPUT SHF AND MFDDB ENTRIES ARE IDENTICAL.RB170          SP1       MFDGET            . SET FLAG TO READ THE NEXT MFDDB RECORD          TOP       A15,(1*/('Z'-'A')) . IS THIS UPDATE FROM SAVALL?          J         RB172             .  NO, SKIP          LX,U      X9,MFDER6         .  YES, FILE 'HAS BACKUP, WAS NOT SAVED          LMJ       X10,MFDERP        .   DURING MOST RECENT SAVALL'..         PROCESS INPUT SHF RECORD, <= MFDDB COMPARISON RECORD.RB172          SP1       HSTGET            . SET FLAG TO READ THE NEXT SHF RECORD          LMJ       X10,EXPCHK        . TEST FOR EXPIRED ENTRY          J         RB174             . EXPIRE ENTRY IF RETURN 0,X10          LMJ       X11,TAPCHK        . CHECK FOR EXPIRED BACKUP REEL          JP        A0,RB175          . NOT EXPIRED IF RETURN POSITIVERB174          TNZ       MFDGET            . IS THERE A MATCHING MFDDB RECORD?          J         RB178             .  NO, EXPIRE THIS ENTRY          LX,U      X9,MFDER2         .  YES, FILE ' HAS CURRENT BACKUP IN          LMJ       X10,MFDERP        .   MFD - HIST ENTRY NOT EXPIRED'RB175          D$BO      WRHIST  RB900     . GET ADDRESS OF NEXT OUTPUT RECORD          LXI,U     A1,1              . INCREMENT FOR TRANSFER          LA,U      A0,,X4            . ADDRESS OF INPUT SHF RECORD          LXI,U     A0,1              . INCREMENT FOR TRANSFER          LR,U      R1,28             . TRANSFER 28 WORDS          BT        A1,,*A0           . MOVE INPUT TO OUTPUT RECORD          LX,U      X6,,X4            . X6 = ADDRESS OF SHF RECORD          J         RB190             . GO RELEASE DATA TO SORTRB178          INC       EXPCNT            . INCREMENT EXPIRED ENTRY COUNT          NOP                         .          J         RB192             . GO PROCESS NEXT ENTRY/..         PROCESS INPUT MFDDB RECORD, < SHF COMPARISON RECORD.RB180          SP1       MFDGET            . SET FLAG TO READ THE NEXT MFDDB RECORD          LA        A0,MFBKUT,X5      . GET BACKUP TIME/DATE (TDATE$)          LMJ       X10,JULDT         . CONVERT TO JULIAN          J         RB182             . DON'T PROCESS THIS ENTRY IF ERROR          LA        A0,CURJTD         . CURRENT JULIAN TIME          ANA       A0,A5             . SUBTRACT TIME OF BACKUP          JP        A0,RB183          . IF POSITIVE, TIME IS VALIDRB182          SP1       MFDGET            . SET FLAG TO READ THE NEXT MFDDB RECORD          LX,U      X9,MFDER3         . ERROR, FILE ' HAS INVALID BACKUP TIME -          LMJ       X10,MFDERP        .   NOT ENTERED IN HISTORY FILE'          J         RB192             . GO PROCESS NEXT ENTRYRB183          LA        A7,A4             . A7 = JULIAN BACKUP DATE          LA        A5,NEWEXP         . A5 = EXP PERIOD FOR NEW FILES          TEP,U     A15,1*/('Z'-'M')  . IS THIS A MERGE W/FAS ARCHIVE HISTORY?          J         RB184             .  YES, SKIP          TLE,U     A0,3600*24        . WAS BACKUP DONE WITHIN LAST 24 HRS?          J         RB186             .  YES, SKIP          LX,U      X9,MFDER4         .  NO, FILE ' NEW BACKUP DONE MORE THAN          LMJ       X10,MFDERP        .    24 HOURS AGO - DEFAULT EXP USED'          LA,U      A5,M$EXPSDEF      . DEFAULT EXPIRATION          J         RB186             .RB184          ON        M$EXPPERM>0       . TURN ON IF PERM EXP DEFINED          TNE,U     A5,M$EXPPERM      . DOES FAS-INPUT HAVE PERM RETENTION?          J         RB186             .  YES, DON'T ALTER OR CHECK PRE-EXP          OFF       M$EXPPERM>0       . END OF PERM-EXP CODE          TZ        EXPREL            . EXPIRE ENTRIES REL TO ARCHIVE DATE?          J         RB185             .  YES, SKIP          AA        A5,CURJUL         .  NO, COMPUTE EXP BASED ON CURRENT DAY          ANA       A5,A4             .  MINUS FILE ARCHIVE DATE (+ EXP)          J         RB186             .RB185          AA        A4,NEWEXP         . A4 = EXP DATE OF FILE          TG        A4,CURJUL         . ALREADY EXPIRED?          J         RB186             .  NO, CONTINUE          INC       PRECNT            .  YES, INCREMENT PRE-EXP COUNT          NOP                         .          J         RB192             . SKIP THIS ENTRY, GET NEXT ONERB186          INC       NEWCNT            . INCREMENT NEW ENTRY COUNT          NOP                         .          D$BO      WRHIST  RB900     . GET ADDRESS OF NEXT OUTPUT RECORD          LX,U      X6,,A1            . X6 = RECORD ADDRESS          LXI,U     A1,1              . INCREMENT FOR BT          LA,U      A0,(0)            .          LR,U      R1,28             . RECORD IS 28 WORDS LONG          BT        A1,,*A0           . ZEROFILL NEW RECORD AREA          DL        A0,MFQUAL,X5      . QUALIFIER          DL        A2,MFFILE,X5      . FILENAME          DS        A0,AHQUAL,X6      .  STORE IN OUTPUT RECORD          DS        A2,AHFILE,X6      .          LA        A0,MFCYCL,X5      . F-CYCLE          SA        A0,AHCYCL,X6      .  STORE IN OUTPUT RECORD          SA        A5,AHEXP,X6       .  STORE EXPIRATION PERIOD          LA        A0,MFCATT,X5      . CATALOG DATE          LA        A1,MFREFT,X5      . LAST REFERENCE DATE          LA        A2,MFBKUT,X5      . BACKUP DATE          SA        A0,AHCATT,X6      .  STORE IN OUTPUT RECORD          SA        A1,AHREFT,X6      .          SA        A2,AHARCT,X6      .          LA        A0,MFMNEM,X5      . ASSIGN MNEMONIC          JNZ       A0,$+2            . SKIP IF NONZERO          LA        A0,('      ')     . FORCE MNEMONIC TO SPACES IF ZERO          TEP,U     A15,1*/('Z'-'M')  . IS THIS MERGE W/FAS ARCHIVE HISTORY?          LA,U      A0,0              .  YES, FORCE MNEMONIC = 0          LA        A1,MFINHI,X5      . INHIBIT FLAGS          LA        A2,MFPCHR,X5      . PCHAR-FLAGS          LA        A3,MFFILF,X5      . FILE-FLAGS          SSL       A2,2              . REPLACE LOWER 2 BITS OF PCHAR-FLAGS          LSSL      A3,34             .  WITH LOWER 2 BITS OF FILE-FLAGS          LDSL      A2,2              .          SA        A0,AHMNM4,X6      .  STORE IN OUTPUT RECORD          SA        A1,AHINHI,X6      .          SA        A2,AHPCFF,X6      .  STORE COMBINED PCHAR/FILE-FLAGS          LA        A0,MFINIT,X5      . INITIAL RESERVE          LA        A1,MFMXGR,X5      . MAXIMUM GRANULES          LA        A2,MFASGS,X5      . ASSIGN COUNT          SA        A0,AHINIT,X6      .  STORE IN OUTPUT RECORD          SA        A1,AHMXGR,X6      .          SA        A2,AHRFCT,X6      .          $IF       M$MHFSHARED=0     . THIS CODE FOR NON-SHARED ONLY          LA,U      A0,0              . HOST-ID ALWAYS = 0 IN THIS CASE          $ELSE                       . THIS CODE FOR SHARED-ONLY          LA        A0,MFHDBF+MFHHID  . HOST-ID FROM INPUT MFDDB          TZ        MFDRID,X5         . IS THIS FILE FROM THE SHARED DIR?          LA,U      A0,077            .  YES, USE CODE FOR SHARED FILE          $ENDF                       . END OF CONDITIONAL CODE          SA        A0,AHHOST,X6      . STORE HOST-ID IN OUTPUT RECORD          DL        A0,MFPROJ,X5      . PROJECT-ID          DL        A2,MFACCT,X5      . ACCOUNT NUMBER          DS        A0,AHPROJ,X6      .  STORE IN OUTPUT RECORD          DS        A2,AHACCT,X6      .          LA        A0,MFNOTR,X5      . TRACK COUNT          LA        A1,MFPKID,X5      . PACKID IF REMOVABLE          SA        A0,AHTKCT,X6      .  STORE IN OUTPUT RECORD          SA        A1,AHPKID,X6      .          LA,U      A0,AHFHIC*(M$TMFAS=M$TMHIC) . SET AHFHIC IF SAVED ON CARTRDG          LA        A1,('      ')     . FOR CHECKING EXISTENCE OF KEYS          TE        A1,MFRKEY,X5      . IS THERE A READ KEY?          AA,U      A0,AHFRKY         .  YES, SET FLAG          TE        A1,MFWKEY,X5      . IS THERE A WRITE KEY?          AA,U      A0,AHFWKY         .  YES, SET FLAG          SA        A0,AHFLGS,X6      . STORE AHFLGS IN OUTPUT          LA        A5,MFBUNO,X5      . COUNT OF BACKUP REELS          LA        A1,MFSTFP,X5      . STARTING FILE POSITION          SA        A5,AHBRCT,X6      .  STORE IN OUTPUT          SA        A1,AHSTFP,X6      .          TLE,U     A5,5              . MORE THAN FOUR REELS?          J         RB188             .  NO, SKIP          LA,U      A5,4              .  YES, SET TRANSFER COUNT = 4          TEP       A15,(1*/('Z'-'B')) . DOES USER WANT TO SEE THIS ERR MSG?          J         RB188             .  NO, SKIP          LX,U      X9,MFDER5         .  YES, FILE ' HAS MORE THAN FOUR          LMJ       X10,MFDERP        .    BACKUP REELS'RB188          LA,U      A1,MFBRST,X5      . START OF BACKUP REEL LIST          LA,U      A2,AHBRST,X6      . START OF LIST IN HIST ENTRY          LXI,U     A1,1              . INCREMENTS FOR TRANSFER          LXI,U     A2,1              .          LR        R1,A5             . TRANSFER COUNT          BT        A2,,*A1           . TRANSFER REEL LIST TO HIST ENTRY          LA        A4,A7             . RESTORE JULIAN BACKUP DATE..         RELEASE ENTRY DATA TO SORT.RB190          LA        A5,OUTPTR         . POINTER TO PREV OUTPUT ENTRY          AA,U      A5,1              . INCREMENT          SA        A5,OUTPTR         . SAVE POINTER TO CURRENT ENTRY          LA,U      A6,0              . ALL FAS SAVE RECS ARE TYPE 0 (CURRENT)          LMJ       X10,SRTREL        . RELEASE RECORD TO SORTRB192          J         RB150             . GO READ/PROCESS NEXT ENTRIES..         FINISHED WITH SHF/MFDB INPUT, PHASE 1.RB195          D$BOC     WRHIST  RB900     . CLOSE D-B I/O TO OUTPUT SHF FILE          LX,U      X4,AHHDBF         . ADDRESS OF OUTPUT HEADER          LA,U      A0,AHBEGN         . START ADDRESS OF HIST DATA          SA        A0,AHHSTB,X4      . STORE IN HEADER          AA        A0,OUTPTR         . ADD CURRENT POINTER          AA,U      A0,1              .  PLUS ONE = NEXT ADDR TO WRITE          SA        A0,AHHNXB,X4      . STORE IN HEADER          AA,U      A0,63             .          AND       A0,(0777777777700) . A1 = NEXT HIGHEST FULL TRACK          SA        A1,NXAPSEC        .  STORE IN NEXT WRITE LOC FOR PTR TABLES          TNZ       PRECNT            . ANY PRE-EXP INPUT FROM FAS ARCH HISTORY?          J         RB290             .  NO, GO SORT AND WRITE POINTER TABLES          E$CLEAR                     .  YES, CLEAR EDIT          E$MSG     PEXMSG            . '*WARNING: '          E$DECV    PRECNT            . FILE COUNT          E$MSGR                      . 'FAS-ARCH FILES HAVE ALREADY EXPIRED'          P$RINT    (0220,LINE)       . PRINT STATUS LINE          J         RB290             . GO SORT THE INFO AND WRITE PTR TABLES/..         PROCESS ONLY DATA FROM THE HISTORY FILE.         THIS IS ARCHIVE-HISTORY UPDATE OR FAS SAVE-HISTORY (READ-ONLY).RB200          LA        A4,R4             . ENTRY COUNT OF INPUT HISTORY FILE          LMJ       X10,SRTOPN        . OPEN SORT..         READ THE NEXT ENTRY FROM THE INPUT HISTORY AREA.RB210          D$BI      RDHIST  RB900,RB900 . RETURN NEXT ENTRY, A1 = ADDRESS          INC       INPPTR            . INCREMENT POINTER TO INPUT ENTRY          NOP                         .          ON        M$MHFSHARED>0     . THIS CODE FOR SHARED-ONLY          LA,U      A0,M$MHFDFHOST    . DEFAULT HOST-ID IF NONE DEFINED          TNZ       AHHOST,A1         . IS HOST-ID DEFINED IN HIST RECORD?          SA        A0,AHHOST,A1      .  NO, REPLACE WITH DEFAULT VALUE          OFF       M$MHFSHARED>0     . END OF SHARED-ONLY CODE          LX,U      X4,,A1            . X4 = ENTRY ADDRESS          TZ        AHEXP,X4          . IS EXPIRATION = ZERO?          J         RB215             .  NO, SKIP          LA        A0,AHRLDF,X4      .  YES, GET RELOAD / PURGE FLAG          TLE,U     A0,2              . IS THIS A PURGED OR DELETED FILE?          J         RB215             .  NO, SKIP          TEP,U     A15,1*/('Z'-'R')  . READ-ONLY OPERATION?          J         RB280             .  YES, DO NOT PROCESS          DSL       A5,72             . ZERO OUTPUT LINK, SET TYPE = CURRENT          J         RB270             . RELEASE TO SORTRB215          LMJ       X10,EXPCHK        . TEST FOR EXPIRED ENTRY          J         RB220             . EXPIRE ENTRY IF RETURN 0,X10          LMJ       X11,TAPCHK        . CHECK FOR EXPIRED/SELECTED REEL ID          JZ        A0,RB280          . RETURN +0 = READ ONLY - NO FIND          JP        A0,RB250          . RETURN +1 = PROCESS NORMALLY          LR,U      R2,0              . RETURN -1 = EXPIRED.   ZERO LOOP CT          J         RB232             . GO MAKE SINGLE ENTRY IN EXPTBL..         PROCESS EXPIRED ENTRY.RB220          TEP,U     A15,1*/('Z'-'R')  . READ-ONLY OPERATION?          J         RB280             .  YES, SKIP EXPIRE CODE          LA,U      A1,AHBRST,X4      . ADDRESS OF REEL TABLE FOR EXP ENTRY          LXI,U     A1,1              . LOOP INCREMENT          LA        A2,AHBRCT,X4      . COUNT OF REELS IN THIS ENTRY          TG,U      A2,AHBRMX+1       . MORE THAN MAXIMUM?          LA,U      A2,AHBRMX         .  YES, USE MAX ALLOWED          LR,U      R2,,A2            .          JGD       R2,$+2            . DECR FOR LOOP          ER        ERR$              . BLOW UP IF LESS THAN ONE (BAD DATA?)RB230          LA        A2,,*A1           . GET NEXT REEL NUMBER TO EXPIRE          JNZ       A2,$+2            . MUST BE NONZERO          ER        ERR$              .  IF ZERO, BLOW UP (PROBABLE BAD DATA)RB232          LA        A0,(1,EXPTBL)     . POINTER TO EXPIRED REEL TABLE          LR        R1,EXPRCT         . COUNT OF EXPIRED REELS          SE        A2,,*A0           . SEARCH FOR THIS REEL IN TABLE          J         $+2               .  NO FIND          J         RB240             .  FIND, SKIP AHEAD          LA        A3,EXPRCT         . EXPIRED REEL COUNT          TLE,U     A3,MAXEXR         . IS COUNT LESS THAN MAX CONFIGURED?          J         RB235             .  YES, SKIP          P$RINT    ERRPRT(2)         .  NO, 'TOO MANY EXP REELS, INC <MAXEXR>'          J         RB920             .   ERROR EXITRB235          AA,U      A3,1              . INCREMENT COUNT          SA        A3,EXPRCT         .  AND REPLACE FOR LATER USE          SA        A2,,A0            . STORE THIS REEL NBR IN NEXT OPEN SLOTRB240          JGD       R2,RB230          . LOOP BACK FOR OTHER REELS IN REEL TABLE          INC       EXPCNT            . INCREMENT EXPIRED ENTRY COUNT          NOP                         .          LA,U      A5,0              . ZERO OUTPUT LINK FOR EXPIRED ENTRY          LA,U      A6,1              . RECORD TYPE = 1 FOR EXPIRED ENTRY          J         RB270             . GO RELEASE ENTRY TO SORT..         PROCESS CURRENT ENTRY.RB250          LA        A0,AHFLGS,X4      . MISC FLAGS          TEP,U     A0,AHFNEW         . IS THIS A NEW ENTRY?          INC       NEWCNT            .  YES, INCREMENT COUNTER          NOP                         .          TOP,U     A15,1*/('Z'-'R')  . READ-ONLY OPERATION?          J         RB260             .  NO, SKIP          TOP,U     A15,1*/('Z'-'Z')  .  YES, LIST ONLY RELOADED FILES?          J         RB255             .   NO, SKIP          TNZ       AHRLDF,X4         .   YES, HAS FILE FOR THIS ENT BEEN RLD?          J         RB280             .    NO, DO NOT LIST          SZ        AHBRST+1,X4       . MARK DATE-NOT-FOUND          LA        A0,AHBRCT,X4      . COUNT OF BACKUP REELS          TG,U      A0,AHBRMX         . AT MAXIMUM?          J         RB255             .  YES, SKIP          LA        A0,AHBRST+AHBRMX-1,X4 .   NO, GET LAST ENTRY IN LIST          SA        A0,AHBRST+1,X4    . STORE DATE AS 2ND BACKUP REELRB255          TOP,U     A15,1*/('Z'-'W')  . LIST ONLY FILES FROM THE PAST WEEK?          J         RB260             .  NO, LIST THIS FILE          TLE       A4,LSWJUL         .  YES, WAS THIS FILE ARCH <= 1 WEEK AGO?          J         RB280             .   NO, DO NOT LISTRB260          LA        A5,OUTPTR         . POINTER TO PREV OUTPUT ENTRY          AA,U      A5,1              . INCREMENT          SA        A5,OUTPTR         . SAVE POINTER TO CURRENT ENTRY          LA,U      A6,0              . RECORD TYPE = 0 FOR CURRENT ENTRY..         RELEASE ENTRY DATA TO SORT.RB270          TEP       A15,(1*/('Z'-'F')) . FAS SAVE-HIST DATA?          J         RB275             .  YES, SKIP MATCHING INFO PROCESSING          LX,U      X9,AHMIST,X4      . X9 = MATCHING INFO ADDR          LA        A0,AHMIVF,X9      .          TE,U      A0,AHMIV2         . ALREADY IN VERSION 2R2 FORMAT?          LMJ       X11,CVTMV2        .  NO, CONVERT BEFORE RELEASING TO SORT          LX,U      X7,SRTREC         . X7 = SORT RECORD ADDRESS          LA        A0,AHMQWC,X9      . WILDCARD COUNT OF MATCHING QUAL          LA        A1,AHMFWC,X9      . WILDCARD COUNT OF MATCHING FILE          LA        A2,AHMCLS,X9      . CLASS-ID          SA        A0,SRMQWC,X7      .  STORE IN SORT RECORD          SA        A1,SRMFWC,X7      .          SA        A2,SRMCLS,X7      .          LA        A0,AHMTYPE,X9     . REASON FOR ARCHIVE (R)EF, (C)YCLE          LA        A1,AHMVLC,X9      . DSR/RFC FROM CONTROL FILE          LA        A2,AHMVLF,X9      . DSR/RFC OF THIS FILE          SA        A0,SRMTYPE,X7     .  STORE IN SORT RECORD          SA        A1,SRMVLC,X7      .          SA        A2,SRMVLF,X7      .RB275          LX,U      X6,,X4            . POINT TO CURRENT HISTORY RECORD          LMJ       X10,SRTREL        . RELEASE RECORD TO SORTRB280          JGD       R4,RB210          . LOOP BACK FOR OTHER HISTORY ENTRIES          TEP,U     A15,1*/('Z'-'R')  . READ-ONLY OPERATION?          J         RB295             .  YES, DON'T PRINT NEW FILE STATS/..         PRINT NEW FILE STATISTICS.RB290          INC       OUTPTR            . OUTPUT PTR + 1 = TOTAL OUTPUT ENTRIES          NOP                         .          DL        A0,WRHIST         . INTERNAL NAME FOR OUTPUT FILE          DS        A0,FACPKT         .  INTO FITEM$ PACKET          LA        A0,(9,FACPKT)     .          ER        FITEM$            . ISSUE FITEM$ FOR OUTPUT FILE          E$DIT     EPKT              . OPEN EDIT          E$MSG     OUTMSG            . 'CREATING '          E$FD2     FACPKT+4          . QUALIFIER          E$MSGR                      . *          E$FD2     FACPKT+2          . FILENAME          E$MSGR                      . (          LA        A0,FACPKT+6       .          LSSL      A0,24             .          SSL       A0,24             .          E$DECV                      . CYCLE          E$MSGR                      . ') AT '          E$DAY1    CURTDA            . CURRENT DATE          E$MSGR                      . '-'          E$TIME    CURTDA            . CURRENT TIME          E$MSGR                      . ', WITH '          E$DECV    OUTPTR            . OUTPUT ENTRY COUNT          E$MSGR                      . ' ENTRIES.'          P$RINT    (0216,LINE)       . PRINT STATUS LINE FOR OUTPUT FILE          E$CLEAR                     . CLEAR EDIT          E$DECV    NEWCNT            . NEW ENTRY COUNT          E$MSG     OUTMSG2           . ' NEW ENTRIES HAVE BEEN ADDED.  '          E$DECV    EXPCNT            . EXPIRED ENTRY COUNT          E$MSGR                      . ' PREVIOUS ENTRIES HAVE EXPIRED.'          P$RINT    (0120,LINE)       . PRINT NEW/EXPIRED ENTRY STATUS          LX        X5,(APQTES,QUALTB) . LOAD PTR TO OUTPUT QUAL TABLE          LA        A0,('**QT**')     . QUALIFIER TABLE SOFTWARE LABEL          SA        A0,APQTLB,X5      . STORE AT START OF TABLE          SZ        APQTNX,X5         . ZERO LINK TO NEXT TABLE          AX,U      X5,APQTBG         . POINT X5 TO FIRST ENTRY SLOT          D$BOO     WRPTPK  NXAPSEC   . OPEN D-B I/O FOR PTR TABLE WRITERB295          DSL       A10,72            . INIT HDG LOOP AND PAGE COUNT          R$SORT                      . SORT ALL SELECTED ENTRIES..         RETURN THE NEXT RECORD FROM SORT.RB300          R$RET     RB340             . RETURN NEXT ENTRY, AT END = RB340          LX,U      X4,,A0            . X4 = ADDRESS OF RETURNED ENTRY          TEP,U     A15,1*/('Z'-'R')  . READ-ONLY OPERATION?          J         RB400             .  YES, SKIP          TEP       A15,(1*/('Z'-'F')) . IS THIS A FAS HIST UPDATE?          J         RB320             .  YES, SKIP          TZ        SRTYPE,X4         . EXPIRED ENTRY?          J         RB380             .  YES, SKIP          TZ        SREXP,X4          . IS EXPIRATION = ZERO?          J         RB305             .  NO, SKIP          LA        A0,SRRLDF,X4      .  YES, GET RELOAD / PURGE FLAG          TG,U      A0,2              . IS THIS A PURGED OR DELETED FILE?          J         RB400             .  YES, LIST ONLY - DON'T INCL IN OUTPUT..         CURRENT ENTRY - REMOVE ANY REELS HERE FROM THE EXPIRED LIST.RB305          LA,U      A2,SRREEL,X4      . ADDR OF 1ST, 2ND REEL NBRS IN SORT REC          LXI,U     A2,1              . LOOP INCREMENT          LA        A4,SRRCPS,X4      . REEL COUNT/STARTING POSITION          SSL       A4,12             . SHIFT REEL COUNT INTO H2          ANA,U     A4,1              . DECREMENT FOR LOOP          TLE,U     A4,2              . MORE THAN 2 REELS?          J         RB310             .  NO, SKIP          TG,U      A4,AHBRMX         . MORE THAN MAX CONFIGURED?          ER        ERR$              .  YES, ERROR - SOMETHING VERY WRONG HERE          LA        A0,SRLNKI,X4      . GET LINK TO INPUT HIST ENTRY          AA        A0,INPSTB         . MAKE ABSOLUTE - ADD STARTING ADDRESS          SA        A0,RDHSTI+5       . STORE IN READ PACKET          I$OW      RDHSTI            . READ ENTRY FROM INPUT FILE          LMJ       X9,STATUS         . CHECK STATUS          J         RB920             .  ERROR EXIT IF I/O ERROR          DL        A0,RHBUFF+AHFILE  . GET FILENAME FROM HIST ENTRY          DTE       A0,SRFILE,X4      . SAME AS NAME FROM SORT RECORD?          ER        ERR$              .  NO, SOMETHING WRONG W/LINKS, ABORT          LA        A2,(1,RHBUFF+AHBRST) . YES, A2 = PTR TO REEL TABLERB310          LA        A0,,*A2           . GET NEXT REEL FROM CURRENT FILE          LR        R1,EXPRCT         . EXPIRED REEL COUNT          LA        A1,(1,0)          . SEARCH POINTER          SE        A0,EXPTBL,*A1     . SEARCH EXP REEL TABLE FOR MATCH          J         RB315             .  NO FIND, CONTINUE          SZ        EXPTBL-1,A1       .  FIND, REMOVE REEL NUMBER FROM TABLERB315          JGD       A4,RB310          . LOOP BACK FOR OTHER CURRENT FILE REELS/..         UPDATE POINTER TABLE(S) WITH THIS ENTRY.RB320          TNZ       FILCTB            . ANY FILES PROCESSED YET?          J         RB355             .  NO, SKIP          DL        A0,SRQUAL,X4      . QUALIFIER FROM SORT RECORD          DTE       A0,APQEQL,X5      . SAME QUALIFIER AS PREVIOUS?          J         RB350             .  NO          J         RB360             .  YES, SKIPRB340          TEP,U     A15,1*/('Z'-'R')  . EOF FROM SORT - READ-ONLY OPERATION?          J         RB750             .  YES, SKIP          SP1       EOFFLG            .  NO, CONT HERE, SET EOF FLAG..         WRITE NEXT FILE POINTER TABLE.RB350          LA        A2,FILCTB         . FILE COUNT FOR PREV FT BUFFER          AU        A2,FILCTQ         . ADD CT FOR OTHER BUFFS FOR THIS QUAL          SA        A3,APQEFC,*X5     . STORE TOTAL COUNT IN QUAL PTR TBL          MSI,U     A2,APFTES         . MULT BUFF ENTRY COUNT BY ENTRY SIZE          AA,U      A2,APFTBG+27      . ADD STARTING OFFSET + 27 (COV QUOTIENT)          DSL       A2,36             . PREPARE FOR DIVIDE          DI,U      A2,28             . DIV BY 28 = SECTOR SIZE OF TABLE          MSI,U     A2,28             . CONVERT BACK TO WORD COUNT          LA,U      A0,FILETB         . ADDRESS OF FILE TABLE          LXI,U     A0,,A2            . LOAD WORD COUNT OF TABLE          LA        A1,NXAPSEC        . BEGIN WRITE AT NEXT AVAIL SECTOR          LMJ       X10,PTROUT        . WRITE NEW POINTER TABLE          J         RB900             .  ERROR EXIT IF I/O ERROR          TZ        EOFFLG            . DID SORT RETURN EOF?          J         RB600             .  YES, SKIP          LA        A0,(1,FILETB)     .  NO, LOAD POINTER TO FILE PTR TABLE          LA,U      A1,(0)            . FILL WITH ZEROES          LR,U      R1,,A2            . LAST WORD COUNT WRITTEN          BT        A0,,*A1           . RE-INIT TABLE TO ZERORB355          LA        A0,QUACTB         . ENTRY COUNT OF CURRENT QT          TLE,U     A0,APMXQL         . WILL MAXIMUM BE EXCEEDED?          J         RB358             .  NO, SKIP..         WRITE OVERFLOW QUALIFIER POINTER TABLE.          LA        A0,NXAPSEC        . WRITE FULL QUAL TABLE TO FILE          AA,U      A0,63             .          AND       A0,(0777777777700) . A1 = NEXT HIGHEST FULL TRK ADDR          LA        A0,(APQTBS,QUALTB) . SETUP TO WRITE FULL QT BUFFER          LMJ       X10,PTROUT        . WRITE QT BUFFER TO FILE          J         RB900             .  EXIT IF ERROR RETURNED          LMJ       X11,UPDQTP        . LINK THIS TABLE INTO CHAIN          J         RB920             .  EXIT IF ERROR RETURNED          LA        A0,(1,QUALTB+APQTBG) . LOAD POINTER TO QUAL TABLE          LA,U      A1,(0)            . SETUP TO ZEROFILL          LR,U      R1,APMXQL*APQTES  . WORD COUNT OF ALL TABLE ENTRIES          BT        A0,,*A1           . INIT TABLE TO ZERO          LA        A0,QUACTQ         . COUNT OF PREVIOUS FULL QT BUFFERS          AA,U      A0,APMXQL         . ADD COUNT OF THIS TABLE          SA        A0,QUACTQ         .  AND REPLACE          LX        X5,(APQTES,QUALTB+APQTBG) . RE-INIT QT POINTER          LA,U      A0,0              .  AND INIT COUNT = 0RB358          AA,U      A0,1              . INCREMENT QUALIFIER COUNT          SA        A0,QUACTB         .  AND REPLACE..         BUILD QUALIFIER POINTER TABLE ENTRY.          DL        A0,SRQUAL,X4      . NEXT QUALIFIER FROM SORT RECORD          DS        A0,APQEQL,X5      . STORE QUAL IN QUAL POINTER TABLE          DS        A0,FILETB+APFTQL  .  AND IN FILE PTR TBL FOR VERIFICATION          LA        A0,NXAPSEC        . ADDR OF FIRST FT BUFF FOR THIS QUAL          SA        A0,APQEFL,X5      . STORE LINK IN QPT          SZ        FILCTQ            . ZERO BUFFERED FILE CT FOR QUAL          J         RB365             .RB360          LA        A0,FILCTB         . SAME QUAL AS BEFORE - GET FILE COUNT          TLE,U     A0,APMXFL         . WILL IT OVERFLOW BUFFER?          J         RB370             .  NO, CONTINUE..         WRITE OVERFLOW FILE POINTER TABLE.          LA        A0,(APFTBS,FILETB) . WRITE FULL BUFFER          LA        A1,NXAPSEC        .  AT (NXAPSEC)          LMJ       X10,PTROUT        . WRITE FULL FILE POINTER TABLE BUFFER          J         RB900             .  ERROR EXIT IF I/O ERROR          LA        A0,(1,FILETB+APFTBG) . LOAD POINTER TO FILE PTR TABLE          LA,U      A1,(0)            . FILL WITH ZEROES          LR,U      R1,APMXFL*APFTES  . TOTAL WORD COUNT OF TABLE ENTRIES          BT        A0,,*A1           . RE-INIT TABLE TO ZERO          LA        A0,FILCTQ         . COUNT OF BUFFERED FILE TABLE ENTRIES          AA,U      A0,APMXFL         . ADD ENTRY COUNT OF THIS TABLE          SA        A0,FILCTQ         .  AND REPLACERB365          LA,U      A0,0              . INIT FILE COUNT = 0 (NEW BUFFER)          LX        X6,(APFTES,FILETB+APFTBG) . SET UP POINTER TO FT BUFFERRB370          AA,U      A0,1              . INCREMENT BUFFERED FILE COUNT          SA        A0,FILCTB         .  AND STORE FOR LATER..         BUILD FILE POINTER TABLE ENTRY.          DL        A0,SRFILE,X4      . MOVE SORT REC DATA TO FILE PTR TABLE:          DS        A0,APFEFL,X6      .  FILENAME          LA        A0,SRCYCL,X4      .          LA        A1,SRLNKO,X4      .          LSSL      A1,12             .          DSL       A0,12             .          SA        A1,APFECL,X6      .  CYCLE (35-24), HIST SECT LINK (23-0)          LA        A0,SRHSCJ,X4      .          LA        A1,SRCTIM,X4      .          LA        A2,SRREFD,X4      .          SA        A0,APFEHC,X6      .  HOSTID (35-33), JUL CAT DATE (32-18)          SA        A1,APFECT,X6      .  CATALOG TIME (TDATE$ H2)          SA        A2,APFERD,X6      .  REFERENCE DATE (TDATE$ H1)          LA        A0,SREXP,X4       .          AND,U     A0,0377777        .          TZ        SRRLDF,X4         .          AA,U      A1,0400000        .          LA        A0,SRTKCT,X4      .          LA        A2,SRADJL,X4      .          SA        A0,APFETS,X6      .  TRACK COUNT          SA        A1,APFERE,X6      .  RELOAD FLAG (17), EXPIRATION (16-0)          SA        A2,APFEAD,X6      .  ARCHIVE DATE (JULIAN)          LA        A0,SRFLGS,X4      . GET AHFLGS          LA        A1,APFEBW,X6      . BIT 35 = BACKUP FLAG          DSL       A1,35             . SHIFT ALL BUT BIT 35 TO A2          LA,U      A1,0              . ZERO BIT 35          TEP,U     A0,AHFCFB         . IS THIS CRIT FILE BACKUP?          LA,U      A1,1              .  YES, SET BIT 35          DSL       A1,1              . ENTIRE WORD TO A2          SA        A2,APFEBW,*X6     . REPLACE IN POINTER ENTRY          TOP       A15,(1*/('Z'-'F')) . IS THIS A FAS HIST UPDATE?          TOP,U     A0,AHFNEW         .  OR A PREVIOUSLY-ARCHIVED FILE?          J         RB498             .   YES, DO NOT PRINT INFO FOR THIS FILE          J         RB400             .   NO, INCLUDE IN PRINTED REPORTRB380          TZ        EXPFLG            . EXPIRED ENTRY - IS THIS THE FIRST?          J         RB400             .  NO, PRINT NORMALLY          SP1       EXPFLG            .  YES, SET INIT FLAG          DSL       A10,72            .   AND CLEAR HDG COUNTER AND PAGE NUMBER/..         INCLUDE ENTRY IN PRINTED REPORT.RB400          JGD       A10,RB440         . SKIP HDG PRT UNLESS INIT OR BOTT PAGE          AA,U      A11,1             . INCREMENT PAGE COUNT          E$CLEAR                     . CLEAR EDIT          E$MSG     MRSMSG            . INDICATE MARS SYSTEM, LEVEL          E$COL     66-$SL(M$SITENM)/2 . MOVE OVER A LITTLE          E$MSG     HDG1MSG           . COPY FULL NAME OF SITE          E$COL     108               .          E$MSGR                      . 'DATE'          E$DAY5    CURTDA            . CURR DATE          E$MSGR                      . 'PAGE'          E$DECF    4,A11             . PAGE NUMBER          P$RINT    (0777700+22,LINE) . PRINT 1ST HDG LINE          LX,U      X10,HDG2N         . 'MASTER LIST - NEW FILES'          TZ        EXPFLG            . PROCESSING EXPIRED ENTRIES YET?          LX,U      X10,HDG2E         .  YES, 'MASTER LIST - EXPIRED FILES'          TOP,U     A15,1*/('Z'-'R')  . READ-ONLY OPERATION?          J         RB420             .  NO, SKIP          LX,U      X10,HDG2C         .  YES, 'MASTER LIST - CURRENT FILES'          TEP,U     A15,1*/('Z'-'Z')  . PRINT ONLY RELOADED FILES?          LX,U      X10,HDG2R         .  YES, 'MASTER LIST - RELOADED FILES'          TOP,U     A15,1*/('Z'-'W')  . WEEKLY LIST?          J         RB420             .  NO, SKIP          E$CLEAR                     .  YES, CLEAR EDIT          E$COL     34                .          E$MSG     HDG2W             . 'MASTER LIST - FILES ARCHIVED FROM '          E$DAY1    LSWTDA            . ONE WEEK AGO          E$MSGR                      . ' THRU '          E$DAY1    CURTDA            . TODAY          J         RB430             .RB420          E$CLEAR                     . CLEAR EDIT          E$MSG     0,X10             . EDIT APPROPRIATE 2ND HEADINGRB430          E$SKIP    5                 . SKIP OVER A LITTLE          E$COPY    12,SITCOD         . EDIT IN USER-SUPPLIED SYSTEM ID          P$RINT    (0100+22,LINE)    . PRINT 2ND LINE OF HEADING          P$RINT    (0200+H3L,HDG3)   . PRINT COLUMN HEADINGS          P$RINT    (0100+H4L,HDG4)   .          P$RINT    (0100+H4L,DASHES) .  AND A LINE OF DASHES          P$RINT    (0100,$)          .  AND A BLANK LINE FOR READABILITY          LA,U      A10,M$LPP-8       . RESET HEADING COUNTERRB440          E$CLEAR                     . CLEAR EDIT          ON        M$MHFSHARED>0     . THIS CODE FOR SHARED-ONLY          LA        A1,SRHSCJ,X4      . HOSTID, JUL CAT DATE          SSL       A1,15             . HOSTID ONLY TO A1 LOWER          LA,U      A0,'A'-1,A1       . FORM PRINTABLE HOSTID, A-D          TG,U      A1,1              . IN CORRECT RANGE (1-4)?          TG,U      A1,4+1            .          LA,U      A0,'?'            .  NO, INDICATE UNKNOWN HOSTID          TNE,U     A1,7              . CODE 7 MEANS SHARED DIRECTORY          LA,U      A0,'S'            .  USE LETTER 'S' IN THIS CASE          E$CHAR                      . EDIT INTO OUTPUT          E$CHAR    ' '               . SKIP OVER ONE POSITION          OFF       M$MHFSHARED>0     . END OF SHARED-ONLY CODE          E$COPY    12,SRQUAL,X4      . EDIT QUALIFIER          E$SKIP    2-(M$MHFSHARED>0) . SKIP 2=NONSHARED, 1=SHARED          E$COPY    12,SRFILE,X4      . FILENAME          LA,U      A0,' '            .          LA        A1,SRRLDF,X4      . RELOAD / PURGE FLAG          TNE,U     A1,1              . HAS THIS FILE BEEN RELOADED?          LA,U      A0,'*'            .  YES, SO INDICATE IN OUTPUT          E$CHAR                      . OUTPUT RELOAD INDICATOR CHARACTER          E$DECF    4,SRCYCL,X4       . CYCLE          E$DECF    6,SRTKCT,X4       . TRACK COUNT          E$SKIP    2-(M$MHFSHARED>0) . SKIP 2=NONSHARED, 1=SHARED          LA        A3,SRHSCJ,X4      . HOSTID, JUL CAT DATE          AND,U     A3,077777         . CAT DATE ONLY, TO A4          LMJ       X11,JULIN         . CONVERT TO TDATE$          E$DAY5                      .          E$SKIP    2                 .          LXI       A0,SRREFD,X4      . REFERENCE DATE          E$DAY5                      .          E$SKIP    2                 .          LA,U      A0,0              . INIT MSG ADDR = 0          LA        A1,SRRLDF,X4      . RELOAD / PURGE FLAG          TNE,U     A1,'P'            . WAS FILE PURGED?          LA,U      A0,PURMSG         .  YES, POINT A0 TO '*** PURGED ***'          TNE,U     A1,'D'            . WAS FILE DELETED?          LA,U      A0,DELMSG         .  YES, POINT A0 TO '*** DELETED **'          JZ        A0,RB450          . SKIP IF NOT PURGED OR DELETED          E$MSG                       . OTHERWISE, INSERT STATUS IN OUTPUT          J         RB470             . SKIP OVER ARCHIVE/EXP DATE EDITRB450          LA        A4,SRADJL,X4      . ARCHIVE DATE (JULIAN)          LMJ       X11,JULIN         . CONVERT TO TDATE$          E$DAY5                      . EDIT INTO OUTPUT          ON        M$EXPPERM>0       . TURN ON IF PERM-EXP DEFINED          LA        A0,SREXP,X4       . EXP PERIOD          TE,U      A0,M$EXPPERM      . IS THIS PERM RETENTION?          J         RB460             .  NO, SKIP          E$DECF    8                 .  YES, EDIT PERM EXP IN NUMERIC FORM          J         RB470             .RB460          OFF       M$EXPPERM>0       . END OF PERM-EXP CODE          E$SKIP    2                 .          LA        A4,SRADJL,X4      . ARCHIVE DATE (JULIAN)          AA        A4,SREXP,X4       . PLUS EXP PERIOD = EXP DATE          LMJ       X11,JULIN         . CONVERT TO TDATE$          E$DAY5                      . EDIT INTO OUTPUTRB470          TEP       A15,(1*/('Z'-'F')) . FAS SAVE-HIST LISTING?          J         RB495             .  YES, NO ARCHIVE MATCHING INFO          LA        A4,SRMTYPE,X4     . REASON FOR ARCHIVE          JZ        A4,RB495          . IF ZERO, NO MATCHING INFO          E$SKIP    2                 .          LA        A0,SRMCLS,X4      . LOAD CLASS-ID          LA        A1,('      ')     .          TNE       A0,('DEFAUL')     . DEFAULT CLASS?          LA        A1,('T     ')     .  YES, APPEND 'T'          DS        A0,IMAGE          . INTO TEMP STORAGE AREA          E$COPY    7,IMAGE           . EDIT CLASS-ID INTO OUTPUT          E$SKIP    2                 .          TOP,U     A15,1*/('Z'-'Z')  . IS Z-OPT (LIST RLD ONLY) ON?          J         RB475             .  NO, SKIP          TZ        SRREEL+1,X4       .  YES, IS RELOAD DATE AVAIL?          J         RB472             .   YES, SKIP          E$COL     107               .   NO, BLANKFILL          J         RB478             .RB472          E$MSG     RLDDTM            .   YES, EDIT RELOAD DATE/TIME MESSAGE          E$DAY5    SRREEL+1,X4       . RELOAD DATE          E$MSGR                      .          E$TIME    SRREEL+1,X4       . RELOAD TIME          E$SKIP    -3                . DON'T EDIT SECONDS          E$MSGR                      . FINISH MESSAGE INSERTION          J         RB478             .RB475          DL        A0,SRQUAL,X4      . FULL QUALIFIER OF ARCHIVED FILE          LA        A5,SRMQWC,X4      . WILDCARD COUNT OF MATCHING ACF ENTRY          LMJ       X10,FMTMAT        . FORMAT AND OUTPUT          E$SKIP    1                 . SKIP OVER          DL        A0,SRFILE,X4      . FULL FILENAME OF ARCHIVED FILE          LA        A5,SRMFWC,X4      . WILDCARD COUNT OF MATCHING ACF ENTRY          LMJ       X10,FMTMAT        . FORMAT AND OUTPUT          E$SKIP    2                 . SKIP OVERRB478          TE,U      A4,'R'            . ARCHIVED FOR REF LIMIT EXCEEDED?          J         RB480             .  NO, SKIP          E$FD1     ('DSR=')          .  YES, SO INDICATE          E$DECV    SRMVLF,X4         . FILE DAYS SINCE REFERENCE WHEN ARCHIVED          E$COL     115               .          LA,U      A0,'RL='          .          E$FD1                       .          J         RB490             .RB480          E$FD1     ('RCN=')          . FILE REL CYCLE LIMIT          LA,U      A0,1              .          ANA       A0,SRMVLF,X4      . COMPUTE RCN = 1-VAL FROM MATCHING INFO          E$DECV                      . EDIT INTO IMAGE          E$COL     115               .          E$FD1     'CL=',,U          .RB490                                 .          E$DECV    SRMVLC,X4         . CYCLE LIMIT OR REF LIMITRB495          LA        A4,SRRLDF,X4      . RELOAD / PURGE FLAG          TNE,U     A4,'D'            . WAS FILE DELETED?          J         RB497             .  YES, SKIP - BACKUP INFO UNAVAILABLE          E$COL     121               .          LA,U      A0,' '            . INIT BACKUP FLAG = SPACE          LA        A1,SRFLGS,X4      . AHFLGS          TEP,U     A1,AHFCFB         . IS THIS CRITICAL FILE BACKUP?          LA,U      A0,'*'            .  YES, FLAG WITH '*'          E$CHAR                      . PLACE FLAG IN IMAGE          E$COPY    6,SRREEL,X4       . FIRST ARCHIVE REEL          LA        A0,SRRCPS,X4      .          AND,U     A0,07777          . A1 = STARTING FILE POSITION          TE,U      A4,'P'            . PURGED FILE, OR          TEP       A15,(1*/('Z'-'F')) . FAS SAVE-HIST MODE?          J         RB496             .  YES, DON'T ADJUST POSITION          DSL       A1,36             . PREPARE FOR DIVIDE          DI,U      A1,3              . ADJUST FOR LABELING          AA,U      A1,1              . FUDGERB496          E$DECF    4,A1              . EDIT STARTING FILE POSITIONRB497          P$RINT    (0100+22,LINE)    . PRINT STATUS LINE FOR THIS FILERB498          J         RB300             . BACK FOR NEXT SORT RECORD/..         ALL DONE - WRITE LAST QUAL POINTER TABLE TO HISTOUT$.RB600          LX,U      X7,AHHDBF         . POINT X7 TO AHF HEADER BUFFER          LA        A2,QUACTB         . ENTRY COUNT OF LAST TABLE          AU        A2,QUACTQ         . A3 = ENTRY COUNT OF ALL TABLES          SA        A3,AHHPQC,X7      . STORE IN AHF HEADER          MSI,U     A2,APQTES         . WORD COUNT OF LAST QUAL POINTER TBL          AA,U      A2,APQTBG+27      . ADD START ADDRESS + 27 FOR COV QUOTIENT          DSL       A2,36             . PREPARE FOR DIVIDE          DI,U      A2,28             . SECTOR COUNT OF LAST QUAL POINTER TABLE          LA        A0,NXAPSEC        . NEXT SECTOR TO WRITE          AA,U      A0,63             .          AND       A0,(0777777777700) . A1 = NEXT HIGHEST FULL TRACK          AU        A2,A1             . A3 = NEXT ADDRESS AFTER LAST QPT          AA,U      A3,63             .          AND       A3,(0777777777700) . A4 = NEXT HIGHEST FULL TRACK          MSI,U     A2,28             . WORD COUNT OF LAST QPT          LXI,U     A0,,A2            . SET UP A0 FOR PACKET STORE          LXM,U     A0,QUALTB         .          LMJ       X10,PTROUT        . WRITE LAST QPT TO AHF          J         RB900             .  ERROR EXIT IF I/O ERROR          D$BOC     WRPTPK  RB900     . CLOSE OUT POINTER TABLE WRITE          LMJ       X11,UPDQTP        . LINK LAST TABLE INTO CHAIN          J         RB920             .  EXIT IF ERROR STATUS RETURNED          TEP       A15,(1*/('Z'-'F')) . IS THIS A FAS HIST UPDATE?          J         RB630             .  YES, SKIP FILE COPY          SA        A4,AHHSTB,X7      .  NO, STORE NEXT TRACK ADDR FOR COPY/..         COPY HISTORY DATA FROM HISTIN$ TO HISTOUT$.          TP        RDHIST+3          .          ER        WAIT$             . WAIT FOR PREV D-B I/O TO COMPLETE          LA        A0,(1,RDHIST)     .          LA        A1,(1,RDHSAV)     .          LR,U      R1,RDHSIZ         .          BT        A0,,*A1           . RE-INIT ORIGINAL AHF READ PACKET          LR        R4,INPJGD         . INPUT HIST ENTRY LOOP COUNT          D$BIO     RDHIST            . RE-OPEN I/O FROM INPUT FILE          D$BOO     WRHIST  AHHSTB,X7 . OPEN OUTPUT I/O AT NEXT AVAIL SECT          LA,U      A6,0              . INIT OUTPUT ENTRY COUNTRB610          D$BI      RDHIST  RB900,RB900 . READ THE NEXT INPUT HIST ENTRY          ON        M$MHFSHARED>0     . THIS CODE FOR SHARED-ONLY          LA,U      A0,M$MHFDFHOST    . DEFAULT HOST-ID IF NONE DEFINED          TNZ       AHHOST,A1         . IS HOST-ID DEFINED IN HIST RECORD?          SA        A0,AHHOST,A1      .  NO, REPLACE WITH DEFAULT VALUE          OFF       M$MHFSHARED>0     . END OF SHARED-ONLY CODE          LX,U      X4,,A1            . X4 = ADDRESS OF NEXT ENTRY          TZ        AHEXP,X4          . IS EXPIRATION = ZERO?          J         RB612             .  NO, SKIP          LA        A0,AHRLDF,X4      . GET RELOAD / PURGE FLAG          TG,U      A0,2              . WAS FILE PURGED OR DELETED?          J         RB620             .  YES, SKIP - DON'T COPY THIS ENTRYRB612          LMJ       X10,EXPCHK        . TEST FOR EXPIRED ENTRY          J         RB615             . EXPIRE ENTRY IF RETURN 0,X10          LMJ       X11,TAPCHK        . CHECK FOR EXPIRED REEL ID          JP        A0,RB618          . IF RETURN POSITIVE, NOT EXPIREDRB615          INC       AHHEXF,X7         . INCR COUNT OF EXP ENTRIES IN AHF HEADER          NOP                         .          LA        A0,AHHEXT,X7      . TOTAL EXPIRED TRACKS          AA        A0,AHTKCT,X4      . ADD TRACK COUNT FOR THIS FILE          SA        A0,AHHEXT,X7      . UPDATE IN AHF HEADER          J         RB620             . DO NOT WRITE THIS ENTRY TO NEW AHFRB618          LA        A2,AHFLGS,X4      . GET ARCHIVE HISTORY FLAGS          AND,U     A2,-AHFNEW        . REMOVE NEW-ENTRY FLAG          SA        A3,AHFLGS,X4      . REPLACE IN FILE ENTRY          LX,U      X9,AHMIST,X4      . ADDRESS OF MI BUFFER          LA        A0,AHMIVF,X9      .          TE,U      A0,AHMIV2         . IS MATCHING INFO IN 2R2+ FORMAT?          LMJ       X11,CVTMV2        .  NO, CONVERT TO NEW FORMAT          D$BO      WRHIST  RB900     . GET ADDRESS OF NEXT OUTPUT RECORD          LXI,U     X4,1              . INCREMENT FOR BT          LXI,U     A1,1              . INCREMENT FOR BT          LR,U      R1,28             . SIZE OF HISTORY ENTRY (1 SECTOR)          BT        A1,,*X4           . MOVE ENTRY TO OUTPUT BUFFER          AA,U      A6,1              . INCREMENT OUTPUT ENTRY COUNTRB620          JGD       R4,RB610          . LOOP BACK UNTIL ALL HIST ENTS PROCESSED          TNE       A6,OUTPTR         . DOES PASS 2 COUNT = PASS 1 COUNT?          J         RB625             .  YES, CONTINUE          P$RINT    ERRPRT(6)         .  NO, 'INTERNAL ERROR...FILE COUNT'          J         RB920             .   ERROR EXITRB625          D$BOC     WRHIST  RB900     . FINISH D-B OUTPUT TO NEW AHF          AA        A6,AHHSTB,X7      . START ADDRESS + ENTRY CT = NXT AVL ADDR          SA        A6,AHHNXB,X7      . STORE IN AHF HEADER..         WRITE HEADER TO HISTOUT$.RB630          LA        A0,HDRLBL         . LABEL WORD          LA        A1,CURTDA         . CURRENT DATE          LA        A2,(RBLVL)        . INTERNAL LEVEL OF REBUILD PROGRAM          SA        A0,AHHLBL,X7      . STORE LABEL, DATE, LEVEL          SA        A1,AHHUPT,X7      .  IN AHF HEADER          SA        A2,AHHLEV,X7      .          LA        A0,AHHERC,X7      . TOTAL ACP ERRORS DURING ARCHIVE RUN          SA        A0,ERRCNT         . SAVE FOR LATER USE          SZ        AHHERC,X7         . ZERO ERROR COUNT IN NEW AHF HEADER          SZ        AHHAIP,X7         . ZERO ARCHIVE-IN-PROGRESS FLAG          SZ        AHHSFA,X7         . ZERO SHARED-UPDATE FLAG          TEP,U     A15,1*/('Z'-'U')  . UPDATE ARCHIVE RUN COUNT?          INC       AHHARR,X7         .  YES, INCREMENT RUN COUNT IN HEADER          NOP                         .          LA        A0,(28,AHHDBF)    . POINTER TO NEW HEADER          SA        A0,WRHIST+4       . STORE IN OUTPUT PACKET          SZ        WRHIST+5          . WRITE TO SECTOR ZERO          I$OW      WRHIST            . ISSUE I/O TO WRITE HEADER TO NEW FILE          LMJ       X9,STATUS         . CHECK STATUS          J         RB920             .  ERROR EXIT IF I/O ERROR          TOP       A15,(1*/('Z'-'F')) . IS THIS A FAS HIST UPDATE?          J         RB635             .  NO, PRINT EXP TAPE LIST          LA        A0,MFDERF         .  YES, SET COND WORD (T2)          ER        SETC$             .   0 = NO ERRORS  1 = ERROR(S) PRINTED          J         RB750             . EXIT NOW/..         PRINT EXPIRED TAPE LIST.RB635          LR        R4,EXPRCT         . EXPIRED REEL COUNT          JGD       R4,$+2            . DECR FOR LOOP          J         RB700             . SKIP IF NO EXPIRED REELS TO PRINT          LX        X4,(1,0)          . POINTER TO EXPIRED REEL TABLE          LA,U      A10,0             . HEADING COUNTERRB640          TNZ       EXPTBL,*X4        . IS THE NEXT ENTRY IN THE LIST NONZERO?          J         RB650             .  NO, DO NOT PRINT THIS ENTRY          JGD       A10,RB645         .  YES, LOOP FWD UNTIL READY FOR NXT HDG          P$RINT    (0777700+H5L,HDG5) . HEADING LINE 'EXPIRED TAPE LIST'          P$RINT    (0100+H5L,DASHES) . FOLLOW WITH LINE OF DASHES          P$RINT    (0100,$)          . AND A BLANK LINE          LA,U      A10,52            . INIT NEW HDG COUNTRB645          LA,U      A0,EXPTBL-1,X4    . ADDRESS OF REEL NUMBER TO PRINT          LXI,U     A0,0101           . FORM A PRINT$ CONTROL WORD          ER        PRINT$            . PRINT THE REEL NUMBERRB650          JGD       R4,RB640          . LOOP BACK UNTIL NO MORE REELS IN LIST..         NOTIFY CONSOLE IF ANY ERRORS DURING ACP PROCESSING.RB700          TZ        ERRCNT            . HAVE THERE BEEN ANY ACP ERRORS?          TOP       A15,(1*/('Z'-'C')) .  AND IS CONSOLE NOTIFICATION ON?          J         RB750             .   NO, SKIP          E$CLEAR                     .   YES, OPEN EDIT          E$DECV    ERRCNT            . EDIT ERROR COUNT          E$MSG     CNSMSG            . 'ERROR(S) DURING ARCHIVE - NOTIFY  A'          C$OM      CNSPKT            . SEND MESSAGE TO CONSOLE..         ALL FINISHED - EXIT HERE.RB750          ER        EXIT$             . REBUILD PROCESS COMPLETE, NO ERRORS/..         ERRORS COME HERE.RB900          LMJ       X9,STATUS         . PRINT STATUS MSG FOR D-B I/O ERROR          NOP                         .RB920          ER        ERR$              . SOMETHING WENT WRONG, BLOW UP..         I/O STATUS CHECK ROUTINE.STATUS          TNZ,S1    3,A0              . IS STATUS ZERO?          J         1,X9              .  YES, RETURN NORMAL          LX,U      X4,,A0            .  NO, LOAD PKT ADDRESS INTO X4          LXI,U     X4,1              . LOOP INCREMENT          P$RINT    ERRPRT(5)         . 'BAD I/O STATUS, PACKET DUMP FOLLOWS:'          E$CLEAR                     . CLEAR EDIT          LA,U      A4,5              . LOOP COUNT - 1ST100          E$OCTF    12,,*X4           . EDIT NEXT OCTAL WORD INTO OUTPUT          E$SKIP    1                 . SKIP OVER ONE          JGD       A4,ST100          . BACK FOR REST OF PACKET          P$RINT    (0116,LINE)       . PRINT EDITED PACKET DUMP          J         0,X9              . RETURN ERROR STATUS...         EXPCHK IS CALLED TO DETERMINE IF PRESENT HISTORY ENTRY IS.         TO BE EXPIRED.  AT CALL, X4 = ENTRY ADDRESS...         RETURNS 0,X10 IF ENTRY HAS EXPIRED, 1,X10 IF NOT..         ON RETURN, A4 = JULIAN DATE OF ARCHIVE/BACKUP..EXPCHK          LA        A0,AHARCT,X4      . ARCHIVE DATE/TIME (TDATE$)          LMJ       X11,JULOUT        . CONVERT TO JULIAN IN A4          ER        ERR$              . ABORT IF ERROR RETURN (CORRUPTED DATA)          AU        A4,AHEXP,X4       . ARCHIVE DATE + EXP PERIOD = EXP DATE          TG        A5,CURJUL         . LESS THAN CURRENT DATE?          J         EC200             .  NO, DO NOT EXPIRE THIS ENTRY          ON        M$EXPPERM>0       . ON IF PERM EXP DEFINED          LA        A0,AHEXP,X4       . EXPIRATION CODE FOR ENTRY          TNE,U     A0,M$EXPPERM      . PERM RETENTION?          J         EC200             .  YES, NEVER EXPIRE          OFF       M$EXPPERM>0       . END OF PERM-EXP CODE          ON        M$MHFSHARED>0     . THIS CODE FOR SHARED-ONLY          LA        A0,AHHOST,X4      . HOSTID OF ENTRY          TE        A0,HOSTID         . IS FILE FROM CURRENT HOST,          TEP       A15,(1*/('Z'-'E')) .  OR CONSIDER ALL FILES?          J         EC100             .   YES, EXPIRE THIS FILE          TZ        SHRUPD            . ARE SHARED FILES INCLUDED IN UPDATE,          TE,U      A0,077            .  AND IS THIS FILE FROM <SHARED> DIR?          J         EC200             .   NO, DO NOT EXPIRE          OFF       M$MHFSHARED>0     . END OF SHARED-ONLY CODEEC100          J         0,X10             . RETURN EXPIRED ENTRYEC200          J         1,X10             . RETURN NO EXPIRED ENTRY...         THIS ROUTINE SEARCHES THE USER-SELECTED TAPE TABLE (TAPTBL).         FOR EACH BACKUP REEL OF THE INPUT FILE (X4 = HIST RECORD)..         THE RETURN STATUS IS SET IN A0 AS FOLLOWS:..         UPDATE MODE:  1 = PROCESS NORMALLY (NO FIND IN TABLE).                      -1 = EXPIRE ENTRY (FIND IN TABLE)  (A2 = REEL-ID)..         READ-ONLY MODE:  1 = PROCESS NORMALLY (FIND IN TABLE / NO TABLE).                          0 = SKIP THIS ENTRY (NO FIND IN TABLE).TAPCHK          LA,U      A0,1              . ASSUME STATUS = 1          TOP,U     A15,1*/('Z'-'T')  . IS THERE A USER SELECT/EXPIRATION LIST?          J         TC800             .  NO, RETURN          LA,U      A1,AHBRST,X4      .  YES, LOAD ADDRESS OF BACKUP REEL LIST          LXI,U     A1,1              . LOOP INCREMENT          LA        A2,AHBRCT,X4      . COUNT OF REELS IN THIS ENTRY          TG,U      A2,AHBRMX+1       . MORE THAN MAXIMUM?          LA,U      A2,AHBRMX         .  YES, USE MAX ALLOWED          LR,U      R2,,A2            .          JGD       R2,$+2            . DECREMENT FOR LOOP          ER        ERR$              .  ABORT IF ZERO - BAD DATATC100          LA        A2,,*A1           . GET NEXT BACKUP REEL ID          JNZ       A2,$+2            . SKIP IF NONZERO          ER        ERR$              .  IF ZERO, BAD DATA - ABORT          LA        A3,(1,TAPTBL)     . POINTER TO SELECT/EXP LIST          LR        R1,TAPCNT         . COUNT OF ENTRIES IN LIST          SE        A2,,*A3           . SEARCH FOR MATCH WITH BACKUP REEL          J         TC200             .  NO FIND, CONTINUE WITH NEXT BACKUP          TOP,U     A15,1*/('Z'-'R')  .  FIND - IS THIS READ-ONLY MODE?          LNA,U     A0,1              .   NO, SET STATUS TO INDICATE EXPIRATION          J         TC800             .    AND RETURN TO CALLERTC200          JGD       R2,TC100          . LOOP BACK FOR NEXT BACKUP REEL          TEP,U     A15,1*/('Z'-'R')  .  NO FIND - IS THIS READ-ONLY MODE?          LA,U      A0,0              .   YES, SET STATUS TO SKIP THIS REELTC800          J         0,X11             . RETURN TO CALLER/..         SRTOPN ASSIGNS THE SORT FILES (R$CORE AND XA, IF NOT ALREADY.         ASSIGNED) AND CALLS ROPN$ TO OPEN THE SORT..         AT ENTRY, A4 = MAX TOTAL RECORDS TO PROCESS.SRTOPN          LA,U      A0,RCASG          .          ER        CSF$              . @ASG,T R$CORE,///50          JP        A0,$+2            . CHECK CSF STATUS          ER        ERR$              . ABORT IF ERROR - SHOULD NOT HAPPEN          LA        A0,(9,XAFAC)      .          ER        FITEM$            . GET ASSIGNMENT INFO FOR 'XA' FILE          TZ,S1     XAFAC+6           . WAS FILE ALREADY CREATED?          J         SR100             .  YES, SKIP - HOPE IT IS THE RIGHT SIZE!          MSI,U     A4,SRSIZE         . A4 = TOTAL WORDS TO SORT          DSL       A4,36             . PREPARE FOR DIVIDE          DI,U      A4,(1792*10)/12   . A4 = TRACKS REQ * 120%          AA,U      A4,10             . ADD 10 TRACKS FOR FUDGE FACTOR          E$DIT     EPKT              . OPEN EDIT          E$MSG     XAASG             . '@ASG,T XA,F/'          E$DECV    A4                . COMPUTED INITIAL RESERVE          E$MSGR                      . '/TRK/'          E$DECV    A4                . USE SAME VALUE FOR MAXIMUM          E$MSGR                      . ' . '          LA,U      A0,LINE           .          ER        CSF$              . ASSIGN XA WITH CORRECT (WE HOPE) SIZE          JP        A0,$+2            . CHECK CSF$ STATUS          ER        ERR$              . ABORT IF ERROR - SHOULD NOT HAPPENSR100          R$OPN     RP                . OPEN SYSTEM SORT ROUTINESR200          J         0,X10             . RETURN/..         THIS ROUTINE IS USED TO RELEASE DATA FROM A HISTORY RECORD TO SORT...         X6 = RECORD ADDRESS.         A4 = JULIAN DATE OF ARCHIVE/BACKUP.         A5 = OUTPUT LINK (REL TO AHHSTB).         A6 = RECORD TYPE (0=NEW/CURRENT, 1=EXPIRED).SRTREL          LX,U      X7,SRTREC         . X7 = PTR TO SORT RECORD (X6 = HIST ENT)          SA        A6,SRTYPE,X7      . STORE RECORD TYPE (0=CURR, 1=EXP)          SA        A5,SRLNKO,X7      . STORE OUTPUT SECTOR LINK          DL        A0,AHQUAL,X6      . QUALIFIER          DL        A2,AHFILE,X6      . FILENAME          DS        A0,SRQUAL,X7      . STORE IN SORT RECORD          DS        A2,SRFILE,X7      .          LA        A0,AHCYCL,X6      . CYCLE          SA        A0,SRCYCL,X7      . STORE IN SORT RECORD          SA        A4,SRADJL,X7      . STORE JULIAN ARCHIVE DATE          LA        A0,AHCATT,X6      . CATALOG DATE/TIME (TDATE$)          AND       A0,(0777777)      . A1 = LOWER PORTION (TIME)          SA        A1,SRCTIM,X7      . STORE IN SORT RECORD          LMJ       X11,JULOUT        . CONVERT TO JULIAN          LA,U      A4,1              . ASSUME 1/1/64 IF ERROR          $IF       M$MHFSHARED=0     . THIS CODE IS FOR NON-SHARED ONLY          LA,U      A3,0              . HOST-ID ALWAYS = 0 IN THIS CASE          $ELSE                       . THIS CODE FOR SHARED-ONLY          LA        A3,AHHOST,X6      . GET HOST-ID FROM HISTORY ENTRY          $ENDF                       . END OF CONDITIONAL CODE          LSSL      A4,18+3           . SHIFT JUL CAT DATE TO A4 (35-21)          DSL       A3,18+3           . HOSTID (3), JUL DATE (15) TO A4 LOWER          SA        A4,SRHSCJ,X7      . STORE COMBINED DATA IN SORT RECORD          LA        A0,AHTKCT,X6      . TRACK COUNT          SA        A0,SRTKCT,X7      . STORE IN SORT RECORD          LA        A0,AHEXP,X6       . EXPIRATION PERIOD (DAYS)          LA        A1,AHSTFP,X6      . STARTING FILE POSITION          LSSL      A1,6              . SHIFT TO ALIGN WITH REEL COUNT          LXI       A1,AHBRCT,X6      . REEL COUNT INTO S3          SSL       A1,6              . SHIFT REEL COUNT, POSITION BACK TO H2          DL        A2,AHBRST,X6      . FIRST (AND SECOND) BACKUP REEL(S)          SA        A0,SREXP,X7       . STORE EXPIRATION IN SORT RECORD          SA        A1,SRRCPS,X7      .  AND REEL COUNT, POSITION          DS        A2,SRREEL,X7      .  AND FIRST, SECOND REEL NUMBER(S)          LA        A0,AHREFT,X6      . LAST REFERENCE TATE/TIME (TDATE$)          SSL       A0,18             . SHIFT DATE PORTION TO LOWER A0          SA        A0,SRREFD,X7      . STORE IN SORT RECORD          LA        A0,AHFLGS,X6      . HIST ENTRY FLAG BITS          LA        A1,AHRLDF,X6      . RELOAD FLAG          LA        A2,INPPTR         . POINTER TO INPUT HIST ENTRY          SA        A0,SRFLGS,X7      . STORE IN SORT RECORD          SA        A1,SRRLDF,X7      .          SA        A2,SRLNKI,X7      .          R$REL     (SRSIZE,SRTREC)   . RELEASE RECORD TO SORT          J         0,X10             . RETURN/..         PTROUT IS CALLED TO WRITE A FILE POINTER TABLE OR A.         QUALIFIER POINTER TABLE TO THE OUTPUT AHF.  THE DATA IS.         TRANSFERRED TO DBIO$ FOR DOUBLE-BUFFERED OUTPUT...         AT ENTRY, A0 = (WORD COUNT, BUFFER ADDRESS).                   A1 = SECTOR ADDRESS.PTROUT          DS        A0,PTSA01         . SAVE A0,A1          DS        A2,PTSA23         . AND A2,A3          ANU       A1,NXAPSEC        . A2 = SKIPPED SECTOR COUNT          JZ        A2,PT200          . SKIP IF ZERO          TLE,U     A2,64             . MUST BE BETWEEN 1 AND 63          TLE,U     A2,1              .          ER        ERR$              . IF NOT, ABORT          ANA,U     A2,1              . DECREMENT FOR JGD          LR,U      R2,,A2            . LOOP COUNT          SA        A1,NXAPSEC        . SECTOR ADDRESS AFTER SKIPPT100          D$BO      WRPTPK  PT900,PT900  . SKIP NEXT SECTOR, A1 = BUFF ADDR          LXI,U     A1,1              . INCREMENT FOR BT          LA,U      A0,(0)            . ZEROFILL          LR,U      R1,28             . 28 WORDS          BT        A1,,*A0           . CLEAR THE SECTOR          JGD       R2,PT100          . LOOP FOR REMAINING SKIPPED SECTORS          LA        A0,PTSA01         . RESTORE A0PT200          LA,U      A3,,A0            . A3 = OUTPUT BUFFER ADDRESS          LXI,U     A3,1              . INCREMENT FOR TRANSFER          DSL       A0,36+18          . PREP FOR DIVIDE, A1 = WORD COUNT          DI,U      A0,28             . COMPUTE SECTOR COUNT          JZ        A1,$+2            .          ER        ERR$              . ERROR IF NON-INTEGRAL WORD COUNT          AU        A0,NXAPSEC        . A1 = NEXT AVAIL ADDR AFTER THIS WRITE          SA        A1,NXAPSEC        .  SAVE FOR FUTURE USE          LR,U      R2,,A0            . LOOP COUNT          JGD       R2,PT220          . DECR AND SKIP          ER        ERR$              . ERROR IF ZERO OR NEGATIVEPT220          D$BO      WRPTPK  PT900,PT900  . GET ADDRESS OF NEXT OUTPUT RECORD          LXI,U     A1,1              . INCREMENT FOR TRANSFER          LR,U      R1,28             . TRANSFER 28 WORDS          BT        A1,,*A3           .  TO OUTPUT BUFFER          JGD       R2,PT220          . BACK FOR MORE          DL        A2,PTSA23         . RESTORE A2,A3          J         1,X10             . RETURN NORMALPT900          J         0,X10             . RETURN ERROR/..         THIS ROUTINE IS CALLED TO UPDATE THE QUALIFIER POINTER TABLE CHAIN..UPDQTP          LA        A2,PTSA01+1       . SECTOR ADDRESS OF JUST-WRITTEN QPT          TZ        UPQTPK+5          . IS THIS THE FIRST IN CHAIN?          J         UP100             .  NO, SKIP          LA,U      A0,AHHDBF         .  YES          SA        A2,AHHPQL,A0      . STORE ADDRESS IN AHF HEADER          J         UP200             . GO UPDATE PACKET FOR NEXT UPDATEUP100          TP        WRPTPK+3          .          ER        WAIT$             . WAIT FOR OUTSTANDING I/O TO COMPLETE          LA        A0,(R$,0,0)       .          SA        A0,UPQTPK+3       . SETUP PACKET TO READ          I$OW      UPQTPK            . READ 1ST 4 SECTORS OF PREV QPT          LMJ       X9,STATUS         . CHECK I/O STATUS          J         UP920             .  EXIT IF ERROR DETECTED          LA,U      A1,UBUFF          . A1 = ADDRESS OF PREV DATA          LA        A0,APQTLB,A1      . GET SOFTWARE QPT LABEL          TNE       A0,('**QT**')     . VERIFY CORRECT LABEL          TZ        APQTNX,A1         .  AND LINK = ZERO          J         UP900             .   SOMETHING WRONG HERE, ERROR EXIT          SA        A2,APQTNX,A1      . ALL OK, LINK CURR BUFF INTO PREVIOUS          LA        A0,(W$,0,0)       .          SA        A0,UPQTPK+3       . SETUP PACKET TO WRITE          I$OW      UPQTPK            . WRITE PREV DATA (W/LINK) BACK TO FILE          LMJ       X9,STATUS         . CHECK I/O STATUS          J         UP920             .  EXIT IF ERROR DETECTEDUP200          SA        A2,UPQTPK+5       . STORE CURR ADDR IN PKT FOR NEXT UPDATE          J         1,X11             . RETURN NORMALUP900          P$RINT    ERRPRT(3)         . 'INTERNAL ERROR UPDATING QPT LINK'UP920          J         0,X11             . RETURN ERROR/..         JULDT TAKES A TDATE$ INPUT (A0) AND RETURNS THE JULIAN DATE.         IN A4 AND THE JULIAN TIME (SECONDS SINCE 1/1/64-00:00) IN A5..JULDT          LA,U      A6,,A0            . SECONDS PORTION OF TDATE$ WORD          TG,U      A6,3600*24+1      . WITHIN LEGAL RANGE?          J         JT900             .  NO, ERROR EXIT          LMJ       X11,JULOUT        . GET JULIAN DATE IN A4          J         JT900             . ERROR EXIT          LA        A5,A4             . DATE TO A5          MSI,U     A5,3600*24        . CONVERT TO SECONDS          AA        A5,A6             . ADD SECONDS WITHIN CURRENT DATE          J         1,X10             . RETURNJT900          J         0,X10             . ERROR RETURN...         MFDERP IS USED FOR PRINTING MESSAGES CORRESPONDING TO DETECTED.         ERRORS IN THE FAS SAVE-HISTORY FILE UPDATE..MFDERP          E$CLEAR                     . CLEAR EDIT          E$COPY    10,('*WARNING:   ') . START OF MESSAGE          ON        M$MHFSHARED>0     . THIS CODE FOR SHARED-ONLY          LA,U      A0,'STD'          . ASSUME <STD> DIRECTORY          TZ        MFDRID,X5         . IS THIS A SHARED FILE?          LA        A0,('SHARED')     .  YES, INDICATE SHARED DIRECTORY          E$FD1                       . EDIT DIR-ID INTO MESSAGE          E$CHAR    '#'               . SEPARATOR          OFF       M$MHFSHARED>0     . END OF SHARED-ONLY CODE          E$FD2     MFQUAL,X5         . QUALIFIER          E$CHAR    '*'               .          E$FD2     MFFILE,X5         . FILENAME          E$CHAR    '('               .          E$DECV    MFCYCL,X5         . CYCLE          E$CHAR    ')'               .          E$MSG     0,X9              . FINISH OUT THE MESSAGE          P$RINT    (0122,LINE)       . PRINT THE MESSAGE          SP1       MFDERF            . SET ERROR FLAG          J         0,X10             . RETURN/..         CONVERT ORIGINAL LEVEL MATCHING INFO TO 2R2+ FORMAT..         X9 = MI BUFFER ADDRESS.CVTMV2          DL        A0,AHMQUAL,X9     . MATCHING QUALIFIER          SZ        AHMQUAL,X9        . ZERO UNUSED SPACE (WORD 0, H2)          LA,U      A3,11             . MAX 12 CHARACTERSCM100          AND,U     A1,077            . RIGHTMOST CHAR TO A2          DSL       A0,6              . SHIFT 1 CHAR RIGHT          TNE,U     A2,'#'            . IS NEXT A WILDCARD?          JGD       A3,CM100          .  IF SO, LOOP UNTIL ALL 12 TESTED          LA,U      A0,11             .          ANA       A0,A3             . COMPUTE A0 = COUNT OF TRAILING WILDS          SA        A0,AHMQWC,X9      . SAVE WILDCARD COUNT          DL        A0,AHMFILE,X9     . MATCHING FILENAME          LA,U      A3,11             . MAX 12 CHARACTERSCM120          AND,U     A1,077            . RIGHTMOST CHAR TO A2          DSL       A0,6              . SHIFT 1 CHAR RIGHT          TNE,U     A2,'#'            . IS NEXT A WILDCARD?          JGD       A3,CM120          .  IF SO, LOOP UNTIL ALL 12 TESTED          LA,U      A0,11             .          ANA       A0,A3             . COMPUTE A0 = COUNT OF TRAILING WILDS          SA        A0,AHMFWC,X9      . SAVE WILDCARD COUNT          LA,U      A0,AHMIV2         . VERSION 2R2+ FLAG          LA        A1,('DEFAUL')     . ALL PRE-2R2 ARE DEFAULT CLASS          SA        A0,AHMIVF,X9      . SET NEW FORMAT FLAG          SA        A1,AHMCLS,X9      .  AND DEFAULT CLASS          SZ        AHMFILE,X9        . ZERO UNUSED SPACE IN RECORD          SZ        AHMFILE+1,X9      .          J         0,X11             . RETURN..         FORMAT AND EDIT A MATCHING QUAL/FILE.           A0,A1 = ORIGINAL NAME, A5 = WILDCARD COUNT.FMTMAT          DS        A0,IMAGE          . STORE QUAL OR FILE NAME          LA,U      A1,12             .          ANA       A1,A5             . A1 = IDENTICAL CHAR COUNT          JZ        A1,FM200          . SKIP IF ZERO          LA,U      A0,IMAGE          .          E$COPY                      . IF NOT, COPY THIS MANY TO OUTPUT          JZ        A5,FM300          . SKIP IF NO WILDCARDS TO COPYFM200          LA,U      A0,('############') . WHERE TO GET THE REST          LA        A1,A5             . WILDCARD COUNT          E$COPY                      . APPEND APPROPRIATE AMOUNTFM300          J         0,X10             . RETURN/.INPMSG    'READING &*&(&) LAST UPDATED & AT &, WITH & ENTRIES.&'MFDMSG    'INPUT MFD EXTRACT CREATED & AT &, WITH & FILES.&'EXPMSG    'MERGED FILES FROM FAS ARCHIVE HISTORY WILL EXPIRE & DAYS FROM &'EXPMSA    'TODAY.&'EXPMSR    'ORIGINAL ARCHIVE DATE.&'PEXMSG    '*WARNING: & FAS-ARCHIVED FILES HAVE ALREADY EXPIRED*&'OUTMSG    'CREATING &*&(&) AT &-&, WITH & ENTRIES.&'OUTMSG2   ' NEW ENTRIES HAVE BEEN ADDED.  & PREVIOUS ENTRIES HAVE EXPIRED.&'MFDER1    ' HAS BACKUP TIME EARLIER THAN HISTORY FILE ENTRY&'MFDER2    ' HAS CURRENT BACKUP IN MFD - HISTORY ENTRY NOT EXPIRED&'MFDER3    ' HAS INVALID BACKUP TIME - NOT ENTERED IN HISTORY FILE&'MFDER4    ' NEW BACKUP DONE MORE THAN 24 HOURS AGO, DEFAULT EXP USED&'MFDER5    ' HAS MORE THAN FOUR BACKUP REELS&'MFDER6    ' HAS BACKUP, WAS NOT SAVED DURING MOST RECENT SAVALL&'RCASG     '@ASG,T R$CORE,///50 . 'XAASG     '@ASG,T XA,F/&/TRK/& . &'CNSMSG    ' ERROR(S) DURING ARCHIVE - NOTIFY SYSTEMS  A&'PURMSG    '*** PURGED ***&'DELMSG    '*** DELETED **&'RLDDTM    '(RELOAD ON: & &)  &'.MRSMSG    '  MARS * 3R1&'HDG1MSG   '':$CFS(M$SITENM):'&DATE &   PAGE&'HDG2N DO 8 ,   ' '          '   MASTER ARCHIVE LIST - NEW FILES&'HDG2E DO 8 ,   ' '          ' MASTER ARCHIVE LIST - EXPIRED FILES&'HDG2C DO 8 ,   ' '          ' MASTER ARCHIVE LIST - CURRENT FILES&'HDG2R DO 8 ,   ' '          'MASTER ARCHIVE LIST - RELOADED FILES&'HDG2W     'MASTER ARCHIVE LIST - FILES ARCHIVED FROM & THRU &'HDG3      '                                 TRACK  DATE    DATE    DATE    DA'          'TE   ------- MATCHING PARAMETERS ------                  LOCATION 'H3L       EQU       $-HDG3HDG4          $IF       M$MHFSHARED=0          'QUALIFIER     FILENAME   RL CYC  COUNT   CAT     REF     ARC     E'          $ELSE          'H QUALIFIER    FILENAME   RL CYC COUNT   CAT     REF     ARC     E'          $ENDF          'XP   CLASS    QUALIFIER    FILENAME      WHY-ARCHIVED   REEL   POS'H4L       EQU       $-HDG4DASHES DO H4L ,  '- - - 'HDG5      '*** EXPIRED TAPE LIST ***'H5L       EQU       $-HDG5.ERR(1)    'INPUT ARCHIVE HISTORY FILE IS EMPTY OR HAS BAD LABEL'ERR(2)    'TOO MANY EXPIRED REELS, INCREASE <MAXEXR>'ERR(3)    'INTERNAL ERROR UPDATING QUALIFIER TABLE LINK'ERR(4)    'NO TAPE REELS SPECIFIED'ERR(5)    'BAD I/O STATUS - PACKET DUMP FOLLOWS:'ERR(6)    '* INTERNAL ERROR *  FILE COUNT DIFFERENT BET. PASS 1, PASS 2'ERR(7)    'INPUT $MFDB$ FILE HAS BAD HEADER OR WRONG <MFDEDT> LEVEL'ERR(8)    '*INPUT SAVE HISTORY FILE IS EMPTY - PERFORMING INITIAL UPDATE*'ERR(9)    'INPUT MFD DATA BASE MUST BE SORTED BY QUAL/FILE/CYCLE'ERR(10)   'TAPE REEL FORMAT ERROR OR <MAXTAP> EXCEEDED'ERR(11)   '*MERGING FAS ARCHIVE HISTORY EXTRACT WITH SAVE-HISTORY DATABASE*'ERR(12)   'SUPPLIED EXPIRATION IS MISSING OR HAS INVALID FORMAT'ERR(13)   '*ERROR* SYSTEM-ID PARAMETER CARD MISSING, REQUIRED'ERR(14)   'INPUT MFDDB CONTAINS SHARED DIR FILES, <M$MHFSHARED> MUST = 1'ERR(15)   'INPUT MFDDB IS FROM NON-MHFS SYSTEM, <M$MHFSHARED> MUST = 0'ERR(16)   'MHFS IS NOT SYSTEM-CONFIGURED, <M$MHFSHARED> MUST = 0'ERR(17)   'INVALID HOSTID RETURNED BY MSCON$-DIRID$ FUNCTION'NERR      EQU       17ERR(NERR+1)I DO NERR ,ERRPRT(I) + 0100+ERR(I+1)-ERR(I),ERR(I)/.$(0)CURTDA    +         0                 . CURRENT DATE/TIME (TDATE$)CURJUL    +         0                 . CURRENT JULIAN DATEHOSTID    +         0                 . HOST-ID OF RUNNING SYS IF MHFS CONFIGSHRUPD    +         0                 . SET IF SHARED FILES INCLUDED IN UPDATEHDRLBL    '*AHFL*'                    . HIST FILE HEADER WORDCURJTD    +         0                 . CURRENT JULIAN DATE/TIMEHSTGET    EQUF      $,,S1             . SET TO GET ENTRY FROM HIST FILEMFDGET    EQUF      $,,S2             . SET TO GET ENTRY FROM MFD FILEGETFLGS   +         0                 . GET FLAG WORDNEWEXP    +         0                 . EXPIRATION FOR NEW FAS HIST ENTRIESLSWTDA    +         0                 . WEEK-AGO DATE/TIME (TDATE$)LSWJUL    +         0                 . WEEK-AGO JULIAN DATEINPPTR    -         1                 . POINTER TO INPUT HISTORY ENTRYOUTPTR    -         1                 . POINTER TO OUTPUT HISTORY ENTRYINPSTB    +         0                 . INPUT STARTING SECTOR OF HIST ENTRIESINPJGD    +         0                 . INPUT LOOP COUNT OF HIST ENTRIES (-1)NEWCNT    +         0                 . NEW HIST ENTRY COUNTEXPCNT    +         0                 . EXPIRED HIST ENTRY COUNT FROM INPUT AHFEXPRCT    +         0                 . EXPIRED REEL COUNTTAPCNT    +         0                 . ENTRY COUNT OF SEL/EXP TAPE LISTQUACTB    +         0                 . ENTRY COUNT OF CURRENT QUAL PTR TABLEQUACTQ    +         0                 . ENTRY COUNT OF OTHER QUAL PTR TABLESFILCTB    +         0                 . ENTRY COUNT OF CURRENT FILE PTR BUFFERFILCTQ    +         0                 . ENTRY COUNT OF OTHER FILE POINTER                                      .  BUFFERS WITH THE SAME QUALIFIERNXAPSEC   +         AHBEGN            . NEXT AVAIL SECTOR OF OUTPUT FILEPTSA01    +         0D                . SAVE A0,A1 FOR PTROUT RTNPTSA23    +         0D                . SAVE A2,A3 FOR PTROUT RTNEOFFLG    +         0                 . SET WHEN SORT RETURNS EOF STATUSEXPFLG    +         0                 . SET WHEN SORT IS RETURNING EXPIRED ENTSERRCNT    +         0                 . COUNT OF ACP ERRORS DURING ARCHIVE RUNMFDERF    +         0                 . SET IF ERROR(S) DET IN F-S HIST UPDATEEXPREL    +         0                 . SET IF FILES FROM FAS ARCHIVE HISTORY                                      . WILL EXPIRE RELATIVE TO ORIG ARCH DATEPRECNT    +         0                 . COUNT OF PRE-EXPIRED ARCHIVE$ FILESXAFAC     'XA       '                 . FITEM$ REQUEST PACKET FOR 'XA' FILE          RES       7                 .DIDPKT    +         DIRID$            . MSCON$-DIRID$ PACKET          +         0D                .          +         3,DIDBUF          .DIDBUF    RES       3                 . BUFFER FOR RETURNED DIRID$ INFORDHSTH    I$OD      'HISTIN$',R$  28,AHHDBF  0 . PACKET TO READ INPUT AHF HEADERRDHIST    D$BRP     'HISTIN$'  28,DBFSIZ,$-$ . PACKET FOR D-B READ OF INP AHFRDHSIZ    EQU       $-RDHIST          . SIZE OF D-B PACKET AS BUILT BY PROCRDHSAV    RES       RDHSIZ            . USED TO STORE/RESTORE RDHIST PACKETRDHSTI    I$OD      'HISTIN$',R$  28,RHBUFF  $-$ . READS HIST ENTS WITH >2 REELSRDMFDH    I$OD      '$MFDB$',R$  28,MFHDBF  0 . PACKET TO READ INPUT MFDDB HDRRDMFD     D$BRP     '$MFDB$'  28,DBFSIZ/2,$-$ . PACKET FOR D-B READ OF MFDDBWRHIST    D$BWP     'HISTOUT$'  28,DBFSIZ,$-$,HSTBUF . D-B WRITE-PK FOR AHF HISTWRPTPK    D$BWP     'HISTOUT$'  28,APQTBS,$-$,HSTBUF . D-B WRITE-PK FOR AHF PTRSUPQTPK    I$OD      'HISTOUT$',$-$  112,UBUFF  0 . UPDATES <APQTNX> IN PREV TBLRP        R$FILE    ;                 . SORT PACKET          'RSZW',SRSIZE               ;          'FILES','XA'                ;          'KEY',1,1,'A','A'           ;          'KEY',7,42,'A','A'          ;          'DELCON'  ;          'DELLOG'  ;          'FPOC',SR200                ;          'LPOC',RB300FACPKT    RES       12                . FITEM$ PACKETCNSPKT    C$OMPK    48,LINE,1,LINE+10 . COM$ OUTPUT, SENDS WARNINGS TO CONSOLEEPKT      E$PKT     22,LINE           . EDIT$ PACKETSITCOD    '            '              . USER-SUPPLIED SYSTEM-IDLINE      RES       22                . EDIT$ OUTPUT BUFFERIMAGE     RES       2                 . TEMP STORE AREA FOR E$COPYSRTREC    RES       SRSIZE            . SORT RECORD RELEASE AREAAHHDBF    RES       28                . AHF HEADER BUFFERRHBUFF    RES       28                . FOR READING HIST ENTRIES WITH > 1 REELMFHDBF    RES       28                . MFDDB HEADER BUFFEREXPTBL    RES       MAXEXR            . EXPIRED REEL TABLETAPTBL    RES       MAXTAP+1          . SELECTED/TO BE EXPIRED TAPE LISTUBUFF     RES       112               . BUFFER FOR READ/UPDATE LINK TO NEXT QPTFILETB    RES       APFTBS            . FILE POINTER TABLEQUALTB    RES       APQTBS            . QUALIFIER POINTER TABLE..         SHARED BUFFER FOR D-B OUTPUT I/O OPERATIONS.$(2),HSTBUF  RES  ((DBFSIZ>=APQTBS)*DBFSIZ+(DBFSIZ<APQTBS)*APQTBS)*2          END       START@ELT,SIP MARSREL$.MAP/REBUILD,,,042206062633,006IN MARS$.JULDATE,.REBUILDEQU DIRID$/050NOT TPF$.@ELT,SIP MARSREL$.RLDCTL,,,157431133034,023.         MARS RELOAD CONTROLLER                          WRC 8/90..         THIS PROGRAM OPERATES IN A CONTINUOUS BATCH ENVIRONMENT AND.         MONITORS THE MARS RELOAD CONTROL BANK (MRCBNK) FOR FILES TO.         BE RELOADED.  INFORMATION IS PLACED IN THIS BANK BY USERS OF.         THE MARS PROCESSOR WHO WANT TO RELOAD ONE OR MORE FILE(S)..         RLDCTL READS THIS INFORMATION AND BUILDS A START FILE WHICH.         IS SUBMITTED TO BATCH AND PERFORMS THE RELOAD...         RLDCTL ALSO OPENS AN RSI DEMAND SESSION WHICH IS USED TO SUBMIT.         UNSOLICITED CONSOLE KEYINS AS REQUESTED BY THE UKEY PROGRAM.  THIS.         FEATURE IS USED TO NOTIFY USERS WHEN RELOADS HAVE COMPLETED...         RLDCTL WRITES AN AUDIT OF ALL RELOADED FILES AND REQUESTING.         RUNS TO THE PRINT$ FILE.  CURRENT INFORMATION CAN BE RETRIEVED.         BY DOING AN 'II RLDCTL BRKPT' FROM THE CONSOLE, WHICH WILL TELL.         THE PROGRAM TO EXECUTE AN INTERNAL BREAKPOINT.  IF RLDCTL IS.         EXECUTED WITH THE 'B' OPTION, THIS HAPPENS AUTOMATICALLY AT MID-.         NIGHT EVERY NIGHT...         THE CONSOLE COMMAND 'II RLDCTL TERM' WILL TERMINATE RLDCTL..$(1)      AXR$          LIT          MGPDEF          RCBDEF.START          LA        A15,A5            . SAVE OPTIONS          LA,U      A0,DIDPKT         .          ER        MSCON$            . PERFORM MSCON$-DIRID$          JN        A0,RC020          . SKIP IF NEG STATUS          LA,S6     A0,DIDBUF         . GOOD INFO, GET MHFS STAT          TEP,U     A0,1              . IS MHFS CONFIGURED?          J         RC030             .  YES, SKIPRC020          $IF       M$MHFSHARED=0     . THIS CODE FOR NON-SHARED          SZ        MHFCFG            . ZERO MHFS-CONFIGURED FLAG          $ELSE                       . THIS CODE FOR SHARED-ONLY          P$RINT    ERRPRT(6)         . 'MHFS NOT SYS-CONFIGURED'          ER        ERR$              .  REQUIRED WHEN M$MHFSHARED>0, ABORT          $ENDF                       . END OF CONDITIONAL CODERC030          E$DIT     EPKT              . OPEN EDIT          LX,U      X7,RCADDR         . X7 = BASE ADDRESS OF MRCBNK          TNZ       RCHDTM,X7         . IS TIME CELL = 0?          J         RC070             .  YES, INIT IS OK          ER        TIME$             .  NO, GET CURRENT TIME          ANA       A0,RCHDTM,X7      . SUBTRACT TIME FROM TIME CELL          JP        A0,RC050          . SKIP IF POSITIVE          AA        A0,(24*60*60000)  .  IF NEG, ADJUST FOR PAST MIDNIGHT          JP        A0,RC050          . IF POSITIVE, OK NOW          P$RINT    ERRPRT(1)         .  IF NOT, BANK MAY BE CORRUPTED          ER        ERR$              .   BLOW UPRC050          TG,U      A0,60000          . UPDATED LAST MORE THAN ONE MIN AGO?          J         RC070             .  YES, CONTINUE WITH INIT          P$RINT    ERRPRT(2)         .  NO, 'ONLY ONE COPY MAY BE ACTIVE'          ER        ERR$              .   BLOW UPRC070          ON        $SL(M$RSIUP)>0    . THIS CODE ON FOR UKEY INTERFACE          LA,U      A0,RSIPK1         .          ER        RSI$              . OPEN DEMAND SESSION          LA,S1     A4,RSIPK1+2       . GET STATUS          TEP,U     A4,040            . ERROR FROM RSI?          J         RC090             .  YES, SKIP          LA,U      A0,RSGET$         .          SA,H1     A0,RSIPK1         . NEXT FUNCTION = RSGET$          LA        A0,(132,RSIINP)   . INPUT BUFFER AND SIZE          SA        A0,RSIPK1+1       .  SAVE IN PACKET          LR,U      R1,10-1           . LOOK FOR INPUT REQ - LOOP TEN TIMESRC075          LA,U      A0,RSIPK1         .          ER        RSI$              . PERFORM RSGET$ REQUEST          LA,S1     A4,RSIPK1+2       . GET STATUS          TEP,U     A4,040            . ERROR FROM RSI?          J         RC090             .  YES, SKIP          TEP,U     A4,010            . READY FOR INPUT?          J         RC080             .  YES, GO SEND USERID/PASSWORD          LA,U      A1,1000           .  NO, WAIT 1 SECOND          ER        TWAIT$            .          JGD       R1,RC075          .  AND TRY AGAIN          J         RC090             . GIVE UP AFTER TEN TRIESRC080          LA,U      A0,RSPUT$         .          SA,H1     A0,RSIPK1         . SET FUNCTION = RSPUT$          LA        A0,($SL(M$RSIUP),($CAS(M$RSIUP))) . CONFIGURED USERID/PWD          SA        A0,RSIPK1+1       .  SAVE IN PACKET          LA,U      A0,RSIPK1         .          ER        RSI$              . PERFORM RSPUT$ - SEND USERID/PASSWORD          LA,S1     A4,RSIPK1+2       . GET RSI$ STATUS          TEP,U     A4,040            . ERROR FROM RSI?          J         RC090             .  YES, SKIP          LA,U      A1,500            .          ER        TWAIT$            . WAIT 1/2 SECOND          LA,U      A0,RSGET$         .          SA,H1     A0,RSIPK1         . NEXT FUNCTION = RSGET$          LA        A0,(132,RSIINP)   . INPUT BUFFER AND SIZE          SA        A0,RSIPK1+1       .  SAVE IN PACKET          LR,U      R1,10-1           . LOOK FOR OUTPUT - LOOP TEN TIMES          LA,U      A1,1000           . TWAIT$ VALUE IF NO OUTPUT AVAIL          LA,U      A5,0              . ZERO INIT-OK FLAGRC085          LA,U      A0,RSIPK1         .          ER        RSI$              . PERFORM RSGET$ REQUEST          LA,S1     A4,RSIPK1+2       . GET STATUS          TEP,U     A4,040            . ERROR FROM RSI?          J         RC090             .  YES, SKIP          TEP,U     A4,4              . IS OUTPUT AVAILABLE?          J         RC088             .  NO, SKIP          LA        A0,RSIINP         .  YES, GET FIRST 4 CHARS          TE        A0,($CAS('*SPE')) . IS THIS PRE-SB4 SIGNON,          TNE       A0,($CAS('*UNI')) .  OR SB4 SIGNON MESSAGE?          LA,U      A5,1              .   YES, SET INITIALIZATION-OK FLAG          LA,U      A1,100            . NEXT TWAIT$ ARE 1/10 SECOND          JNZ       A5,RC088          . SKIP IF SIGNON SUCCESSFUL          LA        A0,RSIPK1+3       .  IF NOT, LOAD OUTPUT CHAR COUNT          SSL       A0,6              . TO A0 UPPER          LXM,U     A0,RSIINP         . ADDRESS TO A0 LOWER          SA        A0,COMPK1+1       .  STORE IN COM$ PACKET          C$OM      COMPK1            . ECHO OUTPUT TO CONSOLERC088          ER        TWAIT$            . WAIT BEFORE ASKING FOR OUTPUT AGAIN          JGD       R1,RC085          . LOOP BACK , EAT ALL CANNED OUTPUT          JNZ       A5,RC095          . DONE - SKIP IF INITIALIZATION OKRC090          P$RINT    ERRPRT(7)         . 'ERROR INITIALIZING RSI'          ER        ERR$              . ABORTRC095          C$OM      COMPK3            . 'RSI CONSOLE INTERFACE IS UP'          LA,U      A0,RSPUT$         .          SA,H1     A0,RSIPK1         . USE PACKET 1 FOR INPUT FROM NOW ON          LA,H2     A0,RSIPK1         . RSI TERMINAL IDENTIFIER          SA,H2     A0,RSIPK2         .  SAVE IN OUTPUT PACKET          LA,U      A0,RC820          .          ER        FORK$             . FORK OFF ACTIVITY TO PROCESS RSI OUTPUT          OFF       $SL(M$RSIUP)>0    . END OF UKEY INTERFACE CODE          LA,U      A0,RCLEVL         . CURRENT SOFTWARE LEVEL          SA        A0,RCHDLV,X7      . STORE IN BANK HEADER          LA,U      A0,RC900          . ADDRESS OF II CAPTURE ROUTINE          ER        FORK$             . CREATE ANOTHER ACTIVITY FOR THIS          TNZ,S1    RCHDTS,X7         . IS T/S UP IN MRCBNK?          TS        RCHDTS,X7         .  NO, LOCK MRCBNK          J         RC680             .  FINISH INIT AND BEGIN LOOP/..         THIS IS THE TOP OF THE CONTROL LOOP.RC100          LA,U      A1,100            . SHORT WAIT TIME (100 MS)          LA        A0,SWTCNT         . REMAINING SHORT WAIT COUNT          JGD       A0,RC110          . DECREMENT, SKIP IF >0          LA,U      A1,2000           . USE 2 SECONDS IF OUT OF SHORT WAITRC110          SA        A0,SWTCNT         . STORE NEW SHORT WAIT COUNT          ER        TWAIT$            . WAIT BEFORE CHECKING FOR DATA          TS        RCHDTS,X7         . LOCK MRCBNK          LA        A0,RCHDFL,X7      . GET HEADER FLAG          TNE       A0,('*READY')     . IN READY STATE?          J         RC700             .  YES, CONTINUE LOOP          TNE       A0,('*DATA*')     .  NO, IS FILE DATA AVAIL?          J         RC120             .   YES, PROCESS RELOAD          C$TS      RCHDTS,X7         .   NO, UNLOCK BANK          P$RINT    ERRPRT(3)         . 'MRCBNK IS CORRUPTED, RELOAD REQUIRED'          ER        ABORT$            .  BLOW UPRC120          C$TS      RCHDTS,X7         . UNLOCK MRCBNK WHILE SETTING UP RELOAD          LR        R4,RCHDFC,X7      . FILE COUNT          JGD       R4,RC180          . DECREMENT AND SKIP AHEAD          LA,U      A4,RCKYER         . STATUS FOR KEYIN ERROR          $IF       $SL(M$RSIUP)=0    . THIS ON FOR NO UKEY INTERFACE          J         RC600             . KEYIN ERROR - NOT CONFIGURED          $ELSE                       . THIS ON FOR UKEY INTERFACE          TNZ       RCHDKL,X7         . IS KEYIN LENGTH > ZERO?          J         RC600             .  NO, KEYIN ERRORRC125          ER        TIME$             . TIME SINCE MIDNIGHT IN MS          ANA       A0,PRTTIM         . SUBTRACT TIME OF LAST RSI OUTPUT          JN        A0,RC130          . SKIP AHEAD IF NEG, SHOULDN'T HAPPEN          LA,U      A1,250+10         .          ANA       A1,A0             . WAIT TIME TO ENSURE 250 MS HAVE ELAPSED          TLE,U     A1,10             . MORE THAN FUDGE FACTOR?          J         RC130             .  NO, DON'T WAIT          ER        TWAIT$            .  YES, WAIT          J         RC125             . GO BACK AND CHECK AGAINRC130          LA,U      A0,RCKYTX,X7      . ADDRESS OF KEYIN TEXT (ASCII)          LXI,U     A0,1              . INCREMENT FOR TRANSFER          LA        A1,(1,RSIINP)     . RSI$ INPUT BUFFER          LR        R1,RCHDKL,X7      . LENGTH OF KEYIN TEXT          BT        A1,,*A0           . TRANSFER TO LOCAL BUFFER          LA        A0,RCHDKL,X7      . LENGTH OF KEYIN TEXT (WORDS)          AA,U      A0,2              .  PLUS TWO WORDS FOR PREFIX          LSSL      A0,18+2           .  TIMES FOUR, TO A0 UPPER          LXM,U     A0,RSISUB         . ADDRESS OF KEYIN          SA        A0,COMPK1+1       . STORE PARAMETER IN COM$ PACKET          SA        A0,RSIPK1+1       .  AND RSPUT$ PACKET          LA        A0,RCHDAC,X7      . ACCESS COUNT          DSL       A0,36             . PREPARE FOR DIVIDE          DI,U      A0,RCRSMX         . DIVIDE BY NUMBER OF STATUS RECORDS          MSI,U     A1,RCRSSZ         . MULT REMAINDER BY REC SIZE          AA,U      A1,RCRSBG,X7      . A1 = PTR TO STATUS RECORD          LA        A0,RCRSGR,A1      . PICKUP GENERATED RUNID          LR,U      R1,4              . LOOP FIVE TIMESRC140          AND,U     A0,077            . RIGHTMOST CHAR TO A1          TE,U      A1,' '            . IS IT A SPACE?          J         RC150             .  NO, SKIP          SSC       A0,6              . YES, SHIFT ONE CHARACTER RIGHT          JGD       R1,RC140          . BACK FOR NEXTRC150          SA        A0,RUNID          . STORE RIGHT-JUSTIFIED RUNID          LA,U      A0,1              . ONE WORD          LA,U      A1,RUNID          . INPUT ADDRESS          LA,U      A2,RSISUB         . OUTPUT ADDRESS          LMJ       X11,FDASC$        . TRANSLATE TO ASCII          LA,U      A0,$CAS('>>')     . RUNID -> KEYIN INDICATOR          SA,H2     A0,RSISUB+1       . STORE FOR CONSOLE OUTPUT          C$OM      COMPK1            . WRITE KEYIN LOG TO SYSTEM CONSOLE          DL        A0,($CAS('@@CONS  ')) . CONSOLE COMMAND PREFIX          DS        A0,RSISUB         .  APPEND TO KEYIN TEXT          LA,U      A0,RSIPK1         .          ER        RSI$              . SUBMIT KEYIN TO RSI DEMAND          LA,S1     A0,RSIPK1+2       . GET STATUS          TEP,U     A0,040            . ERROR FROM RSI?          J         RC600             .  YES, RETURN ERROR TO REQUESTOR          LA,U      A0,50             .          SA        A0,SWTCNT         . SET SHORT WAIT COUNT TO 50          J         RC560             . KEYIN REQ SUCCESSFUL - RET GOOD STATUS          $ENDF                       . END OF UKEY INTERFACE CODERC180          LX,U      X4,RCFEBG,X7      . START ADDR OF RELOAD FILE ENTRIES          LR,U      R5,2              . TRY A MAX OF 3 TIMES TO CREATE OUT FILERC190          E$CLEAR                     . CLEAR EDIT          E$MSG     USESTF            . '@USE RLDST$,SYS$*RELST$'          ER        DATE$             . GET DATE/TIME          SA        A1,STTIME         . SAVE TIME (6 CHARS FIELDATA)          E$COPY    6,STTIME          . COPY TIME TO FORM UNIQUE FILENAME          E$MSGR                      . ' . '          LA,U      A0,LINE           .          ER        CSF$              . ISSUE @USE FOR UNIQUE FILE          LA,U      A0,ASGSTF         .          ER        CSF$              .  @ASG,UPV RLDST$          JP        A0,RC200          . SKIP IF ASSIGN SUCCESSFUL          LA,U      A1,1500           .  IF NOT, WAIT 1.5 SECONDS          ER        TWAIT$            .          JGD       R5,RC190          . TRY AGAIN, UP TO TWICE MORE          J         RC580             . ERROR, CANNOT CREATE START FILE..         START FILE SUCCESSFULLY CREATED, PRINT INFO MESSAGE FOR AUDIT.RC200          E$CLEAR                     . CLEAR EDIT          E$MSG     LOGMSG            . 'RUNID: '          LA        A0,RCHDAC,X7      . ACCESS COUNT          DSL       A0,36             . PREPARE FOR DIVIDE          DI,U      A0,RCRSMX         . DIVIDE BY MAX STATUS RECORDS          MSI,U     A1,RCRSSZ         . MULT REMAINDER BY REC SIZE          AA,U      A1,RCRSBG,X7      . A1 = POINTER TO STATUS RECORD          E$FD1     RCRSGR,A1         . EDIT RUNID INTO IMAGE          E$MSGR                      . ' STARTED RUN <RL'          E$FD1     RCHDU4,X7         . FIRST 4 CHARS USERID          E$MSGR                      . '> AT '          ER        TDATE$            . CURRENT DATE/TIME          LA        A4,A0             .          E$DAY1                      . EDIT DATE INTO IMAGE          E$MSGR                      . ' - '          E$TIME    A4                . EDIT TIME INTO IMAGE          E$MSGR                      . ' TO RELOAD '          E$DECV    RCHDFC,X7         . COUNT OF RELOADED FILES          E$MSGR                      . ' '          LA        A0,('ARCHIV')     . ASSUME ARCHIVED FILES          TZ        RCHDFA,X7         . IS FAS-RELOAD SET?          LA,U      A0,'SAV'          .  YES, SAY SAVED FILES          E$FD1                       . EDIT TYPE OF RELOAD          E$MSGR                      . 'ED FILE'          LA,U      A0,'S'            . ASSUME PLURAL          LA        A1,RCHDFC,X7      .          TE,U      A1,1              . SKIP IF ONLY ONE FILE RELOADED          E$CHAR                      .          E$MSGR                      . ':'          P$RINT    (0417,LINE)       . PRINT STATUS MESSAGE FOR AUDIT          P$RINT    (0100,$)          . SKIP A LINE          INC       RUNCNT            . INCREMENT RUN CT SINCE LAST BRKPT          NOP                         ./..         BUILD THE COMMON ECL AT THE TOP OF EVERY START FILE:..         1) @RUN RL<XXXX>,,SYS$,60,100.         2) @<USER-DEFINED COMMAND>.         3) @ASG,TNF IBACKUP,<EQUIP>.         4) @USE ACP$ARCHIST$,SYS$*ARCHIST$(<CYCLE>)  (ARCHIVE RELOAD ONLY).         5) @ASG,A ACP$ARCHIST$                       (ARCHIVE RELOAD ONLY).         6) @MSG <CARDS TO TELL OPERATOR WHICH TAPES TO USE>.         7) @SETC,N.         8) @<ECL TO MAKE THE RUN PRIVILEGED>.          E$CLEAR                     . CLEAR EDIT          E$MSG     RUNSTA            . '@RUN RL'          E$FD1     RCHDU4,X7         . EDIT 1ST 4 CHARS OF USERID          E$MSGR                      . ',,SYS$,60,100'          LMJ       X10,SYMBOUT       . OUTPUT @RUN IMAGE TO START FILE          ON        $SL(M$BFRCMD)>0   . TURN ON IF PRE-RELOAD COMMAND DESIRED          LA        A0,($SL(M$BFRCMD),BFRCMD) . CTL WORD FOR PRE-RELOAD CMD          LMJ       X10,SYMBOUT2      . WRITE TO FILE          OFF       $SL(M$BFRCMD)>0   .          LA        A0,RCFEFB,X4      . RELOAD FLAG BITS          LA,U      A1,0              . ASSUME RELOAD FROM REEL TAPE          TEP,U     A0,RCFBCT         . UNLESS CARTRIDGE FLAG SET          LA,U      A1,1              .  IF SO, SET CARTRIDGE INDICATOR          SA        A1,EQPCOD         . STORE FOR LATER TEST          LA        A0,TAPASG,A1      . LOAD PROPER PRINT CTL WORD FOR DEVICE          LMJ       X10,SYMBOUT2      . WRITE TO START FILE          TZ        RCHDFA,X7         . ARCHIVE RELOAD?          J         RC220             .  NO, SKIP          E$CLEAR                     .  YES          E$MSG     USEACF            . '@USE ACP$ARCHIST$,SYS$*ARCHIST$('          E$DECV    RCHDHC,X7         . F-CYCLE OF INPUT HISTORY FILE          E$MSGR                      . ')/<READ>/<WRITE>'          LMJ       X10,SYMBOUT       . WRITE @USE COMMAND TO START FILE          LA        A0,(AML*6,ASGACF) . CONTROL WORD FOR @ASG,A ACP$ARCHIST$          LMJ       X10,SYMBOUT2      . WRITE TO START FILE..         OUTPUT LIST OF REELS USED BY RUN, IF MORE THAN ONE REEL.         WILL BE LOADED.RC220          LX        X5,X4             . X5 = POINTER TO FILE ENTRIES          LXI,U     X5,RCFESZ         . INCREMENT BY ENTRY SIZE          LXI,U     X6,1              . INCREMENT IN X6 FOR LATER USE          LR        R5,R4             . FILE ENTRY LOOP COUNTER          LA,U      A6,0              . INIT PREVIOUS REEL = 0          LNA,U     A10,1             . INIT NO REELS EDITEDRC240          LXM,U     X6,RCFEBS,X5      . X6 = START OF REEL TABLE FOR ENTRY          LA        A0,RCFEBC,*X5     . COUNT OF BACKUP REELS          TG,U      A0,RCBRMX+1       . MORE THAN MAXIMUM?          LA,U      A0,RCBRMX         .  YES, LOAD MAX (SHOULD NEVER HAPPEN)          LR,U      R6,,A0            . INTO R6 FOR LOOP          JGD       R6,$+1            . DECREMENT FOR JGDRC250          LA        A0,,*X6           . NEXT REEL THAT WILL BE REQUESTED          TNE       A0,A6             . SAME AS PREVIOUS?          J         RC280             .  YES, SKIP          LA        A6,A0             .  NO, LOAD NEW REEL ID          JN        A10,RC265         . SKIP IF THIS IS THE FIRST TIME THROUGH          JGD       A11,RC270         . SKIP IF OUTPUT LINE IS NOT FULL          JNZ       A10,RC260         . SKIP IF NOT FIRST FULL LINE          LA        A0,(OM1L*6,OPMSG1) . PARAM TO OUTPUT MESSAGE:          LMJ       X10,SYMBOUT2      .  'INPUT TAPES WILL BE USED IN THIS SEQ'RC260          LMJ       X10,SYMBOUT       . OUTPUT FULL @MSG LINE WITH REEL IDSRC265          E$CLEAR                     . CLEAR EDIT          E$MSG     OPMSG2            . '@MSG '          AA,U      A10,1             . INCREMENT LINE COUNT          LA,U      A11,7-1           . LOOP COUNTER, MAX REELS/MESSAGE          J         RC275             .RC270          E$CHAR    '/'               . SEPARATORRC275          E$FD1     A6                . NEXT REEL IDRC280          JGD       R6,RC250          . BACK FOR NEXT REEL, SAME ENTRY          JGD       R5,RC240          . BACK FOR NEXT FILE ENTRY          JNZ       A10,RC285         . SKIP IF LINE ALREADY OUTPUT          TG,U      A11,7-1           . IF NOT, HAVE AT LEAST 2 REELS BEEN USED?          J         RC290             .  NO, DON'T OUTPUT ANYTHING          LA        A0,(OM1L*6,OPMSG1) . PARAM TO OUTPUT MESSAGE:          LMJ       X10,SYMBOUT2      .  'INPUT TAPES WILL BE USED IN THIS SEQ'RC285          LMJ       X10,SYMBOUT       . OUTPUT FULL @MSG LINE WITH REEL IDSRC290          LA        A0,(7,('@SETC,N     ')) . DON'T THROW UNNECESSARY PAGES          LMJ       X10,SYMBOUT2      . WRITE COMMAND TO START FILE          LA        A0,($SL(M$PRVCMD),PRVMSG) . CONTROL WORD FOR PRIV CMD          LMJ       X10,SYMBOUT2      . WRITE COMMAND TO START FILE          TZ        RCHDFA,X7         . FAS SAVE-HISTORY MODE?          J         RC400             .  YES, SKIP/..         OUTPUT ACP COMMANDS TO RELOAD ARCHIVED FILE(S).          LA        A0,RCHDAC,X7      . ACCESS COUNT          DSL       A0,36             . PREPARE FOR DIVIDE          DI,U      A0,RCRSMX         . DIVIDE BY MAX STATUS RECORDS          MSI,U     A1,RCRSSZ         .  REMAINDER * REC SIZE = STAT REC OFFSET          AU,U      A1,RCRSBG,X7      . A2 = ABS ADDR OF STATUS RECORD          LA        A8,RCRSGR,A2      . GET GENERATED RUNID OF REQUESTOR          LA,U      A9,RCRSBG,A1      .  AND STAT REC OFFSET FROM START OF BANKRC300          E$CLEAR                     . CLEAR EDIT          E$MSG     ACPMSG            . '@ACP,RAX'          LA        A4,RCFEFB,X4      . RELOAD FLAGS          TZ        MHFCFG            . IS MHFS CONFIGURED,          TNZ       RCFEQ2,X4         .  AND RELOAD INTO DIFF NAME?          J         RC310             .   NO, SKIP          LA,U      A0,'Y'            . ASSUME STD DIRECTORY          TEP,U     A4,RCFBRS         . RESTORE TO SHARED?          LA,U      A0,'U'            .  YES, USE APPROPRIATE OPTION          E$CHAR                      . EDIT DIR-TYPE OPTIONRC310          TOP,U     A4,RCFBFX         . RESTORE TO FIXED STORAGE?          J         RC320             .  NO, SKIP          E$CHAR    'P'               .  YES, EDIT OPTION FOR THISRC320          TZ        RCHDFE,X7         . IS THIS A FETCH REQUEST?          TZ        R4                .  AND IS THIS THE LAST FILE?          J         RC330             .   NO, SKIP          E$CHAR    'F'               .   YES, TELL ACP IT'S OVERRC330          E$MSGR                      . ' '          LMJ       X10,COMEDF        . TARGET FILENAME          E$MSGR                      . .,          TNZ       RCFEQ2,X4         . RELOADING INTO A DIFF Q*F?          J         RC340             .  NO, SKIP          LMJ       X10,COMRPF        . REPLACEMENT FILENAME          E$CHAR    '.'               .RC340          E$MSGR                      . ,,          LA        A0,RCFELW,X4      . LINK TO HISTORY SECTOR          LSSL      A0,12             . ISOLATE BITS 23-0          SSL       A0,12             .          E$DECV                      . EDIT INTO ACP CALL          TNZ       RCHDFE,X7         . IS THIS A FETCH REQUEST?          J         RC350             .  NO, SKIP          E$MSGR                      .  YES, ADD RUNID, OFFSET TO ACP CALL          E$FD1     A8                . GENERATED RUNID OF REQUESTOR          E$MSGR                      .          E$DECV    A9                . BANK OFFSET OF STATUS RECORDRC350          LMJ       X10,SYMBOUT       . WRITE ACP COMMAND TO START FILE          LMJ       X9,LOGFIL         . LOG THE RELOADED FILE NAME          JGD       R4,RC360          . ANY MORE FILES TO RELOAD?          J         RC500             .  NO, SKIPRC360          AX,U      X4,RCFESZ         . INCREMENT POINTER TO NEXT ENTRY          LA        A0,RCFEFB,X4      . RELOAD FLAG BITS          TEP,U     A0,RCFBCT         . RELOAD TO CARTRIDGE TAPE?          J         RC370             .  YES, SKIP          TNZ       EQPCOD            .  NO, IS CURRENT EQP = REEL?          J         RC300             .   YES, BACK FOR NEXT FILE          J         RC580             .   NO, ERRORRC370          TZ        EQPCOD            . ALREADY USING CARTRIDGE?          J         RC300             .  YES, BACK FOR NEXT FILE          SP1       EQPCOD            .  NO, SET FLAG AND SWAP DRIVES          LA        A0,(TFL*6,TAPFRE) . '@FREE IBACKUP'          LMJ       X10,SYMBOUT2      . WRITE COMMAND TO START FILE          LA        A0,TAPASG+1       . ASSIGN COMMAND FOR CARTRIDGE TAPE          LMJ       X10,SYMBOUT2      . WRITE COMMAND TO START FILE          J         RC300             . PROCESS NEXT FILE NOW/..         OUTPUT FAS COMMANDS TO RELOAD SAVED FILE(S).RC400          LA        A0,(8,('@FAS,FVX    ')) . CALL THE FAS PROCESSOR          LMJ       X10,SYMBOUT2      . WRITE TO START FILE          LA,U      A0,2              .          SA        A0,PRVDIR         . INITIALIZE PREVIOUS DIR-IDRC410          LMJ       X9,LOGFIL         . LOG RELOADED FILE NAME          LA        A0,RCFEFB,X4      . RELOAD FLAGS          AND,U     A0,-RCFBOS        . DON'T CARE ABOUT CHG IN ORIG-DIR          SA        A1,PRVFLG         . SAVE FOR CHECK AGAINST NEXT FILE          TNZ       MHFCFG            . IS MHFS CONFIGURED ON THIS SYSTEM?          J         RC415             .  NO, SKIP          LA,U      A1,0              . ASSUME STD DIRECTORY          TEP,U     A0,RCFBRS         . IS RESTORE-SHARED FLAG SET?          LA,U      A1,1              .  YES, POINTER SET FOR SHARED          TNE       A1,PRVDIR         . ALREADY SET FAS TO THIS DIR?          J         RC415             .  YES, SKIP          SA        A1,PRVDIR         . SAVE NEW DIRECTORY POINTER          LA        A0,SETDIR,A1      . GET CORRECT SET_DIR COMMAND          LMJ       X10,SYMBOUT2      . WRITE TO FILERC415          LA        A7,RCFEBC,X4      . BACKUP REEL COUNT          TG,U      A7,RCBRMX+1       . MORE THAN MAX ALLOWED?          LA,U      A7,RCBRMX         .  YES, LOAD MAX (SHOULD NEVER HAPPEN)          E$CLEAR                     . CLEAR EDIT          E$MSG     RSTMSG            . 'RESTORE CRITERIA=[FILE=''          LMJ       X10,COMEDF        . EDIT TARGET FILENAME INTO IMAGE          E$CHAR    ''''              . CLOSE WITH QUOTE          TNZ       RCFEQ2,X4         . RELOAD INTO DIFFERENT Q*F?          TG,U      A7,2              .  OR MORE THAN ONE BACKUP?          J         RC440             .   YES, ONLY ONE FILE FOR THIS COMMAND          LA        A6,RCFEBS,X4      . A6 = CURRENT REEL ID FOR RESTORERC420          JGD       R4,$+2            . ANY MORE ENTRIES TO PROCESS?          J         RC440             .  NO, SKIP          TNZ       RCFEQ2+RCFESZ,X4  . RELOAD INTO DIFFERENT Q*F?          TE        A6,RCFEBS+RCFESZ,X4 .  OR DIFFERENT BACKUP REEL ID?          J         RC425             .   YES, DO NOT INCL FILE IN CURR COMMAND          LA        A0,RCFEFB+RCFESZ,X4 .   NO, GET FLAG BITS FOR NEXT FILE          AND,U     A0,-RCFBOS        . DON'T CARE ABOUT CHG IN ORIG-DIR          TNE       A1,PRVFLG         . SAME AS PREVIOUS FLAG BITS?          J         RC430             .  YES, INCLUDE IN CURR COMMANDRC425          INC       R4                . RESET LOOP COUNTER          NOP                         .          J         RC440             . FINISH UP CURRENT COMMAND AND ACTRC430          E$CHAR    ','               . TERMINATE CURRENT OUTPUT LINE          LMJ       X10,SYMBOUT       .  AND WRITE TO FILE          AX,U      X4,RCFESZ         . INCREMENT POINTER TO NEXT ENTRY          LMJ       X9,LOGFIL         . LOG NEXT FILE NAME          LA        A7,RCFEBC,X4      . BACKUP REEL COUNT          TG,U      A7,RCBRMX+1       . MORE THAN MAX ALLOWED?          LA,U      A7,RCBRMX         .  YES, LOAD MAX (SHOULD NEVER HAPPEN)          E$CLEAR                     . CLEAR EDIT          E$SKIP    27                . PREPARE CONTINUATION FOR THIS FILE          E$CHAR    ''''              .          LMJ       X10,COMEDF        . EDIT TARGET FILENAME INTO IMAGE          E$CHAR    ''''              . CLOSE WITH QUOTE          TLE,U     A7,2              . MORE THAN ONE BACKUP REEL FOR FILE?          J         RC420             .  NO, GO CHECK NEXT FILERC440          E$CHAR    ']'               . CLOSE LAST FILE IN CURR CMD SEQUENCE          LMJ       X10,SYMBOUT       . WRITE TO START FILE          TNZ       RCFEQ2,X4         . RELOAD INTO A DIFFERENT Q*F?          J         RC450             .  NO, SKIP          E$CLEAR                     .  YES, CLEAR EDIT          E$MSG     ASFMSG            . 'AS_FILE = ''          LMJ       X10,COMRPF        . EDIT REPLACEMENT Q*F INTO IMAGE          E$MSGR                      . '          LMJ       X10,SYMBOUT       . WRITE TO START FILERC450          LA        A0,RCFEFB,X4      . FLAG BITS          TOP,U     A0,RCFBFX         . RELOAD TO FIXED STORAGE?          J         RC460             .  NO, SKIP          LA        A0,(TOFL*6,TOFMSG) .  YES, GET POINTER TO 'FIXED=YES'          LMJ       X10,SYMBOUT2      . WRITE TO FILERC460          E$CLEAR                     . CLEAR EDIT          E$MSG     FRMMSG            . 'FROM_VOLUME = ''          E$FD1     RCFEBS,X4         . FIRST BACKUP REEL ID          ANA,U     A7,2              . DECR REEL COUNT BY 2          JN        A7,RC470          . SKIP IF NOT AT LEAST 2 REELS          LX,U      X5,RCFEBS+1,X4    . X5 = ADDRESS OF REELS 2-N IN TABLE          LXI,U     X5,1              . LOOP INCREMENTRC465          E$FD1     (''',''   ')      . EDIT SEPARATOR          E$FD1     0,*X5             . EDIT NEXT REEL ID INTO IMAGE          JGD       A7,RC465          . LOOP BACK FOR MORERC470          E$MSGR                      . ''; ACT;'          LMJ       X10,SYMBOUT       . WRITE TO FILE          JGD       R4,RC480          . ANY MORE TO DO?          J         RC490             .  NO, SKIPRC480          AX,U      X4,RCFESZ         . INCREMENT POINTER TO NEXT ENTRY          LA        A0,RCFEFB,X4      . RELOAD FLAG BITS          TEP,U     A0,RCFBCT         . RELOAD TO CARTRIDGE TAPE?          J         RC485             .  YES, SKIP          TNZ       EQPCOD            .  NO, IS CURRENT EQP = REEL?          J         RC410             .   YES, BACK FOR NEXT FILE          J         RC580             .   NO, ERRORRC485          TZ        EQPCOD            . ALREADY USING CARTRIDGE?          J         RC410             .  YES, BACK FOR NEXT FILE          SP1       EQPCOD            .  NO, SET FLAG AND SWAP DRIVESRC490          LA        A0,(4,('END;  ')) . FAS TERMINATION COMMAND          LMJ       X10,SYMBOUT2      . WRITE TO FILE          TP        R4                . MORE TO DO?          J         RC500             .  NO, ALL DONE          LA        A0,(TFL*6,TAPFRE) .  YES, LOAD PARAM FOR '@FREE IBACKUP'          LMJ       X10,SYMBOUT2      . WRITE TO FILE          LA        A0,TAPASG+1       . PARAM FOR @ASG ON CARTRIDGE          LMJ       X10,SYMBOUT2      . WRITE TO FILE          J         RC400             . BACK TO BEGINNING/..         FINISHED CREATION OF RELOAD COMMANDS.RC500          ON        $SL(M$RSIUP)>0    . THIS CODE ON FOR UKEY INTERFACE          LA        A4,RCHDNT,X7      . GET NOTIFICATION TYPE          JZ        A4,RC520          . SKIP IF NONE REQUESTED          LA        A0,(UCL*6,UKCALL) . '@XQT MARS*MARS.UKEY'          LMJ       X10,SYMBOUT2      . WRITE TO START FILE          E$CLEAR                     . CLEAR EDIT          E$MSG     UKMSG             . 'TM '          TE,U      A4,RCNTTR         . NOTIFY TERMINAL?          J         RC510             .  NO, SKIP          E$FD1     RCHDND,X7         .  YES, INSERT TERMINAL (SITEID)          J         RC515             .RC510          E$FD2     RCHDND,X7         . INSERT USERID          E$FD1     '/U',,U           . KEYIN SYNTAX REQUIRED FOR USERIDRC515          E$MSGR                      . ' RELOAD COMPLETE - FILE COUNT = '          E$DECV    RCHDFC,X7         . INSERT FILE COUNT          LMJ       X10,SYMBOUT       . WRITE TO START FILERC520          OFF       $SL(M$RSIUP)>0    . END OF UKEY INTERFACE CODE          E$CLEAR                     . CLEAR EDIT          E$MSG     DEL1MSG           . '@ASG,A RELST$'          E$COPY    6,STTIME          . EDIT UNIQUE TIME VALUE          E$CHAR    '.'               .          LMJ       X10,SYMBOUT       . OUTPUT TO START FILE          E$CLEAR                     . CLEAR EDIT          E$MSG     DEL2MSG           . '@FREE,D RELST$'          E$COPY    6,STTIME          . EDIT UNIQUE TIME VALUE          E$CHAR    '.'               .          LMJ       X10,SYMBOUT       . OUTPUT TO START FILE          ON        $SL(M$AFRCMD)>0   . TURN ON IF POST-RELOAD COMMAND DESIRED          LA        A0,($SL(M$AFRCMD),AFRCMD) . CTL WORD FOR POST-RELOAD CMD          LMJ       X10,SYMBOUT2      . WRITE TO FILE          OFF       $SL(M$AFRCMD)>0   .          LA,U      A0,BRKSTF         .          ER        CSF$              . CLOSE START FILE (@BRKPT RLDST$)          LA,U      A0,FRESTF         .          ER        CSF$              .  @FREE RLDST$          E$CLEAR                     . CLEAR EDIT          E$MSG     STRMSG            . '@START SYS$*RELST$'          E$COPY    6,STTIME          . EDIT UNIQUE TIME          E$MSGR                      . '. . '          TEP,U     A15,1*/('Z'-'T')  . TEST MODE?          J         RC550             .  YES, SKIP          LA,U      A0,LINE           . ADDRESS OF START COMMAND          ER        CSF$              . START RUN          JN        A0,RC580          . SKIP IF BAD STATUS          J         RC560             .RC550          P$RINT    (0110,LINE)       . DISPLAY START COMMANDRC560          LA,U      A4,RCSTCM         . RELOAD STARTED SUCCESSFULLY          J         RC600             . GO FINISH UPRC580          LA,U      A4,RCSTER         . RELOAD COULD NOT BE STARTEDRC600          TS        RCHDTS,X7         . LOCK MRCBNK          LA        A0,RCHDAC,X7      . ACCESS COUNT          DSL       A0,36             . PREPARE FOR DIVIDE          DI,U      A0,RCRSMX         . DIVIDE BY MAX STATUS RECORDS          MSI,U     A1,RCRSSZ         . MULT REMAINDER BY REC SIZE          AA,U      A1,RCRSBG,X7      . A1 = POINTER TO STATUS RECORD          SA        A4,RCRSST,A1      . STORE FINAL STATUS FOR MARS          INC       RCHDAC,X7         . INCREMENT ACCESS COUNT          NOP                         .RC680          LA        A0,('*READY')     .          SA        A0,RCHDFL,X7      . MARK BANK AS READY FOR NEXT REQUEST/..         END OF CONTROL LOOP - THIS CODE EXECUTED EVERY 2 SECONDS.RC700          ER        TIME$             . CURRENT TIME          LA        A1,RCHDTM,X7      . PREVIOUS TIME          SA        A0,RCHDTM,X7      . UPDATE TIME CELL IN BANK          C$TS      RCHDTS,X7         . UNLOCK BANK          TZ        TRMFLG            . TERMINATION REQUESTED BY OPERATOR?          J         RC800             .  YES, EXIT NOW          TG        A0,A1             . IS CURR TIME EARLIER THAN PREVIOUS?          J         RC720             .  NO          TEP       A15,(1*/('Z'-'B')) .  YES, IS BRKPT REQUESTED AFT MIDNIGHT?          J         RC750             .   YES, GO ISSUE @BRKPT PRINT$RC720          TNZ       BRKFLG            . DID OPERATOR REQUEST BREAKPOINT?          J         RC790             .  NO, BACK TO BEGINNING          SZ        BRKFLG            .  YES, CLEAR FLAG AND CONTINUERC750          TZ        RUNCNT            . ANY STARTED RUNS SINCE LAST BRKPT?          J         RC780             .  YES, SKIP          P$RINT    ERRPRT(4)         .  NO, 'NO ACTIVITY SINCE LAST BRKPT'RC780          SZ        RUNCNT            . ZERO RUN COUNTER          LA,U      A0,BRKPT          . @BRKPT PRINT$          ER        CSF$              . ISSUE BRKPT VIA CSFRC790          J         RC100             . BACK TO BEGINNINGRC800          ON        $SL(M$RSIUP)>0    . THIS CODE ON FOR UKEY INTERFACE          LA,U      A0,RSTRM$         . RSI TERMINATION FUNCTION          SA,H1     A0,RSIPK1         .  SAVE IN PACKET          LA,U      A0,RSIPK1         .          ER        RSI$              . TERMINATE DEMAND CONSOLE INTERFACE          OFF       $SL(M$RSIUP)>0    . END OF UKEY INTERFACE CODE          P$RINT    ERRPRT(5)         . 'TERMINATED BY CONSOLE KEYIN'          ER        EXIT$             . ALL DONE..         A SEPARATE ACTIVITY EXECUTES HERE, CHECKING FOR RSI OUTPUT AND.         ROUTING WHATEVER COMES BACK TO THE SYSTEM CONSOLE..          ON        $SL(M$RSIUP)>0    . THIS CODE ON FOR UKEY INTERFACERC820          LA,U      A0,RSIPK2         .          ER        RSI$              . PERFORM RSI$ - RSGTI$ FUNCTION          LA,H1     A0,RSIPK2+4       . GET 'E' STATUS BITS          AND,U     A0,1++4           . CHECK FOR TERMINATED / TERMINATING          JNZ       A1,RC840          .  IF SO, EXIT          LA,S1     A0,RSIPK2+2       . STATUS BITS          TEP,U     A0,040            . ERROR STATUS?          J         RC830             .  YES, EXIT          TEP,U     A0,4              . IS OUTPUT AVAILABLE?          J         RC830             .  NO, SKIP          LA        A0,RSIPK2+3       .  YES, LOAD CHARACTER COUNT          SSL       A0,24             . TO A0 LOWER          SA,H1     A0,COMPK2+1       . SAVE IN COM$ PACKET          C$OM      COMPK2            . SEND OUTPUT TO SYSTEM CONSOLERC830          ER        TIME$             . GET TIME SINCE MIDNIGHT IN MS          SA        A0,PRTTIM         . SAVE FOR USE BY INPUT ROUTINE          LA,U      A1,25             .          ER        TWAIT$            . WAIT 25 MS          TNZ       TRMFLG            . TERMINATION REQUESTED?          J         RC820             .  NO, BACK FOR MORE OUTPUT          ER        EXIT$             .  YES, EXIT NOWRC840          TZ        TRMFLG            . TERMINATION REQUESTED?          ER        EXIT$             .  YES, EXIT NOW          P$RINT    ERRPRT(8)         .  NO, 'ERROR STATUS FROM RSI$'          ER        EABT$             . KILL THE RUN NOW          OFF       $SL(M$RSIUP)>0    . END OF UKEY INTERFACE CODE..         A SECOND ACTIVITY SITS HERE CHECKING FOR II KEYINS.RC900          ER        II$               . GET THE NEXT KEYIN          TNE       A0,('BRKPT ')     . BREAKPOINT COMMAND?          SP1       BRKFLG            .  YES, SET FLAG          TE        A0,('TERM  ')     . TERMINATE COMMAND?          J         RC900             .  NO, BACK TO TOP          SP1       TRMFLG            .  YES, SET TERMINATE FLAG          ER        EXIT$             .    AND EXIT/..         LOGFIL IS CALLED TO EDIT THE RELOADED FILE NAME (AND REPLACEMENT.         NAME, IF SPECIFIED) INTO THE PRINT$ FILE FOR AUDIT PURPOSES.LOGFIL          E$CLEAR                     . CLEAR EDIT          E$SKIP    2                 . INDENT FILE NAMES BY 2 SPACES          TNZ       MHFCFG            . IS MHFS CONFIGURED?          J         LF020             .  NO, SKIP          LA        A1,RCFEFB,X4      . GET RELOAD FLAGS          LA,U      A0,'STD'          . NAME OF STANDARD DIR          TEP,U     A1,RCFBOS         . WAS FILE FROM SHARED DIR?          LA        A0,('SHARED')     .  YES, USE SHARED DIR NAME          E$FD1                       . EDIT INTO IMAGE          E$CHAR    '#'               . SEPARATORLF020          LMJ       X10,COMEDF        . EDIT RELOADED FILE NAME          TNZ       RCFEQ2,X4         . IS THERE A REPLACEMENT Q*F?          J         LF100             .  NO, SKIP          E$COPY    10,(' AS FILE:   ') .  YES, EDIT REPL INDICATION          TNZ       MHFCFG            . IS MHFS CONFIGURED?          J         LF040             .  NO, SKIP          LA        A1,RCFEFB,X4      . GET RELOAD FLAGS          LA,U      A0,'STD'          . NAME OF STANDARD DIR          TEP,U     A1,RCFBRS         . RELOAD INTO SHARED DIR?          LA        A0,('SHARED')     .  YES, USE SHARED DIR NAME          E$FD1                       . EDIT INTO IMAGE          E$CHAR    '#'               . SEPARATORLF040          LMJ       X10,COMRPF        . EDIT REPLACEMENT FILE NAMELF100          P$RINT    (0122,LINE)       . PRINT RELOAD INFORMATION          J         0,X9              . RETURN..         COMEDF IS CALLED FROM ABOVE TO EDIT THE TARGET Q*F(C) INTO IMAGE.COMEDF          E$FD2     RCFEQL,X4         . QUALIFIER          E$CHAR    '*'               .          E$FD2     RCFEFL,X4         . FILENAME          E$CHAR    '('               .          E$DECV    RCFECY,X4         . CYCLE          E$CHAR    ')'               .          J         0,X10             . RETURN..         COMRPF IS CALLED FROM ABOVE TO EDIT A REPLACEMENT Q*F(C) INTO IMAGE.COMRPF          E$FD2     RCFEQ2,X4         . QUALIFIER          E$CHAR    '*'               .          E$FD2     RCFEF2,X4         . FILENAME          E$CHAR    '('               .          E$DECV    RCFEC2,X4         . F-CYCLE          E$CHAR    ')'               .          J         0,X10             . RETURN..         SYMBOUT IS CALLED FROM ABOVE TO OUTPUT COMMANDS TO THE START FILE..SYMBOUT          E$COLN                      . GET COLUMN NUMBER          LSSL      A0,18             . SHIFT TO A0 UPPER          LXM,U     A0,LINE           . FORM SYMB$ OUTPUT PARAMETERSYMBOUT2          SA        A0,SYMPKT+4       . STORE IN PACKET          LA,U      A0,SYMPKT         .          ER        SYMB$             . WRITE COMMAND TO START FILE          J         0,X10             . RETURN/.$(0)      . PUT MESSAGES IN DBANK TO CONSERVE MEMORYERR(1)    'UNABLE TO START - MRCBNK MAY BE CORRUPTED'ERR(2)    'UNABLE TO START - ONLY ONE COPY OF RLDCTL MAY BE ACTIVE'ERR(3)    'MRCBNK IS CORRUPTED, RELOAD REQUIRED'ERR(4)    '*NO ACTIVITY SINCE LAST BRKPT*'ERR(5)    '*TERMINATED BY CONSOLE KEYIN*'ERR(6)    'MHFS IS NOT CONFIGURED, <M$MHFSHARED> MUST = 0'ERR(7)    'ERROR INITIALIZING RSI DEMAND CONSOLE INTERFACE'ERR(8)    'ERROR STATUS RETURNED FROM RSI$'NERR      EQU       8ERR(NERR+1)I DO NERR ,ERRPRT(I) +  0200+ERR(I+1)-ERR(I),ERR(I)$(1)      . REMAINDER OF LITERAL TEXT IN IBANK.USESTF    '@USE RLDST$,SYS$*RELST$& . &'ASGSTF    '@ASG,UPV RLDST$ . 'BRKSTF    '@BRKPT RLDST$ . 'FRESTF    '@FREE RLDST$ . 'RUNSTA    '@RUN RL&,,SYS$,60,100&'LOGMSG    'RUNID: & STARTED RUN <RL&> AT & - & TO RELOAD & &ED FILE&:&'BFRCMD    '':$CFS(M$BFRCMD)TAPSTD    '@ASG,TNF IBACKUP,':$CFS(M$TMSTD)TSL       EQU       $-TAPSTDTAPHIC    '@ASG,TNF IBACKUP,':$CFS(M$TMHIC)TCL       EQU       $-TAPHICTAPASG          +         TSL*6,TAPSTD          +         TCL*6,TAPHICTAPFRE    '@FREE IBACKUP'TFL       EQU       $-TAPFREUSEACF          $IF       M$MHFSHARED=0          '@USE ACP$ARCHIST$,';          'STD#SYS$*ARCHIST$(&)/':$CFS(M$HFRK):'/':$CFS(M$HFWK):'&'          $ELSE          '@USE ACP$ARCHIST$,';          'SHARED#SYS$*ARCHIST$(&)/':$CFS(M$HFRK):'/':$CFS(M$HFWK):'&'          $ENDFASGACF    '@ASG,A ACP$ARCHIST$'AML       EQU       $-ASGACFOPMSG1    '@MSG INPUT TAPES WILL BE USED IN THIS SEQUENCE:'OM1L      EQU       $-OPMSG1OPMSG2    '@MSG &'PRVMSG    '':$CFS(M$PRVCMD)ACPMSG    '@ACP,RAX& &.,&,,&,&/&'DIRSTD    'SET DIRECTORY_NAME := STD;'DL1       EQU       $-DIRSTDDIRSHR    'SET DIRECTORY_NAME := SHARED;'DL2       EQU       $-DIRSHRSETDIR          +         DL1*6,DIRSTD          +         DL2*6,DIRSHRRSTMSG    'RESTORE CRITERIA = [FILE = ''&'ASFMSG    '                 AS_FILE = ''&''&'TOFMSG    '                TO_FIXED = YES'TOFL      EQU       $-TOFMSGFRMMSG    '             FROM_VOLUME = ''&''; ACT;&'UKCALL    '@XQT MARS*MARS.UKEY'UCL       EQU       $-UKCALLUKMSG     'TM & RELOAD COMPLETE - FILE COUNT = &'DEL1MSG   '@ASG,A RELST$&'DEL2MSG   '@FREE,D RELST$&'AFRCMD    '':$CFS(M$AFRCMD)STRMSG    '@START SYS$*RELST$&. . &'BRKPT     '@BRKPT PRINT$ . 'COMMSG1   'RSI CONSOLE INTERFACE IS UP'CM1L      EQU       $-COMMSG1/.$(0)STTIME    +         0                 . DATE$ - UNIQUE 6 CHARS, ST FILENAMEMHFCFG    +         1                 . SET IF MHFS IS CONFIGUREDSWTCNT    +         0                 . SHORT WAIT COUNTEQPCOD    +         0                 . EQUIP CODE (0=REEL, 1=CARTRIDGE)PRVFLG    +         0                 . FLAG BITS FOR PREVIOUS FILEPRVDIR    +         2                 . DIR-POINTER FOR PREVIOUS FILERUNCNT    +         0                 . STARTED RUNS SINCE LAST BRKPTBRKFLG    +         0                 . BREAKPOINT REQUESTED BY OPERATORTRMFLG    +         0                 . TERMINATION REQUESTED BY OPERATORSYMPKT    'RLDST$  '                  . SYMB$ PACKET FOR BUILDING START FILE          +         W$,0              .   TO DO AUTOMATIC RELOAD DO 7 ,   +         0                 .DIDPKT    +         DIRID$            . MSCON$-DIRID$ PACKET          +         0D                .          +         3,DIDBUF          .DIDBUF    RES       3                 . BUFFER FOR RETURNED DIRID$ INFOEPKT      E$PKT     18,LINE           . EDIT$ PACKETLINE      RES       22                . EDIT$ OUTPUT BUFFER          ON        $SL(M$RSIUP)>0    . THIS CODE ON FOR UKEY INTERFACERSIPK1    +         RSGDEM$,0         . RSI PACKET 1 - INITIALIZATION / INPUT          +         0D                .          +         0,010000          .          +         0D                .RSIPK2    +         RSGTI$,$-$        . RSI PACKET 2 - OUTPUT          +         132,RSIOUT        .          +         0                 .          +         0D                .COMPK1    +         4,0               . COM$ PACKET 1 - KEYIN DISPLAY          +         0D                .COMPK2    +         4,0               . COM$ PACKET 2 - KEYIN / RSI OUTPUT          +         $-$,RSIOUT        .          +         0                 .COMPK3    C$OMPK    CM1L*6,COMMSG1    . RSI INTERFACE UP - NOTIFICATION PKTPRTTIM    +         0                 . TIME OF LAST RSI OUTPUTRUNID     +         0                 . USER RUNID, RJSFRSISUB    +         0D                . KEYIN TEXT PREFIX (8 ASCII CHARS)RSIINP    RES       33                . KEYIN INPUT BUFFERRSIOUT    RES       33                . KEYIN / RSI OUTPUT BUFFER          OFF       $SL(M$RSIUP)>0    . END OF UKEY INTERFACE CODE          END       START@ELT,SIP MARSREL$.MAP/RLDCTL,,,052213063533,006IBANK,M I$1,01000IN MARS$.RLDCTL,.CERU$/MARSEQU DIRID$/050NOT TPF$.DBANK,MC D$1,040000FORM I$1DBANK,UX MRCBNKEND@ELT,SIP MARSREL$.SELECT,,,222020123037,023.         MASS STORAGE ARCHIVE SELECTION PROGRAM - WRC 1/89..         INPUT:  ARCCTL$ (SYS$*ARCCTL$).                 $MFDB$ (MFD EXTRACT, PRODUCED BY MFDEDT).                 SAVHIST$ (SYS$*SAVHIST$, MODE 1 ONLY, IF M$EXPZERO>0)..                 SYSTEM-ID PARAMETER CARD, IF 'H' OPTION IS SET.                 CLASS-ID SELECTION CARD(S), IF 'S' OPTION IS SET.                 ACCOUNT GROUP PARAMETER CARDS (MODE 2 ONLY)..         OUTPUT: ARCHIVE SELECTION REPORT (MODE 1 ONLY).                 SELECT$ADD (@ACP COMMANDS FOR ARCHIVE - MODE 1 ONLY).                 EXCEPTION REPORT (MODE 2 ONLY)..         MODE 1 OPERATION IS USED DURING AN ARCHIVE RUN TO COMPARE THE.         CURRENT SET OF CATALOGED FILES WITH ARCHIVE PARAMETERS FROM THE.         ARCHIVE CONTROL FILE AND PRODUCE A LISTING OF FILES TO ARCHIVE..         AN ECL FILE (SELECT$ADD) IS PRODUCED, WHICH IS USED TO DIRECT.         THE ACP PROCESSOR TO ARCHIVE EACH SELECTED FILE...         MODE 2 OPERATION PERFORMS THE SAME COMPARISON AND PRODUCES THE.         EXCEPTION REPORT.  THIS IS A LIST OF FILES WHICH ARE EITHER NOT.         REGISTERED FOR ARCHIVE OR ARE CANDIDATES FOR CLOSER INSPECTION.         OF THEIR ARCHIVE PARAMETERS.  THE SELECT$ADD FILE IS NOT PRODUCED..         FILES WHICH APPEAR IN THE LIST MEET ONE OR MORE OF THE FOLLOWING:..         1) THE FILE IS NOT REGISTERED WITH ARCHIVE, OR THE MATCHING.            QUALIFIER AND FILENAME ARE ENTIRELY WILDCARDED..         2) THE FILE HAS 100 OR MORE TRACKS AND THE MATCHING FILENAME IS.            ENTIRELY WILDCARDED, OR:.            THE FILE HAS 1000 OR MORE TRACKS AND THE MATCHING FILENAME.            ENDS IN A WILDCARD..         3) THE FILE IS SELECTED TO BE ARCHIVED BUT WILL NOT BE PROCESSED.            DUE TO G OR V OPTION, ARCHIVE BYPASS, ETC..         4,5) THE FILE IS NOT SELECTED TO BE ARCHIVED AND:.          - THE FILE IS F-CYCLE -0 AND (DSR) TIMES (TRACK SIZE) IS > 5000..          - THE FILE IS NOT F-CYCLE -0 AND (DSR) TIMES (TRACK SIZE) IS > 1000..         6) THE FILE HAS OVER 1000 TRACKS, THE ARCHIVE EXPIRATION IS > 100,.            AND THE FILE WILL BE ARCHIVED WITHIN 7 DAYS..         7) THE USER HAS REQUESTED THAT FILES MATCHING A GIVEN Q*F BE LISTED.....         THE FOLLOWING GENERAL OPTIONS ARE AVAILABLE:..         H - THE FIRST INPUT PARAMETER CARD WILL CONTAIN THE SYSTEM-ID.             (UP TO 12 CHARS).  IT WILL APPEAR IN ALL REPORT HEADINGS...         S - A LIST OF ONE OR MORE CLASS-IDS DIRECTLY FOLLOWS THE @XQT SELECT.             COMMAND (OR FOLLOWS THE SYSTEM-ID PARAMETER, IF THE 'H' OPTION.             IS USED).  EACH CLASS-ID IS 6 OR FEWER CHARACTERS IN LENGTH.             (WITH THE EXCEPTION OF THE RESERVED CLASS, <DEFAULT>) AND MUST.             BE LEFT-JUSTIFIED.  THE LIST IS TERMINATED WITH AN @EOF..             ONLY FILES RESIDING WITHIN THE SPECIFIED STORAGE CLASS(ES).             WILL BE CANDIDATES FOR SELECTION...             IF THIS OPTION IS NOT GIVEN, ALL DEFINED STORAGE CLASSES THAT.             HAVE AT LEAST ONE REGISTERED QUALIFIER AND ONE OR MORE ASSOCIATED.             PACK-IDS WILL BE INCLUDED IN THE SELECTION PROCESS...         X - ERROR EXIT (ERR$) IF SELECTION LIMIT (M$ARCMAX) IS EXCEEDED...         THE FOLLOWING OPTIONS ARE AVAILABLE FOR MODE 1 ONLY:..         C - SOLICIT THE ARCHIVE TYPE (STANDARD OR FULL) FROM THE CONSOLE..             (SEE THE INSTALLATION REFERENCE AND 'MGPDEF' FOR MORE INFO)...         D - GENERATED CALLS TO ACP WILL ALSO HAVE THE 'D' OPTION SET, WHICH.             WILL CAUSE EACH ARCHIVED/PURGED FILE TO BE DELETED FROM THE MFD...         E - NOTIFY THE CONSOLE (@MSG,W) OF THE EXPIRATION OF EACH OUTPUT.             TAPE PRIOR TO IT'S ASSIGNMENT..         F - SELECTS A FULL ARCHIVE (STANDARD IS THE DEFAULT).  IF BIT 1.             OF THE CONDITION WORD (T2) IS SET, A FULL ARCHIVE IS ALSO.             SELECTED.  IF THE 'C' OPTION IS SET, THE OPERATOR RESPONSE.             OVERRIDES 'F' AND/OR THE CONDITION WORD VALUE...         N - SOLICIT THE NUMBER OF TAPE UNITS TO USE FROM THE CONSOLE...         R - SELECT-ONLY MODE (SELECT$ADD IS NOT PRODUCED).  THIS IS.             USEFUL TO DETERMINE WHICH FILES ARE MEETING ARCHIVE CRITERIA.             WITHOUT ACTUALLY PERFORMING THE ARCHIVE.  SELECT-ONLY MODE.             IS ALSO ASSUMED IF BIT ZERO OF THE CONDITION WORD (T2) IS SET...         T - TEST EXECUTION.  THE DATE FOR COMPUTING DAYS-SINCE-REFERENCE IS.             ALWAYS TAKEN FROM THE MFD EXTRACT.  IF THIS IS NOT ALSO TODAY'S.             DATE, THE PROGRAM WILL ABORT UNLESS THIS OPTION IS SET....         THE FOLLOWING OPTIONS ARE AVAILABLE FOR MODE 2 ONLY:..         L - THIS OPTION IS USED TO SELECT MODE 2.  IF GIVEN, SETTINGS.             OF THE C,D,E,F,N,R,T OPTIONS ARE IGNORED...         U - DO NOT INCLUDE UNREGISTERED FILES FOR THIS REASON.  THIS WILL.             ALLOW THE EXCEPTION REPORT TO BE PRODUCED WHEN A SITE IS IN.             THE START-UP PHASE OF MARS OPERATION.  IF MORE THAN <M$ARCMAX>.             FILES ARE SELECTED, THE REMAINDER WILL NOT BE LISTED.  THIS IS.             A LIKELY OCCURRENCE IF THIS OPTION IS NOT SET, BECAUSE MOST.             FILES WILL NOT INITIALLY BE REGISTERED./.$(1)      AXR$          $LIT..         DAY-OF-WEEK CODES, MUST BE DEFINED PRIOR TO <MGPDEF>.MON       EQU       1*/0              . MONDAYTUE       EQU       1*/1              . TUESDAYWED       EQU       1*/2              . WEDNESDAYTHU       EQU       1*/3              . THURSDAYFRI       EQU       1*/4              . FRIDAYSAT       EQU       1*/5              . SATURDAYSUN       EQU       1*/6              . SUNDAYALL       EQU       0177              . ALL DAYS.          MGPDEF          ACFDEF          AHFDEF          MFDDEF          D$BDEFMAXEXP    EQU       25                . MAX UNIQUE EXPIRATION VALUESMAXSRT    EQU       (M$ARCMAX<1001)*1000+(M$ARCMAX>1000)*M$ARCMAX .                                      . MAX ITEMS THAT CAN BE SORTED INCORE                                      .  (MUST BE >= M$ARCMAX)SRSIZE    EQU       ACFTES+1          . SIZE OF INTERNAL SORT RECORDMAXTRK    EQU       M$TPT*(AHBRMX-1)  . MAXIMUM TRACK SIZE FOR ARCHIVEPCKMAX    EQU       5                 . MUST BE SET TO SAME AS ACP VALUEACLEVL    EQU       2                 . INTERNAL S/W LEVEL, MUST = MARS PROC LVL.LLPTRB    EQUF      0,,H1             . BACK POINTERLLPTRF    EQUF      0,,H2             . FORWARD POINTER.LLQUAL    EQU       1                 . QUALIFIERLLFLMS    EQUF      3,,H1             . MS ADDRESS OF FIRST FT BUFFERLLFLNK    EQUF      3,,H2             . MEMORY ADDR OF FT ITEMS AFTER READLLQOWN    EQUF      4,,H1             . PTR TO OWNER ACCT ENTRY IN ACTLST.LLFILE    EQU       1                 . FILENAMELLFCYC    EQUF      3,,S1             . CYCLE LIMITLLFREF    EQUF      3,,H2             . DAYS SINCE LAST REF LIMITLLFEXP    EQUF      4,,H1             . EXPIRATION OF ARCHIVE TAPELLFFLG    EQUF      4,,H2             . FILE FLAGS.LLESIZ    EQU       5                 . SIZE OF LINKED LIST ENTRYLLBSIZ    EQU       2000*LLESIZ       . SIZE OF LINKED LIST BUFFER.MFRCN     EQU       MFD1LK            . REL CYC NUM (COMP, OVERWRITES MFD1LK)/..         EXPIRATION TABLE OFFSETS.EXDAYS    EQUF      0,,H1             . EXPIRATION PERIOD (DAYS)EXPRFL    EQUF      0,,S4             . SET IF EXPIRATION TO BE PROCESSEDEXBS      EQU       1                 . OFFSET FOR STD-ARCHIVE TOTALSEXBB      EQU       6                 . OFFSET FOR CRIT-BACKUP TOTALS.EXFLCT    EQUF      0,,H1             . TOTAL FILES WITH THIS EXP PERIODEXBYP     EQUF      0,,S4             . BYPASS-FLAGSEBFUND    EQU       1*/0              . UNDEFINED EXPIRATIONEBFPRM    EQU       1*/1              . PERMANENT RETENTIONEBFDAY    EQU       1*/2              . WRONG DAY OF WEEKEBFTHR    EQU       1*/3              . UNDER THRESHOLDEBFTHRB   EQU       1*/4              . UNDER CRIT-BACKUP THRESHOLDEXRLCT    EQUF      0,,S5             . ESTIMATED OUTPUT REELSEXTRKF    EQUF      1                 . ONLINE-FIXED TRACKS WITH THIS EXP PERIODEXTRKU    EQUF      2                 . UNLOADED TRACKS WITH THIS EXP PERIODEXTRKR    EQUF      3                 . REMOVABLE TRACKS WITH THIS EXP PERIODEXTHR     EQUF      4,,H1             . THRESHOLD (TRACKS).EXSIZE    EQU       11                . SIZE OF EXPIRATION TABLE RECORD..         CLASS-ID TABLE OFFSETS.CTCLAS    EQUF      0                 . FIELDATA CLASS-IDCTWQP     EQUF      1,,H1             . POINTER TO LL ENTRY FOR MASTER W/C QUALCTRQCT    EQUF      1,,H2             . COUNT OF REGISTERED QUALIFIERS FOR CLASSCTQLHD    EQU       2                 . QUALIFIER TABLE LIST HEAD FOR CLASS.CTSIZE    EQU       CTQLHD+LLESIZ     . SIZE OF ONE ENTRY/..         ARCHIVE SELECTION RECORD DEFINITIONS.AREXP     EQUF      0,,H1             . EXP OF SAVE TAPE/EXP GROUP NUMBERARRLH1    EQUF      0,,H2             . FAS REEL NUMBER IF BACKED UP (H1)ARRLH2    EQUF      1,,H1             . FAS REEL NUMBER IF BACKED UP (H2)ARSEQ     EQUF      1,,H2             . STARTING POSITION ON FAS TAPEARCYCL    EQUF      2,,H1             . F-CYCLE OF SELECTED FILE.ARBYPF    EQUF      2,,S4             . BYPASS FLAGSARBYPG    EQU       1*/0              . G-OPTIONARBYPV    EQU       1*/1              . V-OPTIONARBYPO    EQU       1*/2              . WRITE ONLYARBYPW    EQU       1*/3              . WORD ADDRESSABLEARBYPD    EQU       1*/4              . HARDWARE/FAS/DATA DISABLEDARBYPC    EQU       1*/5              . BYPASS CURRENT CYCLE.AREXPI    EQUF      2,,S4             . OFFSET WITHIN EXPIDX TBL FOR EXP GROUP                                      .  (OVERLAYS <ARBYPF>, LAST PASS).ARFLGS    EQUF      2,,S5             . MISC FLAGSARFREM    EQU       1*/0              . CATALOGED ON R-DISCARFUNL    EQU       1*/1              . UNLOADEDARFREF    EQU       1*/2              . EXCEEDED REFERENCE LIMITARFSYM    EQU       1*/3              . FILE IN SYMBIONT QUEUEARFTLA    EQU       1*/4              . TOO LARGE TO ARCHIVEARFNCB    EQU       1*/5              . NO CURRENT BACKUP.ARDRID    EQUF      2,,S6             . DIRECTORY-ID (0=STD, 1=SHARED)ARQUAL    EQU       3                 . QUALIFIER OF SELECTED FILEARFILE    EQU       5                 . FILENAME OF SELECTED FILEARCYLM    EQUF      7,,S1             . REGISTERED CYCLE LIMITARQWCC    EQUF      7,,S2             . WILDCARD COUNT OF MATCHING QUALARFWCC    EQUF      7,,S3             . WILDCARD COUNT OF MATCHING FILEARPTRC    EQUF      7,,H2             . POINTER TO MATCHING CLASS-ID RECORDARRFLM    EQUF      8,,H1             . REGISTERED REFERENCE LIMITARRFA     EQUF      8,,H2             . DAYS SINCE REF OR REL CYCLE LIMITARTKCT    EQUF      9,,H1             . TRACK COUNT OF FILEARFFLG    EQUF      9,,H2             . FILE FLAGS FROM ACF.ARSIZE    EQU       10                . SIZE OF ARCHIVE SELECTION RECORD/..         ARCHIVE EXCEPTION RECORD DEFINITIONS.          (USES SAME MEMORY SPACE AS ARCHIVE SELECTION RECORDS; ONLY ONE.          TYPE OF RECORD CAN BE CREATED IN ONE RUN, DETERMINED BY 'L' OPT.).AEQUAL    EQUF      0                 . QUALIFIERAEFILE    EQUF      2                 . FILENAMEAECYCL    EQUF      4,,H1             . ABSOLUTE F-CYCLEAETKCT    EQUF      4,,H2             . TRACK COUNT.AEACCT    EQUF      5                 . ACCOUNT NUMBER IF AEFACM NOT SETAEACPT    EQUF      5,,H1             . PTR TO ACCT IN ACTLST IF AEFACM SETAEACGR    EQUF      5,,H2             . GROUP NUMBER IF AEFACM SET.AERESN    EQUF      7,,S1             . REASON FOR THIS EXCEPTIONAERSUR    EQU       1                 . NOT REGISTERED, OR ALL WILDCARDSAERSIW    EQU       2                 . IMPROPER WILDCARDINGAERSBP    EQU       3                 . WOULD HAVE ARCHIVED, WAS BYPASSEDAERST1    EQU       4                 . F-CYC +0 TRACK-DAYS > 5000AERST2    EQU       5                 . F-CYC -N TRACK-DAYS > 1000AERSEX    EQU       6                 . EXPIR > 100 AND TRKS > 1000AERSLR    EQU       7                 . LIST INCLUSION REQUESTED BY USER.AEFLGS    EQUF      7,,S2             . MISC FLAGSAEFREG    EQU       1*/0              . REGISTERED Q*F FOUND FOR FILEAEFACM    EQU       1*/1              . FILE USES ACCOUNT IN ACTLSTAEFACS    EQU       1*/2              . ACCOUNT NUMBER WAS SUBSTITUTEDAEFUNL    EQU       1*/3              . FILE IS UNLOADEDAEFREM    EQU       1*/4              . FILE RESIDES ON R-DISC.AEBYPF    EQUF      7,,S3             . BYPASS FLAGSAEBYPG    EQU       1*/0              . G-OPTIONAEBYPV    EQU       1*/1              . V-OPTIONAEBYPO    EQU       1*/2              . WRITE ONLYAEBYPW    EQU       1*/3              . WORD ADDRESSABLEAEBYPD    EQU       1*/4              . HARDWARE/FAS/DATA DISABLEDAEBYPC    EQU       1*/5              . BYPASS CURRENT CYCLE.AEFFLG    EQUF      7,,S4             . FILE FLAGS FROM ACF (BITS 0-5 ONLY)AERCN     EQUF      7,,S5             . RELATIVE CYCLE NUMBERAECYLM    EQUF      7,,S6             . REGISTERED CYCLE LIMITAEEXRD    EQUF      8                 . THIS WORD CONTAINS THREE FIELDS:                                      . (T1) REGISTERED EXPIRATION                                      . (T2) REGISTERED REFERENCE LIMIT                                      . (T3) DAYS SINCE LAST REFERENCEAEQWCC    EQUF      9,,S1             . WILDCARD COUNT OF MATCHING QUALAEFWCC    EQUF      9,,S2             . WILDCARD COUNT OF MATCHING FILEAEDRID    EQUF      9,,S3             . DIRECTORY-ID (0=STD, 1=SHARED)AEPTRC    EQUF      9,,H2             . POINTER TO MATCHING CLASS-ID RECORD.AESIZE    EQU       10                . SIZE OF ARCHIVE EXCEPTION RECORD/.        BEGIN HERE.START          TE,U      A4,4              . DEMAND RUN?          SZ        DEMAND            .  NO, CLEAR DEMAND RUN FLAG          SA        A5,A15            . SAVE OPTIONS          LA,U      A0,0              .          ER        SETC$             . ZERO CONDITION WORD          SPD       A0                .          OR,U      A0,010            .          LPD       0,A1              . SET QUARTER WORD MODE          TOP       A15,(1*/('Z'-'H')) . IS SYSTEM-ID CARD SUPPLIED?          J         SE090             .  NO, SKIP          R$EAD     (SE080,SITCOD)    .  YES, READ IT IN          J         SE090             .SE080          P$RINT    ERRPRT(22)        . 'SYSTEM-ID CARD MISSING, REQUIRED'          LMJ       X1,ER900          .  ERROR EXITSE090          E$DIT     EPKT              . OPEN EDIT          I$OW      RDHDR             . READ THE MFD DATA BASE HEADER          LMJ       X9,STATUS         . CHECK I/O STATUS          LMJ       X1,ER900          .  STOP HERE IF ERROR          LA        A0,HDRBUF+MFLABL  . GET LABEL WORD          LA        A1,HDRBUF+MFLVWD  .  AND LEVEL WORD          SSL       A1,18             . H1 = BASIC LEVEL ID          TNE       A0,('*MFDB*')     . IS LABEL CORRECT,          TE,U      A1,012            .  AND CORRECT SOFTWARE REV LEVEL?          J         $+2               .   NO, ERROR          J         SE100             .   YES, CONTINUE          P$RINT    ERRPRT(16)        . 'MFDDB HAS BAD HEADER'          LMJ       X1,ER900          .   ERROR EXITSE100          LA        A0,HDRBUF+MFOPWD  . OPTIONS ON @MFDEDT CALL          TEP,U     A0,1*/('Z'-'S')   . MUST BE SORTED BY QUAL/FILE/CYCLE          TEP,U     A0,1*/('Z'-'N')   .  NOT BY ACCOUNT NUMBER          J         $+2               . ERROR IF SORTED IMPROPERLY          J         SE110             .  OTHERWISE, CONTINUE          P$RINT    ERRPRT(17)        . 'INPUT MFDDB MUST BE SORTED BY Q/F/C'          LMJ       X1,ER900          .  ERROR EXITSE110          $IF       M$MHFSHARED=0     . THIS CODE FOR NON-SHARED ONLY          LA        A0,HDRBUF+MFHDID  . DIRECTORY-ID OF EXTRACT          JZ        A0,SE115          . MUST BE ZERO          P$RINT    ERRPRT(23)        .  IF NOT, 'SHARED INPUT NOT ALLOWED'          LMJ       X1,ER900          .  ERROR EXIT          $ELSE                       . THIS CODE FOR SHARED-ONLY          LA        A0,HDRBUF+MFHHID  . HOST-ID OF EXTRACT          JNZ       A0,SE115          . NONZERO INDICATES MHFS - REQUIRED          P$RINT    ERRPRT(24)        .  IF NOT, 'MHFS NOT CONFIG - REQUIRED'          LMJ       X1,ER900          .  ERROR EXIT          $ENDF                       . END OF CONDITIONAL ASSEMBLYSE115          TOP,U     A15,1*/('Z'-'T')  . TEST MODE,          TEP,U     A15,1*/('Z'-'L')  .  OR LISTING ONLY?          J         SE120             .  YES, SKIP DATE CHECK          ER        TDATE$            . GET TODAY'S DATE/TIME          SSL       A0,18             . SHIFT OFF TIME PORTION          TNE,H1    A0,HDRBUF+MFTDAT  . BETTER BE THE SAME AS MFD DATE          J         SE120             .  YES, CONTINUE          P$RINT    ERRPRT(10)        .  NOPE, PRINT DATE ERROR MESSAGE          LMJ       X1,ER900          .   AND DIESE120          LA        A0,HDRBUF+MFTDAT  . GET MFD DATE          LMJ       X11,JULOUT        . COMPUTE JULIAN DATE          ER        ERR$              .          SA        A4,MFDJUL         . SAVE JULIAN DATE OF MFD CREATION          LA        A0,A4             . JULIAN DATE TO A0          DSL       A0,36             . SHIFT DATE FOR DIVIDE          AA,U      A1,1              . OFFSET FOR 1/1/64          DI,U      A0,7              . DIV BY DAYS PER WEEK          LA,U      A0,1              . SINGLE-BIT MASK FOR DAY 0 (MONDAY)          LSSL      A0,,A1            . SHIFT TO CORR POS BASED ON COMPUTED          SA        A0,DAYMSK         .  DAY OF WEEK AND SAVE FOR LATER USE          LX        X4,DAYTAB,A1      . X4 = ADDR OF SYMBOLIC DAY MESSAGE          E$MSG     DATMSG            . '*** DSR WILL BE REL TO MFD DATE OF '          E$MSG     0,X4              . DAY OF WEEK          E$MSG     DATMSG2           . ' - '          E$DAY3    HDRBUF+MFTDAT     . MMMMMM DD, YYYY          E$MSGR                      . ' ***'          P$RINT    (0777722,LINE)    . PRINT DIR. DATE MESSAGE/..         READ CLASS-ID PARAMETER CARDS, IF 'S' OPTION WAS GIVEN.          IF NOT, CONSIDER ALL DEFINED CLASSES FROM THE TABLE IN THE ACF HDR.          LMJ       X10,ACFOPN        . READ/OPEN THE ARCHIVE CONTROL FILE          LMJ       X1,ER900          .  ABORT IF ERROR          SZ        SRTPTR            . ZERO SORT POINTER          SZ        SRTCNT            .  AND RECORD COUNTER          TOP,U     A15,1*/('Z'-'S')  . ARE CLASS SELECTION CARDS SUPPLIED?          J         SE125             .  NO, SKIPSE122          SZ        IMAGE+1           . ZERO SECOND WORD OF INPUT IMAGE          R$EAD     (SE124,IMAGE)     . READ NEXT CLASS-ID PARAMETER          LA,U      A0,,A0            . A0 = WORD COUNT          JZ        A0,SE122          .  IF ZERO, READ THE NEXT          DL        A1,IMAGE          . A1,A2 = CLASS-ID          DTE       A1,('DEFAULT     ') . IS THIS THE DEFAULT CLASS,          TNE,U     A0,1              .  OR HAS ONLY ONE WORD BEEN READ?          J         $+2               .   YES, CONTINUE          J         SE123             .   NO, UNDEFINED CLASS          LA,U      A3,ACCTBG-ACCTES,X8 . A3 = START OF CLASS-ID TABLE OF ACF          LXI,U     A3,ACCTES         . LOOP INCREMENT = RECORD SIZE          LR,U      R1,ACMXCL         . MAX RECORDS IN TABLE          SE        A1,ACCECL+ACCTES,*A3 . SEARCH FOR SPECIFIED CLASS IN TABLE          J         SE123             .  NO FIND, UNDEFINED CLASS          LA        A0,ACCEQL,A3      .  FIND, A0 = LINK TO 1ST QT FOR CLASS          SA        A0,IMAGE+1        . STORE AS 2ND WORD OF PARAM BUFFER          LA,U      A0,IMAGE          .  USE THIS AS SORT RECORD          LMJ       X11,SRTREL        . RELEASE TO SORT          LMJ       X1,ER900          .  ABORT IF SORT OVFL - SHOULDN'T HAPPEN          J         SE122             . BACK FOR NEXT CLASS-IDSE123          E$CLEAR                     . CLEAR EDIT          E$MSG     CLSERR            . '*ERROR - CLASS <'          E$COPY    6,IMAGE           . USER-SPECIFIED CLASS-ID          E$MSGR                      . '> IS NOT DEFINED IN THE ACF*'          P$RINT    (0114,LINE)       . PRINT ERROR MESSAGE          LMJ       X1,ER900          .  AND ABORT SELECTIONSE124          TZ        SRTPTR            . WERE ANY VALID PARAMS READ?          J         SE127             .  YES, CONTINUE          P$RINT    ERRPRT(19)        .  NO, 'NO CLASS-IDS SPECIFIED'          LMJ       X1,ER900          .   ABORT SELECTIONSE125          LX,U      X5,ACCTBG-ACCTES,X8 . X5 = START OF CLASS-ID TABLE OF ACF          LXI,U     X5,ACCTES         . LOOP INCREMENT = RECORD SIZE          LR,U      R5,ACMXCL-1       . LOOP COUNT = MAX RECORDS IN TABLESE126          LA        A0,ACCECL+ACCTES,*X5 . GET NEXT CLASS-ID FROM ACF TABLE          JZ        A0,SE1265         . SKIP IF ZERO (OPEN RECORD)          SA        A0,IMAGE          .  IF NOT, STORE IN TEMP SORT RECORD          LA        A0,ACCEQL,X5      . LINK TO 1ST QT FOR THIS CLASS          SA        A0,IMAGE+1        .  AND STORE IN WORD 2 OF SORT REC          LA,U      A0,IMAGE          . A0 = ADDRESS OF TEMP RECORD          LMJ       X11,SRTREL        . RELEASE TO SORT          LMJ       X1,ER900          .  ABORT IF OVERFLOW - SHOULD NOT HAPPENSE1265          JGD       R5,SE126          . BACK FOR MORE          TZ        SRTPTR            . ALL DONE - ANY VALID CLASS-IDS FOUND?          J         SE127             .  YES, CONTINUE          P$RINT    ERRPRT(20)        .  NO, 'INT ERR - NO CLASS-IDS IN ACF'          LMJ       X1,ER900          .   ABORT SELECTIONSE127          LMJ       X11,SRTRTN        . SORT SELECTED CLASS-IDS AND QT POINTERS          LX        X5,(2,CLSINT-2)   . X5 = POINTER TO CLASS-ID SELECTION TBLSE128          LMJ       X11,SRTRET        . GET THE NEXT CLASS-ID RECORD          J         SE129             . SKIP WHEN FINISHED          DL        A1,,A0            . A1 = CLASS-ID, A2 = QT POINTER          TZ        CLSCNT            . HAVE ANY RECS BEEN PROCESSED YET?          TE        A1,,X5            .  IF SO, IS THIS A DUPLICATE?          J         $+2               .   NO, CONTINUE          J         SE128             .   YES, SKIP THIS - BACK FOR MORE          DS        A1,2,*X5          . STORE NEXT 2 WORDS IN <CLSINT> TABLE          INC       CLINCT            . INCREMENT INPUT CLASS-ID COUNT          NOP                         .          J         SE128             . BACK FOR MORESE129          TOP,U     A15,1*/('Z'-'L')  . TEST FOR LIST MODE          J         SE140             .   NOPE - SKIP/..         READ ACCOUNT GROUP PARAMETER CARDS (LIST MODE ONLY).          LA,U      A1,GRPTBL         . ADDRESS OF GROUP NAME TABLE          LA        A2,(2,0)          . POINTER TO ACCOUNT LIST TABLE          LA,U      A3,0              . ACCOUNT LIST ENTRY COUNT          LNA,U     A4,1              . GROUP NAME NUMBER          LR        R1,('      ')     .SE130          SR        R1,1,A1           . SPACEFILL SECOND WORD OF READ BUFF          LA,U      A0,,A1            . ADDRESS TO A0 FOR READ$          LXI,U     A0,SE138          . EOF ADDRESS          ER        READ$             . READ THE NEXT GROUP PARAMETER CARD          LA,U      A0,,A0            . WANT ONLY WORD COUNT          JZ        A0,SE130          . IGNORE IF NOTHING THERE          LA,S1     A6,,A1            . FIRST CHARACTER          TNE,U     A6,'.'            . IS THIS A COMMENT?          J         SE130             .  YES, IGNORE          TE,U      A6,'>'            . IS THIS A GROUP NAME?          J         SE134             .  NO, PROCESS ACCOUNT NUMBER          AA,U      A4,1              . INCR GROUP NAME COUNT          TLE,U     A4,M$GROUPMAX     .          J         SE132             .          P$RINT    ERRPRT(14)        . ERROR IF TOO MANY GROUP NAMES          LMJ       X1,ER900          .SE132          TG,U      A0,4+1            .          LA,U      A0,4              . MAX SIZE OF GROUP NAME = 4          SA,S1     A0,,A1            . SAVE WORD COUNT AS S1 OF NAME ENTRY          LA,U      A5,,A1            . SAVE ADDRESS          AA,U      A1,,A0            . INCREMENT POINTER TO NEXT ENTRY          J         SE130             . GET THE NEXT CARDSE134          TE,U      A6,' '            . ERROR IF FIRST CHAR IS A SPACE          JP        A4,SE135          . NO, CONT IF A GROUP NAME HAS BEEN READ          P$RINT    ERRPRT(18)        . 'ERROR IN GROUP PARAM FILE - SEE DOC'          LMJ       X1,ER900          .SE135          AA,U      A3,1              . INCREMENT ACCOUNT LIST ENTRY COUNT          TLE,U     A3,M$ACCTMAX+1    .          J         SE136             .          P$RINT    ERRPRT(15)        . ERROR IF TOO MANY ACCOUNT ENTRIES          LMJ       X1,ER900          .SE136          DL        A6,,A1            . PICK UP ACCOUNT NUMBER          DS        A6,ACTLST,*A2     . SAVE INTO ACCOUNT LIST          SA,H1     A4,ACTPTR-1,A3    . SAVE GROUP NAME NUMBER          SA,H2     A5,ACTPTR-1,A3    . SAVE ADDRESS OF GROUP NAME ENTRY          J         SE130             . GET THE NEXT CARDSE138          JNZ       A3,SE139          . SKIP IF AT LEAST ONE ACCT IMAGE READ          P$RINT    ERRPRT(18)        . NO, 'ERR IN GROUP PARAM FILE - SEE DOC'          LMJ       X1,ER900          . ERROR IF NO ACCOUNTS READSE139          SA        A3,ACTCNT         . SAVE ACCOUNT ENTRY COUNT          J         SE190             . FINISH COMMON INITIALIZATION..         CONTINUE INITIALIZATION FOR NON-LIST MODE.SE140          TOP       A15,(1*/('Z'-'C')) . REQ ARCHIVE TYPE FROM OPERATOR?          J         SE145             .  NO, SKIPSE142          SZ        COMPK1            . CLEAR STATUS IN COM$ PKT          C$OM      COMPK1            . ISSUE 'STANDARD OR FULL ARCHIVE' MSG          LA,S1     A0,ANS            . GET FIRST CHAR OF RESPONSE          TNE,U     A0,'S'            .          J         SE150             . STANDARD ARCHIVE SELECTED          TE,U      A0,'F'            .          J         SE142             . NOT S OR F - REISSUE MESSAGE          J         SE155             . PROCESS FULL ARCHIVESE145          ER        COND$             . A0 = CONDITION WORD          TOP,U     A0,1*/(12+1)      . IS BIT 1 (T2) SET,          TEP       A15,(1*/('Z'-'F')) .  OR IS F-OPTION SET?          J         SE155             .   YES, FULL ARCHIVE SELECTEDSE150          LA,U      A0,COMPK4S        . COM$ MESSAGE, 'STD ARCHIVE SELECTED'          J         SE160             . PROCESS STANDARD ARCHIVESE155          LA        A0,ERRPRT(13)     .  'FULL ARCHIVE SELECTED'          AH        A0,(0100,0)       .          ER        PRINT$            .          SP1       FULARC            . SET FULL ARCHIVE FLAG          LA,U      A0,COMPK4F        . COM$ MESSAGE, 'FULL ARCHIVE SELECTED'SE160          TNZ       DEMAND            . DEMAND RUN?          ER        COM$              .  NO, INFORM CONSOLE OF ARCHIVE TYPE..         GET LAST UPDATE DATE FROM SYS$*SAVHIST$.         THIS NECESSARY IF PURGES MAY OCCUR (M$EXPZERO>0).          ON        M$EXPZERO>0       . THIS CODE FOR EXP-ZERO ONLY          LA        A0,(9,SHFFAC)     . FITEM$ PACKET FOR SAVHIST$          ER        FITEM$            . REQUEST ASSIGNMENT INFO          TNZ,S1    SHFFAC+6          . IS FILE ASSIGNED?          J         SE170             .  NO, SKIP          I$OW      SHFPKT            .  YES, READ HEADER          TZ,S1     SHFPKT+3          . GOOD STATUS?          J         SE170             .  NO, SKIP          LX,U      X4,SHFHDR         .  YES, X4 = HEADER BUFFER ADDRESS          LA        A0,AHHLBL,X4      . A0 = SOFTWARE LABEL          TNE       A0,('*SHFL*')     . IS LABEL CORRECT,          TNZ       AHHLEV,X4         .  AND WAS THIS CYCLE MADE BY REBUILD?          J         SE170             .   NO, SKIP          LA        A0,AHHUPT,X4      . A0 = LAST UPDATE DATE/TIME          LMJ       X11,JULOUT        . CONVERT TO JULIAN          J         SE170             . SKIP IF ERROR RETURNED          MSI,U     A4,3600*24        . CONVERT TO JULIAN SECONDS SINCE 1/1/64          AA,H2     A4,AHHUPT,X4      . ADD IN OFFSET FOR CURRENT DAY          SA        A4,SHFUPT         . SAVE JUL SEC OF LAST SHF UPDATE          J         SE175             .SE170          LA        A0,ERRPRT(25)     . 'SHF UPDATE TIME UNAVAILABLE'          AH        A0,(0100,0)       . SKIP 2 SPACES          ER        PRINT$            . PRINT WARNING MESSAGESE175          OFF       M$EXPZERO>0       . END OF EXP-ZERO CODE/..         FINISH INIT PHASE - READ QUALIFIER TABLE(S),.           BUILD LINKED QUALIFIER LIST FOR EACH REQUESTED STORAGE CLASS.SE190          LX        X4,(2,CLSINT-2)   . X4 = POINTER TO <CLSINT> TABLE          LR        R4,CLINCT         . COUNT OF SELECTED CLASS-IDS          JGD       R4,$+1            . DECREMENT FOR JGD          LX        X5,(CTSIZE,CLSTBL) . X5 = POINTER TO CLASS-ID TABLESE200          LA        A0,2,*X4          . A0 = NEXT SELECTED CLASS-ID          LA,U      A1,ACPTBG,X8      . A1 = START OF PACK-ID TABLE IN ACF          LXI,U     A1,ACPTES         . LOOP INCREMENT = REC SIZE          LR,U      R1,ACMXPK         . MAX PACK-ID RECORDS          LX,U      X9,PCKMSG         . ADDRESS OF ERROR MESSAGE IF NO FIND          SE        A0,ACPECL,*A1     . SEARCH TBL, MUST LOC 1 REC W/THIS CLASS          J         SE240             .  NO FIND, ERROR          SZ        SRTPTR            . INIT SORT PARAMETERS          SZ        SRTCNT            .          LA        A2,1,X4           . POINTER TO FIRST QT TABLE FOR CLASSSE210          LMJ       X10,RDBUFF        . READ THE NEXT QT TABLE          LMJ       X1,ER900          .  STOP IF ERROR          LX,U      X6,ACQTBG,A0      . ADDRESS OF FIRST QT ENTRY          LXI,U     X6,ACQTES         . SIZE OF QT ENTRY          LR,U      R6,ACQTMX-1       . LOOP COUNTER FOR JGDSE220          LA,U      A0,,*X6           . A0 = NEXT QT ENTRY ADDRESS          LA        A1,ACQEQL,A0      . GET FIRST HALF OF QUALIFIER          TNE,U     A1,0              .          J         SE230             . SKIP IF ZERO (NO ENTRY IN THIS SLOT)          LMJ       X11,SRTREL        . IF NONZERO, RELEASE ENTRY TO SORT          LMJ       X1,ER900          .  STOP HERE IF SORT TABLE OVERFLOWSE230          JGD       R6,SE220          . LOOP BACK FOR REMAINING ENTS THIS TBL          LA,U      A0,ACFBUF         . QT TABLE ADDRESS IN CORE          LA        A2,ACQTNX,A0      . GET MS ADDR OF NEXT TABLE IN CHAIN          JNZ       A2,SE210          . CONTINUE IF NONZERO, OTHERWISE DONE          TZ        SRTPTR            . WERE ANY REGISTERED QUALIFIERS FOUND?          J         SE250             .  YES, CONTINUE          LX,U      X9,QUAMSG         .  NO, X9 = ERR MSG ADDRSE240          E$CLEAR                     . CLEAR EDIT          E$MSG     0,X9              . '*WARNING - CLASS <'          LA        A0,,X4            . OFFENDING CLASS-ID          LA,U      A1,0              . 2ND WORD = ZEROES          TNE       A0,('DEFAUL')     . DEFAULT CLASS?          LA,U      A1,'T'            .  YES, APPEND 'T'          E$FD2                       . EDIT CLASS-ID          E$MSGR                      . '> HAS NO ' (PACKS/QUALIFIERS)          P$RINT    (0214,LINE)       . PRINT ERROR MESSAGE          J         SE282             .  NONFATAL - PROCEED TO NEXT CLASS-IDSE250          LMJ       X11,SRTRTN        . SORT THE TABLE          LA,U      A3,CTQLHD,X5      . QT LIST HEAD ADDRESS FOR THIS CLASSSE270          LMJ       X11,SRTRET        . RETURN THE NEXT ENTRY IN SORTED SEQ          J         SE280             .  SKIP IF NO MORE ENTRIES          LMJ       X11,GETBUF        . ALLOCATE A LINKED LIST BUFFER          DL        A4,ACQEQL,A0      .          DS        A4,LLQUAL,A3      . STORE QUALIFIER IN BUFFER          LA        A1,ACQEFL,A0      .          SA        A1,LLFLMS,A3      . STORE MS ADDRESS OF FIRST FT TABLE          SZ        LLFLNK,A3         . ZERO INCORE FT LINK          SZ        LLQOWN,A3         . ZERO ACCOUNT LIST LINK          INC       CTRQCT,X5         . INCREMENT REG QUAL CT FOR CLASS          NOP                         .          J         SE270             . BACK FOR MORESE280          DJZ       A4,$+2            . SKIP IF LAST FOUND ENT = MASTER W/C          LA,U      A3,0              .  IF NOT, ZERO ENTRY ADDRESS          SA        A3,CTWQP,X5       . SAVE ADDRESS FOR LATER QUICK REFERENCE          LA        A0,,X4            . A0 = CURRENT CLASS-ID          SA        A0,CTCLAS,*X5     . SAVE IN CLASS-ID RECORD          INC       CLSCNT            . INCREMENT CLASS-ID COUNT          NOP                         .SE282          JGD       R4,SE200          . BACK FOR NEXT INPUT CLASS-ID          TZ        CLSCNT            . ANY VALID CLASS-IDS PROCESSED?          J         SE284             .  YES, CONTINUE          P$RINT    ERRPRT(6)         .  NO, 'NO CLASSES - SELECTION ABORTED'          LMJ       X1,ER900          .   ERROR EXIT..         PRINT LIST OF ALL SELECTED CLASSES AND ASSOCIATED PACK-IDS.SE284          D$BIO     RPKT  HDRBUF+MFFLAD . INIT I/O OF MFDDB FOR FILE INFO          P$RINT    (0300+CHL,CLSHDG) . CLASS-ID SELECTION HEADING          LX        X5,(CTSIZE,CLSTBL-CTSIZE) . X5 = POINTER TO CLASS-ID TABLE          LX        X6,(2,PCKTBL)     . X6 = POINTER TO PACK-ID LOOKUP TABLE          LR        R5,CLSCNT         . COUNT OF VALID CLASS-IDS          JGD       R5,$+1            . DECREMENT FOR JGDSE285          E$CLEAR                     . CLEAR EDIT          E$MSG     CLSMSG            . '** CLASS: '          LA        A0,CTCLAS+CTSIZE,*X5 . CLASS-ID (FIELDATA)          LA,U      A1,0              . WORD 2 = ZEROES          TNE       A0,('DEFAUL')     . IS THIS THE DEFAULT CLASS?          LA,U      A1,'T'            .  YES, APPEND 'T'          E$FD2                       . EDIT CLASS-ID          E$MSGR                      . '  HAVING '          E$DECV    CTRQCT,X5         . REGISTERED QUALIFIER COUNT          E$MSGR                      . 'REG QUALIFIERS, WITH THESE PACK-IDS:'          P$RINT    (0315,LINE)       . PRINT STATUS MESSAGE          P$RINT    (0100,$)          . SKIP A LINE          LX,U      X4,ACPTBG-ACPTES,X8 . X4 = POINTER TO PACK-ID TABLE FROM ACF          LXI,U     X4,ACPTES         . LOOP INCREMENT = REC SIZE          LR,U      R4,ACMXPK-1       . LOOP COUNT = MAX ENTRIES IN TABLE          LA        A4,CTCLAS,X5      . CURRENT CLASS-ID          SZ        SRTPTR            . ZERO SORT POINTER          SZ        SRTCNT            .  AND RECORD COUNTSE287          TE        A4,ACPECL+ACPTES,*X4 . DOES NEXT PACK BELONG TO THIS CLASS?          J         SE289             .  NO, SKIP          LA        A0,ACPEPK,X4      .  YES, A0 = PACK-ID          TE        A0,('FIX$$$')     . IS THIS FIXED STORAGE?          J         SE288             .  NO, SKIP          SX        X5,FIXPTR         .  YES, SAVE THIS CLASS POINTER FOR FIXED          P$RINT    ERRPRT(21)        .   'FIX$$$   (FIXED STORAGE)'          J         SE289             . DO NOT RELEASE THIS REC TO SORTSE288          LA,U      A0,ACPEPK,X4      . A0 = ADDRESS OF THIS PACK-ID RECORD          LMJ       X11,SRTREL        . RELEASE TO SORT          LMJ       X1,ER900          .  ABORT IF OVERFLOW, SHOULD NOT HAPPENSE289          JGD       R4,SE287          . BACK FOR MORE          LMJ       X11,SRTRTN        . SORT SELECTED PACK-IDS FOR CLASSSE290          LMJ       X11,SRTRET        . RETURN NEXT PACK-ID REC FROM SORT          J         SE295             . SKIP WHEN FINISHED          LA        A1,,A0            . A1 = PACK-ID          SA        A1,,X6            . STORE IN PACK-ID LOOKUP TABLE          SX        X5,1,*X6          . STORE CURRENT CLASS POINTER AS WORD 2          INC       PCKCNT            . INCREMENT PACK-ID COUNT          NOP                         .          LXI,U     A0,0101           . PRINT CTL WORD: A0 = ADDR OF PACK-ID          ER        PRINT$            . PRINT PACK-ID          J         SE290             . BACK FOR MORESE295          JGD       R5,SE285          . BACK FOR NEXT CLASS-ID          LR        R4,HDRBUF+MFFLCT  . R4 =  FILE COUNT          LR,U      R10,0             . INIT LINE CTR FOR PAGE HDGS/..         THIS IS THE TOP OF THE MAIN CONTROL LOOP.SE300          JGD       R4,SE310          . DECREMENT FILE COUNTER          J         SE380             .  SKIP IF NO MORE FILES TO PROCESSSE310          D$BI      RPKT  ER920,ER920 . READ INFO FOR THE NEXT FILE          TNZ,H1    0,A1              .          J         SE310             . IF H1 WORD 0 = 0, NOT A FILE ENTRY          LX,U      X4,,A1            . ADDRESS OF FILE INFO TO X4          LA        A0,MFTYPE,X4      . GET FILE TYPE          TE,U      A0,MMFIXD         . IS FILE ON FIXED DISC?          J         SE320             .  NO, SKIP          TZ        FIXPTR            .  YES, ARE WE ARCHIVING FROM FIXED?          J         SE340             .   YES, CONTINUE          J         SE350             .   NO, GET NEXT FILESE320          TE,U      A0,MMREMD         . IS FILE ON R-DISC?          J         SE350             .  NO, GET NEXT FILE          LA        A0,MFPKCT,X4      . GET COUNT OF PACKS USED          TLE,U     A0,PCKMAX+1       . DOES FILE SPAN > (PCKMAX) PACKS, OR          TNZ       PCKCNT            .  ARE NO R-PACKS ELIGIBLE FOR ARCHIVE?          J         SE350             .   YES, GET NEXT FILESE340          DL        A0,MFQUAL,X4      . GET QUALIFIER          LMJ       X11,CHKVAL        . GO CHECK FOR ILLEGAL CHARS          J         SE350             . SKIP IF ILLEGAL CHARS IN QUALIFIER          DL        A0,MFFILE,X4      .          LMJ       X11,CHKVAL        . SAME FOR FILENAME          J         SE350             . SKIP IF ILLEGAL CHARS IN FILENAME          ON        M$MHFSHARED=0     . ON FOR NON-SHARED ONLY          TZ        MFDRID,X4         . IS DIRECTORY ID = 0 (STD)?          J         SE350             .  NO, DON'T PROCESS THIS FILE          OFF       M$MHFSHARED=0     . END OF NON-SHARED CODE          J         SE360             . ALL OK - THIS FILE CAN BE ARCHIVEDSE350          J         SE300             . DON'T DO THIS FILE - BACK FOR NEXTSE360          TNZ       CYCCNT            .          J         SE620             . SKIP IF NO ENTRIES IN CYCLE TABLE          DL        A0,MFQUAL,X4      . COMPARE THIS FILE QUALIFIER          DTE       A0,CYCTBL+MFQUAL  .  WITH QUAL OF FIRST ENTRY IN TABLE          J         SE380             . SKIP IF THEY DON'T MATCH          DL        A0,MFFILE,X4      . COMPARE THIS FILE FILENAME          DTE       A0,CYCTBL+MFFILE  .  WITH FN OF FIRST ENTRY IN TABLE          J         SE380             . SKIP IF THEY DON'T MATCH          LA        A0,MFDRID,X4      . DIRECTORY-ID OF THIS FILE          TNE       A0,CYCTBL+MFDRID  . SAME AS FIRST TABLE ENTRY?          J         SE620             .  YES, ALL MATCH - APPEND ENTRY TO TABLE/..         PROCESS A SET OF FILES WITH THE SAME NAME HERE..         EACH 28-WORD ENTRY IN <CYCTBL> REPRESENTS A UNIQUE F-CYCLE..         THERE ARE <CYCCNT> ENTRIES, IN MFDDB RECORD FORMAT..SE380                                 .          SX        X4,SAVX4F         . SAVE NEXT-FILE POINTER          TNZ       CYCCNT            .          J         SE600             . SKIP IF CYCLE TABLE IS EMPTY          LX        X5,(28,CYCTBL)    . X5 = ADDRESS OF FIRST CYC TBL ENTRY          LA        A0,MFTYPE,X5      . FILE TYPE (ALL IN TABLE SHOULD BE EQL)          LX        X4,FIXPTR         . CLASS-ID TBL POINTER FOR FIXED STORAGE          TNE,U     A0,MMFIXD         . IS THIS FILE ON FIXED?          J         SE390             .  YES, SKIP          LA        A0,MFPKID,X5      .  NO, A0 = PACK-ID          LA        A1,(2,PCKTBL-2)   . INDEX TO PACK-ID POINTER TABLE          LR        R1,PCKCNT         . ENTRY COUNT OF TABLE          SE        A0,2,*A1          . SEARCH FOR THIS PACK-ID          J         SE600             .  NO FIND, DO NOT PROCESS THIS FILE          LX        X4,1,A1           .  FIND, X4 = ADDR OF CLASS-ID FOR PACKSE390          TNZ,U     0,X4              . WAS A CLASS-ID RECORD SELECTED?          J         SE600             .  NO, DO NOT PROCESS THIS FILE          LA,U      A3,CTQLHD,X4      .  YES, SET A3 = QUAL LIST HEAD FOR CLASS          SZ        FQLINK            . ZERO FIRST MATCHING QT LINK..         FIND THE NEXT MATCHING QUALIFIER.SE400          DL        A4,MFQUAL,X5      . PUT CURRENT QUALIFIER IN A4,A5SE410          LA        A3,LLPTRF,A3      . GET NEXT QT ENTRY IN CHAINSE415          JZ        A3,SE445          . SKIP IF NO MORE IN LIST          DL        A0,LLQUAL,A3      . GET QUALIFIER OF THIS LIST ENTRY          LMJ       X11,COMPARE       . COMPARE WITH CURRENT QUAL          J         SE420             .  NO MATCH          TNZ       FQLINK            .  MATCH - IS THIS THE FIRST?          SA        A3,FQLINK         .  IF SO, SAVE ADDRESS          J         SE450             . NOW GO CHECK FILENAMESE420          JNZ       A6,SE440          . SKIP IF ENTRY IS NOT TO BE RELEASED          SA        A3,R2             . STORE ADDRESS OF QT ENT, RELEASE LAST          LA        A3,LLFLNK,A3      . GET LINK TO FT ENTRIES FOR THIS QT          JZ        A3,SE435          . SKIP IF NO ENTRIES FOUNDSE430          LMJ       X11,RELBUF        . RELEASE THIS FT ENTRY BUFFER          JNZ       A3,SE430          . CONTINUE IF MORE BUFFERS TO RELEASESE435          LA        A3,R2             . RESTORE QT ENTRY ADDRESS          LMJ       X11,RELBUF        . RELEASE QT ENTRY BUFFER          J         SE415             . GO BACK TO COMPARE NEXT QT ENTRYSE440          JP        A6,SE410          . GO BACK IF COMPARISON IS TO CONTINUE          LA        A3,CTWQP,X4       .  NOPE - GET MASTER WILD QUAL ADDRESS          JNZ       A3,SE450          .   CONTINUE IF THIS EXISTSSE445          TOP,U     A15,1*/('Z'-'L')  .  ARE WE DOING AN EXCEPTION LIST?          J         SE600             .   NO - SKIP THIS FILE          LA,U      A11,0             .   YES - INDICATE NO SELECTION          J         SE552             .    AND JUMP TO PROCESSING SECTION..         SEARCH FILE LIST FOR MATCHING QUALIFIER.SE450          LX,U      X7,,A3            . X7 = ADDRESS OF QT ENTRY          LA        A0,LLFLNK,X7      . GET LINK TO FT CHAIN INCORE          JZ        A0,SE455          . SKIP IF ZERO - MUST READ FROM FILE          LA,U      A3,FLHEAD         . A3 = FILE LIST HEAD ADDRESS          SA        A0,LLPTRF,A3      . STORE ADDRESS OF FIRST FT ENTRY          J         SE510             . GO SEARCH INCORE LIST FOR FILENAME..         FIRST MATCH FOR THIS QUALIFIER - READ FILE LIST FROM ARCCTL$.SE455          LA        A2,LLFLMS,X7      . GET MASS STORAGE ADDR OF FIRST FT          JZ        A2,SE548          . SKIP IF ALREADY PROCESSED          SZ        SRTPTR            . INIT SORT PARAMETERS          SZ        SRTCNT            .          LMJ       X10,RDBUFF        . READ FIRST FT TABLE          LMJ       X1,ER900          .  STOP IF ERROR READING TABLE          TOP,U     A15,1*/('Z'-'L')  . DOING AN EXCEPTION LIST?          J         SE460             .  NOPE..         FOR EXCEPTION LISTING, SEARCH <ACTLST> FOR OWNER ACCOUNT MATCH.          LA        A1,(2,ACTLST-2)   . PREPARE FOR SEARCH          DL        A4,ACFTON,A0      . GET OWNER FOR THIS QUALIFIER          JZ        A0,SE460          . SKIP IF NO OWNER ACCT REGISTERED          LR        R1,ACTCNT         .SE457          SE        A4,2,*A1          . SEARCH FOR ACCOUNT MATCH          J         SE458             . NO FIND          TE        A5,1,A1           . FIND - TEST SECOND WORD          J         SE457             .  NO MATCH          J         SE459             .  MATCH - GO SAVE POINTERSE458          LA        A2,ACTCNT         . GET COUNT OF LISTED ACCOUNTS          TG,U      A2,M$ACCTMAX      . ALREADY AT MAX?          J         SE460             .  YES, IGNORE THIS ONE          AA,U      A1,2              .  NO, INCREMENT POINTER          DS        A4,,A1            . SAVE THIS ACCOUNT          LA,U      A4,GRPTBL         . H1=GRP 0, H2=ADDR OF GRP 0 NAME          SA        A4,ACTPTR,A2      . SAVE IN ACCOUNT POINTER TABLE          AA,U      A2,1              . INCREMENT COUNT          SA        A2,ACTCNT         .  AND STORE ITSE459          SA        A1,LLQOWN,X7      . SAVE ACTLST POINTER/..         PROCESS FIRST FILE BUFFER FROM ARCCTL$.SE460          LX,U      X6,ACFTBF1,A0     . ADDRESS OF FIRST FT FILE ENTRY          LXI,U     X6,ACFTES         . SIZE OF FT FILE ENTRY          LR,U      R6,ACFTMX1-1      . LOOP COUNTER FOR FIRST FT TABLE..         PROCESS EACH FILE BUFFER IN SEQUENCE.SE465          DL        A4,ACFTQL,A0      . GET QUALIFIER FROM THIS FT TABLE          DTE       A4,LLQUAL,X7      .  DOES IT EQUAL QUAL FROM QT TABLE?          J         $+2               .  NOPE - ERROR          J         SE470             .  YES - CONTINUE PROCESSING          P$RINT    ERRPRT(4)         . PRINT ERROR MESSAGE          LMJ       X1,ER900          .  AND ERROR EXIT HERE..         PROCESS EACH FILE ENTRY IN SEQUENCE.SE470          LA,U      A0,,*X6           . A0 = ADDRESS OF NEXT FT ENTRY          LA        A1,ACFEFL,A0      . GET FIRST HALF FILENAME          TNE,U     A1,0              .          J         SE480             . SKIP IF ZERO (NO ENTRY HERE)          LMJ       X11,SRTREL        . OTHERWISE, RELEASE TO SORT          LMJ       X1,ER900          .  SORT TABLE OVERFLOW - STOP HERESE480          JGD       R6,SE470          . LOOP BACK FOR OTHER FT ENTRIES          LA,U      A0,ACFBUF         . MEMORY ADDRESS OF CURRENT FT BUFFER          LA        A2,ACFTNX,A0      . GET MS ADDR OF NEXT CHAINED BUFFER          JZ        A2,SE490          . SKIP IF NO MORE IN CHAIN          LMJ       X10,RDBUFF        . READ NEXT FT BUFFER FROM ACF          LMJ       X1,ER900          .  STOP HERE IF ERROR          LXM,U     X6,ACFTBF2,A0     . GET ADDRESS OF FT ENTRIES IN EXT BUFF          LR,U      R6,ACFTMX2-1      . LOOP COUNTER FOR EXTENSION BUFFER          J         SE465             . GO PROCESS THIS TABLE..         SORT FILE ENTRIES.SE490          SZ        LLFLMS,X7         . ZERO MS ADDR SO WE WON'T READ AGAIN          TNZ       SRTPTR            .          J         SE548             . SKIP IF SORT TABLE IS EMPTY          LMJ       X11,SRTRTN        . SORT THE TABLE          LA,U      A3,FLHEAD         . A3 = FT LIST HEAD ADDRESS..         PLACE SORTED FILE ENTRIES INTO LINKED LIST BUFFERS.SE500          LMJ       X11,SRTRET        . RETURN THE NEXT ENTRY IN SORTED SEQ          J         SE505             . SKIP IF NO MORE ENTRIES          LMJ       X11,GETBUF        . ALLOCATE A LINKED LIST BUFFER          DL        A4,ACFEFL,A0      .          DS        A4,LLFILE,A3      . STORE FILENAME FROM FT ENTRY          LA        A4,ACFECY,A0      .          LA        A5,ACFERF,A0      .          LA        A6,ACFEEX,A0      .          SA        A4,LLFCYC,A3      . STORE CYCLE LIMIT,          SA        A5,LLFREF,A3      .  REFERENCE DAYS LIMIT,          SA        A6,LLFEXP,A3      .  AND ARCHIVE TAPE EXPIRATION PERIOD          LA        A4,ACFEF2,A0      . GET FLAG BITS (6-11)          LSSL      A4,6              . SHIFT TO PROPER POSITION          AA        A4,ACFEF1,A0      . ADD IN BITS 0-5          SA        A4,LLFFLG,A3      . STORE FILE FLAGS          J         SE500             . BACK FOR NEXT ENTRY..         ALL DONE WITH THIS FILE LIST - LINK INTO QUALIFIER ENTRY.SE505          LA,U      A3,FLHEAD         . A3 = FT LIST HEAD ADDRESS          LA        A0,LLPTRF,A3      . GET POINTER TO FIRST BUFFER ALLOCATED          SA        A0,LLFLNK,X7      . STORE IN QT LIST ENTRY/..         SEARCH AN INCORE FILE LIST FOR A MATCHING FILE ENTRY.SE510          DL        A4,MFFILE,X5      . PUT CURRENT FILENAME IN A4,A5SE515          LA        A3,LLPTRF,A3      . GET ADDRESS OF NEXT ENTRY IN FT CHAINSE520          JZ        A3,SE548          . SKIP IF NO MORE ENTRIES TO PROCESS          DL        A0,LLFILE,A3      . PUT FT ENTRY FILENAME IN A0,A1          LMJ       X11,COMPARE       . GO COMPARE FILENAMES          J         SE530             .  NO MATCH          J         SE550             .  MATCH - GO PROCESS THIS Q*FSE530          JNZ       A6,SE540          . SKIP IF ENTRY IS NOT TO BE RELEASED          LA        A0,LLQUAL+1,X7    . PICK UP SECOND HALF OF QT QUALIFIER          AND,U     A0,077            . AND OFF LAST CHARACTER          TNE,U     A1,077            . IS IT A WILDCARD?          J         SE515             .  YES, DO NOT RELEASE ANY FT ENTRIES          TNE       A3,LLFLNK,X7      . IS THIS THE FIRST BUFFER IN FT CHAIN?          J         SE535             . YES, HANDLE DIFFERENTLY          LMJ       X11,RELBUF        .  NO, RELEASE HERE          J         SE520             . GO BACK FOR MORESE535          LMJ       X11,RELBUF        . RELEASE FIRST BUFFER IN CHAIN          SA        A3,LLFLNK,X7      . STORE ADDRESS OF NEXT BUFF IN QT ENTRY          J         SE520             . BACK FOR MORESE540          JP        A6,SE515          . GO BACK IF MORE LOOKING IS NECESSARYSE542          TNZ       LLPTRF,A3         .          J         SE545             . SKIP IF LAST BUFFER IN CHAIN          LA        A3,LLPTRF,A3      . GET ADDRESS OF NEXT BUFFER          J         SE542             .  AND CONTINUESE545          DL        A0,LLFILE,A3      . FILENAME FROM LAST FT ENTRY          DJZ       A0,SE550          . GO PROCESS IF THIS IS MASTER WILDCARDSE548          LA,U      A3,,X7            . RESTORE QT LIST POINTER          J         SE400             . GO BACK AND CONTINUE SEARCH/..         MATCH FOUND FOR THIS QUAL*FILE.SE550          LA,U      A11,1             . INDICATE MATCHING Q*F WAS FOUND          LX,U      X6,,A3            . X6 = POINTER TO FILE ENTRY ON LIST..         COME HERE WHEN SEARCH IS COMPLETE - IF A11 = 0, NO MATCH..         ADJUST SEQUENCE OF <CYCTBL> IF NECESSARY TO COMPENSATE.         FOR CYCLE WRAPAROUND.SE552          LA        A4,CYCCNT         . ENTRY COUNT OF CYCTBL          ANU,U     A4,2              . SUBTRACT 2, RESULT TO A5          JN        A5,SE560          . MUST HAVE > 1 CYC, IF NOT, SKIP          LA        A2,(28,CYCTBL)    . CYCTBL POINTERSE554          LA        A0,MFCYCL+28,A2   . GET CYCLE OF CURRENT FILE + 1          ANA       A0,MFCYCL,*A2     . SUBTRACT CURRENT F-CYCLE          TG,U      A0,967            . IF 968 OR GREATER, WRAP STARTS HERE          J         SE556             .   SKIP AHEAD FOR SEQUENCE ADJUSTMENT          TG,U      A0,33             . IF NO WRAP, CHECK FOR MAX DIFFERENCE          LMJ       X1,ER900          .  ABORT IF OUT OF RANGE          JGD       A5,SE554          . BACK FOR OTHER ENTRIES IN TABLE          J         SE560             . NO WRAP FOUND - SKIP AHEADSE556          TG,U      A0,1000           . DIFFERENCE MUST NOT EXCEED 999          LMJ       X1,ER900          .  IF SO, ERROR          MSI,U     A4,28             . A4 = WORD COUNT OF CYCTBL          LA        A0,(1,CYCTBL)     . 'FROM' POINTER (START OF TABLE)          LA        A1,(1,CYCTBL)     . 'TO' POINTER          AA        A1,A4             .  ADJUST TO POINT TO END OF TABLE          ANU,U     A2,CYCTBL         . A3 = WORDS TO MOVE TO END OF TABLE          LR,U      R1,,A3            . INTO R1 FOR TRANSFER          BT        A1,,*A0           . MOVE SMALLER F-CYCLES TO END          LA        A0,(1,CYCTBL)     . 'TO' POINTER (START OF TABLE)          LXI,U     A2,1              . A2 = 'FROM' PTR (START OF LARGER F-CYCS)          LR        R1,A4             . LENGTH OF ENTIRE TABLE          BT        A0,,*A2           . MOVE ADJUSTED TABLE TO START..         LOOK AT EACH ENTRY IN <CYCTBL>, SET <MFRCN> TO RELATIVE.         CYCLE NUMBER.SE560          LA,U      A5,1              . INIT PREV DATE FOR NO MATCH          LA,U      A2,0              . INIT REL CYC NUMBER          LA        A3,CYCCNT         . ENTRY COUNT OF CYCTBL          MSI,U     A3,28             . MULTIPLY BY RECORD SIZE          AH        A3,(-28,CYCTBL-28) . SETUP FOR REVERSE SCAN OF TABLE          LR        R5,CYCCNT         . INIT LOOP COUNTER          JGD       R5,$+1            . PREPARE FOR JGDSE565          LA        A0,MFCATT,*A3     . GET CAT TIME OF NEXT MOST CURR ENTRY          AND       A0,(0777777,0)    . PUT ONLY DATE IN A1          TNE       A1,A5             . TEST - SAME AS PREVIOUS DATE?          J         SE566             .  YES - POSSIBLY DO NOT INCR REL CYC NO          LA        A5,A1             .  NO - SAVE NEW PREVIOUS DATE          J         SE568             .   AND GO INCREMENT REL CYC NUMBERSE566          JZ        A11,SE567         . SKIP IF NO MATCH FOUND IN ARCCTL$          LA        A1,LLFFLG,X6      . MATCH FOUND - PICK UP FLAGS          TEP,U     A1,ACFFAC         . IS <DCY> FLAG SET?          J         SE568             .  NO - GO INCREMENT REL CYCLE NUMBERSE567          DS        A2,SAVA2          .          LMJ       X11,JULOUT        . COMPUTE JULIAN CREATION DATE OF FILE          LA,U      A4,1              . ASSUME 1/1/64 IF ERROR RETURN          DL        A2,SAVA2          .          LA        A0,MFDJUL         . GET CURRENT MFD DATE          ANA       A0,A4             . SUBTRACT DATE OF FILE CREATION          TLE,U     A0,10             . LESS THAN TEN DAYS OLD?          J         SE569             .  YES - DON'T INCREMENT REL CYC NUMBERSE568          AA,U      A2,1              . INCREMENT REL CYCLE NUMBER HERESE569          SA        A2,MFRCN+28,A3    . SAVE REL CYC NUMBER IN FILE ENTRY          JGD       R5,SE565          . LOOP BACK FOR OTHER FILE ENTRIES/..         DETERMINE ARCHIVE STATUS FOR EACH FILE IN <CYCTBL>.          LX        X5,(28,CYCTBL)    . SETUP POINTER TO CYCTBL          LA        A8,MFDJUL         . GET JULIAN MFD CREATION DATE          LR        R5,CYCCNT         . SETUP LOOP COUNTER          JGD       R5,$+1            . DECREMENT FOR JGD          JZ        A11,SE570         . SKIP IF NO MATCH IN ARCCTL$          LA        A7,LLFCYC,X6      . PICKUP CYCLE LIMIT FOR THIS FILE          TLE,U     A7,1              .          LA,U      A7,1              . MUST BE AT LEAST ONESE570          TZ        MFNBRA,X5         . IS FILE CURRENTLY ASSIGNED?          J         SE572             . YES, SET DSR = 0          LA        A0,MFREFT,X5      . GET REF TIME OF THIS FILE ENTRY          JZ        A0,SE572          . IF TIME IS ZERO, ASSUME DSR = 0          LMJ       X11,JULOUT        . COMPUTE JULIAN DATE OF REFERENCE          LA,U      A4,1              . ASSUME 1/1/64 IF ERROR RETURN          ANU       A8,A4             . SUBTRACT TO COMPUTE DAYS SINCE REF          TG,U      A9,1              . AT LEAST ONE DAY SINCE REF?          J         SE575             .  YES, SKIPSE572          LA,U      A9,0              . FILE HAS BEEN REF ON THE SAME DAY          LA        A0,MFREFT,X5      . GET REF TIME AGAIN          AND       A0,(0777777)      . AND OFF TIME PORTION          TNZ       MFNBRA,X5         . IS FILE CURRENTLY ASSIGNED, OR          TG,U      A1,M$ARCRNT*3600  .  REF ON SAME DAY, AFTER NORM START TIME?          J         SE590             .   YES, DON'T ARCHIVESE575          JZ        A11,SE590         . SKIP IF NO MATCH IN ARCCTL$          LA,U      A10,'R'           . SETUP TO INDICATE ARCH BY DSR          LA        A0,LLFREF,X6      . REFERENCE LIMIT FOR FILE          TLE       A0,A9             . GREATER OR EQUAL TO COMPUTED DSR?          J         SE580             .  NO, ARCHIVE THIS FILE          JZ        A0,SE580          .  YES, ARCHIVE ONLY IF LIMIT = 0          LA,U      A10,'C'           . SETUP TO INDICATE ARCH BY RCN          TG        A7,MFRCN,X5       . TEST: IS RCN <= CYCLE LIMIT?          J         SE590             .  YES, DO NOT ARCHIVE THIS FILESE580..         THIS FILE SELECTED TO BE ARCHIVED.          TEP,U     A15,1*/('Z'-'L')  . ARE WE DOING AN EXCEPTION LIST?          J         SE592             .  YES, SKIP          LMJ       X10,SELARC        .  NO, CALL SELECT ARCHIVE          J         SE628             . TABLE-OVERFLOW WAS RETURNED          J         SE595             . NORMAL RETURN..         THIS FILE WAS NOT SELECTED.SE590          LA,U      A10,0             . SET A10 = 0 (INDICATES NO SELECTION)          TOP,U     A15,1*/('Z'-'L')  . ARE WE DOING AN EXCEPTION LIST?          J         SE595             .  NO, SKIP..         IN MODE 2, ALL FILES ARE CHECKED BY <EXCARC> FOR POSSIBLE.         INCLUSION IN EXCEPTION LIST.SE592          LMJ       X10,EXCARC        . CALL EXCEPTION ARCHIVE          J         SE628             . TABLE-OVERFLOW RETURNEDSE595          NOP       ,,*X5             . ALL DONE - INCREMENT TO NEXT FILE ENT          JGD       R5,SE570          .  AND LOOP BACK FOR MORE...         PROCESSING OF <CYCTBL> COMPLETE FOR PREVIOUS QUAL*FILE.SE600          TP        R4                . ANY FILES LEFT TO PROCESS?          J         SE630             .  NO - SKIP          SZ        CYCCNT            .  YES - ZERO <CYCTBL> COUNTER          LX        X4,SAVX4F         . RESTORE NEXT-FILE POINTER..         MOVE THE NEXT FILE ENTRY FROM THE MFDDB INTO <CYCTBL>.SE620          LA        A0,CYCCNT         . GET CURRENT ENTRY COUNT          TG,U      A0,32             . IS TABLE FULL?          ER        ERR$              .  YES, ABORT - SHOULD NEVER HAPPEN          AU,U      A0,1              . INCREMENT ENTRY COUNT          SA        A1,CYCCNT         . SAVE NEW ENTRY COUNT          MSI,U     A0,28             . MULTIPLY BY WORD COUNT OF RECORD          AH        A0,(1,CYCTBL)     . ADD BASE ADDRESS, GET PTR TO NXT ENT          LXI,U     X4,1              . SET UP FOR BLOCK TRANSFER          LR,U      R1,28             .  DITTO          BT        A0,,*X4           . MOVE INFO INTO NEXT <CYCTBL> ENTRY          J         SE300             . BACK FOR NEXT FILE/..         SELECTION COMPLETE (TABLE OVERFLOW).SE628          LA        A0,ERRPRT(8)      . 'SELECTION TABLE OVERFLOW'          AH        A0,(0200,0)       . SKIP BEFORE PRINTING          ER        PRINT$            . PRINT ERROR MESSAGE          E$CLEAR                     . CLEAR EDIT          E$MSG     FSTMSG            . 'FILE SCAN TERMINATED AT '          E$FD2     MFQUAL,X5         . QUALIFIER          E$MSGR                      . *          E$FD2     MFFILE,X5         . FILENAME          E$MSGR                      . (          E$DECV    MFCYCL,X5         . ABS F-CYCLE          E$MSGR                      . )          P$RINT    (0114,LINE)       . INDICATE NEXT FILE TO PROCESS          TEP,U     A15,1*/('Z'-'X')  . TERMINATE ON TABLE OVERFLOW?          ER        ERR$              .  YES, ABORT NOW          TZ        DEMAND            .  NO, DEMAND RUN?          J         SE630             .   YES, SKIP          C$OM      COMPK5            .   NO, NOTIFY OPERATOR OF NONFATAL ERR..         SELECTION COMPLETE (NORMAL OR PASS-THROUGH).SE630          TOP,U     A15,1*/('Z'-'L')  . ARE WE DOING AN EXCEPTION LIST?          J         SE635             .  NO, SKIP          LMJ       X10,PRTEXC        .  YES, CALL PRTEXC TO OUTPUT LIST          J         SE850             . ALL DONE..         PERFORM INDEX-SORT ON EXPIRATION TABLE BY ASCENDING EXP SIZE.SE635          LR        R4,EXPCNT         . ENTRY COUNT OF EXP TABLE          JGD       R4,SE636          . DECR FOR LOOP AND SKIP          J         SE690             . IF TABLE IS EMPTY, NO FILES TO ARCHIVESE636          LX        X4,(EXSIZE,EXPTBL-EXSIZE) . POINTER TO EXPIRATION TABLE          SZ        SRTPTR            . INIT SORT PARAMETERS          SZ        SRTCNT            .SE638          LA        A0,EXDAYS+EXSIZE,*X4 . A0 = EXP PERIOD FOR NEXT ENTRY          SA,H1     A0,LINE           . STORE IN TEMP SORT RECORD          SX,H2     X4,LINE           . STORE POINTER TO EXPTBL RECORD          LA,U      A0,LINE           . A0 = ADDRESS OF INDEX WORD          LMJ       X11,SRTREL        . RELEASE TO SORT          LMJ       X1,ER900          . ABORT IF SORT ERROR RETURNED          JGD       R4,SE638          . LOOP FOR OTHER RECORDS          LMJ       X11,SRTRTN        . SORT THE TABLE          DL        A0,SRPARS         .          DS        A0,SRPSAV         . SAVE SORT COUNT AND POINTER FOR 2ND USE..         PRINT HEADINGS, INIT TOTALS FOR EXP TABLE SUMMARY.          P$RINT    (0400+H2L,HDG2)   . 'SUMMARY OF SEL FILES BY EXPIRATION'          P$RINT    (0200+H2AL,HDG2A) . EXPIRATION TABLE HEADING          P$RINT    (0100+H2AL,DASHES) . FOLLOW WITH A LINE OF DASHES          P$RINT    (0100,$)          . SKIP A LINE          LA,U      A7,0              . ZERO FILE TOTAL          DSL       A8,72             . ZERO ONLINE AND UNLOADED TRACK TOTALS          DSL       A10,72            . ZERO REMOV TRK TOT, BACKUP EXP COUNT          DSL       A13,72            . ZERO OUTPUT (TOT) AND PERM-EXP REEL CT..         DETERMINE BYPASS STATUS FOR EACH EXPIRATION.SE640          LMJ       X11,SRTRET        . RETURN THE NEXT RECORD          J         SE656             . SKIP WHEN ALL RECORDS PROCESSED          LX,H2     X4,,A0            . ADDRESS OF NEXT RECORD          LA        A0,EXDAYS,X4      . LENGTH OF NEXT EXP PERIOD          JNZ       A0,SE641          . SKIP IF GREATER THAN ZERO          $IF       M$EXPZERO>0       . THIS CODE ON FOR ZERO-EXP ALLOWED          LA        A0,EXBS+EXFLCT,X4 . GET COUNT OF ZERO-EXP FILES          SA        A0,EXPZCT         . SAVE FOR LATER USE          J         SE648             . SKIP BYPASS CHECK, ENABLE EXPIR.          $ELSE                       . THIS CODE FOR ZERO-EXP DISABLED          J         SE645             . ALWAYS DISABLE FOR UNDEF EXPIRATION          $ENDF                       . END OF CONDITIONAL CODESE641          TZ        FULARC            . FULL ARCHIVE SELECTED?          J         SE648             .  YES, SKIP          LA        A3,(3,EXDFTB-3)   . POINTER TO EXP DEFINITION TABLE          LR,U      R1,M$EXPACNT      . COUNT OF EXP DEF TABLE          SE,H1     A0,3,*A3          . SEARCH FOR THIS EXPIRATION          J         SE645             .  NO FIND, SKIP          LA        A0,DAYMSK         . A0 = BIT MASK FOR THIS DAY OF WEEK          LA,U      A2,EBFDAY         . BYPASS-BIT FOR WRONG DAY OF WEEK          TOP,H1    A0,1,A3           . PROCESS THIS EXP ON THIS DAY?          J         SE646             .  NO, SKIP          LA,H1     A4,2,A3           . TRACK THRESHOLD FOR 1-BACKUP FILES          LA,H2     A5,2,A3           . TRACK THRESHOLD FOR CRIT-BACKUKUP FILES          TLE       A4,A5             . IS NORMAL >= CRITICAL THRESHOLD?          LA        A5,A4             .  NO, SET CRITICAL = NORMAL          SA        A4,EXBS+EXTHR,X4  . SAVE NORMAL THRESHOLD          SA        A5,EXBB+EXTHR,X4  .  AND CRIT-BACKUP THRESHOLD          LA        A4,EXBS+EXTRKF,X4 . NORMAL FIXED-ONLINE TRACKS          AA        A4,EXBS+EXTRKU,X4 .  + NORMAL UNLOADED TRACKS          AA        A4,EXBS+EXTRKR,X4 .  + NORMAL REMOV TRKS = TOTAL NORM TRKS          LA        A5,EXBB+EXTRKF,X4 . CRIT-B FIXED-ONLINE TRACKS          AA        A5,EXBB+EXTRKU,X4 .  + CRIT-B UNLOADED TRACKS          AA        A5,EXBB+EXTRKR,X4 .  + CRIT-B REMOV TRKS = TOTAL CRIT TRKS          TLE,U     A5,1              . ANY CRIT-BACKUP TRACKS FOR THIS EXP?          J         SE643             .  NO, SKIP          TZ,H2     0,A3              . YES, IS CRIT-BACKUP ALLOWED,          TOP,H2    A0,1,A3           .  AND OK FOR THIS DAY OF WEEK?          J         SE642             .   NO, SKIP (WRONG DAY OF WEEK)          LA,U      A2,EBFTHRB        . BYPASS-BIT FOR BELOW CRIT-B THRESHOLD          TG        A5,EXBB+EXTHR,X4  . ARE TOTAL CRIT-B TRACKS < THRESHOLD?          J         SE643             .  NO, SKIP (ABOVE THRESHOLD)SE642          SA        A2,EXBB+EXBYP,X4  . CRIT-B WILL BE BYPASSED - SAVE REASON          LA,U      A5,0              . SET TOTAL CRIT-B TRACKS = ZEROSE643          AA        A4,A5             . A4 = TOT NORM + CRIT-B IF NOT BYPASSED          TG        A4,EXBS+EXTHR,X4  . ARE TOTAL TRACKS < THRESHOLD?          J         SE648             .  NO, SKIP (ABOVE THRESHOLD)          LA,U      A2,EBFTHR         .  YES, LOAD BYPASS-BIT FOR < THRESHOLD          JNZ       A5,SE646          . SAME STATUS FOR BOTH IF CRIT NOT          J         SE647             .   ALREADY BYPASSED, ONLY NORM OTHERWISESE645          LA,U      A2,EBFUND         . BYPASS-BIT FOR UNDEFINED EXPIRATION          ON        M$EXPPERM>0       . THIS CODE FOR PERM-EXP ONLY          TE,U      A0,M$EXPPERM      . IS THIS THE PERMANENT RETENTION CODE?          J         SE646             .  NO, SKIP          ER        COND$             .  YES, GET CONDITION WORD          TEP,U     A0,1*/(12+2)      . IS BIT 2 (T2) SET?          J         SE648             .  YES, PROCESS PER TMK REQUEST          LA,U      A2,EBFPRM         .  NO, LOAD BYPASS-BIT FOR STD/PERM          OFF       M$EXPPERM>0       . END OF PERM-EXP CODESE646          SA        A2,EXBB+EXBYP,X4  . SAVE REASON FOR CRIT-B BYPASSSE647          SA        A2,EXBS+EXBYP,X4  . SAVE REASON FOR NORMAL BYPASS          SZ        EXPRFL,X4         . ZERO PROCESS-FLAG FOR THIS EXP          J         SE650             .SE648          SP1       EXPRFL,X4         . THIS EXP WILL BE PROCESSED - SET FLAG          INC       EXPPCT            . INCREMENT PROCESSED-EXP COUNT          NOP                         ...         PRINT TOTALS BY EXPIRATION GROUP, COMPUTE TAPE USAGE REQUIREMENTS.SE650          LA,U      A6,0              . A6 = 0 IND NORM EXP - PROCESS FIRST          LA,U      A12,0             . ZERO REQ REEL COUNT FOR THIS EXP          LX,U      X5,EXBS,X4        . X5 = PTR TO 1-BACKUP TOTALS, FLAGSSE651          E$CLEAR                     . INIT FOR EDIT OUTPUT          E$DECF    8,EXDAYS,X4       . EDIT EXPIRATION PERIOD (DAYS)          LA,U      A0,('      ')     . INDICATOR FOR 1-BACKUP FILES          JZ        A6,$+2            . SKIP IF 1-BACKUP          LA,U      A0,('(C)   ')     . INDICATOR FOR CRIT-BACKUP FILES          E$COPY    3                 . EDIT INTO IMAGE FOLLOWING EXP DAYS          E$DECF    9,EXFLCT,X5       . EDIT FILE COUNT FOR THIS PERIOD          E$DECF    14,EXTRKF,X5      . ONLINE-FIX TRACK COUNT FOR THIS PERIOD          E$DECF    15,EXTRKU,X5      . UNLOADED TRACK COUNT FOR THIS PERIOD          E$DECF    15,EXTRKR,X5      . REMOVABLE TRACK COUNT FOR THIS PERIOD          E$SKIP    10                . MOVE OVER A LITTLE          TZ        EXBYP,X5          . WAS THIS EXP BYPASSED?          J         SE653             .  YES, SKIP          E$MSG     PRCMSG            .  NO, EDIT 'PROCESS'          AA        A7,EXFLCT,X5      . UPDATE FILE TOTAL          AA        A8,EXTRKF,X5      . UPDATE ONLINE-FIX TRACK TOTAL          AA        A9,EXTRKU,X5      . UPDATE UNLOADED TRACK TOTAL          AA        A10,EXTRKR,X5     . UPDATE REMOVABLE TRACK TOTAL          TNZ       EXDAYS,X4         . IS THIS ZERO-EXPIRATION?          J         SE654             .  YES, SKIP - NO TAPES REQUIRED          TE,U      A6,0              . SINGLE-BACKUP PASS?          AA,U      A11,1             .  NO, UPDATE CRIT-BACKUP EXP COUNT          LA        A0,EXTRKF,X5      . ONLINE-FIXED TRACKS          AA        A0,EXTRKU,X5      .  + UNLOADED TRACKS          AA        A0,EXTRKR,X5      .  + REMOVABLE TRACKS = TOT TO 1ST TAPE          JNZ       A6,SE652          . SKIP IF PROCESSING CRIT-BACKUP          TZ        EXBB+EXFLCT,X4    . IF NOT, ARE THERE CRIT-BACKUP FILES,          TZ        EXBB+EXBYP,X4     .  AND WILL THEY BE PROCESSED?          J         SE652             .   NO, SKIP          AA        A0,EXBB+EXTRKF,X4 .   YES, ADD CRIT-BACKUP TOTALS          AA        A0,EXBB+EXTRKU,X4 .    TO STD-BACKUP FOR OUTPUT REEL          AA        A0,EXBB+EXTRKR,X4 .    COMPUTATIONSE652          DSL       A0,36             . PREPARE FOR DIVIDE          DI        A0,(M$TPT)        . A0 = TOT 1ST TAPES REQ FOR EXP (-1)          AA,U      A0,1              .  COVERED QUOTIENT          SA        A0,EXRLCT,X5      . SAVE EST REEL COUNT FOR EXP          AA,U      A12,,A0           . INCR OUTPUT TAPE REQ FOR THIS EXP          TZ        EXTRKU,X5         . ANY UNLOADED FILES TO BE ARCHIVED?          SP1       IBKCNT            . YES, SET INPUT TAPE CT = 1          J         SE654             .SE653          SZ        EXFLCT,X5         . BYPASS - ZERO FILE COUNT FOR EXP          E$MSG     BYPMSG            . EDIT '*BYPASS   '          LMJ       X9,PRTEXB         . EDIT REASON FOR BYPASSSE654          P$RINT    (0122,LINE)       . PRINT DATA FOR THIS EXP          JNZ       A6,SE655          . FIN WITH EXP IF A6 > 0          LA,U      A6,1              .  IF NOT, SET CRIT-BACKUP FLAG          LX,U      X5,EXBB,X4        . POINT TO CRIT-BACKUP TOTALS, FLAGS          TZ        EXFLCT,X5         . ANY CRIT-BACKUP FILES?          J         SE651             .  YES, PROCESS 2ND TIME FOR THESESE655          AA        A13,A12           . UPDATE TOTAL OUTPUT TAPE REQUIREMENT          ON        M$EXPPERM>0       . THIS CODE FOR PERM-EXP ONLY          LA        A1,EXDAYS,X4      . EXP PERIOD          TNE,U     A1,M$EXPPERM      . IS THIS PERM-RETENTION?          LA        A14,A12           .  YES, PERM-TAPE TOTAL IN A14          OFF       M$EXPPERM>0       . END OF PERM-EXP CODE          J         SE640             . BACK FOR NEXT RECORD..         PRINT TOTAL FILES AND TRACKS TO BE ARCHIVED.SE656          E$CLEAR                     . CLEAR EDIT          E$COPY    8,('*TOTALS*    ') . INDICATE TOTAL LINE          E$DECF    12,A7             . EDIT TOTAL FILES          E$DECF    14,A8             .  TOTAL ONLINE-FIXED TRACKS          E$DECF    15,A9             .  TOTAL UNLOADED TRACKS          E$DECF    15,A10            .  TOTAL REMOVABLE TRACKS          P$RINT    (0214,LINE)       . PRINT TOTAL LINE          ER        COND$             . A0 = CONDITION WORD          TOP,U     A0,1*/(12+0)      . IS BIT ZERO (T2) SET,          TEP,U     A15,1*/('Z'-'R')  .  OR IS R-OPTION SET?          J         $+2               .  YES, SELECT-ONLY ARCHIVE          J         SE6565            .  NO, SKIP          LA        A0,ERRPRT(12)     . 'SELECT-ONLY ARCHIVE, NO OUTPUT FILE'          AH        A0,(0200,0)       . SEPARATE FROM OTHER MESSAGES          ER        PRINT$            . INDICATE SELECT-ONLY STATUS          LMJ       X10,PRTARC        . PRINT SELECTION REPORT NOW          J         SE850             .  AND EXIT WHEN FINISHED/..         PRINT NUMBER OF OUTPUT TAPES REQUIRED.         (SEND MESSAGE TO CONSOLE IF BATCH RUN).SE6565          TNZ       EXPPCT            . ANY EXPIRATIONS TO BE PROCESSED?          J         SE690             .  NO, SKIP          E$CLEAR                     . CLEAR EDIT          E$MSG     COMMSG3           . 'EST. OUTPUT TAPES = '          E$DECV    A13               . TOTAL OUTPUT TAPES REQUIRED          ON        M$EXPPERM>0       . THIS CODE FOR PERM-EXP ONLY          JZ        A14,SE657         . SKIP IF NO PERM TAPES TODAY          E$MSGR                      . ' ('          E$DECV    A14               . TOTAL PERM-EXP TAPES REQUIRED          E$MSGR                      . '=PERM-RETENTION)'SE657          OFF       M$EXPPERM>0       . END OF PERM-EXP CODE          P$RINT    (0212,LINE)       . PRINT NUMBER OF TAPES REQUIRED          E$COLN                      . COLUMN NUMBER          SA,H1     A0,COMPK3+1       . INTO COM$ PACKET          LA,U      A0,COMPK3         . PREPARE TO SEND TO CONSOLE          TNZ       DEMAND            . BATCH RUN?          ER        COM$              .  YES, SEND MESSAGE TO CONSOLE..         DETERMINE THE NUMBER OF TAPE UNITS TO ASSIGN.          LA,U      A10,1             . MIN TAPES REQ: START WITH ONE          AA        A10,IBKCNT        . INCREMENT IF INPUT TAPE IS REQ'D          TE,U      A11,0             . ANY CRITICAL BACKUPS TODAY?          AA,U      A10,1             .  YES, INCREMENT BY ONE                                      . MAX TAPES REQ = STRT W/CRIT B/U CT (A11)          AA        A11,IBKCNT        . INCREMENT IF INPUT TAPE IS REQ'D          AA        A11,EXPPCT        .  ADD COUNT OF EXP PERIODS TO PROCESS          TZ        EXPZCT            . ANY ZERO-EXPIRATION FILES?          ANA,U     A11,1             .  YES, DECREMENT REQ TAPE COUNT          JZ        A11,SE663         . SKIP IF NO TAPES TO PRODUCE          TZ        IBKCNT            . ANY UNLOADED FILES?          J         SE658             .  YES, SKIP          LA        A11,A10           .  NO, USE MIN TAPES REQUIRED          J         SE663             . SKIP FURTHER COMPUTATIONSSE658          TG,U      A11,9+1           . MORE THAN 9 TAPES NEEDED?          LA,U      A11,9             .  YES, USE MAX = 9          TEP,U     A15,1*/('Z'-'N')  . WILL OPERATOR BE ASKED FOR DRIVE COUNT?          J         SE659             .  YES, SKIP          TG,U      A11,M$TAPDEF+1    .  NO, USE LESSER OF MAX REQUIRED OR          LA,U      A11,M$TAPDEF      .   DEFAULT MAXIMUM DRIVES          TLE       A11,A10           . MORE THAN MINIMUM NEEDED?          LA        A11,A10           .  NO, USE MINIMUM          J         SE662             . FINISHED WITH DEFAULT CALCULATIONSE659          TG,U      A11,M$TAPMAX+1    . DO WE NEED MORE THAN MAX ALLOWED?          LA,U      A11,M$TAPMAX      .  YES, USE CONFIG MAX AS TOP VALUE          TLE       A11,A10           . MORE THAN MINIMUM NEEDED?          LA        A11,A10           .  NO, USE MINIMUM          TG        A10,A11           . IS MAX TO ASK > MIN TO ASK?          J         SE662             .  NO, DON'T BOTHER, USE COMP VALUE          E$CLEAR                     . CLEAR EDIT          E$MSG     COMMSG2           . 'HOW MANY TAPE DRIVES? ('          E$DECV    A10               . MIN VALUE          E$MSGR                      . '-'          E$DECV    A11               . MAX VALUE          E$MSGR                      . ')'          E$COLN                      . COLUMN NUMBER          SA,H1     A0,COMPK2+1       . INTO COM$ PACKETSE660          SZ        ANS               . CLEAR OPERATOR ANSWER          SZ,S1     COMPK2            . CLEAR COM$ STATUS          C$OM      COMPK2            . ASK OPERATOR FOR DRIVE COUNT          TZ,S1     COMPK2            . GOOD STATUS?          LMJ       X1,ER900          .  NO, ABORT          LA,S1     A0,ANS            .  YES, GET ANSWER          ANA,U     A0,'0'            . CONVERT TO BINARY          ANU,U     A0,1              . SUBTRACT ONE, TO A1          TG        A0,A10            . LESS THAN MINUMUM?          TG        A1,A11            .  OR GREATER THAN MAXIMUM?          J         SE660             .   YES, ASK AGAIN          LA        A11,A0            .   NO, A11 = OPERATOR REPLYSE662          ANA       A11,IBKCNT        . DECREMENT IF INPUT TAPE IS REQ'DSE663          SA        A11,NTAPES        . STORE OUTPUT TAPE COUNT FOR LATER USE/..         SET UP THE EXPIRATION INDEX TABLE (EXPIDX)..         THE EXPIRATION INDEX TABLE IS USED TO SEPARATE ARCHIVE OPERATION.         INTO GROUPS OF FILES BASED ON THE NUMBER OF EXPIRATION PERIODS.         BEING ARCHIVED (EXPCNT), THE NUMBER OF OUTPUT TAPES (NTAPES), AND.         WHICH EXPIRATIONS HAVE FILES REQUIRING A SECOND BACKUP.  EACH ENTRY.         IN THE TABLE IS ONE WORD LONG WITH H2 = THE EXPIRATION PERIOD AND.         S1 = 1 IF SECOND BACKUP, 0 OTHERWISE.  (S3 = ESTIMATED OUTPUT.         REEL COUNT.)  A GROUP CONSISTS OF <NTAPES> ENTRIES AND THERE ARE.         AS MANY GROUPS AS NECESSARY.  THE GROUP NUMBER REPLACES THE <AREXP>.         FIELD IN THE ARCHIVE SELECTION RECORD PRIOR TO FINAL SORT AND.         CREATION OF THE SELECT$ADD FILE..          LX        X5,(1,EXPIDX)     . POINTER TO EXPIDX TABLESE665          LA        A2,NTAPES         . OUTPUT TAPE COUNT          JZ        A2,SE690          . SKIP EXPIDX CREATION IF COUNT = 0          DL        A0,SRPSAV         .          DS        A0,SRPARS         . RESTORE SAVED SORT PARAMETERSSE670          LMJ       X11,SRTRET        . RETURN THE NEXT EXPTBL POINTER          J         SE680             . SKIP WHEN NO MORE LEFT          LX,H2     X4,,A0            . X4 = EXP TABLE RECORD ADDRESS          TZ        EXDAYS,X4         . IS THIS ZERO-EXPIRATION,          TNZ       EXPRFL,X4         .  OR IS EXP ALREADY PROCESSED?          J         SE670             .   YES, SKIP          TZ        EXBB+EXFLCT,X4    .   NO, IS THIS CRIT-BACKUP          TG,U      A2,2              .    AND < 2 DRIVES REM IN THIS GROUP?          J         $+2               .     NO, CONTINUE          J         SE670             .     YES, SKIP THIS EXP FOR THIS GROUP          LA        A0,EXDAYS,X4      . EXP PERIOD FOR THIS GROUP          LXI       A0,EXBS+EXRLCT,X4 . S3 = ESTIMATED OUTPUT REEL COUNT          SA        A0,,*X5           . STORE IN <EXPIDX> TABLE          ANA,U     A2,1              . DECREMENT AVAIL DRIVES IN GROUP          SZ        EXPRFL,X4         . THIS EXP PERIOD HAS NOW BEEN HANDLED          TNZ       EXBB+EXFLCT,X4    . ANY CRITICAL BACKUPS FOR THIS EXP?          J         SE675             .  NO, SKIP          LXI       A0,EXBB+EXRLCT,X4 .  YES, S3 = EST OUTPUT REEL COUNT          SA        A0,,X5            .   STORE 2ND ENTRY IN <EXPIDX>          SP1,S1    0,*X5             .    AND SET CRIT-BACKUP FLAG FOR IT          ANA,U     A2,1              . DECREMENT AVAIL DRIVES IN GROUPSE675          JZ        A2,SE665          . BACK TO START IF NO MORE AVAIL DRIVES          J         SE670             . IF DRIVES REMAIN, GET NEXT EXPTBL ENTRYSE680          TG        A2,NTAPES         . ANY TAPES ALLOCATED IN LAST PASS?          J         SE685             .  NO, MUST BE ALL DONE          LA,U      A0,(0)            .  YES, PREPARE TO CLEAR REM OF TABLE          LR        R1,A2             . R1 = REMAINING ENTRY COUNT FOR GROUP          BT        X5,,*A0           . ZERO REM OF TABLE FOR THIS GROUP          TLE,U     A2,2              . MORE THAN 1 DRIVE REM?          J         SE665             .  NO, BACK TO STARTSE685          LA,U      A0,EXPIDX         . COMPUTE ENTRY COUNT =          ANA,U     A0,,X5            .  START OF TABLE - CURRENT POINTER          SA        A0,EXPICT         . STORE FOR LATER USESE690          LMJ       X10,PRTARC        . PRINT ARCHIVE SELECTION REPORT          TNZ       EXPPCT            . ANY EXP PERIODS TO PROCESS?          J         SE695             .  NO, SKIP          LR        R4,SELCNT         . SELECTION RECORD COUNT          JGD       R4,SE700          . DECR FOR LOOP, SHOULD ALWAYS SKIPSE695          P$RINT    (0200,$)          . SKIP A COUPLE OF LINES          P$RINT    ERRPRT(9)         . 'NO FILES SELECTED FOR ARCHIVE'          LA        A0,(9,AHFFAC)     . FITEM$ PACKET FOR SYS$*ARCHIST$          ER        FITEM$            . GET INFO ON FILE          TNZ,S1    AHFFAC+6          . IS FILE ASSIGNED?          J         SE698             .  NO, SKIP          I$OW      AHFPKT            .  YES, READ HEADER          TZ,S1     AHFPKT+3          . GOOD STATUS?          J         SE698             .  NO, SKIP          LX,U      X4,AHFHDR         . X4 = POINTER TO HEADER BUFFER          LA        A0,AHHLBL,X4      . PICKUP SOFTWARE LABEL          TNE       A0,('*AHFL*')     . GOOD LABEL,          TNZ       AHHAIP,X4         .  AND ARCHIVE-IN-PROGRESS SET?          J         SE698             .   NO, SKIP          P$RINT    ERRPRT(26)        .   YES, 'REBUILD WILL BE STARTED'          LA,U      A0,ASGADD         .          ER        CSF$              . ASSIGN ECL OUTPUT FILE          JP        A0,$+2            .          ER        ERR$              . ABORT IF ERROR ASSIGNING SELECT$ADD          LA        A0,(ADL*6,ASGDEF) . OUTPUT DEFAULT TAPE ASSIGN          LMJ       X10,SYMBOUT2      .  USED TO BACKUP ARCHIST$          J         SE800             . FINISH UP AND START REBUILDSE698          J         SE850             . STOP IF NOTHING TO DO...         RELEASE SELECTION RECORDS TO SORT. RECORDS ARE SORTED BY THE.         FOLLOWING CRITERIA:..         (1) EXPIRATION GROUP NUMBER.         (2) FAS/SECURE BACKUP REEL NUMBER (IF BACKED UP AND EXP > 0).         (3) POSITION ON BACKUP REEL (IF BACKED UP AND EXP > 0).SE700          LX        X4,(ARSIZE,ARBUFF-ARSIZE) . POINTER TO SELECTION RECORDS          SZ        SRTPTR            . INIT FOR NEW SORT          SZ        SRTCNT            .SE705          TZ        ARBYPF+ARSIZE,*X4 . BYPASS THE NEXT FILE?          J         SE718             .  YES, SKIP          LA        A0,AREXP,X4       .  NO, A0 = EXPIRATION          JZ        A0,SE710          . SKIP EXPIDX LOOKUP FOR EXP-ZERO          LA        A3,(1,0)          . <EXPIDX> POINTER          LR        R1,EXPICT         . COUNT OF ENTRIES IN <EXPIDX> TABLE          SE,H2     A0,EXPIDX,*A3     . SEARCH FOR EXP IN TABLE          LMJ       X1,ER900          . SHOULD ALWAYS FIND, IF NOT ABORT          ANA,U     A3,1              . ADJUST FOR +1 INCREMENTATION          LXI,U     A3,0              . AND CLEAR INCREMENT          DSL       A3,36             . PREPARE FOR DIVIDE          DI        A3,NTAPES         . DIVIDE BY AVAIL OUTPUT UNITS          AA,U      A3,1              . BIAS QUOTIENT (EXP GRP NUMBER) BY ONE          SA        A3,AREXP,X4       .  AND REPL EXP IN SEL REC WITH THIS VALUE          SA        A4,AREXPI,X4      . REMAINDER = EXPIDX OFFSET (UNIT NBR)          DL        A0,,X4            . FIRST TWO WORDS OF RECORD          DS        A0,LINE           . INTO AREA TO RELEASE TO SORT          J         SE712             .SE710          LA,U      A0,,X4            . SORT EXP-ZERO TO TOP OF LIST          SA        A0,LINE           .  IN ORIGINAL ALPHA SEQUENCESE712          SX        X4,LINE+2         . SAVE POINTER TO THIS RECORD          LA,U      A0,LINE           . ADDR OF SORT DATA          LMJ       X11,SRTREL        . RELEASE TO SORT          LMJ       X1,ER900          . ABORT IF SORT RETURNS ERRORSE718          JGD       R4,SE705          . LOOP FOR NEXT SELECTION RECORD..         SORT SELECTION RECORDS.          LMJ       X11,SRTRTN        . SORT SELECTION RECORD POINTER LIST          LA,U      A0,ASGADD         .          ER        CSF$              . ASSIGN ECL OUTPUT FILE (TEMP ASG)          JP        A0,$+2            .          ER        ERR$              . ABORT IF ERROR ASSIGNING SELECT$ADD          DL        A0,SRPARS         .          DS        A0,SRPSAV         . SAVE SORT SIZE AND POINTER FOR REUSE..         PRODUCE LIST OF INPUT REEL NUMBERS IN SEQUENCE FOR OPERATOR.          LA,U      A10,0             . ZERO CURRENT REEL NUMBER          LNA,U     A11,1             . FLAG TO OUTPUT MSG 'THESE TAPES...SEQ'SE720          LMJ       X11,SRTRET        . RETURN NEXT POINTER REC FROM SORT          J         SE738             . SKIP IF NO MORE RECORDS          LX        X8,2,A0           . ADDR OF NEXT SEL REC IN SORTED SEQ          TNZ       AREXP,X8          . DOES FILE HAVE ZERO-EXPIRATION?          J         SE735             .  YES, SKIP          LA        A0,ARFLGS,X8      . MISC FLAGS          TOP,U     A0,ARFUNL         . IS THIS FILE UNLOADED?          J         SE735             .  NO, SKIP          LXI       A0,ARRLH1,X8      .  YES, LOAD H1 OF 1ST BACKUP REEL          LXM       A0,ARRLH2,X8      . LOAD H2 OF REEL NUMBER          TNE       A0,A10            . SAME REEL NUMBER AS BEFORE?          J         SE735             .  YES, SKIP          LA        A10,A0            .  NO, LOAD NEW REEL NUMBER AND CONTINUE          JP        A11,SE725         . SKIP IF INIT HEADING HAS BEEN OUTPUT          LA        A0,(OM1L*6,OPMSG1) . 'INPUT TAPES USED IN THIS SEQ:'          LMJ       X10,SYMBOUT2      . WRITE TO ADD FILE          J         SE728             . GO SET UP FIRST REEL MESSAGESE725          JGD       A11,SE730         . LOOP FORWARD UNTIL REEL MSG IS FULL          LMJ       X10,SYMBOUT       . MSG IS FULL, OUTPUT TO ECL FILESE728          E$CLEAR                     . PREPARE FOR NEW MESSAGE          LA,U      A11,7-1           . LOOP COUNTER, MAX REELS/MESSAGE          E$MSG     OPMSG2            . '@MSG '          J         SE732             . FIRST REEL IN MSG DOESN'T GET A SLASHSE730          E$CHAR    '/'               . EDIT IN SLASH BEFORE NEXT REEL NBRSE732          E$FD1     A10               . EDIT NEXT REEL NUMBER INTO MESSAGESE735          J         SE720             . BACK FOR MORE SELECTION RECORDSSE738          JN        A11,SE739         . SKIP IF NO FAS BACKUP REELS NEEDED          LMJ       X10,SYMBOUT       . OTHERWISE, OUTPUT FINAL REEL MSG          LA        A0,(AIL*6,ASGINP) .          LMJ       X10,SYMBOUT2      . OUTPUT '@ASG,TNF IBACKUP,<EQUIP>'/..         OUTPUT LIST OF OBACKUP ASSIGNS, FREES, AND ACP CALLS TO SELECT$ADD.SE739          DL        A0,SRPSAV         .          DS        A0,SRPARS         . RESTORE SORT PARAMS FOR 2ND PASS          LX        X4,(1,EXPIDX)     . POINTER TO EXP INDEX TABLESE740          LMJ       X11,SRTRET        . GET PTR TO NEXT SEL REC IN SORTED SEQ          J         SE742             . ALL DONE WHEN RETURN HERE          LX        X8,2,A0           . ADDRESS OF ARCHIVE SELECTION RECORD          LA        A8,AREXP,X8       . GET EXP GROUP NUMBER          JNZ       A8,SE741          . SKIP IF EXPIRATION > ZERO          TP        EXPZCT            . IS THIS THE FIRST EXP-ZERO FILE?          J         SE760             .  NO, SKIP          E$CLEAR                     .  YES, CLEAR EDIT FOR MSG          E$MSG     OPPMSG            . '@MSG STARTING PURGE - FILE CT = '          E$DECV    EXPZCT            . COUNT OF EXP-ZERO FILES          LMJ       X10,SYMBOUT       . WRITE TO ECL FILE          SN1       EXPZCT            . SET FLAG - PURGE BEING DONE          J         SE760             . SKIP TAPE CHECK - DIRECTLY TO ACPSE741          TNE       A8,PRVEXP         . SAME AS BEFORE?          J         SE760             .  YES, GO GENERATE @ACP FOR THIS FILE          TP        PRVEXP            .  NO, ANY FILES PROCESSED YET?          J         SE750             .   NO, GO GENERATE OBACKUP ASSIGNS          J         SE744             .   YES, FREE PREVIOUS OBACKUP(S) FIRST/..         GENERATE @MARK, @FREE FOR PREVIOUS OBACKUP(S).SE742          JNZ       A8,SE743          . SKIP IF LAST EXP > ZERO          LA        A0,(ADL*6,ASGDEF) . IF NOT, OUTPUT DEFAULT TAPE ASG          LMJ       X10,SYMBOUT2      .  THIS NECESSARY TO COPY ARCHIST$          J         SE800             . ALL DONESE743          SP1       EOFFLG            . SET LAST-PASS FLAGSE744          LR        R4,NTAPES         . LOOP COUNT = NBR OF OUTPUT UNITS          JGD       R4,$+1            . DECREMENT FOR LOOP          ANX       X4,NTAPES         . BACKUP EXPIDX POINTER TO PREV GROUP          LX        X5,(1,1)          . OBACKUP NUMBER          TNZ       EOFFLG            . LAST PASS?          J         SE745             .  NO, SKIP          AX,U      X4,1              .  YES, INCR PAST 1ST REEL OF LAST GROUP          LX        X5,(1,2)          . START AT FILE NUMBER 2          JGD       R4,SE745          . DECREMENT AND SKIP FOR FIRST REEL          J         SE800             . ALL DONE IF ONLY ONE REEL TO STARTSE745          LA,S1     A4,,X4            . A4 = BACKUP FLAG          TNZ,H2    0,*X4             . IS THIS ENTRY IN USE?          J         SE748             .  NO, SKIP          E$CLEAR                     . CLEAR EDIT          E$MSG     MRKMSG            . '@MARK,C '          LMJ       X10,EDARTP        . EDIT ARCHIVE TAPE FILENAME          E$DECV    0,X5,U            . EDIT OBACKUP NUMBER          E$MSGR                      . '.'          LMJ       X10,SYMBOUT       . OUTPUT @MARK IMAGE TO ECL FILE          E$CLEAR                     . CLEAR EDIT          E$MSG     FREMSG            . '@FREE'          TNZ       EOFFLG            . LAST PASS?          E$MSGR                      .  NO, APPEND ',S'          E$CHAR    ' '               . SKIP OVER          LMJ       X10,EDARTP        . EDIT ARCHIVE TAPE FILENAME          E$DECV    0,*X5,U           . EDIT AND INCREMENT OBACKUP NUMBER          LMJ       X10,SYMBOUT       . OUTPUT @FREE IMAGE TO ECL FILESE748          JGD       R4,SE745          . BACK FOR NEXT OUTPUT TAPE          TZ        EOFFLG            . LAST PASS?          J         SE800             .  YES, ALL DONE - EXIT NOW/..         GENERATE @ASG IMAGES FOR NEW OBACKUP(S).SE750          TNZ       EXPZCT            . DID WE JUST FINISH A PURGE?          J         SE752             .  NO, SKIP          LA        A0,(PCL*6,PURCPL) .  YES, '@MSG PURGE COMPLETE'          LMJ       X10,SYMBOUT2      . WRITE TO ECL FILE          SZ        EXPZCT            . ZERO PURGE FLAGSE752          LR        R4,NTAPES         . LOOP COUNT = NBR OF OUTPUT UNITS          JGD       R4,$+1            . DECREMENT FOR LOOP          LX        X5,(1,1)          . OBACKUP TAPE NUMBER + INCREMENTSE755          LA,S1     A4,,X4            . A4 = BACKUP FLAG          LA,H2     A5,,X4            . A5 = EXP PERIOD / IN USE FLAG          LA,S3     A6,,*X4           . A6 = ESTIMATED REEL COUNT          JZ        A5,SE758          . SKIP IF THIS ENTRY NOT IN USE          TOP       A15,(1*/('Z'-'E')) . EXPIRATION NOTIFICATION WANTED?          J         SE756             .  NO, SKIP          E$CLEAR                     .  YES, CLEAR EDIT          E$MSG     EXPMSG            . '@MSG,W '          LMJ       X10,EDARTP        . EDIT ARCHIVE TAPE FILENAME          E$DECV    0,X5,U            . OBACKUP NUMBER FOR THIS TAPE          E$MSGR                      . ' IS '          E$DECV    A5                . EXPIRATION PERIOD          E$MSGR                      . ' DAY EXP (EST '          E$DECV    A6                . ESTIMATED OUTPUT REELS          E$MSGR                      . ' REEL'          LA,U      A0,'S'            .          TE,U      A6,1              . ONE OUTPUT REEL?          E$CHAR                      .  NO, MAKE PLURAL          E$MSGR                      . ') - A'          LMJ       X10,SYMBOUT       . OUTPUT EXPIRATION NOTIFICATION MESSAGESE756          E$CLEAR                     . CLEAR EDIT          E$MSG     ASGMSG            . '@ASG,TF '          LMJ       X10,EDARTP        . EDIT ARCHIVE TAPE FILENAME          E$DECV    0,*X5,U           . EDIT AND INCREMENT OBACKUP NUMBER          E$MSGR                      . ',<EQUIP>,,'          E$DECV    A5                . EDIT EXP PERIOD (DAYS)          LMJ       X10,SYMBOUT       . PLACE @ASG IMAGE IN ECL FILESE758          JGD       R4,SE755          . BACK FOR MORE TAPES          SA        A8,PRVEXP         . SET NEW EXPIRATION GROUP NUMBER/..         GENERATE @ACP CALL FOR EACH FILE TO ARCHIVE.SE760          LA,U      A4,0              . FIRST PASS          LA        A5,ARFFLG,X8      . FILE ENTRY FLAGS FROM ACFSE762          E$CLEAR                     . CLEAR EDIT          E$MSG     ACPMSG            . '@ACP,SA'          ON        M$MHFSHARED>0     . THIS CODE FOR SHARED-HF ONLY          LA,U      A0,'Y'            . ASSUME STD DIRECTORY          TZ        ARDRID,X8         . IS DIR-ID NONZERO?          LA,U      A0,'U'            .  YES, USE SHARED DIRECTORY          E$CHAR                      . ADD DIRECTORY TYPE OPTION TO ACP CALL          OFF       M$MHFSHARED>0     . END OF SHARED-ONLY CODE          JNZ       A8,SE763          . SKIP IF EXP PERIOD > ZERO          $IF       M$EXPZERO>0       . THIS CODE FOR EXP-ZERO ENABLED          E$CHAR    'N'               . INDICATE PURGE TO ACP          LA,U      A0,'Z'            . DELETE OPTION          TEP,U     A5,ACFFDF         . WAS DELETE SET FOR FILE?          E$CHAR                      .  YES, ADD DELETE OPTION          J         SE768             . SKIP CRIT-BACKUP STUFF          $ELSE                       . THIS CODE FOR EXP-ZERO DISABLED          LMJ       X1,ER900          . INTERNAL ERROR, SHOULD NEVER HAPPEN          $ENDF                       . END OF CONDITIONAL CODESE763          JZ        A4,SE765          . SKIP IF NOT 2ND PASS (BACKUP)          E$CHAR    'B'               .  IF SO, TELL ACP TO FLAG AS BACKUP          J         SE768             .SE765          TOP,U     A5,ACFFCF         . IS THIS A CRITICAL FILE?          J         SE768             .  NO, SKIP          E$CHAR    'F'               .  YES, DON'T FREE AFTER FIRST COPY          J         SE770             . SKIP - NEVER DELETE AFTER FIRST COPYSE768          LA,U      A0,'D'            .          TEP       A15,(1*/('Z'-'D')) . ARE WE DELETING AFTER ARCHIVE?          E$CHAR                      .   YES, EDIT 'D' OPT INTO IMAGESE770          E$MSGR                      . 'C  '          E$FD2     ARQUAL,X8         . QUALIFIER          E$CHAR    '*'               .          E$FD2     ARFILE,X8         . FILENAME          E$CHAR    '('               .          E$DECV    ARCYCL,X8         . CYCLE          E$MSGR                      . ').'          JZ        A8,SE780          . SKIP OUTPUT TAPE IF EXPIRATION = ZERO          E$MSGR                      . ','          LMJ       X10,EDARTP        . EDIT ARCHIVE TAPE FILENAME          LA        A0,AREXPI,X8      . INDEX IN THIS EXP GROUP (UNIT NBR)          AA,U      A0,1              . UNIT NUMBERS START AT ONE          AA        A0,A4             . ADD ONE IF THIS IS BACKUP          E$DECV                      . EDIT UNIT NUMBER          E$MSGR                      . '.'          LA        A0,ARFLGS,X8      . GET MISC FLAGS          TOP,U     A0,ARFUNL         . IS THIS FILE UNLOADED?          J         SE780             .  NO, SKIP          E$MSGR                      .  YES, EDIT '     . '          LXI       A0,ARRLH1,X8      . FIRST HALF REEL NUMBER          LXM       A0,ARRLH2,X8      . SECOND HALF REEL NUMBER          E$FD1                       . EDIT REEL NBR INTO IMAGE (AS COMMENT)          E$MSGR                      . ' - '          E$DECV    ARSEQ,X8          . EDIT POSITION ON TAPE INTO IMAGESE780          LMJ       X10,SYMBOUT       . OUTPUT @ACP IMAGE TO ECL FILE          JNZ       A4,SE785          . SKIP IF 2ND PASS, MIBUFF ALREADY SET UP          LA        A0,(1,MIBUFF)     . POINTER TO MATCHING INFO BUFFER          LA,U      A1,(0)            . PREPARE TO CLEAR          LR,U      R1,AHMICT         . SIZE OF MI BUFFER          BT        A0,,*A1           . ZEROFILL MI BUFFER          LX,U      X9,MIBUFF         . POINTER TO BUFFER          LA,U      A0,AHMIV2         . FORMAT 2R2+ FLAG          SA        A0,AHMIVF,X9      . STORE AS 1ST CHAR OF IMAGE          LA,U      A0,'R'            . ASSUME ARCHIVED DUE TO REF LIMIT          LA        A3,ARFLGS,X8      . FLAG BITS FOR THIS FILE          TOP,U     A3,ARFREF         . ARCHIVED DUE TO REF LIMIT?          LA,U      A0,'C'            .  NO, MUST BE CYCLE LIMIT          LA        A1,ARQWCC,X8      . MATCHING QUALIFIER WILDCARD COUNT          LA        A2,ARFWCC,X8      . MATCHING FILENAME WILDCARD COUNT          SA        A0,AHMTYPE,X9     .  STORE IN MI BUFFER          SA        A1,AHMQWC,X9      .          SA        A2,AHMFWC,X9      .          LA,U      A0,0              . INIT FLAG BITS = 0          TEP,U     A5,ACFFDN         . IS DO-NOT-NOTIFY SET IN ACF?          LA,U      A0,AHMFDN         .  YES, SET CORRESPONDING AHF FLAG          SA        A0,AHMFLG,X9      . STORE IN MI BUFFER          LA        A0,ARPTRC,X8      . POINTER TO MATCHING CLASS-ID RECORD          LA        A0,CTCLAS,A0      . SYMBOLIC CLASS-ID (FIELDATA)          LA        A1,ARRFLM,X8      . REFERENCE LIMIT FOR FILE          TOP,U     A3,ARFREF         . ARCHIVED DUE TO REF LIMIT?          LA        A1,ARCYLM,X8      .  NO, LOAD CYCLE LIMIT          LA        A2,ARRFA,X8       . DSR/RFC FOR THIS SELECTED FILE          SA        A0,AHMCLS,X9      .  STORE IN MI BUFFER          SA        A1,AHMVLC,X9      .          SA        A2,AHMVLF,X9      .SE785          LA        A0,(AHMICT*6,MIBUFF) . SYMB$ CONTROL WORD FOR MI BUFFER          LMJ       X10,SYMBOUT2      . OUTPUT MATCHING INFO TO ECL FILE          JZ        A8,SE790          . SKIP IF EXP PERIOD = ZERO          JNZ       A4,SE790          .  OR IF 2ND PASS COMPLETE          TOP,U     A5,ACFFCF         . NO, IS THIS A CRITICAL FILE?          J         SE790             .  NO, SKIP          LA,U      A4,1              .  YES, SET FLAG FOR PASS 2          J         SE762             . AND REPEAT FOR BACKUP COPYSE790          J         SE740             . BACK FOR MORE FILES...         SUBROUTINE TO OUTPUT IMAGES TO THE ECL FILE (SELECT$ADD).SYMBOUT          E$COLN                      . GET COLUMN NUMBER          LSSL      A0,18             . SHIFT TO A0 UPPER          LXM,U     A0,LINE           . FORM SYMB$ OUTPUT PARAMETERSYMBOUT2          SA        A0,ADDPKT+4       . STORE IN PACKET          LA,U      A0,ADDPKT         .          ER        SYMB$             . WRITE COMMAND TO ECL FILE          J         0,X10             . RETURN...         FINISHED WRITING SELECT$ADD - CLOSE FILE AND TERMINATE NORMALLY.SE800          LA,U      A0,BRKADD         . '@BRKPT SELECT$ADD'          ER        CSF$              . CLOSE ECL FILE          LA,U      A0,1              .          ER        SETC$             . SETC VALUE OF 1 IND FILES TO ARCHIVE..         GENERAL EXIT POINT FOR BOTH MODES OF OPERATION.SE850          ER        EXIT$             . ALL DONE..         GENERAL USE ABORT ROUTINE, X1 = ABORT ADDRESS.ER900          SA        A0,SAVX11         . SAVE A0          P$RINT    ERRPRT(7)         . 'INT ERR, X1 = ERROR ADDRESS'          LA        A0,SAVX11         . RESTORE A0          ER        ERR$              .  AND DIE..         I/O ERROR READING MFD DATA BASE.ER920          LA,U      A0,RPKT           . ADDRESS OF INPUT I/O PACKET          LMJ       X9,STATUS         . CALL STATUS TO OUTPUT ERROR MESSAGE          NOP                         .          ER        ERR$              . BLOW UP AFTER MSG HAS BEEN DISPLAYED/..         SELARC IS CALLED ONCE FOR EACH FILE SELECTED TO BE ARCHIVED...         AT ENTRY, X4 = ADDR OF CLASS TABLE ENTRY.                   X5 = ADDR OF FILE ENTRY FROM MFD DATA BASE.                   X6 = ADDR OF MATCHING FT ENTRY FROM ARCCTL$.                   X7 = ADDR OF MATCHING QT ENTRY FROM ARCCTL$.                   A10 = 'C' IF ARCHIVE BY CYCLE LIMIT EXCEEDED.                   A10 = 'R' IF ARCHIVE BY REFERENCE LIMIT EXCEEDED.SELARC          LA        A0,SELCNT         . SELECTION RECORD COUNT          AU,U      A0,1              . INCREMENT, INTO A1          TG,U      A1,M$ARCMAX+1     . IS THE TABLE FULL?          J         SA900             .  YES, SKIP          SA        A1,SELCNT         .  NO, SAVE UPDATED COUNT          MSI,U     A0,ARSIZE         . COMPUTE OFFSET INTO TABLE          LX,U      X8,ARBUFF,A0      . LOAD ADDRESS OF NEXT RECORD          SA        A1,ARRLH1,X8      . INIT THIS FIELD WITH SELECTION SEQUENCE          DL        A0,MFQUAL,X5      . QUALIFIER          DL        A2,MFFILE,X5      . FILE NAME          DS        A0,ARQUAL,X8      .  STORE IN SELECTION RECORD          DS        A2,ARFILE,X8      .          LA        A0,MFDRID,X5      . DIRECTORY-ID          LA        A1,MFCYCL,X5      . ABSOLUTE F-CYCLE          LA        A2,MFNOTR,X5      . TRACK COUNT          SA        A0,ARDRID,X8      .  STORE IN SELECTION RECORD          SA        A1,ARCYCL,X8      .          SA        A2,ARTKCT,X8      .          LA,U      A6,0              . INIT MISC-FLAGS = 0          LA        A0,MFTYPE,X5      . FILE TYPE          TNE,U     A0,MMREMD         . IS FILE CAT ON R-DISC?          AA,U      A6,ARFREM         .  YES, SET REMOVABLE FLAG          LA        A0,MFDESC,X5      . DESCRIPTOR BITS          TEP,U     A0,MMUNLD         . IS FILE UNLOADED?          AA,U      A6,ARFUNL         .  YES, SET FLAG          TNE,U     A10,'R'           . ARCHIVE DUE TO REF LIMIT EXCEEDED?          AA,U      A6,ARFREF         .  YES, SET FLAG          TZ        MFSYMF,X5         . IS FILE IN A SYMBIONT QUEUE?          AA,U      A6,ARFSYM         .  YES, SET FLAG          LA        A1,MFFILF,X5      . FILE-FLAGS          TOP,U     A1,MMBIGF         . IS BIG FILE BIT SET?          J         SA090             .  NO, SKIP          AA,U      A6,ARFTLA         .  YES, SET TOO LARGE TO ARCHIVE          J         SA110             .   AND SKIP ZERO-EXP CHECKSSA090          TNZ       LLFEXP,X6         . IS EXP PERIOD > 0 ?          J         SA100             .  NO, SKIP          TG        A2,(MAXTRK)       .  YES, IS FILE TOO LARGE TO ARCHIVE?          AA,U      A6,ARFTLA         .   YES, SET FLAG          J         SA110             . SKIP BACKUP CHECK IF EXP > 0SA100          TOP,U     A0,MMBKUP         . IS FILE BACKED UP?          J         SA105             .  NO, SKIP - DO NOT PURGE          TOP,U     A0,MMUNLD         . IS FILE UNLOADED,          TNZ       MFTOBK,X5         .  OR IS MOST RECENT SAVE CURRENT?          J         $+2               .   YES, CONTINUE          J         SA105             .   NO, SKIP - DO NOT PURGE          TZ        MFBUNO,X5         . IS THE BACKUP COUNT > 0,          TNZ       MFBUR1,X5         .  AND IS THE FIRST VOLUME DEFINED?          J         SA105             .  NO, SKIP - DO NOT PURGE          TNZ       SHFUPT            . IS SAVE-HISTORY UPDATE TIME AVAIL?          J         SA110             .  NO, SKIP - PURGE OK          LA        A0,MFBKUT,X5      .  YES, GET BACKUP DATE/TIME          LMJ       X11,JULOUT        . CONVERT TO JULIAN          J         SA105             . DO NOT PURGE IF ERROR RETURNED          MSI,U     A4,3600*24        . A4 = JULIAN SEC SINCE 1/1/64          AA,H2     A4,MFBKUT,X5      . ADD IN OFFSET FOR CURRENT DAY          TLE       A4,SHFUPT         . BACKED UP BEFORE LAST SAVE-HIST UPD?          J         SA110             .  YES, ALLOW PURGESA105          AA,U      A6,ARFNCB         . SET FLAG, BACKUP IS NOT CURRENTSA110          SA        A6,ARFLGS,X8      . SAVE COMPLETED MASK IN SEL RECORD          SX        X4,ARPTRC,X8      . SAVE POINTER TO CLASS-ID TABLE          DL        A0,LLQUAL,X7      . MATCHING QUALIFIER FROM ACF          LMJ       X11,CHKWCC        . DETERMINE COUNT OF TRAILING WILDCARDS          SA        A3,ARQWCC,X8      .  STORE IN SELECTION RECORD          DL        A0,LLFILE,X6      . MATCHING FILENAME FROM ACF          LMJ       X11,CHKWCC        . DETERMINE COUNT OF TRAILING WILDCARDS          SA        A3,ARFWCC,X8      .  STORE IN SELECTION RECORD          LA        A0,LLFREF,X6      . REFERENCE LIMIT FROM MATCHING ACF ENTRY          LA        A1,LLFCYC,X6      . CYCLE LIMIT          LA        A2,LLFEXP,X6      . EXPIRATION PERIOD (DAYS)          SA        A0,ARRFLM,X8      .  STORE IN SELECTION RECORD          SA        A1,ARCYLM,X8      .          SA        A2,AREXP,X8       .          SA        A9,ARRFA,X8       . A9 = DSR, STORE AS RESON FOR ARCHIVE          TEP,U     A6,ARFREF         . ARCHIVED DUE TO REF LIMIT EXCEEDED?          J         SA120             .  YES, SKIP          LA        A0,MFRCN,X5       .  NO, LOAD RELATIVE CYCLE LIMIT          SA        A0,ARRFA,X8       .   AND STORE AS REASON FOR ARCHIVESA120          LA        A5,LLFFLG,X6      . FLAG BITS FROM MATCHING ACF ENTRY          TOP,U     A5,ACFFDF         . WAS DELETE SET FOR FILE?          J         SA125             .  NO, SKIP          TNZ       ARQWCC,X8         .  YES, CHECK FOR WILDCARD IN QUALIFIER          TZ        ARFWCC,X8         .   OR FILENAME          ANA,U     A5,ACFFDF         . REMOVE FLAG IF WILDCARD PRESENTSA125          SA        A5,ARFFLG,X8      .  STORE IN SELECTION RECORD          LA,U      A4,0              . INIT BYPASS-FLAGS = ZERO          LA        A0,MFINHI,X5      . INHIBIT-BITS FOR FILE          TEP,U     A0,MMGOPT         . IS FILE G-OPTION?          AA,U      A4,ARBYPG         .  YES, SET FLAG          TEP,U     A5,ACFFVF         . OK TO ARCHIVE V-OPT FILES PER ACF?          J         SA130             .  YES, SKIP          TEP,U     A0,MMVOPT         .  NO, IS FILE V-OPTION?          AA,U      A4,ARBYPV         .   YES, SET BYPASS FLAGSA130          TNZ       LLFEXP,X6         . IS EXP PERIOD > 0 ?          J         SA135             .  NO, NO NEED TO CHECK W-ONLY, WAD          TEP,U     A0,MMWOLY         . IS FILE WRITE-ONLY?          AA,U      A4,ARBYPO         .  YES, SET FLAG          LA        A0,MFPCHR,X5      . PCHAR FLAGS FOR FILE          TEP,U     A0,MMWAD          . IS FILE WORD-ADDRESSABLE?          AA,U      A4,ARBYPW         .  YES, SET BYPASS FLAGSA135          LA        A0,MFDISF,X5      . DISABLE-FLAGS FOR FILE          TOP,U     A0,MMDISA         . IS FILE MARKED DISABLED?          J         SA140             .  NO, SKIP          AND,U     A0,MMDISH++MMDISS++MMDISD .  YES, A1 = SIGNIFICANT REASONS          JZ        A1,SA140          . SKIP IF NO MAJOR DISABLE BIT SET          AA,U      A4,ARBYPD         .  IF SERIOUS DISABLE, SET BYPASS FLAGSA140          TOP,U     A5,ACFFBC         . BYPASS CURRENT CYCLE PER ACF?          J         SA150             .  NO, SKIP          TNZ       R5                .  YES, IS THIS THE NEWEST F-CYCLE?          AA,U      A4,ARBYPC         .   YES, SET BYPASS FLAGSA150          SA        A4,ARBYPF,X8      . STORE COMPLETED BYPASS-MASK IN SEL REC          JNZ       A4,SA300          . RETURN NOW IF FILE BYPASSED          TEP,U     A5,ACFFBY         . NO, IS GENERAL BYPASS SET PER ACF?          J         SA300             .  YES, RETURN          TOP,U     A6,ARFSYM         . IS FILE IN SYMBIONT QUEUE          TEP,U     A6,ARFTLA         .  OR TOO LARGE TO ARCHIVE?          J         SA300             .   YES, RETURN          LA        A0,LLFEXP,X6      . A0 = EXP PERIOD OF FILE          JNZ       A0,SA180          . SKIP IF EXP > ZERO          TEP,U     A5,ACFFDF         . EXP = ZERO, WAS DELETE SET FOR FILE?          J         SA180             .  YES, BACKUP CHECK NOT REQUIRED          TEP,U     A6,ARFNCB         .  NO, PURGE REQUEST - IS BACKUP CURRENT?          J         SA300             .   NO, RETURN..         THIS FILE MAY BE ARCHIVED - UPDATE EXPIRATION TABLE.SA180          LA        A1,(EXSIZE,EXPTBL-EXSIZE) . POINTER TO SEARCH EXPTBL          LR        R1,EXPCNT         . CURR ENT COUNT OF EXPTBL          SE        A0,EXDAYS+EXSIZE,*A1 . SEARCH FOR ENTRY W/SAME EXP PERIOD          J         $+2               . NO FIND, CONTINUE          J         SA210             . FIND, SKIP          LA        A2,EXPCNT         . CURR ENTRY COUNT OF EXPTBL          TLE,U     A2,MAXEXP         . IS TABLE FULL?          J         SA200             .  NO, SKIP          P$RINT    ERRPRT(11)        .  YES, PRINT ERROR MESSAGE          ER        ERR$              .   AND ABORTSA200          AA,U      A2,1              . INCREMENT ENTRY COUNT          SA        A2,EXPCNT         .  AND STORE FOR LATER REF          AA,U      A1,EXSIZE         . COMPUTE POINTER TO NEW ENTRY          LA,U      A2,,A1            . A2 = NEW ENTRY ADDRESS ALSO          LXI,U     A2,1              . INCREMENT FOR TRANSFER          LA,U      A3,(0)            . POINTER FOR ZEROFILL          LR,U      R1,EXSIZE         . SIZE OF ONE ENTRY          BT        A2,,*A3           . ZEROFILL NEXT ENTRY          SA        A0,EXDAYS,A1      . STORE EXP PERIOD OF THIS ENTRYSA210          LA        A3,MFNOTR,X5      . TRACK COUNT OF FILE          JNZ       A3,$+2            . SKIP IF > ZERO          LA,U      A3,1              . USE ONE IF ZERO          LA,U      A2,EXBS,A1        . ADDR OF 1-BACKUP TOTALS          JZ        A0,SA220          . DON'T CHECK FOR CRIT IF EXP = ZERO          TEP,U     A5,ACFFCF         . IS THIS CRIT-BACKUP FILE?          LA,U      A2,EXBB,A1        .  YES, USE ADDR OF CRT-BACKUP TOTALSSA220          INC       EXFLCT,A2         . INCREMENT FILE COUNT          NOP                         .          TEP,U     A6,ARFUNL         . IS THIS FILE UNLOADED?          J         SA240             .  YES, SKIP          TEP,U     A6,ARFREM         .  NO, IS FILE ON R-DISC?          J         SA230             .   YES, SKIP          AA        A3,EXTRKF,A2      .   NO, UPDATE ONLINE-FIXED TRACK COUNT          SA        A3,EXTRKF,A2      . SAVE NEW VALUE          J         SA235             .SA230          AA        A3,EXTRKR,A2      . UPDATE REMOVABLE TRACK COUNT          SA        A3,EXTRKR,A2      .  AND SAVE NEW VALUESA235          JZ        A0,SA250          . GO SAVE BACKUP INFO IF EXP = ZERO          LA        A0,MFDESC,X5      . DESCRIPTOR BITS          TEP,U     A0,MMBKUP         . IS FILE BACKED UP?          J         SA250             .  YES, GO SAVE BACKUP INFO          J         SA300             .  IF NOT, DONE FOR NOWSA240          AA        A3,EXTRKU,A2      . UPDATE UNLOADED TRACK COUNT          SA        A3,EXTRKU,A2      . SAVE NEW VALUESA250          LA        A0,MFBRST,X5      . GET REEL NUMBER OF FIRST BACKUP TAPE          DSL       A0,18             . SHIFT H1 INTO A0 LOWER          SSL       A1,18             .  AND H2 INTO A1 LOWER          SA        A0,ARRLH1,X8      . STORE H1 IN SELECTION RECORD          SA        A1,ARRLH2,X8      . STORE H2 IN SELECTION RECORD          LA        A0,MFSTFP,X5      . GET STARTING POSITION          SA        A0,ARSEQ,X8       . STORE IN SELECTION RECORDSA300          J         1,X10             . RETURN NORMALSA900          J         0,X10             . RETURN ERROR (TABLE OVERFLOW)/..         PRTARC IS CALLED AT THE END OF THE FIRST SELECTION PASS,.         TO PRINT THE ARCHIVE SELECTION REPORT..PRTARC          LX        X8,(ARSIZE,ARBUFF-ARSIZE) . POINTER TO SELECTION TABLE          LR        R8,SELCNT         . ENTRY COUNT OF SELECTION TABLE          JGD       R8,PA100          . DECREMENT FOR LOOP AND SKIP          J         PA800             . EXIT IF NOTHING IN TABLEPA100          JGD       R10,PA120         . SKIP UNLESS TIME TO PRINT NEW PAGE HDGS          INC       PAGECT            . INCREMENT PAGE COUNT          NOP                         .          E$CLEAR                     . CLEAR EDIT          E$MSG     MRSMSG            . INDICATE MARS SYSTEM, RELEASE LVL          E$COL     66-$SL(M$SITENM)/2 . CENTER SITE NAME          E$MSG     HDG3MSG           . FULL NAME OF MARS SITE          E$COL     108               . SKIP OVER A LITTLE          E$MSGR                      . 'DATE '          E$DAY5    HDRBUF+MFTDAT     . DATE FROM MFDDB FILE          E$MSGR                      . 'PAGE '          E$DECF    4,PAGECT          . PAGE NUMBER          P$RINT    (0777700+22,LINE) . PRINT FIRST LINE OF HEADING          E$CLEAR                     . CLEAR EDIT          E$MSG     HDG1MSG           . 'ARCHIVE SELECTION REPORT'          E$SKIP    5                 . SKIP OVER A LITTLE          E$COPY    12,SITCOD         . EDIT USER-SUPPLIED SYSTEM ID          P$RINT    (0100+22,LINE)    . PRINT 2ND LINE OF HEADING          P$RINT    (0200+H1BL,HDG1B) . FIRST LINE OF COL HEADINGS          P$RINT    (0100+H1CL,HDG1C) . 2ND LINE OF COL HEADINGS          P$RINT    (0100+22,DASHES) . FOLLOW WITH A LINE OF DASHES          P$RINT    (0100,$)          .  AND SKIP A SPACE          LR,U      R10,M$LPP-8       . RESET LINE COUNTERPA120          E$CLEAR                     . CLEAR EDIT          LA        A1,ARDRID+ARSIZE,*X8 . DIRECTORY-ID OF SELECTED FILE          ON        M$MHFSHARED>0     . THIS CODE FOR SHARED-HF ONLY          LA,U      A0,'S'            . ASSUME SHARED DIRECTORY          JNZ       A1,PA130          . SKIP IF DIRECTORY-ID IS NONZERO          LA        A0,HDRBUF+MFHHID  . IF ZERO, LOAD HOST-ID OF THIS SYSTEM          AA,U      A0,'A'-1          . FORM LETTER, A-DPA130          E$CHAR                      . INDICATE LOCAL HOST OR SHARED          E$CHAR    ' '               . SKIP OVER          OFF       M$MHFSHARED>0     . END OF SHARED-ONLY CODE          E$FD2     ARQUAL,X8         . EDIT QUALIFIER          E$CHAR    '*'               .          E$FD2     ARFILE,X8         . EDIT FILENAME          E$CHAR    '('               .          E$DECV    ARCYCL,X8         . F-CYCLE          E$CHAR    ')'               .          E$COL     30                .          E$DECF    6,ARTKCT,X8       . TRACK COUNT          LA        A6,ARFLGS,X8      . A6 = MISC FLAGS          LA,U      A0,'R'            . R-DISC INDICATOR LETTER          TEP,U     A6,ARFREM         . IS THIS R-DISC?          E$CHAR                      .  YES, INDICATE IN LISTING          LA,U      A0,'U'            . UNLOADED INDICATOR LETTER          TEP,U     A6,ARFUNL         . IS FILE UNLOADED?          E$CHAR                      .  YES, INDICATE IN LISTING          E$COL     39                . MOVE OVER A LITTLE          LA        A0,ARPTRC,X8      . POINTER TO CLASS-ID REC          LA        A0,CTCLAS,A0      . MATCHING CLASS-ID FOR FILE          LMJ       X9,RJCLASS        . RIGHT-JUSTIFY AND EDIT INTO OUTPUT          DL        A0,ARQUAL,X8      . QUALIFIER          LA        A4,ARQWCC,X8      . MATCHING ENTRY WILDCARD COUNT          LMJ       X9,FMTMAT         . FORMAT AND EDIT INTO OUTPUT          E$CHAR    '*'               .          DL        A0,ARFILE,X8      . FILENAME          LA        A4,ARFWCC,X8      . MATCHING ENTRY WILDCARD COUNT          LMJ       X9,FMTMAT         . FORMAT AND EDIT INTO OUTPUT          E$COL     73                .          E$DECF    4,ARRFLM,X8       . REF LIMIT FOR FILE          E$DECF    4,ARCYLM,X8       . CYCLE LIMIT FOR FILE          LA        A4,ARFFLG,X8      . CONTROL FLAGS (AHFLGS)          LA,U      A0,' '            . ASSUME <DCY> NOT SET          TOP,U     A4,ACFFAC         . IS <DCY> SET FOR FILE?          LA,U      A0,'D'            .  YES, INDICATE IN LISTING          E$CHAR                      . EDIT APPROPRIATE CHAR INTO OUTPUT          E$DECF    5,AREXP,X8        . EXPIRATION PERIOD          LA,U      A0,' '            . ASSUME FILE NOT CRIT BACKUP          TEP,U     A4,ACFFCF         . IS THIS CRIT BACKUP FILE?          LA,U      A0,'C'            .  YES, INDICATE IN LISTING          E$CHAR                      . EDIT INDICATOR OR SPACE DO 2 ,   E$CHAR    ' '               .          TOP,U     A6,ARFREF         . ARCHIVE BECAUSE REF LIMIT EXCEEDED?          J         PA150             .  NO, SKIP..         REFERENCE LIMIT EXCEEDED FOR THIS FILE.          E$FD1     ('DSR=')          .  YES, EDIT 'DSR='          E$DECV    ARRFA,X8          . REASON = DAYS SINCE REF          J         PA200             . GO CHECK FOR EXCLUSIONS..         CYCLE LIMIT EXCEEDED FOR THIS FILE.PA150          E$FD1     ('RCN=')          . EDIT 'RCN='          LA,U      A0,1              . COMPUTE VALUE FOR DISPLAY          ANA       A0,ARRFA,X8       .  THIS IS 1 - COMPUTED REL CYC NUMBER          E$DECV                      . EDIT INTO IMAGE..         CHECK FOR REASONS TO EXCLUDE THIS FILE FROM ARCHIVE.PA200          E$COL     99                . POS TO ACTION-TAKEN FIELD          LA        A5,ARBYPF,X8      . FILE-BYPASS FLAGS          JNZ       A5,PA300          . SKIP IF NONZERO          TEP,U     A4,ACFFBY         . NO, IS GENERAL BYPASS SET PER ACF?          J         PA300             .  YES, SKIP          TOP,U     A6,ARFSYM         . IS FILE IN SYMBIONT QUEUE          TEP,U     A6,ARFTLA         . OR TOO LARGE TO ARCHIVE?          J         PA300             .  YES, SKIP          LA        A0,AREXP,X8       .  NO, PROCESS FILE - A0 = EXP PERIOD          JNZ       A0,PA210          . SKIP IF EXPIRATION > ZERO          TEP,U     A4,ACFFDF         . EXP = ZERO, WAS DELETE SET FOR FILE?          J         PA210             .  YES, BACKUP CHECK NOT REQUIRED          TEP,U     A6,ARFNCB         .  NO, PURGE REQUEST - IS BACKUP CURRENT?          J         PA270             .   NO, SKIP - DO NOT PURGEPA210          LX        X4,(EXSIZE,EXPTBL-EXSIZE) . POINTER TO EXPIRATION TABLE          LR        R1,EXPCNT         . ENTRY COUNT OF EXP TABLE          SE        A0,EXDAYS+EXSIZE,*X4 . SEARCH FOR THIS EXP IN TABLE          LMJ       X1,ER900          . NO FIND - INTERNAL ERROR!          LX,U      X5,EXBS,X4        . FIND, X5 = PTR TO 1-BACKUP INFO          TEP,U     A4,ACFFCF         . IS THIS CRITICAL-BACKUP FILE?          LX,U      X5,EXBB,X4        .  YES, X5 = PTR TO CRIT-BACKUP INFO          TZ        EXBYP,X5          . WAS THIS EXP BYPASSED?          J         PA250             .  YES, SKIP          JZ        A0,PA220          .  NO, PURGE/DELETE IF EXPIRATION = ZERO          E$MSG     ARCMSG            . EXP > 0, EDIT ' ARCHIVE   ' ACTION          TOP,U     A6,ARFUNL         . WAS FILE UNLOADED?          J         PA500             .  NO, FINISHED WITH THIS FILE FOR NOW          E$MSGR                      .  YES, EDIT 'FROM '          J         PA230             . GO INSERT REEL, POSITIONPA220          TOP,U     A4,ACFFDF         . WAS DELETE SET FOR FILE?          J         PA225             .  NO, SKIP - THIS IS PURGE          E$MSG     DELMSG            .  YES, EDIT ' DELETE'          J         PA500             . FINISHED WITH FILEPA225          E$MSG     PURMSG            . EDIT ' PURGE    BACKUP= 'PA230          LXI       A0,ARRLH1,X8      . FIRST HALF SAVE REEL NUMBER          LXM       A0,ARRLH2,X8      . SECOND HALF SAVE REEL NUMBER          E$FD1                       . EDIT INTO OUTPUT          E$MSGR                      . ' POS '          E$DECV    ARSEQ,X8          . POSITION OF SAVE INFO ON REEL          J         PA500             . FINISHED WITH THIS FILE..         FILE BYPASSED DUE TO EXPIRATION.PA250          E$MSG     BYPMSG            . '*BYPASS   '          LMJ       X9,PRTEXB         . CALL PRTEXB TO DISPLAY REASON          J         PA400             . EXIT AFTER SETTING BYPASS FOR FILE..         PURGE REQUESTED, BACKUP IS NOT CURRENT.PA270          E$MSG     BYPMSG            . '*BYPASS   '          E$MSG     EXMPUR            . 'PURGE REQ, NO CURR B/U'          J         PA400             . EXIT AFTER SETTING BYPASS FOR FILE..         FILE BYPASSED FOR REASON(S) OTHER THAN EXPIRATION.PA300          E$MSG     BYPMSG            . '*BYPASS   '          E$MSGR                      . 'MASK='          LA,U      A0,'B'            . GENERAL-BYPASS PER ACF          TEP,U     A4,ACFFBY         . IS FLAG SET?          E$CHAR                      .  YES, EDIT IN          LA,U      A0,'C'            . BYPASS CURRENT CYCLE          TEP,U     A5,ARBYPC         . IS FLAG SET?          E$CHAR                      .  YES, EDIT IN          LA,U      A0,'G'            . G-OPTION FILE          TEP,U     A5,ARBYPG         . IS FLAG SET?          E$CHAR                      .  YES, EDIT IN          LA,U      A0,'V'            . V-OPTION FILE          TEP,U     A5,ARBYPV         . IS FLAG SET?          E$CHAR                      .  YES, EDIT IN          LA,U      A0,'O'            . WRITE-ONLY          TEP,U     A5,ARBYPO         . IS FLAG SET?          E$CHAR                      .  YES, EDIT IN          LA,U      A0,'W'            . WORD ADDRESSABLE          TEP,U     A5,ARBYPW         . IS FLAG SET?          E$CHAR                      .  YES, EDIT IN          LA,U      A0,'D'            . MAJOR DISABLE          TEP,U     A5,ARBYPD         . IS FLAG SET?          E$CHAR                      .  YES, EDIT IN          LA,U      A0,'Q'            . FILE IN SYMBIONT QUEUE          TEP,U     A6,ARFSYM         . IS FLAG SET?          E$CHAR                      .  YES, EDIT IN          LA,U      A0,'L'            . TOO LARGE TO ARCHIVE          TEP,U     A6,ARFTLA         . IS FLAG SET?          E$CHAR                      .  YES, EDIT INPA400          SP1       ARBYPF,X8         . SET FINAL-PASS BYPASS FOR FILEPA500          P$RINT    (0126,LINE)       . PRINT EDITED INFO FOR THIS FILE          JGD       R8,PA100          . BACK FOR NEXT FILE          P$RINT    (0777700,$)       . SKIP TO NEW PAGE AT END OF REPORTPA800          J         0,X10             . RETURN/..         PRTEXB IS CALLED FROM EXPTBL SUMMARY PROCESSING AND FROM.         PRTARC TO PRINT THE REASON FOR EXPIRATION-BYPASS..         AT ENTRY, X5 = POINTER TO EXPTBL SUB-RECORD FOR FILE.PRTEXB          LA        A4,EXBYP,X5       . BYPASS-MASK FOR EXP (ONLY 1 BIT SET)          LA,U      A5,0              . INIT THRESHOLD = ZERO          LA,U      A0,EXMSG1         . 'UNDEFINED EXPIRATION'          TNE,U     A4,EBFUND         . BYPASSED FOR THIS REASON?          J         PX100             .  YES, SKIP          LA,U      A0,EXMSG2         . 'EXP=PERM, STD ARCHIVE'          TNE,U     A4,EBFPRM         . BYPASS FOR THIS REASON?          J         PX100             .  YES, SKIP          LA,U      A0,EXMSG3         . 'WRONG DAY OF WEEK'          TNE,U     A4,EBFDAY         . BYPASS FOR THIS REASON?          J         PX100             .  YES, SKIP          LA,U      A0,EXMSG4         . 'EXP THRESHOLD = '          LA        A5,EXTHR,X5       . A5 = 1-BACKUP TRACK THRESHOLD          TNE,U     A4,EBFTHR         . BYPASS FOR THIS REASON?          J         PX100             .  YES, SKIP          TE,U      A4,EBFTHRB        . BYPASS FOR < CRIT-BACKUP THRESHOLD?          LMJ       X1,ER900          .  NO, INTERNAL ERROR          LA,U      A0,EXMSG5         . 'EXP-C THRESHOLD = 'PX100          E$MSG                       . EDIT REASON FOR BYPASS          JZ        A5,PX200          . SKIP IF NO THRESHOLD TO PRINT          E$DECV    A5                . OTHERWISE, EDIT INTO OUTPUTPX200          J         0,X9              . RETURN/..      EXCARC IS CALLED ONCE FOR EVERY CATALOGED FILE IN THE SYSTEM.      TO DETERMINE IF IT SHOULD BE INCLUDED IN THE EXCEPTION LIST..      (THIS ROUTINE IS CALLED INSTEAD OF SELARC ONLY IF THE 'L' OPT IS USED)...         AT ENTRY, X4 = ADDR OF CLASS-ID TABLE ENTRY.                   X5 = ADDR OF FILE ENTRY FROM MFD DATA BASE.                   X6 = ADDR OF MATCHING FT ENTRY FROM ARCCTL$ (A11 > 0).                   X7 = ADDR OF MATCHING QT ENTRY FROM ARCCTL$ (A11 > 0).                   A10 = 'C' IF ARCHIVE BY CYCLE LIMIT EXCEEDED.                   A10 = 'R' IF ARCHIVE BY REFERENCE LIMIT EXCEEDED.                   A10 = 0 IF THIS FILE WOULD NOT HAVE BEEN ARCHIVED.                   A11 = 1 IF MATCHING Q*F FOUND IN ARCCTL$, 0 OTHERWISE.EXCARC          DS        A7,SAVA7          . SAVE REGISTERS A7,A8          DSL       A7,72             . INIT BYPASS (A7), FLAG (A8) BITS TO ZERO          JZ        A11,$+2           . SKIP LOAD OF FLAGS IF NO MATCH          LA        A8,LLFFLG,X6      . GET CONTROL FLAGS FOR MATCHING FILE ENT          LA        A0,MFINHI,X5      . FILE INHIBIT BITS          TEP,U     A0,MMGOPT         . G-OPTION FILE?          AA,U      A7,AEBYPG         .  YES, SET G-BYPASS          TEP,U     A8,ACFFVF         . IS ARCHIVE V-OPTION SET FOR FILE?          J         EA050             .  YES, SKIP          TEP,U     A0,MMVOPT         . V-OPTION FILE?          AA,U      A7,AEBYPV         .  YES, SET V-BYPASSEA050          JZ        A11,EA060         . SKIP IF NO MATCHING ENTRY          TNZ       LLFEXP,X6         . IS EXP PERIOD > 0 ?          J         EA060             .  NO, NO NEED TO CHECK W-ONLY, WAD          TEP,U     A0,MMWOLY         . WRITE ONLY FILE?          AA,U      A7,AEBYPO         .  YES, SET WRITE ONLY BYPASS          LA        A0,MFPCHR,X5      . FILE PCHAR FLAGS          TEP,U     A0,MMWAD          . WORD ADDRESSIBLE FILE?          AA,U      A7,AEBYPW         .  YES, SET WAD-BYPASSEA060          LA        A0,MFDISF,X5      . FILE DISABLE BITS          TOP,U     A0,MMDISA         . IS GENERAL DISABLE SET?          J         EA100             .  NO, SKIP          AND,U     A0,MMDISH++MMDISS++MMDISD . YES, MASK HDW/FAS/DATA DIS BITS          JZ        A1,EA100          . SKIP IF NONE OF THESE ARE SET          AA,U      A7,AEBYPD         .  OTHERWISE, SET DISABLE-BYPASSEA100          TOP,U     A8,ACFFBC         . IS BYPASS CURRENT CYCLE SET?          J         EA105             .  NO, SKIP          TNZ       R5                .  YES, IS THIS THE NEWEST CYCLE?          AA,U      A7,AEBYPC         .   YES, SET BCC BYPASS FLAGEA105          LA        A4,MFNOTR,X5      . FILE TRACK COUNT          LA,U      A5,AERSUR         . REASON #1 - UNREGISTERED          JNZ       A11,EA110         . SKIP IF MATCH FOUND IN ARCCTL$          TEP,U     A15,1*/('Z'-'U')  . NO MATCH, INCLUDE UNREG IN LISTING?          J         EA150             .  NO, CHECK FOR OTHER REASONS          J         EA200             .  YES, MARK UNREGISTERED AND LISTEA110          TZ        LLFILE,X6         . MASTER WILDCARD FILE ENTRY?          J         EA120             .  NO, SKIP          LA,U      A0,100            . NORMAL COMPARISON FOR MASTER W/C          TZ        LLQUAL,X7         . MASTER WILDCARD QUALIFIER ENTRY?          J         EA115             .  NO, NOT UNREGISTERED          TOP,U     A15,1*/('Z'-'U')  .  YES, INCLUDE UNREG IN LISTING?          J         EA200             .   YES, MARK UNREGISTERED AND LIST          LA,U      A0,500            . MASTER W/C COMPARISON, 'U' OPT SETEA115          LA,U      A5,AERSIW         . REASON #2 - IMPROPER WILDCARD          TG        A4,A0             . OVER ALLOWED LIMIT FOR MASTER W/C?          J         EA200             .  YES, INCLUDE FOR REASON 2          J         EA140             .  NO, NOT IMPROPER WILDCARDEA120          LA,S6     A0,LLFILE+1,X6    . LAST CHAR OF MATCHING FILE ENTRY          TE,U      A0,077            . IS IT WILDCARD CHAR?          J         EA140             .  NO, SKIP          LA,U      A5,AERSIW         .  YES, POSSIBLY IMPROPER WILDCARD          TG,U      A4,1000           . 1000 OR MORE TRACKS IN THIS FILE?          J         EA200             .  YES, INCLUDE FOR REASON 2EA140          JZ        A10,EA160         . SKIP IF FILE WOULD NOT HAVE BEEN ARCHEA150          LA,U      A5,AERSBP         . REASON #3 - ARCHIVE BYPASS          JNZ       A7,EA200          .  INCLUDE IF ANY BYPASS BIT IS SET          TEP,U     A8,ACFFBY         . IS ARCHIVE BYPASS SET IN FILE ENTRY?          J         EA200             .  YES, INCLUDE FOR REASON 3          JNZ       A11,EA180         .  NO, SKIP 4,5 IF FILE WILL BE ARCHIVEDEA160          LA        A0,MFNOTR,X5      . FILE TRACK COUNT          MSI       A0,A9             . TIMES DAYS SINCE REF = TRACK-DAYS          TZ        R5                . IS THIS THE MOST RECENT CYCLE?          J         EA170             .  NO, SKIP          LA,U      A5,AERST1         .  YES, LOAD REASON #4 - TK-DAYS > 5000          TG,U      A0,5000           . TEST FOR 5000 OR MORE TRACK-DAYS          J         EA200             .  IF SO, INCLUDE FOR REASON 4          J         EA180             .  IF NOT, CHECK FOR 6,7EA170          LA,U      A5,AERST2         . REASON #5 - TK-DAYS > 1000          TG,U      A0,1000           . TEST FOR 1000 OR MORE TRACK-DAYS          J         EA200             .  IF SO, INCLUDE FOR REASON 5EA180          JZ        A11,EA800         . FILE WON'T BE LISTED IF NO MATCH FOUND          TG,U      A4,1000           . DOES FILE HAVE UNDER 1000 TRACKS,          TEP,U     A8,ACFFBY         .  OR IS BYPASS SET FOR IT?          J         EA190             .  YES, SKIP          JNZ       A7,EA190          . SKIP ALSO IF BYPASS FOR OTHER REASON          LA        A0,LLFEXP,X6      . GET EXP PERIOD FROM FILE ENTRY          TLE,U     A0,100+1          . MORE THAN 100 DAYS?          J         EA190             .  NO, SKIP          LA,U      A5,AERSEX         . REASON #6 - LARGE FILE, EXP > 100          JNZ       A10,EA200         . INCL IN LIST IF FILE WILL BE ARCHIVED          LA        A0,LLFREF,X6      . REF LIMIT FROM FILE ENTRY          ANA       A0,A9             . SUBTRACT DSR, COMPUTE DAYS REMAINING          TLE,U     A0,7              . MORE THAN 7 DAYS BEFORE ARCHIVE?          J         EA200             .  NO, INCLUDE FOR REASON 6EA190          LA,U      A5,AERSLR         . REASON #7 - LIST REQUESTED          TOP,U     A8,ACFFLR         .  IS LIST REQ BIT SET IN FILE ENT FLAGS?          J         EA800             .  NO, DO NOT INCLUDE THIS FILE IN LIST..         INCLUDE THIS FILE IN THE EXCEPTION LIST.EA200          LA        A0,SELCNT         . ENTRY COUNT OF EXCEPTION LIST          TG,U      A0,M$ARCMAX       . MORE ROOM IN LIST?          J         EA900             .  NO, SKIP          AU,U      A0,1              .  YES, INCREMENT INTO A1          SA        A1,SELCNT         . SAVE NEW ENTRY COUNT          MSI,U     A0,AESIZE         . MULT BY REC SIZE TO GET REC OFFSET          LX,U      X8,ARBUFF,A0      . ADDRESS OF NEXT AVAIL EXCEPTION REC          SA        A5,AERESN,X8      . STORE EXCEPTION REASON          DL        A0,MFQUAL,X5      . QUALIFIER          DS        A0,AEQUAL,X8      .  STORE IN LIST          DL        A0,MFFILE,X5      . FILENAME          DS        A0,AEFILE,X8      .  STORE IN LIST          LA        A0,MFDRID,X5      . DIRECTORY-ID          SA        A0,AEDRID,X8      .  STORE IN LIST          LA        A0,MFCYCL,X5      . F-CYCLE          SA        A0,AECYCL,X8      .  STORE IN LIST          LA        A0,MFNOTR,X5      . FILE TRACK COUNT          SA        A0,AETKCT,X8      .          LA,U      A8,0              . INIT VALUE FOR AEFLGS          JZ        A11,EA220         . SKIP IF NO MATCHING ENT FOR FILE          LA,U      A8,AEFREG         . SET FLAG THAT MATCHING Q*F WAS FOUND          LA,U      A3,,X7            . ADDRESS OF QUALIFIER ENTRY          TZ        LLQUAL,X7         . IS THIS MASTER WILDCARD QUAL?          J         EA230             .  NO, USE THIS ENTRYEA220          LA        A3,FQLINK         . GET ADDR OF FIRST MATCHING QUAL ENTRY          JZ        A3,EA250          . SKIP IF NONE FOUNDEA230          LA        A1,LLQOWN,A3      . PTR TO OWNER ACCT FOR MATCHING QUAL ENT          JZ        A1,EA250          . SKIP IF NO ACCOUNT REGISTERED          DL        A4,,A1            . GET ACCOUNT NUMBER          DTE       A4,MFACCT,X5      . IS THIS SAME AS ACCOUNT OF FILE?          AA,U      A8,AEFACS         .  NO, SET SUBSTITUTION FLAG          J         EA260             . FIND MADE - DON'T SEARCH ACTLSTEA250          LA        A1,(2,ACTLST-2)   . SET UP TO SEARCH ACTLST FOR ACCOUNT          DL        A4,MFACCT,X5      . LOAD ACCOUNT NUMBER OF FILE FROM MFD          LR        R1,ACTCNT         . COUNT OF ACTLSTEA255          SE        A4,2,*A1          . SEARCH FOR MATCH ON FIRST WORD OF ACCT          J         EA280             .  NO FIND - USE GROUP ZERO          TE        A5,1,A1           . CHECK 2ND WORD FOR MATCH          J         EA255             .  NO FIND - CONTINUE SEARCHEA260          AA,U      A8,AEFACM         . SET FLAG THAT ACCOUNT USED FROM ACTLST          SA        A1,AEACPT,X8      . STORE ACTLST POINTER IN EXC RECORD          ANA,U     A1,ACTLST         . MAKE RELATIVE          SSL       A1,1              . DIVIDE BY ENTRY COUNT          LA,H1     A0,ACTPTR,A1      . GET GROUP NUMBER OF THIS ACCOUNT          SA        A0,AEACGR,X8      . STORE GROUP NUMBER IN EXC RECORD          J         EA300             .EA280          DS        A4,AEACCT,X8      . NO FIND - STORE MFD ACCT FOR LATER USEEA300          LA        A0,MFTYPE,X5      . TYPE OF FILE          TEP,U     A0,MMREMD         . IS THIS R-DISC?          AA,U      A8,AEFREM         .  YES, SET R-DISC BIT          LA        A0,MFDESC,X5      . DESCRIPTOR BITS          TEP,U     A0,MMUNLD         . IS THIS FILE UNLOADED?          AA,U      A8,AEFUNL         .  YES, SET UNLOAD BIT          SA        A8,AEFLGS,X8      . STORE FLAGS IN EXC LIST          SA        A7,AEBYPF,X8      . STORE BYPASS FLAGS          TG,U      A9,010000         . IS DAYS SINCE REF > 07777?          LA,U      A9,07777          .  IF SO, ADJ TO FIT INTO THIRD WORD          SA        A9,AEEXRD,X8      . SAVE IN BOTTOM THIRD OF AEEXRD          LA        A0,MFRCN,X5       .          SA        A0,AERCN,X8       . STORE RELATIVE CYC NUMBER          SX        X4,AEPTRC,X8      . STORE POINTER TO CLASS-ID RECORD          JZ        A11,EA800         . ALL DONE IF NO MATCHING Q*F WAS FOUND          LA        A0,LLFFLG,X6      .  OTHERWISE LOAD FLAGS FROM FILE ENTRY          LA        A1,LLFCYC,X6      .   AND CYCLE LIMIT          SA        A0,AEFFLG,X8      . STORE IN EXC LIST          SA        A1,AECYLM,X8      .          LA        A0,LLFEXP,X6      . LOAD EXPIRATION PERIOD          LA        A1,LLFREF,X6      .  AND REF LIMIT          LSSL      A1,24             .          LDSL      A0,24             . SHIFT TO A0 (T1,T2)          AA        A0,AEEXRD,X8      . MERGE WITH AEEXRD,T3 (DAYS SINCE REF)          SA        A0,AEEXRD,X8      . STORE FINAL VALUE OF AEEXRD          DL        A0,LLQUAL,X7      . MATCHING QUALIFIER FROM ACF          LMJ       X11,CHKWCC        . FIGURE OUT HOW MANY TRAILING W/C'S          SA        A3,AEQWCC,X8      . STORE FOR LATER FORMATTED OUTPUT          DL        A0,LLFILE,X6      . MATCHING FILENAME FROM ACF          LMJ       X11,CHKWCC        . FIGURE OUT HOW MANY TRAILING W/C'S          SA        A3,AEFWCC,X8      . STORE FOR LATER FORMATTED OUTPUTEA800          DL        A7,SAVA7          . RESTORE A7,A8          J         1,X10             . RETURN NORMALEA900          J         0,X10             . RETURN ERROR (TABLE OVERFLOW)/.        PRTEXC IS CALLED AT TERMINATION (ONLY IF THE 'L' OPTION IS USED).         TO SORT AND PRINT THE EXCEPTION LIST..PRTEXC          LR        R4,SELCNT         . ENTRY COUNT OF EXCEPTION LIST          JGD       R4,PE100          . DECR FOR LOOP AND SKIP          J         PE820             . EXIT IF NOTHING TO PRINTPE100          LX        X4,(AESIZE,ARBUFF-AESIZE) . POINTER TO EXCEPTION LIST          SZ        SRTPTR            . CLEAR SORT POINTER          SZ        SRTCNT            .  AND COUNT..         SORT EXCEPTION RECORDS BY THE FOLLOWING CRITERIA:..         (1) ACCOUNT GROUP NUMBER.         (2) REASON FOR INCLUSION IN LIST.         (3) ACCOUNT NUMBER.PE120          LA,U      A0,LINE           . ADDR OF TEMP REC TO REL TO SORT          LA        A4,AESIZE+AEFLGS,*X4 . FLAGS FROM NEXT EXCEPTION REC TO REL          LA,U      A1,0              . DEFAULT GROUP = 0          LA,U      A2,AEACCT,X4      . ADDRESS OF ACCOUNT NUM IN EXCEPTION REC          TOP,U     A4,AEFACM         . IS MATCHING ACCOUNT IN ACTLST?          J         PE130             .  NO, SKIP          LA        A1,AEACGR,X4      .  YES, LOAD GROUP FROM EXCEPTION REC          LA        A2,AEACPT,X4      .   AND POINTER TO ACCT NUMBER IN ACTLSTPE130          LSSL      A1,18             . SHIFT GROUP TO A1 UPPER          LXM       A1,AERESN,X4      . LOAD EXCEPTION REASON INTO A1 LOWER          SA        A1,,A0            . STORE AS FIRST SORT PARAMETER          DL        A4,,A2            . LOAD ACCOUNT NBR FROM EX REC OR ACTLST          DS        A4,1,A0           . STORE AS NEXT SORT PARAMETER          SX        X4,3,A0           . STORE ADDRESS OF EXCEPTION RECORD          LMJ       X11,SRTREL        . RELEASE TO SORT          LMJ       X1,ER900          . ERROR IN SORT RELEASE - ABORT          JGD       R4,PE120          . LOOP BACK FOR OTHER EXCEPTION RECORDS          LMJ       X11,SRTRTN        . SORT TEMP (POINTER) RECORDS..         PRINT THE EXCEPTION LIST HERE.PE200          LMJ       X11,SRTRET        . GET THE NEXT POINTER REC IN SORT ORDER          J         PE800             . ALL DONE - EXIT          LX,U      X4,,A0            . ADDRESS OF POINTER RECORD          LA,H1     A4,,X4            . GET GROUP NUMBER          TNE       A4,CURGRP         . SAME AS CURRENT GROUP?          J         PE220             .  YES, SKIP          SA        A4,CURGRP         .  NO, SAVE NEW GROUP NUMBER          DSL       A10,72            .   AND INIT LINE AND PAGE COUNTERSPE220          JGD       A10,PE250         . LOOP AHEAD IF MORE LINES ON THIS PAGE          AA,U      A11,1             .  OTHERWISE, INCR PAGE COUNTER          E$CLEAR                     . CLEAR EDIT          E$SKIP    6                 .          LA        A1,(1,0)          . INDEX FOR SEARCHING ACTPTR          LR        R1,ACTCNT         . COUNT OF ENTRIES IN ACTPTR TABLE          SE,H1     A4,ACTPTR,*A1     . SEARCH FOR MATCHING GROUP NUMBER          LMJ       X1,ER900          . MUST FIND, IF NOT INTERNAL ERR, ABORT          LA,H2     A0,ACTPTR-1,A1    . POINTER TO OWNER NAME DATA          LA,S1     A1,,A0            . WORD COUNT OF OWNER NAME DATA          MSI,U     A1,6              . COMPUTE CHARACTER COUNT (FIELDATA)          E$COPY                      . COPY DATA TO HEADING BUFFER          LA,U      A0,'*'            .          SA,S1     A0,LINE+1         . PUT ASTERISK BEFORE OWNER NAME          E$COL     66-$SL(M$SITENM)/2 .          E$MSG     HDG3MSG           . FIRST LINE OF HEADING          E$COL     108               .          E$MSGR                      .          E$DAY5    HDRBUF+MFTDAT     . DATE FROM MFD DATA BASE          E$MSGR                      .          E$DECF    4,A11             . PAGE NUMBER          P$RINT    (0777700+22,LINE) . PRINT 1ST LINE OF HEADING          E$CLEAR                     . CLEAR EDIT          E$MSG     HDG4MSG           . 'ARCHIVE EXCEPTION REPORT'          E$SKIP    5                 . SKIP OVER A LITTLE          E$COPY    12,SITCOD         . EDIT USER-SUPPLIED SYSTEM ID          P$RINT    (0100+22,LINE)    . PRINT 2ND LINE OF HEADING          P$RINT    (0200+H5L,HDG5)   . PRINT 3RD LINE OF HEADING          P$RINT    (0100+H6L,HDG6)   . PRINT 4TH LINE OF HEADING          P$RINT    (0100+H6L,DASHES) . PUT DASHES UNDER LAST HDG LINE          P$RINT    (0100,$)          .  AND SKIP ONE LINE          LA,U      A10,M$LPP-8       . INIT REM LINE COUNTPE250          LX        X8,3,X4           . ADDRESS OF EXCEPTION RECORD          E$CLEAR                     . CLEAR EDIT          LA        A0,AERESN,X8      . REASON FOR THIS EXCEPTION LIST ENTRY          ANA,U     A0,1              . MAKE 0-RELATIVE          LSSL      A0,1              . MULT BY 2          E$COPY    12,RSNLST,A0      . COPY LITERAL REASON FOR ENTRY          E$SKIP    2                 .          ON        M$MHFSHARED>0     . THIS CODE FOR SHARED-HF ONLY          TNZ       HDRBUF+MFHDID     . IS INPUT EXTRACT SHARED OR BOTH?          J         PE260             .  NO, SKIP          LA        A0,HDRBUF+MFHHID  .  YES, GET HOST-ID          AA,U      A0,'A'-1          . FORM LETTER, A-D          TZ        AEDRID,X8         . IS THIS FILE FROM SHARED DIRECTORY?          LA,U      A0,'S'            .  YES, INDICATE BY LETTER 'S'          E$CHAR                      . EDIT DIRECTORY/HOST ID          E$CHAR    ' '               . SKIP OVER A SPACEPE260          OFF       M$MHFSHARED>0     . END OF SHARED-ONLY CODE          E$FD2     AEQUAL,X8         . EDIT QUALIFIER          E$CHAR    '*'               .          E$FD2     AEFILE,X8         . EDIT FILENAME          E$CHAR    '('               .          E$DECV    AECYCL,X8         . EDIT ABS F-CYCLE          E$CHAR    ')'               .          E$COL     43                .          E$DECF    6,AETKCT,X8       . TRACK COUNT          LA        A8,AEFLGS,X8      . MISC FLAGS FROM EXCEPTION RECORD          LA,U      A0,'R'            . R-DISC INDICATOR LETTER          TEP,U     A8,AEFREM         . IS FILE ON R-DISC?          E$CHAR                      .  YES, INDICATE IN LISTING          LA,U      A0,'U'            . UNLOADED INDICATOR LETTER          TEP,U     A8,AEFUNL         . IS FILE UNLOADED?          E$CHAR                      .  YES, INDICATE IN LISTING          E$COL     51                . MOVE OVER A LITTLE          LA        A0,AEEXRD,X8      . GET EXPIR/REF LIM/DAYS SINCE REF          LSSL      A0,24             .          SSL       A0,24             . ISOLATE T3 (DAYS SINCE REF)          E$DECF    4                 . EDIT INTO IMAGE          LA,U      A0,1              .          ANA       A0,AERCN,X8       . COMPUTE REL CYCLE NUMBER          TNE,U     A0,0              .          LNA,U     A0,0              . IF ZERO, MAKE -0 FOR DISPLAY          E$DECF    5                 . EDIT INTO IMAGE          E$COL     62                .          LA        A7,AEBYPF,X8      . BYPASS FLAGS, DETERMINED BY FILE/MFD          LA,U      A9,0              . DEFAULT FILE ENT FLAGS = 0          TEP,U     A8,AEFREG         . WAS MATCHING Q*F FOUND?          LA        A9,AEFFLG,X8      .  IF SO, LOAD FILE ENTRY FLAGS          LA,U      A0,' '            . DEFAULT = BLANK CHAR          TEP,U     A7,AEBYPC         . BYPASS CURRENT CYCLE?          LA,U      A0,'C'            .  IF SO, DISPLAY 'C' TO INDICATE          TEP,U     A9,ACFFBY         . IS THIS FILE SET FOR ARCHIVE BYPASS?          LA,U      A0,'B'            .  IF SO, DISPLAY 'B' (OVERRIDES 'C')          E$CHAR                      . EDIT APPROPRIATE CHAR INTO IMAGE          LA,U      A0,'G'            . EDIT MATCHING CHARS INTO IMAGE          TEP,U     A7,AEBYPG         .          E$CHAR                      . G-OPTION          LA,U      A0,'V'            .          TEP,U     A7,AEBYPV         .          E$CHAR                      . V-OPTION          LA,U      A0,'O'            .          TEP,U     A7,AEBYPO         .          E$CHAR                      . WRITE ONLY          LA,U      A0,'W'            .          TEP,U     A7,AEBYPW         .          E$CHAR                      . WORD ADDRESSIBLE          LA,U      A0,'D'            .          TEP,U     A7,AEBYPD         .          E$CHAR                      . HARDWARE/FAS/DATA DISABLE          E$COL     67                .          LA,U      A0,' '            .          TEP,U     A8,AEFACS         . WAS ACCOUNT NUMBER SUB BY QUAL OWNER?          LA,U      A0,'*'            .  YES, INDICATE IN OUTPUT          E$CHAR                      . EDIT CHAR INTO IMAGE          E$COPY    12,1,X4           . ACCOUNT NUMBER USED FOR CLASSIFICATION          E$SKIP    2                 .          LA        A0,AEPTRC,X8      . POINTER TO MATCHING CLASS-ID REC          LA        A0,CTCLAS,A0      . MATCHING CLASS-ID (FIELDATA)          LMJ       X9,RJCLASS        . RIGHT-JUSTIFY AND EDIT INTO OUTPUT          TEP,U     A8,AEFREG         . WAS MATCHING Q*F FOUND IN ARCCTL$?          J         PE300             .  YES, SKIP          E$COPY    6,('(NONE)')      .  NO, INDICATE IN OUTPUT          J         PE400             .   ALL DONE IF NO MATCHPE300          DL        A0,AEQUAL,X8      . QUALIFIER          LA        A4,AEQWCC,X8      . MATCHING ENTRY WILDCARD COUNT          LMJ       X9,FMTMAT         . FORMAT AND EDIT INTO OUTPUT          E$CHAR    '*'               .          DL        A0,AEFILE,X8      . FILENAME          LA        A4,AEFWCC,X8      . MATCHING ENTRY WILDCARD COUNT          LMJ       X9,FMTMAT         . FORMAT AND EDIT INTO OUTPUT          E$COL     117               .          LA        A4,AEEXRD,X8      . EXP PERIOD / REF LIMIT / DAYS SINCE REF          DSL       A4,24             . A4 LOWER = EXP PERIOD          SSL       A5,24             . A5 LOWER = REF LIMIT          E$DECF    4,A5              . EDIT REF LIMIT INTO IMAGE          E$DECF    4,AECYLM,X8       .  AND CYCLE LIMIT          LA,U      A0,' '            .          TOP,U     A9,ACFFAC         . IS <DCY> FLAG SET FOR FILE?          LA,U      A0,'D'            .  IF SO , INDICATE IN OUTPUT          E$CHAR                      .          E$DECF    5,A4              . EDIT EXP PERIOD INTO IMAGEPE400          P$RINT    (0126,LINE)       . PRINT IMAGE          J         PE200             . BACK FOR NEXT EXCEPTION RECORDPE800          P$RINT    (0777700,$)       . SKIP TO NEW PAGE AT END OF REPORTPE820          J         0,X10             . RETURN/..         GET A BUFFER FOR THE NEXT LINKED LIST ENTRY..         ENT: A3 = CURRENT BUFFER..         EXIT: A3 = NEW BUFFER ADDRESS.GETBUF          LA        A1,LLHEAD         . LINKED LIST HEAD ADDRESS          JNZ       A1,GB120          . SKIP IF BUFFER(S) IN OPEN POOL          LA        A1,LLNXTA         .  IF NOT, LOAD NEXT AVAIL ADDRESS          AU,U      A1,LLESIZ         . A2 = NEW AVAIL ADDRESS          TLE,U     A2,LLBUFF+LLBSIZ  . TEST FOR BUFFER OVERFLOW          J         GB100             .  IF NOT, SKIP          P$RINT    ERRPRT(1)         .  IF SO, PRINT ERROR MESSAGE          LMJ       X1,ER900          .   AND ABORTGB100          SA        A2,LLNXTA         . SAVE NEW AVAIL ADDRESS          J         GB200             .GB120          LA        A2,LLPTRF,A1      . ADDRESS OF NEXT OPEN BUFFER          SA        A2,LLHEAD         . SAVE IN LIST HEADGB200          SA        A3,LLPTRB,A1      . SAVE BACK PTR TO CURR BUFF IN NEW BUFF          JZ        A3,GB220          . SKIP IF NO CURRENT BUFFER          SA        A1,LLPTRF,A3      . SAVE FWD PTR TO NEW BUFF IN CURR BUFFGB220          SZ        LLPTRF,A1         . ZERO FWD POINTER IN NEW BUFFER          LA,U      A3,,A1            . NEW BUFF IS NOW CURRENT BUFFER          J         0,X11             . RETURN...         RELEASE A BUFFER..         ENT: A3 = BUFFER ADDRESS..         EXIT: A3 = NEXT BUFFER ADDRESS IN CHAIN OR ZERO.RELBUF          LA        A1,LLPTRF,A3      . GET FWD POINTER FROM CURR BUFF          LA        A2,LLHEAD         . POINTER TO NEXT FREE BUFFER          SA        A2,LLPTRF,A3      . SAVE NEXT FREE ADDR IN BUFF TO BE REL          SA        A3,LLHEAD         . SAVE ADDR OF THIS BUFF AS NEXT FREE ADR          LA        A2,LLPTRB,A3      . BACK POINTER FROM THIS BUFFER          JZ        A2,$+2            . SKIP IF ZERO          SA        A1,LLPTRF,A2      .  IF NOT, STORE FWD POINTER IN PREV BUFF          JZ        A1,$+2            . SKIP IF FWD POINTER IN CURR BUFF = 0          SA        A2,LLPTRB,A1      .  IF NOT, STORE BACK POINTER IN NXT BUFF          LA,U      A3,,A1            . ADDRESS OF NEW CURRENT BUFFER          J         0,X11             . RETURN/..         COMPARE A QUAL OR FILENAME WITH ONE FROM THE ACF WHICH MAY.         BE WILDCARDED..         ENT: A0,A1 = ACF QUAL/FILE ENTRY.              A4,A5 = QUAL/FILE ENTRY FROM THE MFD..         RETURNS 0,X11 NO MATCH.                       A6 = POSITIVE, CONTINUE SEARCH.                       A6 = ZERO, RELEASE THIS ENTRY, IT IS NO LONGER NEEDED.                 1,X11 MATCH.COMPARE          DS        A4,SAVA4          . SAVE A4,A5          LDSC      A0,6              . SHIFT ACF ENTRY ONE CHAR LEFT          LDSC      A4,6              . SHIFT MFD ENTRY ONE CHAR LEFT          AND,U     A1,077            . A2 = FIRST CHAR FROM ACF          AND,U     A5,077            . A6 = FIRST CHAR FROM MFD          TLE       A6,A2             . IS MFD CHAR < ACF CHAR?          J         CP900             .  YES, RET NO FIND, STOP SEARCH          TE        A6,A2             . IS MFD CHAR = ACF CHAR?          J         CP940             .  NO, RET NO FIND, RELEASE, CONTINUE          LR,U      R1,11-1           .  YES, SET UP LOOP FOR OTHER 11 CHARSCP100          LDSC      A0,6              . SHIFT ACF ENTRY ONE CHAR LEFT          LDSC      A4,6              . SHIFT MFD ENTRY ONE CHAR LEFT          AND,U     A1,077            . A2 = NEXT CHAR FROM ACF          AND,U     A5,077            . A6 = NEXT CHAR FROM MFD          TE        A6,A2             . DOES MFD CHAR = ACF CHAR?          J         CP120             .  NO, SKIP          TE,U      A6,' '            .  YES, ARE BOTH CHARS SPACES?          JGD       R1,CP100          .   NO, LOOP BACK FOR MORE CHARS          J         CP800             .   YES OR END OF LOOP, RET FINDCP120          TNE,U     A2,077            . IS ACF CHAR = WILDCARD?          J         CP800             .  YES, RETURN FIND          TLE       A6,A2             .  NO, IS MFD CHAR < ACF CHAR?          J         CP920             .   YES, RET NO FIND, NO REL, CONTINUE          J         CP940             .   NO, RET NO FIND, RELEASE, CONTINUECP800          DL        A4,SAVA4          . RESTORE A4,A5          J         1,X11             . RETURN FIND STATUSCP900          LNA,U     A6,1              . STOP SEARCH FLAG          J         CP990             .CP920          LA,U      A6,1              . CONTINUE SEARCH FLAG          J         CP990             .CP940          LA,U      A6,0              . CONTINUE/RELEASE FLAGCP990          DL        A4,SAVA4          . RESTORE A4,A5          J         0,X11             . RETURN NO FIND STATUS/..         CHECK A QUALIFIER, FILENAME FOR LEGALITY..          INPUT: A0,A1 = NAME (LJSF FIELDATA)..          RETURNS 0,X11 (ILLEGAL), 1,X11 (LEGAL).CHKVAL          LDSC      A0,6              . SHIFT LEFT CIRCULAR          AND,U     A1,077            . AND OFF LEFTMOST CHARACTER          TNZ       CHAROK,A2         . IS THIS CHARACTER ALLOWED?          J         CV900             .  NO, RETURN ILLEGAL          LA,U      A3,10             .  LOOP THRU 11 MORE CHARACTERSCV100          LDSC      A0,6              .          AND,U     A1,077            . AND OFF NEXT LEFTMOST CHARACTER          TNZ       CHAROK,A2         . IS IT LEGAL?          J         CV300             .   NO, CHECK FOR SPACE          JGD       A3,CV100          .   YES, LOOP BACK FOR MORE          J         CV800             . ALL DONE - RETURN LEGALCV200          LDSC      A0,6              .          AND,U     A1,077            . AND OFF LEFTMOST CHAR.CV300          TE,U      A2,' '            . MUST BE A SPACE          J         CV900             .   IF NOT, ILLEGAL          JGD       A3,CV200          .   IF SO, CONTINUE FOR RESTCV800          J         1,X11             . LEGAL RETURNCV900          J         0,X11             . ILLEGAL RETURN...         DETERMINE WILDCARD COUNT OF MATCHING QUALIFIER / FILE.CHKWCC          LA,U      A3,12             . INIT COUNT = 12          LR,U      R1,11             . LOOP COUNTCW100          LDSC      A0,6              . SHIFT NEXT CHAR INTO POSITION          AND,U     A1,077            . PLACE CHAR IN A2          TNE,U     A2,077            . IS CHARACTER A WILDCARD?          J         CW200             .  YES, EXIT, A3 = COUNT          ANA,U     A3,1              . NO, DECREMENT COUNT          JGD       R1,CW100          . BACK FOR NEXTCW200          J         0,X11             . RETURN/..         RIGHT-JUSTIFY A CLASS-ID AND EDIT INTO OUTPUT IMAGE.RJCLASS          LA        A1,('T     ')     . ASSUME DEFAULT CLASS: 2ND WORD = 'T'          TNE       A0,('DEFAUL')     . IS THIS DEFAULT?          J         RJ200             .  YES, SKIP          SA        A0,IMAGE+2        . SAVE INPUT CLASS-ID          LA,U      A2,6              .  NO, SHIFT AT LEAST 1 CHAR RIGHT          LR,U      R1,4              . CHECK UP TO 5 CHARS FOR SPACESRJ100          AND,U     A0,077            . A1 = NEXT CHAR TO TEST          TE,U      A1,' '            . IS IT A SPACE?          J         RJ120             .  NO, FINISHED          SSL       A0,6              .  YES, SHIFT NEXT CHAR TO POSITION          AA,U      A2,6              .   INCREMENT SHIFT COUNT          JGD       R1,RJ100          . BACK FOR NEXT CHARRJ120          LA        A0,IMAGE+2        . RESTORE CLASS-ID          LA        A1,('      ')     . SHIFT SPACES IN FROM THE LEFT          DSC       A0,,A2            . RIGHT-JUSTIFY IN A 7-CHAR FIELDRJ200          DS        A0,IMAGE          . STORE FOR EDIT COPY          E$COPY    7,IMAGE           . EDIT CLASS-ID INTO OUTPUT          E$CHAR    '>'               . APPEND '>'          E$CHAR    ' '               . AND A SPACE          J         0,X9              . RETURN..         FORMAT AND EDIT A MATCHING QUAL/FILE.           A0,A1 = ORIGINAL NAME, A4 = WILDCARD COUNT.FMTMAT          JNZ       A4,FM100          . SKIP IF ANY WILDCARDS IN MATCHING ENT          E$FD2                       .  IF NOT, SIMPLY EDIT WHAT WE HAVE          J         FM300             .   AND RETURNFM100          DS        A0,IMAGE          . STORE QUAL OR FILE NAME          LA,U      A1,12             .          ANA       A1,A4             . A1 = IDENTICAL CHAR COUNT          JZ        A1,FM200          . SKIP IF ZERO          LA,U      A0,IMAGE          .          E$COPY                      . IF NOT, COPY THIS MANY TO OUTPUTFM200          LA,U      A0,('############') . WHERE TO GET THE REST          LA        A1,A4             . WILDCARD COUNT          E$COPY                      . APPEND APPROPRIATE AMOUNTFM300          J         0,X9              . RETURN/..         SORT ROUTINES...         SRTREL - RELEASE RECORD TO SORT..         ENT: A0 = RECORD ADDRESS..         RETURNS: 0,X11 IF SORT TABLE OVERFLOW.                  1,X11 NORMAL.SRTREL          TZ        SRTCNT            . SORT COUNT SHOULD = 0 WHILE RELEASING          ER        ERR$              .  IF NOT, ABORT - SOMETHING VERY WRONG          LA        A1,SRTPTR         . POINTER TO NEXT SORT RECORD          AU,U      A1,SRSIZE         . A2 = PIONTER TO NEXT AFTER THIS REL          TG,U      A2,MAXSRT*SRSIZE+1 . TEST FOR SORT TABLE OVERFLOW          J         SRL90             .  SKIP IF OVERFLOW          SA        A2,SRTPTR         .  IF NOT, SAVE NEW POINTER          LXI,U     A0,1              . INCREMENT FOR BLOCK TRANSFER          AH        A1,(1,SRTTBL)     . ABS ADDR OF SORT REC IN A1          LR,U      R1,SRSIZE         . SIZE OF SORT REC          BT        A1,,*A0           . TRANSFER RECORD TO SORT TABLE          J         1,X11             . RETURN GOOD STATUSSRL90          P$RINT    ERRPRT(5)         . 'SORT TABLE OVERFLOW, INCR <MAXSRT>'          J         0,X11             . RETURN ERROR STATUS...         SRTRTN - SORT ALL RECORDS (ASCENDING).         THIS IS A SIMPLE BUBBLE-UP SEARCH, COMPARISON IS BY THE.         ABSOLUTE VALUE OF THE FIRST TWO WORDS IN EACH RECORD...         RETURNS: 0,X11 ALWAYS.SRTRTN          LA        A0,SRTPTR         . POINTER TO NEXT SORT REC          DSL       A0,36             . PREPARE FOR DIVIDE          DI,U      A0,SRSIZE         . DIVIDE BY REC SIZE = REC COUNT          SA        A0,SRTCNT         . STORE COUNT          ANA,U     A0,1              . DECR FOR LOOP          LR        R3,A0             . OUTER LOOP COUNTSR100          JGD       R3,$+2            . DECR OUTER LOOP BY ONE EACH PASS          J         SR800             . EXIT WHEN FINISHED          LR        R2,R3             . INIT INNER LOOP COUNT TO OUTER LOOP CT          LA        A0,(SRSIZE,SRTTBL-SRSIZE) . INIT SORT TBL PTR FOR THIS PASS          LA,U      A1,0              . CLEAR EXCHANGE FLAGSR200          DL        A4,SRSIZE,*A0     . GET COMPARISON DATA FROM FIRST RECORD          JP        A4,SR250          . SKIP IF POSITIVE          TN        SRSIZE,A0         .  IF NOT, IS SECOND RECORD NEG?          J         SR400             .   NO, EXCHANGE RECORDS          J         SR300             .   YES, TREAT AS BOTH POSITIVESR250          TP        SRSIZE,A0         . FIRST REC POS, IS SECOND POS?          J         SR500             .  NO, RECS ARE IN CORRECT ORDERSR300          DAN       A4,SRSIZE,A0      . SUBTRACT 2ND VALUE FROM 1ST          JN        A4,SR500          . IF RESULT IS NEG, RECS ARE IN ORDER          DJZ       A4,SR500          . DO NOT EXCH IF RECS ARE EQUAL, EITHERSR400          LA,U      A1,,A0            . ADDRESS OF 1ST RECORD          LXI,U     A1,1              . INCREMENT, EXCHANGE ONE WORD AT A TIME          LR,U      R1,SRSIZE-1       . LOOP COUNT - 1SR450          LA        A4,,A1            . PICKUP NEXT WORD FROM 1ST REC          LA        A5,SRSIZE,A1      .  AND NEXT FROM 2ND REC          SA        A5,,A1            . EXCHANGE WORDS          SA        A4,SRSIZE,*A1     .   AND INCREMENT POINTER          JGD       R1,SR450          . LOOP FOR REST OF DATASR500          JGD       R2,SR200          . LOOP FOR NEXT COMPARISON          JNZ       A1,SR100          . BACK TO START IF AN EXCHANGE WAS MADESR800          LA,U      A0,SRTTBL-SRSIZE  . INIT ADDRESS FOR SRTRET ROUTINE          SA        A0,SRTPTR         .          J         0,X11             . RETURN TO CALLER...         SRTRET - RETURN A RECORD..         EXIT: A0 = NEXT RECORD ADDRESS..         RETURNS: 0,X11 NO MORE RECORDS.                  1,X11 NORMAL.SRTRET          LR        R1,SRTCNT         . REMAINING COUNT OF SORTED RECORDS          JGD       R1,$+2            . DECR AND SKIP          J         SRT90             . SKIP IF NO MORE RECS TO RETURN          SR        R1,SRTCNT         . STORE REMAINING COUNT          LA        A0,SRTPTR         . LOAD PREV POINTER          AA,U      A0,SRSIZE         . ADD REC SIZE = POINTER TO NEXT REC          SA        A0,SRTPTR         . STORE POINTER          J         1,X11             . RETURN GOOD STATUSSRT90          SZ        SRTPTR            . ZERO POINTER          SZ        SRTCNT            .  AND COUNT          J         0,X11             . RETURN NO MORE RECORDS IN TABLE/..         OPEN THE ARCHIVE CONTROL FILE..         RETURNS 0,X10 ERROR.                 1,X10 NORMAL.ACFOPN          LX,U      X8,ACHBUFF        . ADDRESS OF ACF HEADER BUFFER          LA        A0,(R$,0,0)       . SETUP PACKET TO READ HEADER          LA        A1,(ACHDSZ,ACHBUFF) .          DS        A0,ACFPKT+3       .          SZ        ACFPKT+5          . HEADER BEGINS AT SECTOR ZERO          I$OW      ACFPKT            . READ HEADER          LMJ       X9,STATUS         . CHECK STATUS          J         AF900             .  I/O ERROR          LA        A0,ACHDLB,X8      .  GOOD STATUS - GET LABEL FROM HEADER          LA        A1,ACHDLV,X8      . SOFTWARE REV LEVEL          TNE       A0,('*ACFL*')     . IS THIS A NORMAL LABEL,          TE,U      A1,ACLEVL         .  AND IS SOFTWARE LEVEL CORRECT?          J         $+2               .   NO, ERROR          J         AF120             .   YES, CONTINUE          P$RINT    ERRPRT(3)         . 'BAD HEADER OR WRONG S/W LEVEL'          J         AF900             .    AND RETURN ERROR STATUSAF120          J         1,X10             . RETURN NORMAL STATUSAF900          J         0,X11             . RETURN ERROR STATUS...         EDIT THE FILENAME OF THE CURRENT OUTPUT TAPE INTO AN OUTPUT IMAGE.EDARTP          ON        $SL(M$CFBQUAL)>0  . TURN ON IF CRIT-BACKUP QUAL CONFIGURED          JZ        A4,ET100          . SKIP IF THIS IS NOT CRIT-BACKUP DO $SL(M$CFBQUAL)<7 , E$FD1 ($CFS(M$CFBQUAL))  . EDIT QUAL (6 OR FEWER CHARS) DO $SL(M$CFBQUAL)>6 , E$FD2 ($CFS(M$CFBQUAL))  . EDIT QUAL (7 OR MORE CHARS)          E$CHAR    '*'               . SEPARATE QUAL FROM FILENAMEET100          OFF       $SL(M$CFBQUAL)>0  .          ON        $SL(M$CFBFILE)>0  . TURN ON IF CRIT-BACKUP FILE CONFIGURED          JZ        A4,ET200          . SKIP IF THIS IS NOT CRIT-BACKUP DO $SL(M$CFBFILE)<7 , E$FD1 ($CFS(M$CFBFILE))  . EDIT FILE (6 OR FEWER CHARS) DO $SL(M$CFBFILE)>6 , E$FD2 ($CFS(M$CFBFILE))  . EDIT FILE (7 OR MORE CHARS)          J         ET250             . ALL DONE WITH Q*FET200          OFF       $SL(M$CFBFILE)>0  .          E$FD2     ('OBACKUP')       . THIS IS DEFAULT, AND NON-CRIT FILENAMEET250          J         0,X10             . RETURN/..         READ AN ACF BUFFER INTO MEMORY..         ENT: A2 = MASS STORAGE ADDRESS..         EXIT: A0 = MEMORY ADDRESS.               A2 = MASS STORAGE ADDRESS..         RETURNS 0,X10 ERROR.                 1,X10 NORMAL.RDBUFF          LA        A0,(R$,0,0)       . SETUP PACKET TO READ          LA,U      A1,ACFBUF         .  INTO ACFBUF          LXI,U     A1,ACBFSZ         .  WORD COUNT = ACBFSZ          DS        A0,ACFPKT+3       .          SA        A2,ACFPKT+5       . STORE M.S. ADDRESS IN PACKET          I$OW      ACFPKT            . READ BUFFER          LMJ       X9,STATUS         . CHECK STATUS          J         0,X10             .  I/O ERROR - RET ERR STATUS          LA,U      A0,ACFBUF         . LOAD ADDR OF BUFFER          J         1,X10             . RETURN NORMAL STATUS..         I/O STATUS CHECK ROUTINE.STATUS          TNZ,S1    3,A0              . TEST STATUS IN I/O PACKET          J         1,X9              . RETURN NORMAL IF STATUS = ZERO          SX        X4,SAVX4          .  OTHERWISE, SAVE X4          SX        X11,SAVX11        .   AND X11          LX,U      X4,,A0            . ADDRESS OF PACKET IN X4          LXI,U     X4,1              . INCREMENT FOR DUMP          P$RINT    ERRPRT(2)         . 'BAD STATUS - DUMP FOLLOWS:'          E$CLEAR                     . CLEAR EDIT          LA,U      A4,5              . LOOP FOR 6 WORDSST100          E$OCTF    12,,*X4           . EDIT NEXT WORD INTO OUTPUT          E$SKIP    1                 .          JGD       A4,ST100          . LOOP FOR REST OF PACKET          P$RINT    (0116,LINE)       . PRINT PACKET DUMP          LX        X4,SAVX4          . RESTORE X4          LX        X11,SAVX11        .  AND X11          J         0,X9              . RETURN ERROR STATUS/.ERR(1)    'LINK BUFFER OVERFLOW, INCREASE <LLBSIZ>'ERR(2)    'BAD I/O STATUS - PACKET DUMP FOLLOWS:'ERR(3)    'ARCHIVE CONTROL FILE HAS BAD HEADER, OR WRONG SOFTWARE LEVEL'ERR(4)    'INTERNAL BUFFER LINK AMBIGUITY - NOTIFY SYSTEMS'ERR(5)    'TOO MANY ITEMS TO SORT, INCREASE <MAXSRT>'ERR(6)    'NO STORAGE CLASSES TO PROCESS - SELECTION ABORTED.'ERR(7)    'INTERNAL ERROR, X1 = ERROR ADDRESS'ERR(8)  '*** WARNING: SELECTION TABLE OVFL, <M$ARCMAX> SHOULD BE INCREASED ***'ERR(9)    'NO FILES SELECTED FOR ARCHIVE'ERR(10)   'DIRECTORY DATE DOES NOT EQUAL CURRENT DATE'ERR(11)   'TOO MANY UNIQUE EXPIRATION PERIODS, INCREASE <MAXEXP>'ERR(12)   ' *** THIS IS A SELECT-ONLY ARCHIVE, NO OUTPUT FILE PRODUCED ***'ERR(13)   'FULL ARCHIVE SELECTED - ALL EXPIRATIONS WILL BE PROCESSED'ERR(14)   'TOO MANY OWNER GROUPS, INCREASE <M$GROUPMAX>'ERR(15)   'TOO MANY UNIQUE ACCOUNT NUMBERS, INCREASE <M$ACCTMAX>'ERR(16)   '*ERROR* INPUT MFDDB HAS BAD HEADER OR WRONG SOFTWARE LEVEL'ERR(17)   'INPUT MFD DATA BASE MUST BE SORTED BY QUAL/FILE/CYCLE'ERR(18)   'FORMAT ERROR IN GROUP PARAMETER FILE - SEE DOCUMENTATION'ERR(19)   'NO CLASS-IDS SPECIFIED WITH ''S'' OPTION (AT LEAST 1 REQUIRED)'ERR(20)   'INTERNAL ERROR -- NO CLASS-IDS IN CONTROL FILE'ERR(21)   'FIX$$$   (FIXED STORAGE)'ERR(22)   '*ERROR* SYSTEM-ID PARAMETER CARD MISSING, REQUIRED'ERR(23)   'INPUT MFDDB CONTAINS SHARED DIR FILES, <M$MHFSHARED> MUST = 1'ERR(24)   'INPUT MFDDB IS FROM NON-MHFS SYSTEM, <M$MHFSHARED> MUST = 0'ERR(25)   '** WARNING: LAST SAVE-HISTORY UPDATE TIME IS UNAVAILABLE **'ERR(26)   '* IN-PROGRESS FLAG SET IN ARCHIST$ - REBUILD WILL BE STARTED *'NERR      EQU       26ERR(NERR+1)I DO NERR ,ERRPRT(I) +  0100+ERR(I+1)-ERR(I),ERR(I)HDG1MSG DO 9 ,   ' '          'ARCHIVE SELECTION REPORT&'HDG1B    '                               TRACK   -------------- ARCHIVE PARA'          'METERS --------------    WHY      ACTION'H1BL      EQU       $-HDG1BHDG1C          $IF       M$MHFSHARED=0          ' QUALIFIER*FILE(CYCLE)         COUNT     CLASS> QUALIFIER*FILE    '          $ELSE          'H  QUALIFIER*FILE(CYCLE)       COUNT     CLASS> QUALIFIER*FILE    '          $ENDF          '        REF  CYC  EXP  SELECTED   TAKEN    ADDITIONAL INFORMATION'H1CL      EQU       $-HDG1CHDG2      '   *** SUMMARY OF SELECTED FILES BY EXPIRATION PERIOD ***'H2L       EQU       $-HDG2HDG2A     ' EXP PERIOD   FILES SEL   ONLINE-F TRKS   UNLOADED TRK'          'S   REMOV TRKS       ACTION    REASON'H2AL      EQU       $-HDG2AUDXMSG    '  *UNDEFINED EXPIRATION*&'MRSMSG    '  MARS * 3R1&'HDG3MSG   '':$CFS(M$SITENM):'&DATE &   PAGE&'HDG4MSG DO 9 ,   ' '          'ARCHIVE EXCEPTION REPORT&'HDG5      'SORTED BY: ACCT OWNER/SEL REASON/ACCT(6)/Q/F/C                  '          '                --------------- ARCHIVE PARAMETERS --------------'H5L       EQU       $-HDG5HDG6          $IF       M$MHFSHARED=0          ' REASON        SELECTED FILE              TRACK CT  DSR  RCN  BYP '          $ELSE          ' REASON       H  SELECTED FILE            TRACK CT  DSR  RCN  BYP '          $ENDF          '  ACCOUNT         CLASS> QUALIFIER*FILE             REF  CYC  EXP'H6L       EQU       $-HDG6CLSHDG    'THE FOLLOWING STORAGE CLASSES WILL BE PROCESSED FOR THIS SELECTION:'CHL       EQU       $-CLSHDGDASHES DO 22 , '- - - 'FSTMSG    'FILE SCAN TERMINATED AT &*&(&)&'PRCMSG    ' PROCESS&'ARCMSG    ' ARCHIVE  &FROM & POS &'DELMSG    ' DELETE&'PURMSG    ' PURGE    BACKUP= & POS &'BYPMSG    '*BYPASS   &MASK=&'EXMPUR    'PURGE REQ, NO CURR B/U&'EXMSG1    'UNDEFINED EXPIRATION&'EXMSG2    'EXP=PERM, STD ARCHIVE&'EXMSG3    'WRONG DAY OF WEEK&'EXMSG4    'EXP THRESHOLD = &'EXMSG5    'EXP-C THRESHOLD = &'RSNLST    'UNREGISTERED'          'IMPROPER-WLD'          'ARCHIVE-BYP '          'TK-DAYS>5000'          'TK-DAYS>1000'          'LF,EXP>100  '          'LIST-REQSTD 'DAT(1)    'MONDAY&'DAT(2)    'TUESDAY&'DAT(3)    'WEDNESDAY&'DAT(4)    'THURSDAY&'DAT(5)    'FRIDAY&'DAT(6)    'SATURDAY&'DAT(7)    'SUNDAY&'DAYTABI DO 7 ,  +         DAT(I)..         EXPIRATION DEFINITION TABLE..         EACH ENTRY HAS THREE WORDS:.          WORD 1 = (EXPIRATION, CRIT-BACKUP FLAG).          WORD 2 = (STD DAY MASK, CRIT-BACKUP DAY MASK).          WORD 3 = (STD THRESHOLD, CRIT-BACKUP THRESHOLD).EXDFTBI         $REPEAT   M$EXPACNT          +         M$EXPA(I)          +         M$EXPDAYS(I)          +         M$EXPTHR(I)          $ENDR.CHAROK DO 6 ,   +         0 DO 26 ,  +         1          +         0          +         1 DO 5 ,   +         0          +         1 DO 8 ,   +         0 DO 10 ,  +         1 DO 6 ,   +         0.CLSERR    '*ERROR - CLASS <&> IS NOT DEFINED IN THE ARCHIVE CONTROL FILE*&'PCKMSG    '*WARNING - CLASS <&> HAS NO ASSOCIATED PACKIDS - NOT PROCESSED*&'QUAMSG    '*WARNING - CLASS <&> HAS NO REGISTERED QUALIFIERS - NOT PROCESSED*&'CLSMSG    '** CLASS: &  HAVING & REGISTERED QUALIFIERS, WITH THESE PACK-IDS:&'DATMSG    '*** DAYS SINCE REFERENCE WILL BE RELATIVE TO MFD DATE OF: & ***&'DATMSG2   ' - & ***&'COMMSG1   'STANDARD OR FULL ARCHIVE?  SF'CM1L      EQU       $-COMMSG1COMMSG2   'HOW MANY TAPE DRIVES? (&-&)&'COMMSG3   'EST. OUTPUT TAPES = &  (&=PERM-RETENTION)&'COMMSG4S  'STANDARD ARCHIVE SELECTED'CM4SL     EQU       $-COMMSG4SCOMMSG4F  'FULL ARCHIVE SELECTED'CM4FL     EQU       $-COMMSG4FCOMMSG5   'OVERFLOW WARNING, NOTIFY SYSTEMS NEXT WORKING DAY - A'CM5L      EQU       $-COMMSG5OPMSG1    '@MSG INPUT TAPES WILL BE USED IN THIS SEQUENCE:'OM1L      EQU       $-OPMSG1OPMSG2    '@MSG &'ASGINP    '@ASG,TNF  IBACKUP,':$CFS(M$TMFAS)AIL       EQU       $-ASGINPOPPMSG    '@MSG STARTING PURGE PROCESS - FILE COUNT = &'PURCPL    '@MSG PURGE COMPLETE - STARTING ARCHIVE COPY'PCL       EQU       $-PURCPLMRKMSG    '@MARK,C &.&'FREMSG    '@FREE&,S&'EXPMSG    '@MSG,W  & IS & DAY EXP (EST & REEL&) - A&'ASGDEF    '@ASG,TF  OBACKUP1,':$CFS(M$TMARC)ADL       EQU       $-ASGDEFASGMSG    '@ASG,TFR  &,':$CFS(M$TMARC):',,&'ACPMSG    '@ACP,SA&C  &).&,&.&  . & - &'ASGADD    '@ASG,T SELECT$ADD . 'BRKADD    '@BRKPT SELECT$ADD . '/.$(0)DEMAND    +         1                 . SET IF RUN IS DEMANDMFDJUL    +         0                 . JULIAN DATE OF MFD CREATIONDAYMSK    +         0                 . DAY MASK (BIT 0=MON, 6=SUN)FULARC    +         0                 . SET IF FULL ARCHIVESHFUPT    +         0                 . JULIAN D/T (SECONDS) OF LAST SHF UPDATESELCNT    +         0                 . SELECTION/EXCEPTION LIST COUNTEXPCNT    +         0                 . ENTRY COUNT OF EXPIRATION LISTEXPZCT    +         0                 . COUNT OF EXP-ZERO FILES TO PROCESSEXPPCT    +         0                 . COUNT OF EXPIRATIONS TO PROCESSPRVEXP    -         1                 . PREVIOUS EXPIRATION (INIT FOR NO MATCH)EOFFLG    +         0                 . SET AT SORT EOF DURING SELECT$ADD GENEXPICT    +         0                 . LENGTH OF <EXPIDX> TABLEIBKCNT    +         0                 . SET TO ONE IF INPUT TAPE REQUIREDNTAPES    +         0                 . COUNT OF AVAIL OUTPUT TAPE DRIVES.SRPARSSRTPTR    +         0                 . NEXT SORT REC TO REL OR RETSRTCNT    +         0                 . COUNT OF SORT RECS REM TO RETURN.SRPSAV    +         0D                . SAVE OF SRPARS FOR 2ND PASS THRU TABLESAVX4F    +         0                 . NEXT-FILE POINTER SAVESAVX4     +         0                 . MISC REGISTER SAVESSAVX11    +         0                 .SAVA2     +         0D                .SAVA4     +         0D                .SAVA7     +         0D                .PAGECT    +         0                 . SELECTION REPORT PAGE COUNTERCLINCT    +         0                 . ENTRY COUNT OF <CLSINT> TABLECLSCNT    +         0                 . ENTRY COUNT OF CLASS-ID TABLE (CLSTBL)FIXPTR    +         0                 . POINTER TO CLASS-ID ENTRY FOR FIXED DISCPCKCNT    +         0                 . ENTRY COUNT OF LOOKUP TABLE, <PCKLST>FQLINK    +         0                 . ADDRESS OF FIRST MATCHING QT ENTRYCURGRP    -         1                 . CURR ACCT GRP NBR FOR EXCEPT LIST PRTACTCNT    +         0                 . COUNT OF ACCOUNT NUMBERS IN ACTLSTCYCCNT    +         0                 . ENTRY COUNT OF CYCLE TABLELLHEAD    +         0                 . LINKED LIST HEAD: NEXT FREE BUFF ADDRLLNXTA    +         LLBUFF            . ADDRESS OF NEXT UNUSED AREA IN LLBUFFFLHEAD    RES       LLESIZ            . FT LIST HEADACFPKT    I$OD      'ARCCTL$',R$ 0 0  . I/O PACKET TO READ SYS$*ARCCTL$EPKT      E$PKT     22,LINE           . EDIT$ PACKETSITCOD    '            '              . USER-SUPPLIED SYSTEM IDLINE      RES       23                . EDIT$ OUTPUT BUFFERRDHDR     I$OD      '$MFDB$',R$  28,HDRBUF 0 . PACKET FOR READING MFDDB HEADERRPKT      D$BRP     '$MFDB$'  28,1792*2,64 . DBL BUFF I/O PKT FOR READING MFDDBSHFFAC    'SAVHIST$'                  . FITEM$ PACKET FOR SYS$*SAVHIST$          RES       7                 .SHFPKT    I$OD      'SAVHIST$',R$  28,SHFHDR  0 . PKT FOR READING SHF HEADERAHFFAC    'ARCHIST$'                  . FITEM$ PACKET FOR SYS$*ARCHIST$          RES       7                 .AHFPKT    I$OD      'ARCHIST$',R$  28,AHFHDR  0 . PKT FOR READING AHF HEADERCOMPK1    C$OMPK    CM1L*6,COMMSG1,1,ANS . COM$ PKT, ASK STD/FULL ARCHIVECOMPK2    C$OMPK    $-$,LINE,1,ANS    . COM$ PKT, ASK NUMBER OF TAPE DRIVESCOMPK3    C$OMPK    $-$,LINE          . COM$ PKT, TELL NBR OF OUTPUT TAPESCOMPK4S   C$OMPK    CM4SL*6,COMMSG4S  . COM$ PKT, 'STD ARCHIVE SELECTED'COMPK4F   C$OMPK    CM4FL*6,COMMSG4F  . COM$ PKT, 'FULL ARCHIVE SELECTED'COMPK5    C$OMPK    CM5L*6,COMMSG5,1,ANS . COM$ PKT, 'OVERFLOW WARNING'ANS       +         0                 . OPERATOR REPLYADDPKT    'SELECT$ADD  '              . SYMB$ OUTPUT PACKET FOR OUTPUT TO          +         W$,0              .  ECL FILE (SELECT$ADD) DO 7 ,   +         0                 .IMAGE     RES       22                . INPUT BUFF FOR READ OF CLASS-ID PARAMSMIBUFF    RES       AHMICT            . BUFFER FOR MATCHING INFO PARAM(S)HDRBUF    RES       28                . MFD DATA BASE HEADER BUFFERSHFHDR    RES       28                . SAVE HISTORY FILE HEADER BUFFERAHFHDR    RES       28                . ARCHIVE HISTORY FILE HEADER BUFFERCLSINT    RES       ACMXCL*2          . TBL OF SELECTED CLASS-IDS AND QT PTRSPCKTBL    RES       ACMXPK*2          . PACK-ID LOOKUP TBL, WD 2 = CLASS PTRGRPTBL    RES       M$GROUPMAX*4+18   . GROUP NAME TABLEACTLST    RES       M$ACCTMAX*2       . LIST OF GROUP ACCOUNT NUMBERSACTPTR    RES       M$ACCTMAX         . H1 = GROUP NBR, H2 = PTR TO GRPTBLCLSTBL    RES       ACMXCL*CTSIZE     . CLASS-ID TABLEEXPTBL    RES       MAXEXP*EXSIZE     . EXPIRATION TABLEEXPIDX    RES       MAXEXP*3          . EXPIRATION GROUP INDEX TABLEACHBUFF   RES       ACHDSZ            . ACF HEADER BUFFERCYCTBL    RES       (32+31)*28        . CYCLE TABLE, 1 ENT/CYCLE OF SAME FILEACFBUF    RES       ACBFSZ+1          . ACF DATA BUFFER$(2)LLBUFF    RES       LLBSIZ            . LINKED LIST BUFFER (DATA FROM ACF)SRTTBL    RES       MAXSRT*SRSIZE     . SORT TABLE..         THIS BUFFER HOLDS EITHER ARCHIVE SELECTION RECORDS (MODE 1).         OR ARCHIVE EXCEPTION RECORDS (MODE 2).  RESERVE THE LARGER REQ..ARBUFF  RES   M$ARCMAX*((ARSIZE>(AESIZE-1))*ARSIZE+(ARSIZE<AESIZE)*AESIZE) .          END       START@ELT,SIP MARSREL$.MAP/SELECT,,,120447112332,006IN MARS$.JULDATE,.SELECTNOT TPF$.@ELT,SIP MARSREL$.UKEYMAIN,,,206754132334,023.         THIS PROGRAM READS KEYIN IMAGES VIA AREAD$ AND PASSES THEM TO.         THE UKEY$ SUBROUTINE FOR ROUTING TO RLDCTL FOR RSI SUBMISSION..                                                               WRC 11/92..         UKEY IS CALLED AS FOLLOWS:..         @XQT<,C>  MARS*MARS.UKEY.         <KEYIN IMAGE 1>.         <KEYIN IMAGE 2>.         ....         <KEYIN IMAGE N>..         THE RUN MUST BE PRIVILEGED TO EXECUTE THIS PROGRAM.  ERRORS.         IN KEYIN LENGTH OR FORMAT WILL ABORT THE RUN UNLESS THE 'C'.         OPTION IS USED.  KEYINS ARE SUBMITTED AT TWO SECOND INTERVALS..$(1)      AXR$          $LIT          MGPDEF          RCBDEF.WAITTM    EQU       2000              . TIME BETWEEN KEYINS IN MS.START          SA        A5,A15            . SAVE OPTIONS          A$PRINT   (0100,$)          . SKIP A LINE FOR READABILITY          LA,U      A0,PCTBUF         . PCT OUTPUT AREA          LA        A1,(1,4)          . GET WORD 5          ER        PCT$              . TRANSFER FROM PCT          TNZ,S2    PCTBUF            . IS THE RUN PRIVILEGED?          J         MU900             .  NO, ERROR          LA,U      A5,0              . SET NO-WAIT FLAG          DSL       A10,72            . CLEAR ERROR CT AND KEYIN CTMU100          A$READ    (MU800,KEYIN)     . GET THE NEXT KEYIN          TEP       A0,(1*/31)        . IS THIS INFOR?          J         MU100             .  YES, IGNORE IT          LA,U      A0,,A0            . A0 = INPUT WORD COUNT          TLE,U     A0,1              . ANYTHING READ?          J         MU100             .  NOPE, TRY AGAIN          TG,U      A0,RCKYMX+1       . IS KEYIN TOO LONG?          J         MU250             .  YES, ERROR          AU,U      A0,5              .  NO, ADD 5 FOR <SUBMSG> LENGTH          SA,S3     A1,LINPRT         . SAVE FOR LATER DISPLAY          JZ        A5,MU120          . SKIP IF THIS IS THE FIRST KEYIN          LA,U      A1,WAITTM         .  IF NOT, PAUSE FOR CONFIGURED          ER        TWAIT$            .   TIME INTERVALMU120          LSSL      A0,18             . WORD COUNT TO A0 UPPER          LXM,U     A0,KEYIN          . KEYIN ADDRESS TO A0 LOWER          LMJ       X11,UKEY$         . CALL UKEY$ TO PASS TO RLDCTL          J         MU200             . SKIP IF ERROR RETURNED          A$PRINT   LINPRT            . IF NOT, PRINT '*KEYIN SUBMITTED:' ETC.          LA,U      A5,1              . SET WAIT FLAG          AA,U      A11,1             . INCREMENT KEYINS PROCESSED CT.          J         MU100             . BACK FOR NEXT KEYINMU200          LA,U      A5,1              . SET WAIT FLAG          AA,U      A10,1             . INCREMENT ERROR COUNT          TEP       A15,(1*/('Z'-'C')) . CONTINUE AFTER ERROR?          J         MU100             .  YES, BACK FOR NEXT KEYIN          ER        ERR$              .  NO, ABORT NOWMU250          P$RINT    ERRPRT(2)         . 'KEYIN LENGTH ERROR'          AA,U      A10,1             . INCREMENT ERROR COUNT          TEP       A15,(1*/('Z'-'C')) . CONTINUE AFTER ERROR?          J         MU100             .  YES, BACK FOR NEXT KEYIN          ER        ERR$              .  NO, ABORT NOWMU800          E$DIT     EPKT              . OPEN EDIT          E$MSG     ENDMSG            . 'END UKEY.  ERRORS: '          E$DECV    A10               . ERROR COUNT          E$MSGR                      . '  KEYINS PROCESSED: '          E$DECV    A11               . KEYIN COUNT          P$RINT    (0112,LINE)       . PRINT STATUS MESSAGE          ER        EXIT$             .  AND EXITMU900          P$RINT    ERRPRT(1)         . 'RUN MUST BE PRIVILEGED'          ER        ERR$              . ABORT.ERR(1)    'THE RUN MUST BE PRIVILEGED TO USE THIS PROGRAM.'ERR(2)    'KEYIN LENGTH ERROR'ERR(3)I DO 2 ,ERRPRT(I)  +  0100+ERR(I+1)-ERR(I),ERR(I).ENDMSG    'END UKEY.  ERRORS: &  KEYINS PROCESSED: &'..$(0)PCTBUF    +         0                 . PCT WORD 5 (INCLUDES PRIV STATUS)LINPRT    +         0100,SUBMSG       . APRINT$ CTL WORD FOR KEYIN ECHOEPKT      E$PKT     10,LINE           . EDIT$ PACKETLINE      RES       10                . EDIT$ OUTPUT BUFFER          $ASCII                      .SUBMSG    '*KEYIN SUBMITTED:'         .KEYIN     RES       33                . KEYIN TEXT BUFFER          END       START             .@ELT,SIP MARSREL$.UKEY$,,,164032123137,023.         UKEY$ - SUBROUTINE TO SUBMIT UNSOLICITED CONSOLE KEYINS TO RLDCTL.                 A0 = (WORD CT, ADDR) OF ASCII KEYIN TEXT          WRC 11/92.$(1)      AXR$          $LIT          MGPDEF          RCBDEF..         STANDARD (ASCII) ENTRANCE.UKEY$*          SX        X11,UKSX11        . SAVE RETURNUK010          SA        A0,KEYACW         . SAVE INPUT PARAMETER          LA        A1,,A0            . FIRST WORD OF KEYIN TEXT          SSL       A0,18             . WORD COUNT TO A0 LOWER          TG,U      A0,1              . CHECK FOR WITHIN RANGE,          TG,U      A0,RCKYMX+1       .  1-<RCKYMX>          J         UK920             .   NOT IN RANGE, ERROR          SSL       A1,27             . 1ST CHAR TO A1 LOWER          TG,U      A1,$CAS('A')      . CHECK FOR ALPHA CHARACTER          TG,U      A1,$CAS('Z')+1    .          J         $+2               . SKIP IF NOT WITHIN RANGE          J         UK100             . WITHIN RANGE, PROCESS KEYIN          TG,U      A1,0141           . CHECK FOR LOWERCASE ALPHA          TG,U      A1,0172+1         .          J         UK920             . ERROR IF NOT ALPHA CHARACTERUK100          TNZ       INITFL            . HAVE WE BEEN HERE BEFORE?          J         UK150             .  YES, SKIP          LA        A0,(2,PCTBUF)     .  NO, GET RUNID FROM PCT$          ER        PCT$              .          SZ        INITFL            . CLEAR INITIALIZATION FLAGUK150          LA,U      A3,RCADDR         . A3 = BASE ADDRESS OF RELOAD CTL BANKUK200          TS        RCHDTS,A3         . LOCK CONTROL BANK          ER        TIME$             . GET SYSTEM TIME          ANA       A0,RCHDTM,A3      . SUBTRACT TIME CELL FROM RCB          JP        A0,UK210          . OK IF POSITIVE          AA        A0,(24*60*60000)  .  IF NOT, ADJ FOR PAST MIDNIGHT?          JN        A0,UK250          .   ERROR IF STILL NEGUK210          TG,U      A0,20000          . UPDATED LESS THAN 20 SEC AGO?          J         UK250             .  NO, RELOAD CONTROLLER IS NOT RUNNING          LA        A0,RCHDLV,A3      . GET BANK SW LEVEL (2R1 = UNDEFINED)          TNE,U     A0,RCLEVL         . IS THIS CORRECT LEVEL?          J         UK220             .  YES, CONTINUE          C$TS      RCHDTS,A3         .  NO, UNLOCK RCB          J         UK930             . ERROR, WRONG SOFTWARE LEVELUK220          LA        A0,RCHDFL,A3      . LOAD FLAG WORD          TNE       A0,('*READY')     . IS CONTROLLER IDLE?          J         UK300             .  YES, GO SET UP RELOAD DATA          TE        A0,('*DATA*')     .  NO, WORKING FOR SOMEONE ELSE?          J         UK250             .   NO, NOT RUNNING OR BANK CORRUPTED          C$TS      RCHDTS,A3         .   YES, UNLOCK AND WAIT          LA,U      A1,1000           .          ER        TWAIT$            . WAIT ONE SECOND          J         UK200             .  AND TRY AGAINUK250          C$TS      RCHDTS,A3         . UNLOCK RCB          C$OM      COMQ1PKT          . 'RLDCTL INOPERATIVE, RESOLVE AND ANS A'          J         UK200             . TRY AGAIN AFTER OPERATOR ANSWERSUK300          LA,U      A0,RCKYTX,A3      . ADDRESS OF TEXT TRANSFER AREA          LXI,U     A0,1              . INCREMENT FOR TRANSFER          LA,H2     A1,KEYACW         . ADDRESS OF KEYIN TEXT          LXI,U     A1,1              . INCREMENT FOR TRANSFER          LR,H1     R1,KEYACW         . WORD COUNT          BT        A0,,*A1           . TRANSFER KEYIN TO MRCBNK          LA        A0,RCHDAC,A3      . ACCESS COUNT          ANU,U     A0,1              . A1 = PREVIOUS COUNT          TE        A1,PRVAC          . WERE WE THE LAST TO USE MRCBNK?          J         UK320             .  NO, SKIP          SA        A1,RCHDAC,A3      .  YES, USE PREVIOUS SLOT AGAIN          LA        A0,A1             . A0 = COUNT TO USE          LA,U      A5,100            . USE SHORTER WAIT TIME FOR 2ND+ REQ          J         UK330             .UK320          SA        A0,PRVAC          . SAVE ACCESS COUNT FOR FUTURE CHECK          LA,U      A5,2000           . WAIT FOR 2S IF FIRST TIME THROUGHUK330          DSL       A0,36             . PREPARE FOR DIVIDE          DI,U      A0,RCRSMX         . DIV ACCESS CT BY MAX STATUS RECORDS          MSI,U     A1,RCRSSZ         . MULT REMAINDER BY STATUS REC SIZE          AU,U      A1,RCRSBG,A3      . A2 = START ADDR OF OUR STATUS REC          LA        A1,PCTBUF+1       . GENERATED RUNID          SA        A1,RCRSGR,A2      .  SAVE IN STATUS RECORD          LA,U      A0,RCSTWT         . WAIT STATUS          SA        A0,RCRSST,A2      .  SAVE IN STATUS RECORD          SZ        RCRSAS,A2         . ZERO ACP/FETCH STATUS          SSL       A1,12             . USE FIRST 4 CHARS OF RUNID AS USER-4          SA        A1,RCHDU4,A3      .  STORE IN RCB HEADER          SZ        RCHDFA,A3         . ZERO FAS FLAG          SZ        RCHDFE,A3         .  AND FETCH FLAG          SZ        RCHDFC,A3         .  AND FILE CT (INDICATES KEYIN REQUEST)          LA,H1     A0,KEYACW         . WORD COUNT OF KEYIN TEXT          SA        A0,RCHDKL,A3      . STORE IN HEADER          LA        A4,RCHDAC,A3      . ACCESS COUNT          AA,U      A4,1              . A4 = ACCESS CT AFTER THIS REQ PROCESSED          LA        A0,('*DATA*')     . DATA-READY FLAG          SA        A0,RCHDFL,A3      .  STORE IN RCB HEADER          C$TS      RCHDTS,A3         . ALL DONE - UNLOCK MRCBNKUK350          LA        A1,A5             . WAIT TIME, 2S OR 100 MS          ER        TWAIT$            . WAIT FOR RLDCTL TO ACT          TS        RCHDTS,A3         . LOCK RELOAD CONTROL BANK          LA        A0,RCHDAC,A3      . ACCESS COUNT          LA        A1,RCRSST,A2      . STATUS FROM OUR RECORD          C$TS      RCHDTS,A3         . UNLOCK RCB          TLE       A0,A4             . HAS ACCESS COUNT BEEN UPDATED?          J         UK350             .  NO, CONTINUE WAITING          TE,U      A1,RCSTCM         . NORMAL COMPLETION STATUS?          J         UK940             .  NO, RETURN ERROR TO CALLER          LX        X11,UKSX11        .  YES, RESTORE RETURN          J         1,X11             .   AND RETURN NORMAL STATUS..         ERROR PROCESSING.UK920          P$RINT    ERRPRT(1)         . 'FORMAT/LENGTH ERR IN KEYIN TEXT'          LA        A0,KEYACW         . WORD CT, ADDR OF KEYIN          AH        A0,(0100,0)       . FORM PRINT CTL WORD          ER        APRINT$           . ECHO KEYIN TO USER          J         UK990             . RETURN ERRORUK930          LA        A0,ERRPRT(2)      . 'SOFTWARE LEVEL INCOMPATIBILITY'          J         UK980             .UK940          LA        A0,ERRPRT(3)      . 'ERROR STATUS FROM <RLDCTL>'UK980          ER        PRINT$            . PRINT ERROR MESSAGEUK990          LX        X11,UKSX11        . RESTORE RETURN          J         0,X11             .  AND RETURN ERROR..         ERROR MESSAGES.ERR(1)    'FORMAT OR LENGTH ERROR IN KEYIN TEXT:'ERR(2)    '<RLDCTL> SOFTWARE LEVEL INCOMPATIBILITY - NOTIFY SYSTEMS'ERR(3)    'ERROR STATUS FROM <RLDCTL> - NOTIFY SYSTEMS'ERR(4)I DO 3 ,ERRPRT(I)  +  0100+ERR(I+1)-ERR(I),ERR(I).COMMSG1   'RELOAD CONTROLLER INOPERATIVE, RESOLVE AND ANS A'CQ1L      EQU       $-COMMSG1/.$(0)UKSX11    +         0                 . RETURN ADDRESSKEYACW    +         0                 . WORD COUNT, ADDRESS OF KEYINPRVAC     -         2                 . PREVIOUS ACCESS COUNTINITFL    +         1                 . INITIALIZATION FLAGPCTBUF    +         0D                . PCT$ OUTPUT BUFFER , WD 2= GEN RUNIDASCKEY    RES       33                . BUFFER FOR TRANS KEYIN IF INP=FDCOMQ1PKT  C$OMPK    CQ1L*6,COMMSG1,1,IMAGE . RLDCTL ERROR NOTIFICATION PKTIMAGE     +         0                 . OPERATOR ANSWER BUFFER          END                         .@ELT,SIP MARSREL$.MAP/UKEY,,,210154132034,006IBANK,M I$1,01000IN MARS$.UKEYMAIN,.UKEY$,.CERU$/MARSNOT TPF$.DBANK,MC D$1,040000FORM I$1DBANK,UX MRCBNKEND@ELT,SIQ MARSREL$.BUILDCOMUSB,,,133201142133,023.         THIS ELEMENT WILL PRODUCE THE COMMAND FILE USED BY COMUS.         TO DO A BANK-ONLY INSTALL OF THE MARS SYSTEM..          MGPDEF.          $SYM          $ASCII.          $OUTPUT,Q ; 'PRODUCT MARS,3R1 LOCAL'          $OUTPUT,Q ; 'FILE SYS$LIB$*MARS(1) NOTWRITEABLE NOROLLOUT ELT,MRCBNK'          $OUTPUT,Q ; 'BANK ':$CB(M$RCBBDI,7):' SYS$LIB$*MARS(1),MRCBNK,MRCBNK ''''S'''',''''Q'''''.          $END@ELT,SIQ MARSREL$.BUILDCOMUSF,,,133162142133,023.         THIS ELEMENT WILL PRODUCE THE COMMAND FILE USED BY COMUS.         TO DO A FULL INSTALL OF THE MARS SYSTEM..          MGPDEF.          $SYM          $ASCII.          $OUTPUT,Q ; 'PRODUCT MARS,3R1 LOCAL'          $OUTPUT,Q ; 'FILE SYS$LIB$*MARS(1) NOTWRITEABLE NOROLLOUT ELT,MRCBNK,ACP,FETCH,MARS,FILES'          $OUTPUT,Q ; 'BANK ':$CB(M$RCBBDI,7):' SYS$LIB$*MARS(1),MRCBNK,MRCBNK ''''S'''',''''Q'''''          $OUTPUT,Q ; 'LIBD SYS$LIB$*MARS(1) ACP,FETCH,MARS,FILES'.          $END@ELT,SIDP MARSREL$.FULLBUILD,,F$S,206546132334,001@HDG,P  ******  MGPDEF  ******@PDP,LM MARS$.MGPDEF,.MGPDEF@HDG,P  ******  ACFDEF  ******@PDP,LM MARS$.ACFDEF,.ACFDEF@HDG,P  ******  AHFDEF  ******@PDP,LM MARS$.AHFDEF,.AHFDEF@HDG,P  ******  CHRPRC  ******@PDP,LM MARS$.CHRPRC,.CHRPRC@HDG,P  ******  DBIOP  ******@PDP,LM MARS$.DBIOP,.DBIOP@HDG,P  ******  MFDDEF  ******@PDP,LM MARS$.MFDDEF,.MFDDEF@HDG,P  ******  RCBDEF  ******@PDP,LM MARS$.RCBDEF,.RCBDEF@HDG,P  ******  CERU$/MARS  ******@MASM,S MARS$.CERU$/MARS@HDG,P  ******  CHRCON  ******@MASM,S MARS$.CHRCON@HDG,P  ******  FINDFILE  ******@MASM,S MARS$.FINDFILE@HDG,P  ******  GETOWN  ******@MASM,S MARS$.GETOWN@HDG,P  ******  HFREAD  ******@MASM,S MARS$.HFREAD@HDG,P  ******  JULDATE  ******@MASM,S MARS$.JULDATE@HDG,P  ******  ACP  ******@MASM,S MARS$.ACP@MAP,SZ MARS$.MAP/ACP,.ACP@HDG,P  ******  ARCHIVE$-CVT  ******@MASM,S MARS$.ARCHIVE$-CVT@MAP,S MARS$.MAP/ARCHIVE$-CVT,.ARCHIVE$-CVT@HDG,P  ******  ARSTAT  ******@MASM,S MARS$.ARSTAT@MAP,S MARS$.MAP/ARSTAT,.ARSTAT@HDG,P  ******  CNSRLD  ******@MASM,S MARS$.CNSRLD@MAP,S MARS$.MAP/CNSRLD,.CNSRLD@HDG,P  ******  EXPRPT  ******@MASM,S MARS$.EXPRPT@MAP,S MARS$.MAP/EXPRPT,.EXPRPT@HDG,P  ******  FAS$ARC-CVT  ******@MASM,S MARS$.FAS$ARC-CVT@MAP,S MARS$.MAP/FAS$ARC-CVT,.FAS$ARC-CVT@HDG,P  ******  FETCH  ******@MASM,S MARS$.FETCH@MAP,SZ MARS$.MAP/FETCH,.FETCH@HDG,P  ******  FILES  ******@MASM,S MARS$.FILES@MAP,SZ MARS$.MAP/FILES,.FILES@HDG,P  ******  HISTINIT  ******@MASM,S MARS$.HISTINIT@MAP,S MARS$.MAP/HISTINIT,.HISTINIT@HDG,P  ******  LISTER  ******@MASM,S MARS$.LISTER@MAP,S MARS$.MAP/LISTER,.LISTER@HDG,P  ******  MARS  ******@MASM,S MARS$.MARS@MAP,S MARS$.MAP/MARS,.MARS@HDG,P  ******  MFDEDT  ******@MASM,S MARS$.MFDEDT@MAP,S MARS$.MAP/MFDEDT,.MFDEDT@HDG,P  ******  MFDMRG  ******@MASM,S MARS$.MFDMRG@MAP,S MARS$.MAP/MFDMRG,.MFDMRG@HDG,P  ******  MRCBNK  ******@MASM,S MARS$.MRCBNK@MAP,S MARS$.MAP/MRCBNK,.MRCBNK@HDG,P  ******  MSREP  ******@MASM,S MARS$.MSREP@MAP,S MARS$.MAP/MSREP,.MSREP@HDG,P  ******  NOBACK  ******@MASM,S MARS$.NOBACK@MAP,S MARS$.MAP/NOBACK,.NOBACK@HDG,P  ******  REBUILD  ******@MASM,S MARS$.REBUILD@MAP,S MARS$.MAP/REBUILD,.REBUILD@HDG,P  ******  RLDCTL  ******@MASM,S MARS$.RLDCTL@MAP,S MARS$.MAP/RLDCTL,.RLDCTL@HDG,P  ******  SELECT  ******@MASM,S MARS$.SELECT@MAP,S MARS$.MAP/SELECT,.SELECT@HDG,P  ******  UKEYMAIN  ******@MASM,S MARS$.UKEYMAIN@HDG,P  ******  UKEY$  ******@MASM,S MARS$.UKEY$@MAP,S MARS$.MAP/UKEY,.UKEY@HDG,P  ******  BUILDCOMUSF  ******@MASM,S MARS$.BUILDCOMUSF,.COMUSINSTALL/FULL@HDG,P  ******  BUILDCOMUSB  ******@MASM,S MARS$.BUILDCOMUSB,.COMUSINSTALL/BANK-ONLY@HDG,P  ******  TOC ******.L,1@PACK MARS$.@PRT,TL MARS$.@END F$S@ELT,SIP MARSREL$.DOCPRT,,,177723142133,023.         MARS/ZIP - DOCUMENT PRINT PROGRAM..         THIS WAS THE QUICKEST WAY TO TAKE AN EXTRACTED SPL DOCUMENT AND.         MAKE IT EASILY TRANSPORTABLE/PRINTABLE.  NO APOLOGIES.    WRC 10/90.$(1)      AXR$          $LIT          $ASCII.INDENT    EQU       2                 . NBR OF WORDS TO INDENT TEXT (4 CH/WD).START          SA        A5,A15            . SAVE OPTIONS          SR        R2,CURDAT         . TODAY'S DATE          LPD       010               . CHANGE TO QUARTER WORD MODE          A$READ    ((ER ERR$),HDGLIN) . READ HEADING TEXT          LA,Q1     A0,HDGLIN         . FIRST CHAR OF HEADING TEXT          TE,U      A0,'H'            . BETTER BE LETTER 'H'          ER        ERR$              .  IF NOT, ABORT          DSL       A10,72            . INIT LINE, PAGE COUNT = 0          A$EDIT    AEPKT             . OPEN EDITDC100          A$READ    (DC300,TEXT)      . READ NEXT LINE OF TEXT          LA,U      A4,INDENT,A0      . A4 = WORD COUNT + NBR WORDS TO INDENT          TLE,U     A4,INDENT+1       . IS THIS A BLANK LINE?          J         DC200             .  YES, GO PRINT          LA,Q1     A0,TEXT           .  NO, GET 1ST CHARACTER          TE,U      A0,'/'            . IS IT A '/' (EJECT) ?          J         DC200             .  NO, PRINT TEXT          TOP,U     A15,1*/('Z'-'O')  . OUTPUT TO ALT FILE?          J         DC150             .  NO , SKIPDC120          JGD       A10,$+2           . DECR AND SKIP LINE CT          J         DC150             . ALL DONE          LA        A0,(0101,TEXTPRT) . PCW FOR BLANK LINE          LMJ       X11,OUTPUT        . OUTPUT BLANK LINE          J         DC120             . BACK FOR MOREDC150          LA,U      A10,0             . SET LINE COUNT = 0          J         DC100             . READ NEXT LINE OF TEXTDC200          JGD       A10,DC220         . SKIP AHEAD UNTIL OUT OF LINES          AA,U      A11,1             . INCREMENT PAGE COUNT          TEP,U     A15,1*/('Z'-'O')  . OUTPUT TO ALT FILE?          J         DC210             .  YES, SKIP HDG PRINT          A$ECLEAR                    . CLEAR EDIT          A$ESKIP   INDENT*4          . ALIGN WITH LEFT MARGIN          A$EDAY1   CURDAT            . TODAY'S DATE MM/DD/YY          A$ECOPY   60,HDGLIN+2       . TEXT OF HEADING          A$ESKIP   3                 .          A$ECHAR   '-'               .          A$EDECV   A11               . CURRENT PAGE NUMBER          A$PRINT   (0777700+19+INDENT,LINE) . SKIP TO NEW PAGE, PRINT HEADING          A$PRINT   (0100,$)          . SKIP A LINE FOR READABILITYDC210          LA,U      A10,57-3          . INIT LINE COUNTERDC220          LA        A0,A4             . A0 = LINE SPACING + INDENT OF CURR TEXT          LSSL      A0,18             . SHIFT FOR PRINT CTL WORD          AH        A0,(0100,TEXTPRT) . ADD IN THE REST          LMJ       X11,OUTPUT        . OUTPUT THE NEXT LINE          J         DC100             . BACK FOR MOREDC300          TEP,U     A15,1*/('Z'-'O')  . OUTPUT TO ALT FILE?          J         DC400             . YES, SKIP          A$PRINT   (0777700,$)       .  NO, THROW A PAGE AT THE END          ER        EXIT$             .  AND QUITDC400          LA,U      A0,BRKPT          . @BRKPT DOC$OUTPUT          ER        CSF$              . CLOSE OUTPUT FILE          ER        EXIT$             .  AND QUIT.OUTPUT          TEP,U     A15,1*/('Z'-'O')  . OUTPUT TO ALT FILE?          J         OT100             . YES, SKIP          ER        APRINT$           .  NO, STD PRINT          J         OT200             . RETURNOT100          LSSL      A0,12             . SHIFT OFF LINE SPACING          DSL       A0,30             . A0 = WORD COUNT          ANA,U     A0,INDENT         . REMOVE LEADING SPACES          JP        A0,$+2            . BETTER STILL BE POSITIVE          ER        ERR$              . IF NOT, ERROR          LA,U      A1,19             . MAX WORDS / LINE          ANA,U     A1,,A0            . MINUS WORDS READ = WORDS TO FILL          JP        A1,$+2            . MUST BE POSITIVE          ER        ERR$              . IF NOT, ERROR          JZ        A1,OT120          . SKIP IF ZERO          LR,U      R1,,A1            . R1 = WORDS TO BLANKFILL          AH        A0,(1,TEXT)       . POINTER TO FIRST TRAILING WORD          LA,U      A1,TEXTPRT        . SPACE WORD          BT        A0,,*A1           . SPACEFILL REMAINDER OF IMAGEOT120          LA        A0,(19*4,TEXT)    . OUTPUT PRINT CTL WORD          SA        A0,SYMPKT+4       . INTO SYMB$ PKT          LA,U      A0,SYMPKT         .          ER        SYMB$             . WRITE TO ALT FILEOT200          J         0,X11             . RETURN.BRKPT     $CFS('@BRKPT DOC$OUTPUT . ').$(0)CURDAT    +         0                 . CURRENT DATE/TIME (TDATE$)AEPKT     A$EPKT    19+INDENT,LINE    . AEDIT$ OUTPUT PACKETSYMPKT    $CFS('DOC$OUTPUT  ')        . SYMB$ OUTPUT PACKET          +         W$,ASCII$         .          +         0                 .          +         $-$,$-$           . CHAR COUNT, ADDRESS DO 5 ,  +          0                 .HDGLIN                                . TEXT OF HEADING DO 17 , ' '          RES       16LINE      RES       19+INDENT         . AEDIT$ OUTPUT BUFFERTEXTPRT                               . SPACES FOR TEXT INDENTION DO INDENT ,  '    '                  .TEXT      RES       33                . TEXT INPUT/OUTPUT BUFFER          END       START@MASM,E MARSREL$.DOCPRT@MAP ,MARSREL$.DOCPRTIN MARSREL$.DOCPRTNOT TPF$.@ELT,SIDP MARSREL$.PRINTDOC,,F$S,174206131637,001@XQT MARS$.DOCPRT@ADD,P MARS$.DOC/RELEASE@XQT MARS$.DOCPRT@ADD,P MARS$.DOC/INST-REF@XQT MARS$.DOCPRT@ADD,P MARS$.DOC/UPDATE@XQT MARS$.DOCPRT@ADD,P MARS$.DOC/MHFS@XQT MARS$.DOCPRT@ADD,P MARS$.DOC/USER-REF@XQT MARS$.DOCPRT@ADD,P MARS$.DOC/ADMIN-REF@XQT MARS$.DOCPRT@ADD,P MARS$.DOC/EXC-REPORT@XQT MARS$.DOCPRT@ADD,P MARS$.DOC/ACP@XQT MARS$.DOCPRT@ADD,P MARS$.DOC/FETCH@XQT MARS$.DOCPRT@ADD,P MARS$.DOC/FILES@HDG,P  *** MGPDEF (GLOBAL PARAMETERS) ***@PDP,LM MARS$.MGPDEF,MGPDEF@HDG,P  *** GROUPACCTS/EXAMPLE ***@PRT,S MARS$.GROUPACCTS/EXAMPLE@HDG,P  ******  RUN/ARCHIVE  ******@PRT,S MARS$.RUN/ARCHIVE@HDG,P  ******  RUN/ARCHIVE$-MRG  ******@PRT,S MARS$.RUN/ARCHIVE$-MRG@HDG,P  ******  RUN/ARCUPD  ******@PRT,S MARS$.RUN/ARCUPD@HDG,P  ******  RUN/CONS-RELOAD  ******@PRT,S MARS$.RUN/CONS-RELOAD@HDG,P  ******  RUN/EXCEPTIONS  ******@PRT,S MARS$.RUN/EXCEPTIONS@HDG,P  ******  RUN/EXPIR-RPT  ******@PRT,S MARS$.RUN/EXPIR-RPT@HDG,P  ******  RUN/FAS$ARC-MRG  ******@PRT,S MARS$.RUN/FAS$ARC-MRG@HDG,P  ******  RUN/FILEXT  ******@PRT,S MARS$.RUN/FILEXT@HDG,P  ******  RUN/FILIST  ******@PRT,S MARS$.RUN/FILIST@HDG,P  ******  RUN/FULL-RPT  ******@PRT,S MARS$.RUN/FULL-RPT@HDG,P  ******  RUN/RLDCTL  ******@PRT,S MARS$.RUN/RLDCTL@HDG,P  ******  RUN/SAVHST  ******@PRT,S MARS$.RUN/SAVHST@HDG,P  ******  RUN/STATISTICS  ******@PRT,S MARS$.RUN/STATISTICS@HDG,P  ******  RUN/TAPE-RPT  ******@PRT,S MARS$.RUN/TAPE-RPT@HDG,P  ******  RUN/WEEKLY-RPT  ******@PRT,S MARS$.RUN/WEEKLY-RPT@HDG,P  *** TOC OF MARS RELEASE FILE ***.L,1@PRT,TL MARS$.@END F$S@ELT,SIQ MARSREL$.DOC/RELEASE,,,142045132037,001H                Mass Storage Archive / Retrieval System                     Version 3R1 - November, 1995     This is an unrestricted public domain release of the MARS software.  MARSis a collection of programs and runstreams that offers mass storage managementcapabilities that are much more extensive than the standard FAS archive.Level 1R1 of MARS was described in the May 1990 issue of UNISPHERE magazineand a presentation on level 2R1 was given at the Fall 1990 USE conference inSeattle.  Level 2R2 was presented at the Spring 1991 conference in Chicago.The paper that appears in the Conference Notes (pp. 611-643) provides ageneral technical overview of the software and should be reviewed before theinstallation process is started.  A brief non-technical overview and updatefor the latest level can be found in the November 1995 issue of UNISPHERE.     This release is being distributed on a standard 3.5" diskette.  Thediskette contains a copy of this document and one program (MARS3R1.EXE).Execute this program from a directory on your hard disk.  It will produce asingle text file (CATRUN).  Upload this file to your 1100/2200 system into anelement of the same name in any program file and @START it.  This is a self-extracting runstream which will produce the release file, MARS*RELEASE.  Itwill take only a few seconds to execute.  The runstream can be deleted afterthe release file has been created.  Additional documentation is supplied inMARS*RELEASE.  Use the following ECL to start a run that will print all of thedocumentation elements, and other helpful information:     >@START   MARS*RELEASE.RUN/DOCPRT     The output from this run will be about 80 pages and should be printed ona printer with lowercase capability.  There must be at least 57 printablelines/page (total less top and bottom margins).  If necessary, edit therunstream and add a margin control command to ensure proper operation.  Thefollowing documentation will be printed, in this order:DOC/INST-REF -   Complete step by step installation instructions.  Page one                 has a list of restrictions that should be reviewed to be                 sure none will affect operation at your site.DOC/UPDATE -     Migration instructions for level 2R2 to 3R1, and a list of                 enhancements.DOC/MHFS -       A supplement to the installation reference for those sites                 that wish to use the MHFS feature (shared history files).DOC/USER-REF -   The user reference manual for the MARS processor.DOC/ADMIN-REF -  The site administrator reference for the MARS processor.DOC/EXC-REPORT - Details of the Exception Report format.DOC/ACP -        Instructions for use of the ACP processor outside of the                 MARS environment.DOC/FETCH -      The user reference for the FETCH processor.DOC/FILES -      The user reference for the FILES processor.MGPDEF -         This PDP element contains the MARS global parameters.  It                 must be customized before starting a MARS gen.GROUPACCTS/EXAMPLE - A sample GROUPACCTS parameter file, with commentary.(runstreams)     Several of the production runstreams will be listed.@ELT,SIQ MARSREL$.DOC/INST-REF,,,133544132037,001H                  M. A. R. S.  Installation Reference     This document is designed to step the user through the completeinstallation process for the MARS Processor and its associated programs andrunstreams.  This should take anywhere from one to three days, depending onthe complexity of the site and the experience level of the person doing theinstallation.     The author of this software is willing to provide telephone assistancewhen questions or problems arise.  Every effort has been made to make the MARSsoftware and associated documentation as straightforward and error-free aspossible, but it is impossible to plan for every circumstance.  I look forwardto hearing from you!                            Ward Condit                            Work: (602) 994-7886   Mon-Thurs.                            Home: (602) 964-9220   Fri-Sun.                            Please call after 10 AM (AZ. time) if possible.1. Restrictions  The current level of MARS (3R1) has the following restrictions.  You should  study these carefully and be sure none will present a problem before you  begin the MARS installation process.  - MARS has not been operated in a SENTRY=TRUE environment, but code has    been added to the ACP processor that will restore security information    for a single-cycle file when it is reloaded.  The configuration parameter    M$SENTRY must be set to 1 when the software is generated.  Usage in a    security environment should be considered experimental.  The author would    be interested in working with anyone wishing to use MARS in this way.  - MARS 3R1 has not been tested on a system in which files having over 262K    tracks are permitted.  This feature is enabled if the sysgen parameter    LARGEFILES is set to TRUE.  Code has been added to the ACP processor and    the SELECT program to bypass files that are over 262K tracks.  If you    have the LARGEFILES parameter enabled, please contact the author for    testing procedures if you wish to use MARS.  - MARS will not archive word-addressable (WAD) files.  MARS can be operated    safely in an environment in which such files exist; they will simply be    bypassed and never archived.  - Only labeled tapes may be used for archive output.  Tapes are created    using the standard expiration field, which should be usable with all    commercially available tape management systems.  - There is a limit of 4 backup reels per archived file.  Reloads of saved    files from the FAS Save-History database are also limited to 4 backup    reels./2.  Copy the MARS software onto your system.  This step is described in the    printed documentation that comes with the distribution diskette and in    the README file on the diskette.  After starting the CATRUN runstream you    should have all necessary components in the MARS*RELEASE file.3.  Verify that the MASM procedures for the SORT product are available on    your system.  The file SYS$LIB$*PROC$ should be catalogued and must    contain the procedure element RPROCS$/SORT<level>.  This may be copied    from the SORT installation file.  If the SYS$LIB$*PROC$ file has not    already been catalogued and you would prefer not to do this, the RPROCS$    element may be copied directly into MARS*RELEASE.  When this is complete,    start the run to build the MFDEDT program.    >@START  MARS*RELEASE.RUN/MFDEDT-GEN4.  Test the MFDEDT program.  The 'S' option is required.  The 'Z' option is    optional.  Use of this option tells MFDEDT not to clear the raw directory    when it is finished.  If it is used, operation will be faster but less    secure.  Use of the 'Z' option is recommended unless you operate in an    environment where users may attempt to break security by random disk    searching.    >@MARS*RELEASE.MFDEDT,S<Z>    This program will produce an edited directory ($MFDB$) for use by various    elements of the MARS system.  Proper operation must be confirmed before    proceeding to the next step.  Depending on the size of your directory and    other variables, the MFDEDT program should take anywhere from 10 seconds    to 5 minutes to complete.  Then it will print the following messages:    END MFDEDT. TOTAL FILES: xxxx (xxxx DISC, xxxx TAPE).    FLUSH CALLS: xx  AVAIL BUFFERS: 2000  AVG RB/FC: xxxx  MIN RB/FC: xxxx    It is very important at this point to verify the ability of MFDEDT to    correctly interpret the directory on your system now and in the future.    If your directory is very fragmented, you may get the message:    DIRECTORY BUFFER OVERFLOW - INCREASE OR USE 'G' OPTION    If this happens, or if the value AVG RB/FC is less than 1000 or the value    MIN RB/FC is below 500, you should supply a <buffer-count> parameter to    MFDEDT to improve its efficiency.  The default buffer-count is 2000 but    it can be increased to a maximum of 5000.    >@MARS*RELEASE.MFDEDT,S<Z>  ,<buffer-count>/    MFDEDT testing (continued)    It is unlikely that MFDEDT will fail to function correctly if the buffer    count is increased.  If this does happen, you can execute it with the 'G'    option, and the maximum buffer count.  This allows MFDEDT to clear the    buffer chain by doing forward reads, but this will substantially reduce    its execution speed.  For this reason, the 'G' option should be used only    if necessary.    If you have chosen to not use the 'Z' option or have had to increase the    buffer count or add the 'G' option, the following runstreams should be    updated at this time.  Each contains a single execution of MFDEDT.    RUN/ARCHIVE    RUN/FILEXT    RUN/FILIST    RUN/SAVHST5.  Customize the global parameter definitions to site requirements.    The MASM procedure element MGPDEF contains definitions for all of the    MARS parameters that may be tailored to site specification.  The element    contains internal documentation for each parameter.  MGPDEF should be    updated into the same name in MARS*RELEASE.6.  Generate the MARS software for your site.    >@FREE  MARS*RELEASE    >@START  MARS*RELEASE.RUN/MARSGEN    When you have a clean gen (no MAP errors) proceed to step 7.7.  Install MARS, ACP, FETCH, FILES, and the reload control bank (MRCBNK).    There are two ways to do this.  If you have an alternate LIB$ file in use    you can place the executable elements here.  This is method (A).  It will    simplify the process of making future updates if configuration parameters    are changed.  Method (B) will install all elements into the MARS-specific    library file.  Use only one of these procedures.  This must be done under    the security officer's userid.  * Method (A) - executables in alternate LIB$ file    >@COPY,A  MARS*RELEASE.FILES,SYS$LIB$*ALTLIB$.  (Use local name)    >@COPY,A  MARS*RELEASE.FETCH,SYS$LIB$*ALTLIB$.    >@COPY,A  MARS*RELEASE.ACP,SYS$LIB$*ALTLIB$.    >@COPY,A  MARS*RELEASE.MARS,SYS$LIB$*ALTLIB$.    >@CAT,PV  SYS$LIB$*MARS    >@COPY,A  MARS*RELEASE.MRCBNK,SYS$LIB$*MARS.    >@QUAL  <COMUS-db-qual>    >@COMUS    >INSTALL  LOCAL=MARS*RELEASE.COMUSINSTALL/BANK-ONLY/  * Method (B) - all installed absolutes in specific library file    >@CAT,PV  SYS$LIB$*MARS    >@COPY,A  MARS*RELEASE.MRCBNK,SYS$LIB$*MARS.    >@COPY,A  MARS*RELEASE.FILES,SYS$LIB$*MARS.    >@COPY,A  MARS*RELEASE.FETCH,SYS$LIB$*MARS.    >@COPY,A  MARS*RELEASE.ACP,SYS$LIB$*MARS.    >@COPY,A  MARS*RELEASE.MARS,SYS$LIB$*MARS.    >@QUAL  <COMUS-db-qual>    >@COMUS    >INSTALL  LOCAL=MARS*RELEASE.COMUSINSTALL/FULL8.  Verify the installation after the COMUS INSTALL run(s) fin.    >@ACP    ACP <level> <date/time>    SPECIFICATION 1.  MISSING - REQUIRED    >@MARS    MARS <level>/<site code> <date/time>    * >EXIT    END MARS.    >@FETCH    FETCH <level> <date/time>    SPECIFICATION 1.  MISSING - REQUIRED    ><CR>    END FETCH.    >@FILES    FILES <level> <date/time>    SPECIFICATION 1 MISSING - REQUIRED9.  Catalog the MARS production file, and copy in the contents of the    release/generation file.    >@CAT,PV  MARS*MARS,F///1000    >@COPY  MARS*RELEASE.,MARS*MARS./10. Catalog the MARS system files and initialize the history files.    >@CAT,PV  SYS$*ARCCTL$,F///500       . Add key(s) if defined in MGPDEF    >@CAT,PV  SYS$*ARCMFD$,F/50//1000    >@ASG,UPV  SYS$*ARCHIST$,F///50000   . Add key(s) if defined in MGPDEF    >@XQT,A  MARS*MARS.HISTINIT    ARCHIVE HISTORY FILE INITIALIZED ON <date> AT <time>    >@FREE  SYS$*ARCHIST$    >@ASG,UPV  SYS$*SAVHIST$,F///50000   . Add key(s) if defined in MGPDEF    >@XQT,F  MARS*MARS.HISTINIT    SAVE HISTORY FILE INITIALIZED ON <date> AT <time>    >@FREE  SYS$*SAVHIST$11. Use MARS to initialize the Archive Control File.  This must be done under    the account number that will be used by the site administrator to execute    privileged MARS commands.  Refer to the MARS Processor site administrator    reference and user reference for more information on the REGISTER,    ACCESS, ADD and LIST commands.    >@MARS    MARS <level, etc...>    * >INIT    INITIALIZATION COMPLETE - MASTER ACCOUNT = xxxxxxxxxxxx    You should now set up system qualifiers for bypass until you become    comfortable with day-to-day operation of the archive process.    The REG command has an ACC and an OWN parameter.  The ACC parameter    determines who can add and modify FILE entries for the qualifier - at    least one account should be specified.  The OWN parameter determines who    is notified when files with this qualifier expire, and it is optional.    This should be used if you wish a single user to be responsible for all    files with a specific qualifier.  If you wish responsibility to be based    on the account number as recorded in the MFD, omit the OWN parameter.    See step 22 for more information.    * >REG QUAL=SYS$,ACC=<site admin acct>[,OWN=<system prod account>]    * >ACC QUAL=SYS$    SYS$* >ADD FILE=#,REF=10,FLAG=BYP    SYS$* >LIST    <parameter list follows>    SYS$* >EXIT    Repeat the above command sequence for qualifiers TIP$ and SYS$LIB$.  When    you are done, list the three qualifiers you have added.    * >LIST QUAL    <qualifier list follows>    * >EXIT    END MARS./12. Register one or two high-use production qualifiers and add some files    that you know will be candidates for archiving.    >@MARS    MARS <level, etc...>    * >REG QUA=BUDGET,ACC=<resp programmer acct>[,OWN=<production acct>]    * >ACC QUA=BUDGET    BUDGET* >ADD FILE=PRINT#,REF=3,CYC=1,EXP=10    BUDGET* >ADD FILE=DATA01,REF=5,CYC=2,EXP=40              <and so on...>    BUDGET* >LIST    <file list follows>    BUDGET* >EXIT    * >REG QUA=PAYROLL,ACC=<programmer acct>[,OWN=<production acct>]              <and so on...>    * >EXIT    END MARS.13. You should determine if you wish to register a master wildcard qualifier    and filename at this point.  If this is done, the archive parameters for    this entry will be in effect for all files in the system that are not    more explicitly registered.  If this is not done, files that are not    registered will never be archived.    The best way to transition from FAS archiving to MARS archiving is to    register a master wildcard qualifier/file and set the REF limit to the    same limit currently being used by FAS.  The CYC limit should be set high    until files which necessarily have several cycles online are explicitly    registered.  The following example shows how to do this if you were    archiving all after 25 days and keeping the archive tapes for 180 days.    (This also assumes 180 days is a valid expiration period for your local    MARS configuration).    >@MARS    * >REG QUA=#,ACC=<site admin acct>    * >ACC QUA=#    ############* >ADD FILE=#,REF=25,CYC=32,EXP=180    ############* >LIST    * >EXIT    If specific qualifiers and/or files were excluded from your FAS archive,    you should now register these qualifiers and make appropriate file    entries (with the BYP flag set) for complete duplication of your current    environment./14. MARS allows several different storage classes to be defined.  Each class    may contain one or more removable packs, and one may contain the set of    fixed packs.  Each class has a unique set of registered qualifiers and    filenames.  When installing MARS, it is best to use only the DEFAULT    class at first.  This is the assumed class for all ACCESS operations, and    has been initialized to contain only the set of fixed packs ('FIX$$$').    If you intend to archive only from fixed storage, no further action is    necessary at this point.    If you wish to include files from one or more removable packs, or to    exclude fixed storage from the DEFAULT class, do the following:    >@MARS    * >ACC CLASS=DEFAULT    DEFAULT>> >ADD PACK=xxxxxx      . Do this to add, may be repeated    DEFAULT>> >REM PACK=FIX$$$      . Do this to exclude fixed storage    DEFAULT>> >LIST PACKS           . When finished, confirm    DEFAULT>> >EXIT    * >EXIT15. Edit and install the ARCHIVE runstream.    The next step is to edit MARS*MARS.RUN/ARCHIVE into the file that is to    be used as the MARS start file.  This file can be whatever you choose;    SYS$LIB$*RUN$, MARS*MARS or anything else.  Changes should include:    - Add the account and userid to the @RUN card    - Replace the @PRIV command with a suitable command to make the run      privileged    - Remove the references to SYS$*SAVHIST$ at lines 6 and 27 if the      configuration parameter M$EXPZERO was set to zero (this is optional)    *IMPORTANT:  Don't change the line which executes the SELECT program.    The comment refers to a change that should be made after testing is    completed./16. Run a selection-only archive.  This will not affect status of files in    any way.  It is the first step in confirmation that the software is    functioning correctly and that your preliminary archive parameters are    correct.    ST  ARCHIVE,1    If you are executing the SELECT program with the 'C' option, this will    solicit the archive type from the operator.  Within five minutes the    following message will appear:    0-STANDARD OR FULL ARCHIVE?  SF    If the feature is active, the message will appear at the start of every    archive run.  Be sure its meaning is understood (see MGPDEF, p. 5).  For    this and following tests, a standard archive should be sufficient.    Shortly after answering the message, the run should fin normally.  It    should not call for any output tapes - if it does, something is wrong -    error the run before any tape is mounted.    An archive selection report showing which files would have been archived    will be produced.  You should examine this report carefully to be sure    nothing is being selected by mistake.  If a file appears on the list but    the word *BYPASS appears to the right, this means the file will not be    archived even though the selection criteria indicates it should.    If you are not satisfied with the selection criteria, go back into MARS    and make appropriate changes and run another selection-only archive.    When all looks good, proceed to the next step.17. Run a read-only archive.  This will do everything a normal archive does,    but no files will be deleted from the MFD.  Production will not be    impacted except that while each file is being copied to tape it will be    exclusively assigned to the archive run.  Last reference times and access    counts will not be updated, since the run is privileged.  Purge messages    can be safely ignored.  Do this whenever you like, keeping in mind that    if it is done considerably later than the selection-only archive,    different files may meet the selection criteria.  Do the following:    ST ARCHIVE    When this run completes, output will go to three places:       (1) The archive selection report will be produced and printed.       (2) Output from ACP commands to archive the files will be breakpointed           into the file SYS$*ARC-BRKPT.  This is for debugging only; it is           not normally printed.       (3) The summary report showing archived files, selection criteria, and           location on output tapes will also be produced and printed.    Carefully examine the reports and be sure you understand how the archive    process works before proceeding to the next step./18. If the reload notification feature has been enabled (M$RSIUP set to a    non-null value), the userid/password should now be installed with SIMAN.    The following parameters are recommended for proper operation:    ACCESS screen 1    - Run modes: DEMAND or none    - Password: <other than configured>    - Password expiration: 9999    SESSION screen 1    - Terminal timeout checking disabled    - @RUN image always user entered    CONSOLE screen 1    - Console mode: Response    CONSOLE screen 2    - Keyin enable: COMMUN (plus others if desired; see below)    CONSOLE screen 3    - Message groups: (none)    After installation, you should sign on and set the password to the    configured value.  Use of this userid/password will be automatic from    this point on and it should not be necessary to sign on again.    The UKEY program which resides in MARS*MARS is used to submit a TM keyin    to the requesting userid/terminal when a reload run completes without    error.  If you wish to use this program to issue non MARS-related keyins    in batch runs you should be sure that the appropriate keyin group(s) are    enabled (in addition to COMMUN) in CONSOLE screen 2.  Documentation for    proper usage of the UKEY program can be found at the start of the    UKEYMAIN element.19. Edit and install the RUN/RLDCTL runstream.  RLDCTL is a program which    talks to MARS via the reload control bank (MRCBNK) and starts reload runs    upon request.  RLDCTL operates in a continuous batch environment.  The    started runs must be able to become privileged, so if this is restricted    to certain accounts and userids at your site, be sure the RLDCTL run is    using the proper ones.    The RLDCTL program creates a PRINT$ audit of all reload activity.  This    may be printed via the II RLDCTL BRKPT command, or RLDCTL may be run with    the 'B' option, which will breakpoint automatically every midnight.    RLDCTL may be terminated with the II RLDCTL TERM command.    Once the runstream has been edited, it should be started, and your local    boot procedure should be updated to ensure it is started each time the    system is rebooted from then on./20. Now that you have an Archive History File with valid data and the reload    controller is running, you may test the online reload facility.  Select a    file from the summary report produced in step 17.  This should preferably    be a large file whose contents are easily verified.  Either the original    file may be deleted, or its contents may be loaded into a file with a    different name.  The following example illustrates the latter:    >@MARS    MARS <level, etc...>    * >SELECT QUAL=BUDGET,FILE=PRINTRPT10,CYC=14    <Selection list follows>    SELECT* >PRTF 1    <Detailed information follows>    SELECT* >RELOAD 1=TEST*PRINTRPT10.    1 FILES SELECTED FOR RELOAD.    SELECT* >COMMIT    1 FILES SELECTED FOR RELOAD.    RELOAD NOTIFICATION TO TERMINAL, USERID OR NONE? <T,U,N> >T    START BATCH RUN TO RELOAD FILE(S)?  <Y,N> >Y    BATCH RUN <RLxxxx> HAS BEEN STARTED TO PERFORM THE RELOAD.    * >EXIT    END MARS.    If possible, the file contents should be verified after the run fins.    This process may be repeated several times with different files if    desired.  Note that the CYC parameter on the SELECT command is optional,    and one or both of the QUAL and FILE parameters may end with a wildcard    character (#).  Multiple SELECT commands may be given to append files to    an existing list.  Many files may be reloaded by a single run.  See the    user's manual for more detailed information.21. The batch reload processor, FETCH, should be tested now.  Reload into a    different name is not possible with FETCH, so a suitable file from the    read-only archive should be selected for this test and deleted.    >@DELETE  BUDGET*PRINTRPT10.    >@FETCH,A  BUDGET*PRINTRPT10.    FETCH <level> <date/time>       BUDGET*PRINTRPT10(14) WAS ARCHIVED ON <date> - WILL BE RELOADED       CATALOGED: <date> AT <time>  LAST REFERENCE: <date> AT <time>    *USE @FETCH TO SPECIFY ANOTHER FILE, OR TRANSMIT TO START RELOAD*    ><cr>    *RUNID: <RLxxxx> STARTED AT <time> TO RELOAD FILE(S)      WAITING...    *RELOAD RUN COMPLETED SUCCESSFULLY AT <time>       BUDGET*PRINTRPT10(14) HAS BEEN ASSIGNED (A)    END FETCH./22. The next step is to create the group account table, GROUPACCTS.  First,    a word about how MARS handles account numbers and determines who is    responsible for each file in the system.    The exception report and the expiration report are intended for    distribution to the person or group responsible for each file listed.    Because of this, files are categorized by person/group in each report.    Ownership of a file is determined by the account number of the file.    This is either:      (1) The "owner account" of the file's qualifier if the qualifier is          registered with MARS and an owner account was specified, or      (2) The account number as recorded in the MFD.    Once the account is determined by the above rules, the group account    table is searched.  The owner of the file, which may be a person or user    group, is determined by the '>' image directly preceding the account    number in the table.  If no match is found, the owner defaults to the    first '>' image in the GROUPACCTS element.    The element MARS*MARS.GROUPACCTS/EXAMPLE shows what the GROUPACCTS    element should look like.  It contains additional information.  With this    is a guide, you should now make a GROUPACCTS element for your site and    include it in the MARS*MARS file.23. Edit and install RUN/EXPIR-RPT.  This run produces the archive expiration    report, which should be distributed to the responsible user/group(s) as    soon as it is produced.  It should be scheduled to run on a Monday,    before or after (but not during) an archive.    This is the final indication given by the MARS system before files    expire, and users should be encouraged to review it carefully.  All files    which are about to expire are included on this report, except those under    control of a FILE entry which had the <DNN> flag set at the time of    archive.    You may choose to test this report before beginning production archive    runs.  It will not produce any output unless the read-only archive copied    one or more files with an expiration less than 35 days./24. Edit and install RUN/EXCEPTIONS.  This report compares current files from    the MFD with registered qualifier/file entries in the Archive Control    File.  Its purpose is to ensure that files are properly registered with    MARS.  Output is sorted by responsible user/group and may be distributed    as necessary.  Separate documentation for this report is included with    the MARS release (DOC/EXC-REPORT).    The SELECT program is used to produce the report, and a maximum of    <M$ARCMAX> files may appear on the list.  All unregistered files are    normally listed, and since most files will initially be unregistered, the    program will quickly reach its maximum and remaining files will not be    listed.  For this reason, an option has been provided to omit this    criteria, allowing the full report to be produced from the beginning.    Once most files are registered, the run should be edited and the 'U'    option removed from the SELECT execution statement.25. Edit and install the RUN/FULL-RPT and RUN/WEEKLY-RPT runstreams.  These    runs produce a listing of all current archived files and all files    archived within the past week, respectively.  These reports are not often    used because all of this information is also available online via the    MARS SELECT command.  A reasonable plan would be to run the full report    on the first week of the month and the weekly report on all other weeks.26. Edit and install the RUN/TAPE-RPT runstream.  This report lists all    current archive tapes including file count, creation and expiration date.    It is run at the site administrator's discretion.    There is code in the program ARSTAT which interfaces with TMS, the Tape    Management System provided by P-Squared Software, Inc.  The purpose of    this code is to verify that information in the TMS database corresponds    to information in the Archive History File.  This can be very useful to    ensure that all archive tapes are current.    The TMS code in the released version of ARSTAT is turned off.  If your    site uses TMS you can take advantage of this feature by editing the    program and changing a '0' to '1' at line 30.  The element MAP/ARSTAT    must also be updated to IN the relocatable TMS*TMS.TMS$ .  ARSTAT then    should be recompiled and recollected.  Finally, element RUN/TAPE-RPT    should be updated with the 'V' option added to the ARSTAT execution    statement./27. Edit and install the RUN/STATISTICS runstream.  This is intended to be    run on a weekly basis, before or after (but not during) an archive.  It    must be done consistently to be effective.  The statistics report will    show the growth of your archived data by exception period.  Tape counts,    run counts and track counts are included in the report.28. Edit and install the RUN/FILIST runstream.  This is an optional feature    that provides a listing of all mass storage files, grouped by owner (as    determined by GROUPACCTS).  It is ideal for periodic distribution, as    each user sees only the files for which they are responsible.    A summary report of mass storage usage by account is also produced by    this run.  It can be used to identify large users, and if produced on a    regular basis, can chart the reduction of storage usage as more and more    files are registered with MARS.29. Edit and install the RUN/CONS-RELOAD runstream.  This will allow the    console operator to reload archived or saved files.  If installed as    distributed, the operator will be queried for the type of reload:    0-RELOAD FROM ARCHIVE OR FAS SAVE TAPE?  AF    This is analogous to the difference between @MARS and @MARS,F.  You may    choose to create two different runs (i.e. RLDARC and RLDFAS) which will    bypass this question.  In the first run, execute CNSRLD with an 'A'    option, in the second, with an 'F'.  When the reload type has been    determined, the following message will appear:    0-ENTER QUAL*FILE(CYCLE)<,YYMMDD>  OR  GO, ABORT    The qualifier, filename and cycle all must be entered.  If the same file    has been archived/saved more than once and an earlier version is desired,    the date of the archive or save must also be specified.  Up to    <M$RELDMAX> (default = 100) files may be entered.  When finished, enter    GO to start the reload or ABORT to cancel.  Console reloads are started    by RLDCTL in the same way as those initiated with the MARS Processor and    the FETCH Processor./30. Edit and install the RUN/ARCUPD runstream.  This run is used when ARCHIV    cannot be run to completion.  It performs the Archive History File    rebuild, which must be done before newly-archived files can be reloaded.    Once an archive begins writing to tape, FETCH is locked out until the    archive fins normally or an ARCUPD is run.  This run does not need to be    tested separately.  The functionality of the REBUILD program has already    been tested by the read-only archive.31. You are now ready to begin production archiving.  The following should be    done after all of the previous runstreams have been installed and tested    (if appropriate), since most read the Archive History File.    The output tapes produced by the read-only archive are no longer needed.    They can be expired and re-used.    Erase and re-initialize the Archive History File:    >@ASG,A  SYS$*ARCHIST$        . Add key(s) if used    >@ERS  SYS$*ARCHIST$.    >@XQT,A  MARS*MARS.HISTINIT    ARCHIVE HISTORY FILE INITIALIZED ON <date> AT <time>    >@FREE  SYS$*ARCHIST$    Next, edit the archive runstream that was created in step 15.  Go to line    21 (or thereabouts) and add the 'D' option to the execution statement for    the SELECT program.  This will cause future executions to remove archived    files from the system after they are copied to tape.    If you want the operator to be able to choose the number of tape drives    used by the ARCHIV run, add the 'N' option to the SELECT execution    statement.  If not, leave it off.  (See page 1 of MGPDEF, user parameters    M$TAPDEF and M$TAPMAX, for additional information).    From this point on, a read-only archive cannot be done.  Select-only    archives can still be done at any time by starting the ARCHIV run with a    condition-word value of 1.  Production archiving (with file deletion) can    now be done by starting this run without a condition-word value.    If you have been using FAS to archive files and have modeled your initial    MARS archive parameters after existing FAS criteria, it is probably best    to begin MARS archiving on the same schedule.  Be sure that no expiration    periods are completely bypassed, however.  You may find that as more and    more files are registered, the savings are so great that daily archives    are worthwhile.  Most MARS sites archive every day and it's not unusual    to remove 100,000 or more tracks per archive./32. The following notes regarding the archive process are provided as an aid    to understanding and for guidance in recovery situations.    **********************************************************************(A) ARCHIV can always be errored safely before any tapes have been mounted or    before any mounted tapes have past load point.(B) ARCHIV can be errored in emergency circumstances as tapes are being    written.  It is VERY IMPORTANT that all output tapes be retained.(C) It is important to restart ARCHIV as soon as possible in case (B) above    or if it errors because of a bad output tape/drive or is running when a    system stop occurs.  There are no recovery options; ST ARCHIVE will do.    ALWAYS RETAIN ALL OUTPUT TAPES!(D) If ARCHIV errors on its own for reasons other than a bad output tape, the    operations staff should notify you before it is restarted.  If the error    occurred because ACP didn't like something about a file, you should put a    bypass on the offending file and restart the archive.  When ACP aborts an    archive for this reason it should be considered an error in MARS!  Please    report the problem to the author if this happens.(E) ARCHIV may run to completion and give the message ERROR(S) DURING ARCHIVE    - NOTIFY SYSTEMS.  The operations staff should tell you when this    happens.  Look in the SYS$*ARC-BRKPT file to see what went wrong.  ACP    archive errors always print a line of asterisks - use this to find the    error locations in the file.  Some errors, such as file not available or    file not found, print the asterisks but do not increment the error count.(F) Users will be unable to use MARS to reload newly-archived files until the    ARCHIV run has finished its last phase (execution of the REBUILD    program).  Runs using the FETCH Processor to reload files will go into a    wait state until ARCHIV fins normally.  This is because the REBUILD    program constructs an internal lookup table as part of the creation of a    new cycle of the Archive History File, and files which have just been    archived cannot be located until this is done.  If, in an emergency    situation, ARCHIV cannot be run to completion, start the ARCUPD run    (after erroring ARCHIV, if necessary) to rebuild the history file.  No    further recovery is required.(G) Every precaution should be taken to guard against loss of the Archive    History File.  When ARCHIV fins normally, both the current and the (-1)    F-cycle of this file contain all relevant information.  In the event that    the current cycle is lost or destroyed, the ARCUPD run can recover it    completely if the (-1) cycle is intact.  A backup of the (-1) cycle    should not be used for this unless it was made after the most recent    archive run completed./    ARCHIV notes (continued)    **********************************************************************(H) The last step of the copy phase of the archive run copies the current F-    cycle of the history file to an arbitrary output tape.  (This file will    become the (-1) cycle when ARCHIV fins.)  When this step is done, the    following message is displayed on the console:     SYS$*ARCHIST$(ccc) AT POS ppp REEL rrrrrr    If you have the misfortune to lose both F-cycles of the history file, it    can still be recovered by using ACP to restore it from this tape.    >@ASG,T  IBACKUP,T,rrrrrr    >@MOVE  IBACKUP,<ppp-1>    >@ASG,A  SYS$*DLOC$/r/w    >@ACP,R  IBACKUP.    The ARCUPD run should now be run to reconstruct the current cycle.  As    verification, it will produce a summary report that should be the same as    the one produced at the end of the most recent archive.(I) If the current cycle of the history file is lost during an archive run,    the only option available is to restore all of the archived files to disk    and start over.  This is not a particularly elegant method of recovery,    but it will work.    >@ASG,A  SYS$*DLOC$/r/w    >@ASG,T  IBACKUP,T,reel1/reel2.../reeln  . all tapes for one exp period    >@ACP,R  IBACKUP.    >@ACP,R  IBACKUP.    >@ACP,R  IBACKUP.     (Continue until all files are restored - ACP will error.  If all reels      have not been read, continue with the remainder of the set.)     (Repeat the above for all expiration periods archived this day.)(J) When an archived file is reloaded into its original name, the reload flag    is set in the history file.  The information is retained, but after this    point the user must use SELECT,A or SELECT,R to list or reload the file    (after the flag is transferred to the lookup table by the next history    file rebuild).  When the history file is recovered as in (G) or (H)    above, reload information for the day will be lost./33. The following steps in the MARS installation process involve the FAS    Save-History feature of MARS.  In order for this to become operational,    the Save-History File (SYS$*SAVHIST$) must be updated at the end of every    SAVE and SAVALL.  This is accomplished with the SAVHST run.    Edit and install the RUN/SAVHST runstream now.  Changes include:    - Add the account and userid to the @RUN card    - Replace the @PRIV command with whatever it takes to make the run      privileged    - Include the expiration (in days) for SAVE and SAVALL tapes created at      your site.  A single parameter is required after execution of the      REBUILD program; change the examples already in the run.    There is no test mode for this run.  Since it is basically read-only and    does not affect user data, testing is not necessary.  Large numbers of    errors may be generated if SAVHST is run at an arbitrary time; this is    another reason not to test.34. Edit your SAVALL run and insert the following command at the END of the    run.  This must be at the point where all backups are complete.      @START  <MARS-start-file>.SAVHST,1    The first execution of SAVHST will produce a printout showing that an    initial update was performed.  Since most files should have current    backups (less than 24 hours old), few error messages will be generated.35. After the initial SAVALL/SAVHST run is complete, and BEFORE THE NEXT SAVE    IS DONE, edit your SAVE run and insert the following (at the end):      @START  <MARS-start-file>.SAVHST    From this point on, the FAS Save-History File update process will be    automatic.  Depending on the expirations of your SAVE and SAVALL tapes as    set in the MGPDEF element, it may take several weeks for the history file    to build to a complete state, where all current backup copies are    available for online inquiry/reload.  Expiration is also automatic, so    the file will grow for awhile and then level off.    At any point after the initial SAVHST run, you may verify correct    operation by using @MARS,F to reload a saved file.  The command syntax is    exactly the same as for an archive reload - the only difference is that    RLDCTL will generate calls to FAS instead of ACP to do the work.  Reload    into a different name is also supported for FAS reloads.    After the initial update, SAVHST will not generate a printout unless    errors are detected.  The most common errors involve files that are    occasionally but not regularly backed up because they are usually    assigned to someone else when SAVE or SAVALL is running./36. If you have been using FAS to archive files to tape, it is possible to    merge your existing FAS archive history file (SYS$*FAS$ARCHIVE or    SYS$*ARCHIVE$) with the MARS Save History File.  This will provide online    inquiry/reload of all FAS-archived files through @MARS,F.    Before this is done, you need to be aware of a security concern.  When a    keyed file is reloaded into a different name by FAS, the keys are not    placed on the output file.  For this reason, MARS will not allow a    nonprivileged user to reload a FAS-saved keyed file into a different    name.  The FAS archive history file does not contain any indication of    original file keyed status; therefore any user may reload any FAS-    archived file into a different name even if the original file had keys.    If this situation is intolerable at your site, you should not proceed    with the remainder of this step.    Another concern is that of private files.  MARS will not allow reload of    a private file unless the user is privileged or using the original    account (or project, as determined by M$PVTACC).  The SYS$*ARCHIVE$ file    has no indication of privacy, and FAS seems to be setting the private bit    for all files in the SYS$*FAS$ARCHIVE file.  Therefore, all FAS-archived    files are marked PUBLIC in the Save-History File and any user may reload    any of these files.    If you decide to proceed, determine which FAS archive file you are using.    If you are on a FAS level earlier than 3R1 or have never used the    CONVERT_ARCHIVE command, you are using SYS$*ARCHIVE$.  Otherwise, you are    using SYS$*FAS$ARCHIVE.  There are two different runstreams, one for each    file - RUN/ARCHIVE$-MRG and RUN/FAS$ARC-MRG, respectively.  Edit the    appropriate runstream, making the following changes.  Do not save this    runstream in a file other than MARS*MARS - it will be used only once.    - Add the correct account/userid to the @RUN card    - Place keys on files where appropriate    - Determine the expiration for FAS-archived files (see below).    At line 15 in the file, directly following execution of the REBUILD    program, is a single numeric parameter.  The run as released has this set    to 100.  You have two choices: (1) All FAS-archived files will expire a    certain number of days from the time the merge is run, or (2) FAS-    archived files will expire a certain number of days from the time they    were archived.  In case (1), code the number as released, change the    value to the number of days desired.  In case (2), append a single 'plus'    sign (+) in front of the number and change the value to the number of    days.  The parameter must begin in column 1.  Note that if you use the    second form, it is possible that some files will have already expired and    will not be merged into the Save History File.    The run may be started anytime after the first SAVHST has completed.  It    should be run ONLY ONCE!  You may get errors if some FAS-archived files    have more than four backup reels - these will not be merged.  When    complete, test by using @MARS,F to reload one of the merged files./37. If you are going to use the critical file backup feature of MARS and plan    to store the backup tapes offsite, register the file names, as defined by    the parameters <M$CFBQUAL> and <M$CFBFILE>, with your tape management    system.  Several entries should be made.  Each should have the unit    number appended to the name defined by <M$CFBFILE>.  Unit numbers range    from 2 to <M$TAPMAX>.38. The MARS software can be operated on two or more systems without re-    generation, if all of the user parameters are the same.  As an aid to    this, several of the programs which produce reports have a common feature    which allows a system-id (up to 12 characters) to be supplied in the    runstream.  The system-id will then appear in the heading of all of the    generated reports.  This feature is completely optional and is    unnecessary if you are only running MARS on a single system.    To utilize this feature, add the 'H' option to the execution statement    for the desired program, and immediately follow the @XQT card with a    parameter card containing the system-id in columns 1-12.  This should    proceed all other possible data input into the program.  The following    runs and programs may be updated in this way:            Run            Program(s)           ARCHIV          SELECT, REBUILD           ARCUPD          REBUILD           ARCEXC          SELECT           ARCRPF          REBUILD           ARCRPW          REBUILD           ARCEXP          EXPRPT           ARSTAT          ARSTAT           ARCTAP          ARSTAT           FILIST          MSREP, LISTER39. After several archive and Save-History runs have completed, cycle limits    should be placed on all of the cycled files.  The suggested limit for    SYS$*ARCHIST$ and SYS$*SAVHIST$ is three.  The file SYS$*SAVHST-MFD is    cycled for recovery purposes in case a SAVHST update run were to abort.    It should also have a limit of three.  SYS$*ARC-BRKPT should have a    higher cycle limit, as a new cycle is created each time an archive run is    started.  The suggested value is 5 cycles.40. The FILES processor is new to MARS 3R1.  It allows users to get a quick    listing of all files having a specific qualifier and/or filename.    Separate documentation has been provided (DOC/FILES).  The database used    by the FILES processor is produced by RUN/FILEXT runstream.  This run    must be able to make itself privileged.  After editing it can be placed    in any convenient location.  It should be started regularly so that the    database is current.  A suggested schedule is 9AM, 1PM and 5PM weekdays./41. The final step in the MARS installation process involves registration of    all production qualifiers and user education by the site administrator.    Hopefully, this will be followed rather quickly by user registration of    those files for which they are responsible.  This process can take    several weeks and should not be forced.  It will work to your advantage    if users see MARS as something you are doing 'for' them instead of 'to'    them.    It never hurts to give a little encouragement, however.  When MARS was    first installed, files which were unreferenced after 40 days were subject    to FAS archiving, so 40 was the initial reference limit on the master    wildcard qualifier*file.  After a while, we announced that the reference    limit on unregistered files would be dropped little by little each week    until it reached three days.  The cycle limit was also gradually reduced    from 32 to 1 for unregistered files.  By the time this process was    complete, users had taken it upon themselves to register almost all of    their files, and there were few complaints.    As you go through this process, keep a couple of things in mind.  If the    number of user files seems overwhelming, see that the larger ones are    registered first.  In most systems, fewer than ten percent of files    occupy ninety percent of the space; the exception report will help to    identify these.  Also, try to encourage users to set a cycle limit of one    on most or all of their files.  Back cycles are usually kept only for    error recovery and this seldom justifies retaining them online.42. So, you are finally done.  What do you think of MARS?  Any problems    during the installation?  Any suggestions for improvement?  If you have    not done so already, I'd appreciate it if you would give me a call and    tell me of your experience with MARS.  This will benefit you as well,    because I will keep your name and address and if there are future    corrections to the software, I will forward them to you.    MARS has reduced online disk requirements, curtailed or eliminated the    need for unloaded files, streamlined operations and improved productivity    at several 1100/2200 sites since 1991.  I hope it brings the same    benefits to your organization.                                       Ward Condit                                       November, 1995@ELT,SIQ MARSREL$.DOC/UPDATE,,,135720132037,001H                     M. A. R. S. Update Reference    This document is intended to serve as a companion to the InstallationReference for those sites that are currently using MARS level 2R2.  Step bystep instructions are provided to ensure the correct installation sequence.MARS level 3R1 is totally upward-compatible with level 2R2.  Following is alist of significant enhancements:- Operation in a Multi Host File Sharing (MHFS) environment is supported in  level 3R1.  A separate document has been provided to describe the  additional functionality.- A zero expiration feature has been provided to allow files to be purged  when reference or cycle limits are exceeded and a current backup exists.  The <DEL> flag allows the site administrator to override the backup  requirement for specific files.- Files that span up to five removable packs can be archived.  The previous  limit was one pack.  There is a minor limitation; multiple pack information  is stored only on the archive media.  Therefore, the PRTF command will only  display one pack-id even if the file resided on more than one pack.  Reloads will restore to the original list of packs, however.- The <ACY> flag has been removed.  All cycles of a file are now normally  considered for archive even if multiple cycles were created on the same  day.  The <DCY> flag has been added, to retain the original functionality.  When upgrading from 2R2 to 3R1, all previously unflagged files will have  <DCY> set and all files that had <ACY> set will be unflagged.  This will  ensure upward compatibility between levels.- The <DNN> (do not notify) flag has been added so that specific files can be  excluded from the expiration report.- Under the earlier level, sites could determine which expiration period(s)  to process based on the day of the week.  Level 3R1 retains this feature  but also allows processing of expirations to be determined based on the  number of tracks that will be copied when the archive run is started.- A reload notification feature allows an optional message to be sent to a  waiting demand user after a reload has completed.  The UKEY program that is  used to send the message can also be incorporated in batch runs to automate  keyins for other purposes.- The SUBSTITUTE QUALIFIER command has been added to the MARS processor to  allow a group of files to be reloaded under a different qualifier, without  the need to specify each file name individually.- The right half of the Archive Selection Report has been redesigned to give  more information.  The display format of the LIST FILES command has also  been changed to better indicate which flag(s) are set for each file entry.- There is a new parameter (MXR) which can be used by the site administrator  with the REGISTER and ALTER commands.  It allows the reference limit for  specific qualifiers to exceed the configured maximum (M$REFMAX)./*Level 3R1 features (continued)- The 'owner account' feature (OWN parameter of REGISTER, ALTER) is now  optional.  Sites wishing to use the account number as recorded in the MFD  to determine ownership can now do this on a file-by-file basis.- The ACP processor will now process COPY,G format input tapes.  A file name  verification feature and an error-bypass option have been added.  Also,  files saved by a privileged run (S option) can now be deleted after the  save.  Neither of these features affect programmed archive/restore  operation of ACP.  See the ACP document for more information.- The FILES processor uses an existing database to provide a listing of all  files with a specific qualifier and/or filename, with very fast response.- A permanent expiration feature has been added.  See MGPDEF (page 4) for  more information.  Use sparingly.*** Following is a list of new features in level 2R2.  This level was    previously available from the USE Inc. Program Library Interchange    (UPLI).- The FETCH Processor provides batch reload capability and synchronization  with reload operation, giving archived files the same accessibility as  traditional unloaded files.- User-defined storage classes may be created which can partition a system  into separate sections, each containing one or more removable packs.  Each  class has its own unique set of archive parameters.  One class may contain  the reserved packid, <FIX$$$>, which denotes fixed storage.  When updating  to 2R2, all existing archive parameters are placed in the DEFAULT class,  which is initialized to archive only from fixed storage.- A new flag attribute, 'CRT', can be attached to a file entry with the ADD  or MODIFY commands.  Matching 'critical' files, when archived, will be  copied to two separate tapes before being deleted.  The backup tapes are  created with a special name so they can be kept offsite if desired.- The history files are no longer limited to 200,000 entries.  The new limit  is above 10 million.- Reloads from the FAS Save-History file are now limited to four reels per  file.  The original limit was two reels.- A new run, FILIST, produces a mass storage usage by account report and a  listing of cataloged mass storage files sorted by account owner.- Code has been added to ACP to allow restore of security information for  sites that are using this feature.  This code has been tested but it has  not been operated in a production environment.- When a reload run requires more than one input tape, a list of required  tapes is displayed on the console when the run starts./    The following instructions describe in detail how to upgrade your MARS2R2 system to level 3R1.  Soon after its release to UPLI, an update to 2R2was provided.  You are running the updated version if the configurationparameter M$EXPSAVE is not defined in MGPDEF.  If you have not installedthis update or are running a level earlier than 2R2, DO NOT upgrade directlyto 3R1.  Contact the author for further assistance.    The update process is separated into 3 parts to minimize MARS systemdowntime.  The first part can be done while level 2R2 is still operating, asit does not affect the production file (MARS*MARS) or any of the other systemfiles.  The second part requires suspension of all MARS activity, includingtermination of the reload controller.  It will take from one to two hours tocomplete.  User file reloads cannot be done during this time, and the MARS,FETCH and ACP processors will be unavailable.  The third part can be doneafter the 3R1 software is operational.    Please follow these instructions exactly as stated and in the ordershown.  Do NOT attempt to mix software from different levels.  In most casesit will fail to operate.  In the worst case, erroneous results may occur.*Part 1 (May be done at any time)1.  Copy the new release onto your system.  Re: IR step 2.2.  If you copied the RPROCS$/SORT<level> element into MARS*MARS before, do    so now into MARS*RELEASE.  If this element is in SYS$LIB$*PROC$, no    further action is necessary.  Then build and test the MFDEDT program.    Re: IR steps 3 and 4.  Runstream updates are not necessary unless you are    executing MFDEDT with different options.3.  Customize the global parameter element, MGPDEF.  There are several new    parameters, so this process must be repeated.  Update into MARS*RELEASE.    Then build MARS 3R1.  Re: IR steps 5 and 6./*Part 2 (MARS system downtime required)1.  Terminate the reload controller, using the console command:          II RLDCTL TERM    Wait for all active and backlogged reload runs (RLxxxx) to complete.  Do    not allow any other MARS-related runs to start.  If any are in backlog,    remove them and make a note to restart later.2.  Deinstall the level 2R2 software.  *Note: this will remove the ACP and    FETCH processors, which may be in use elsewhere.  If this is a potential    problem, be sure notification has been made in advance.  The following    procedure must be done under the security officer's userid.    >@QUAL  <COMUS-db-qual>    >@COMUS    >DEINSTALL  PRODUCT=MARS,2R2 MODE=LOCAL FILE=SYS$LIB$*MARS    When the deinstall completes normally, remove the original library file.    >@DELETE,C  SYS$LIB$*MARS.3.  Catalog a new cycle of the MARS production file, and copy in the contents    of the release/generation file.    >@ASG,UPV  MARS*MARS(+1),F///1000    >@COPY  MARS*RELEASE.,MARS*MARS(+1).    >@FREE  MARS*MARS(+1)4.  Edit your existing ARCUPD runstream, making a new run, AHFCVT.  Remove    all calls to the FETCH processor.  Be sure that the REBUILD program is    being called from MARS*MARS.  The output should be placed in MARS*MARS -    it will be used only once.  When finished, start this run.  It will make    a new cycle of the Archive History File, in level 3R1 format.5.  Check your existing SAVHST run.  Be sure MFDEDT and REBUILD are being    called from MARS*MARS.  Then start this run, without a SETC-value.  It    will make a new cycle of the FAS Save-History File, in level 3R1 format.6.  Use COMUS to install required components of level 3R1.  Re: IR step 7.    Wait for (4) and (5) above to fin normally before starting the    installation run.  Verify the installation.  Re: IR step 8.7.  If you have enabled the reload notification feature (M$RSIUP set to a    non-null value), install its userid/password with SIMAN.  Re: IR step 18.    If your existing RLDCTL runstream was in MARS*MARS, copy it to the newest    cycle.  If not, no change is required.  This runstream has not been    updated.    Start the RLDCTL run now./*Part 2 (continued)8.  Verify proper MARS processor reload operation.  Also verify proper    operation of @MARS,F.  Re: IR step 20.9.  Verify FETCH processor operation.  Re: IR step 21.10. There have been two significant changes to the ARCHIV runstream.  If you    have zero-expiration configured (M$EXPZERO > 0), the SAVHIST$ file must    be assigned during file selection.  See lines 6 and 27 of RUN/ARCHIVE.    Also, the new run makes a backup copy of the SAVHIST$ file on the last    archive tape.  See line 37 of RUN/ARCHIVE.  Update your existing ARCHIV    run if you wish to include this functionality.  After updating the    runstream, test archive operation by running a select-only archive.  If    ARCHIV has already been run for the day, few files may be selected.    ST ARCHIV,1                (Wait for fin before proceeding)11. Copy your GROUPACCTS parameter element to the new cycle of the MARS    production file.  The format of this element has not changed.    >@COPY,S  MARS*MARS(-1).GROUPACCTS,MARS*MARS.12. The runstreams for the expiration report, exception report, full and    weekly archive reports, and file list report have not changed.  Copy to    current cycle if originally in MARS*MARS.  These may be tested (testing    of the full archive report is unnecessary if the weekly report looks OK).    Re: IR steps 23,24,25 and 28.13. Copy the runstream for the tape report to the current cycle if it was    originally in MARS*MARS.  Modify the existing ARSTAT program for TMS if    this had been done before.  Re: IR step 26.14. Copy the statistics report runstream if necessary.  This report should    not be tested at this time, as it updates counters in the history file    and this should be done only at normally-scheduled periodic intervals.    Re: IR step 27.15. Copy the console-reload runstream if necessary.  No changes are required.    Testing is optional.  If there were no problems with steps 8 and 9, this    function should operate correctly.  Re: IR step 29.    MARS level 3R1 is now fully operational./*Part 3 (May be done after level 3R1 is installed)1.  Edit and install the RUN/FILEXT runstream.  This is a new function for    level 3R1, so there will not be an existing runstream.  Re: IR step 40.2.  Review IR step 32.  These recovery procedures should be followed if    problems occur during the archive process.3.  You can now begin using the new features of MARS level 3R1.  Inform your    users about the zero-expiration feature, the <DNN> flag, and how to use    reload notification.  Distribute the documentation for the FILES program.    Review the documentation for ACP 3R2.  This level introduces COPY,G input    capability and delete-after-save as well as multi-host functionality.@ELT,SIQ MARSREL$.DOC/MHFS,,,136705132037,001H               Using MARS in a Multi-Host Environment    This document is intended to serve as a guide for those sites thatwish to use MARS in a Multi Host File Sharing (MHFS) environment.  Level3R1 incorporates a new parameter, M$MHFSHARED.  When set to one, thisallows the Archive History File and the Save History File to be cataloguedin the SHARED directory, providing the following advantages over non-sharedoperation:  - Files residing in the SHARED directory can be managed by the MARS    software in the same way as those in the STD directory.  These files    are not accessible by MARS unless M$MHFSHARED=1.  - Users can reload any file, regardless of directory or host of origin,    from any host.    If you decide to use shared history files, the following sectionshould be used as a companion to the installation reference when performingan initial installation.  Here are some key concepts that will aid inunderstanding usage in a shared environment:  - Some of the programs supplied with MARS have options to determine    which directory will be used for a specific purpose.  These options    have been standardized to simplify operation as much as possible.  The    <U> option specifies the SHARED directory and the <Y> option specifies    the STD directory.  These programs are:    ACP - Source/destination directory for archive/restore    FETCH - Specify the directory from which to reload    MFDEDT - Specify the directory to process  - The site administrator designates one system as the "primary" host.    This is the system that is used to back up (via FAS) and archive (via    MARS) files from the SHARED directory.  - Some of the runstreams are specific for MHFS operation.  Those having    a suffix of <MHFx> should be used instead of the non-suffixed versions    when installing MARS.  The suffixes are as follows:    MHF1A indicates the run has direct MFD input from the local STD and          SHARED directories.  It should be run only on the PRIMARY host.    MHF1B indicates the run has direct MFD input from only the local STD          directory.  It should be run on all secondary hosts.    MHF1  indicates the run should be used on all hosts.  There are no          primary vs. secondary distinctions./    If you have MHFS and have decided to use shared history files, thefollowing additional considerations apply.  Read this section along withthe installation reference as you install the MARS software.  Paragraphnumbers are the same.2.  The MARS*RELEASE file should reside in the STD directory on the host    that will be first in the installation sequence.4.  This test should be done once for the STD directory (add the 'Y'    option) and once for the SHARED directory ('U' option).  When    complete, copy the MFDEDT program to a file in the SHARED directory    and repeat the test for all STD directories on other hosts.  If larger    buffer counts are necessary for some directories, take note of this    for later runstream modification.  Don't update the runs at this time.7.  SYS$LIB$*MARS should be catalogued in the STD directory.  The    installation sequence must be repeated for each host.  It is best to    complete the installation for one host before doing the others.9.  The MARS*MARS file should be catalogued in the SHARED directory.  Do    this step only once.10. All of these files should be catalogued in the SHARED directory.  Do    this step only once.11-14. Do these steps only once.  The control file resides in the SHARED       directory, so all parameters affect user files in all directories.15. The runstream to update is RUN/ARCHIV-MHF1A if you are installing on    the primary host, RUN/ARCHIV-MHF1B otherwise.  In addition to the    changes noted, update the call(s) to MFDEDT if so indicated in step 4.    This runstream should not be kept in MARS*MARS.  A suggested location    is SYS$LIB$*RUN$.ARCHIVE .16. Do this step once for each host.17. The read-only archive can only be done during initial installation.    If you decide to begin production archiving on one host before    installing MARS on other hosts, this step must be skipped during later    installations.18-21. These steps must be done once for each host.22. Do this step only during the first installation.23. Do this step only once.  The runstream to use is RUN/EXPIR-MHF1.  The    expiration report lists soon-to-expire files from all hosts; it only    needs to be run from the primary host.24. This step must be done once for each host.  Use RUN/EXCEP-MHF1A if    installing on the primary host; RUN/EXCEP-MHF1B otherwise.  Make    changes to the MFDEDT call if necessary.  Place in a local start file./25. Do this step only once.  The runstreams to use are RUN/FULLRPT-MHF1    and RUN/WKLYRPT-MHF1.  The reports list files from all hosts; they    only need to be run from the primary host.26. Do this step only once.  The runstream is RUN/TAPERPT-MHF1.  The    report lists tapes from all hosts.27. Do this step only once.  The runstream is RUN/STAT-MHF1.  Statistics    include activities from all hosts.28. Do this step once for each host.  The runstreams are RUN/FILIST-MHF1A    for the primary host; RUN/FILIST-MHF1B otherwise.  Make changes to the    MFDEDT call if necessary.  Place in a local start file.29. This runstream must be accessible from each host.  There are no    differences between hosts.  Use the standard runstream.30. This runstream must be accessible from each host.  Use RUN/ARCUPD-    MHF1.  There are no differences between hosts.31. If you wish to run read-only archives for multiple hosts, repeat the    first part of this step (through the erase and re-initialize of the    history file) as often as you like, going back to step (7) for the    next host in sequence.  Once the changes in the second part of this    step have been made for ANY host and the ARCHIVE run has been started,    the history file must never again be erased, and it is not possible to    do any more read-only archives.32. Recovery procedures are similar for all hosts.  Only one archive can    be running at once; the exclusive assign of the ARCMFD$ file keeps    this from happening.  If an archive aborts or is stopped for any    reason, be sure that it is restarted (or ARCUPD is run) on the same    host before starting another archive on a different host.33. Do this once for each host.  The runstreams are RUN/SAVHST-MHF1A for    the primary host and RUN/SAVHST-MHF1B for other hosts.  Make the noted    changes as well as MFDEDT changes if appropriate.  Keep the runstream    in a local file.34-35. This must be done once for each host.36. Use the runstream RUN/FAS$MRG-MHF1 to do this optional step.  It must    be run once for each FAS archive directory to be merged.  Follow the    instructions in the runstream.38. This may be done on any or all hosts at any time.40. Do this once for each host.  The runstream is RUN/FILEXT-MHF1.  Make    the noted changes as well as MFDEDT changes if appropriate.@ELT,SIQ MARSREL$.DOC/USER-REF,,,162610132037,001H                      M. A. R. S.   User Reference1.  Introduction    This document will describe user commands and features of the MassStorage Archive/Retrieval System (MARS).  The MARS system has the followingfeatures:  - Interactive retention control by the file creator/owner.  - Retention is based on days since last reference and number of existing    F-cycles.  - Files are archived to tapes which expire automatically.  The user may    assign one of several site-defined expiration periods to each file    registered with the MARS system.  - Qualifiers are registered with MARS by the site administrator.  (This is    usually someone on the Systems staff).  - Once a qualifier is registered, it is the responsibility of the user(s)    who maintain files under the qualifier to define their archive parameters    to MARS.  This is done in ACCESS mode.  - Qualifier and/or file entries may be wildcarded so that one entry applies    to several files.  - Information about files previously archived can be interactively    displayed and file(s) can be reloaded interactively.  This is done in    SELECT mode.  - The same type of information and reload capability is available for all    files saved on current SAVE or SAVALL tapes.    The MARS processor is used to perform all user-related functions.  Use ofassociated control software is restricted to the site administrator and is notdiscussed in this document.  The MARS system was presented at the USE, Inc.Fall 1990 conference and again at the Spring 1991 conference. The associatedpapers submitted for the Conference Proceedings provide a good generaloverview of basic operation.  Examples of MARS processor user interaction areshown, as well as several informative charts and diagrams./2.  Using the MARS processor, and basic modes of operation    The MARS processor is executed with the ECL command: < @MARS >.    MARS will print a signon line and place the user in ENTRY mode.  This isthe origination point for all user commands.  ENTRY mode is indicated by asingle asterisk (*) in the prompt.  The valid commands at this point areACCESS, SELECT, and EXIT.  EXIT (or @anything) will terminate MARS.   Allcommands and keywords may be abbreviated to three letters - the others are notsignificant.  For purposes of clarity, the full word forms will be used inthis document.2.1.  ACCESS mode    ACCESS mode is used to display and update the file parameters whichcontrol which files are archived, and which expiration period will apply tothe tape(s) used when a specific file is archived.  Only one qualifier at atime may be accessed.  In order to access a qualifier, two conditions must bemet:  (1) It must have been registered by the site administrator, and (2) Theuser must have a valid account number.  ACCESS account(s) for each qualifierare assigned by the site administrator.    When in ACCESS mode, the user prompt is <qualifier>*.  All commands fromthen on (until the next ACCESS or EXIT) pertain to file entries under thatspecific qualifier.  Valid commands are ADD, MODIFY, REMOVE and LIST. EXITreturns to entry mode, ACCESS is used to immediately access another qualifier.There is no OMIT in access mode.  Once a change is made, it is committed.2.2.  SELECT mode (archived files)    SELECT mode is used to display the status of previously-archived filesand to initiate file reloads.  The SELECT command builds a 'selection list' offiles.  Other commands may then be used to get more information about specificfiles and/or to initiate a reload.  Multiple SELECTs may be used to build alist that contains several different qualifiers and files.  All archived filesare selectable by all users.  For security reasons, only the owner of aprivate file may request its reload.    When in SELECT mode, the user prompt is (SELECT).  All commands from thenon (until the next EXIT) pertain to the list of previously-archived filesestablished by the first and subsequent SELECTs.  Valid commands are SUMMARY,PRTF, RELOAD, COMMIT and OMIT.  EXIT returns to entry mode.2.3.  SELECT mode (files backed up with FAS)    MARS normally selects from the list of archived files.  A secondarydatabase of system saved files (SAVE, SAVALL) can be accessed by executing theMARS processor with the 'F' option:  < @MARS,F >.    When operated in this way, MARS will only accept SELECT mode commands.The format and operation of these commands is the same, regardless of the typeof files being selected./3.  Wildcard Attributes    Parameters which will be used to match qualifiers and filenames may havea trailing character wildcard, the 'pound' sign (#).  This will cause a matchif all characters up to the (#) are identical.  If a parameter contains onlythe wildcard, it will match anything.    Wildcards may be used in either ACCESS or SELECT mode.  Operation inSELECT mode is quite straightforward, since a single parameter is beingcompared against a list of non-wildcard archived qualifiers or filenames.Consider the following example:   ED$TC#   matches   ED$TCJACK          but not  ED$TJACK   ED$TCX                                         ED$T   ED$TC   ED$TC    matches only  ED$TC   #        matches   (anything)    Operation in ACCESS mode is somewhat more complex, since a single non-wildcard cataloged qualifier or filename will be compared against a list ofuser parameters, any of which may contain the wildcard.  The general rule isthat the matching entry with the MOST specific characters will be selected toapply in each instance.    For example, assume (ED$TCJACK, ED$TC#, ED$TC, E# and #) are all recordedfile entries and the qualifier matches.  The following filenames would thenmatch accordingly:   EBX         matches  E#   ED$TCX      matches  ED$TC#   DOG         matches  #   ED$TCJACK   matches  ED$TCJACK   ED$TCJACKS  matches  ED$TC#   ED$TXJACK   matches  E#   ED$TC       matches  ED$TC    The same rules of hierarchy apply to wildcarded qualifiers.  If more thanone registered qualifier entry matches that of a cataloged file, the fileentries for the one with the most specific matching characters will becompared FIRST against the file.  If no match is found, file entries for thenext are compared, and so on.  For example, assume the following entry pairsare registered: (BUDGET*PR#, BUD#*#, #*ED$TC# and #*PR#).  Then:   BUDGET*PRINT-01     matches  BUDGET*PR#   BUDGET*ED$TCBUDGET  matches  BUD#*#   BUSINESS*ED$TCBUSN  matches  #*ED$TC#   BUSINESS*PRINT-01   matches  #*PR#/4. ACCESS mode commandsACCESS QUAL=<qualifier>,CLASS=<class>  This command must be used to enter ACCESS mode.  The qualifier given must  match the registered qualifier exactly, including the wildcard if the  qualifier was registered with one.  ACCESS QUAL=BUD# cannot be used to  access qualifier BUDGET.  The user account must be authorized to access the given qualifier.  If the  access is successful, the next prompt will be:  <qualifier>*  and other  access mode commands may then be used.  The CLASS parameter should be used only if so directed by the site  administrator.  This denotes the storage class for which the qualifier will  apply, and is a name associated with a group of pack-ids.  If the CLASS  parameter is given, the name appears in front of the qualifier at the  access prompt.  For example:    USER1>>BUDGET* >  Archive parameters for a qualifier associated with a storage class will  affect only those files which reside on the pack-ids contained within the  class.  If the CLASS parameter is omitted, the DEFAULT class is assumed.  In this  case, the class-id does not appear in the access prompt.  The DEFAULT class  pertains to files residing on fixed storage, unless the site administrator  has indicated otherwise.ADD FILE=<filename>,REF=<limit>,CYC=<limit>,EXP=<limit>,FLAG=<flag>  This command is used to make a file entry under the current accessed  qualifier.  The FILE keyword is required.  The <filename> parameter may  contain a wildcard.  Files cataloged on fixed storage which match both the  registered qualifier and this file entry will be archived if they meet  either the REF or CYC criteria.  REF is the reference limit in days.  Files unreferenced for MORE than this  many days will be archived.  The comparison is based on calendar dates, not  the time difference in hours.  If REF is set to zero, the file is taken in  the next archive.  There is a maximum and a default value for the reference  limit.  Ask your site administrator.  CYC is the cycle limit.  If more than this many F-cycles of a file are  catalogued, the oldest cycles will be archived.  CYC has a maximum of 32  and a minimum of 1.  The default is site-dependent./ACCESS mode commands (ADD - continued)  EXP is the expiration period of the tape that will be used to save the file  if it is selected to be archived.  There is a range of locally-defined  expirations - your site administrator will provide these.  If the value  provided does not match one of these, it will be rounded up to the next  highest.  The default value of EXP is site-dependent.  If your site has configured the zero-expiration feature, the value of EXP  can be zero.  This will cause the file to be purged (rather than archived)  when the reference limit or the cycle limit is exceeded.  A file will only  be purged when there is a current FAS backup that can be retrieved with  @MARS,F.  There is no guarantee how long the backup will exist before it  expires.  For this reason, the zero-expiration should be used only for  files that would normally be deleted anyway.  FLAG is one  or more of the following optional keywords.  If more than one  keyword is supplied, the list must be separated with commas and enclosed in  parenthesis.    DCY - Daily cycle flag.  If two or more cycles of the same file were          created on the same day, the set will count as one F-cycle, as          long as the files are less than ten days old.    AVF - Archive V-option File.  This allows a selected file to be archived          even if it was created with the V-option.  Normally these files          are bypassed even if the selection criteria are met.  This flag          cannot be used if FILE=# (the master wildcard).    CRT - Critical file.  Any file matching this entry will be archived to a          second tape before being removed from the system.  The backup tape          can be used to recover the file (via SELECT,B) should the original          become lost or damaged.  The CRT flag may only be used with file          names that do not contain a wildcard.          *IMPORTANT! - This procedure is NOT designed to prolong the life          of archived files.  It can only protect them for the length of          their normal expiration period (the EXP parameter).  Backup tapes          expire at the same time as original tapes.    DNN - Do Not Notify.  Files archived under this entry will not be          included in the expiration report when they expire.  Changing this          flag will not affect files that have already been archived.  This          flag cannot be used if FILE=# (the master wildcard).    LST - List requested.  This will cause any file matching the entry to          appear on the archive exception report.  It is usually used with          an entry that contains the wildcard character and is an easy way          to see what files are matching the entry./ACCESS mode commands (continued)MODIFY FILE=<filename>,REF=<limit>,CYC=<limit>,EXP=<limit>,FLAG=<NO><flag>  This command is used to modify one or more parameters for a file entry  which has previously been added by the ADD command.  Only the FILE keyword  is required, and <filename> must match an existing file entry exactly  (including wildcard if used).  At least one other keyword must be supplied.  If a keyword is not given,  the associated parameter is not altered.  Flags may be added or removed.  To remove a flag, append the characters 'NO' to the flag keyword.  **IMPORTANT!  Changes made with the MODIFY  command affect only files which  will be archived in the future.  It is not possible, for example, to change  the expiration of a previously-archived file by changing the EXP field on  the matching file entry.REMOVE FILE=<filename>  This command is used to remove an existing file entry.  The FILE keyword is  required, and <filename> must match an existing entry exactly.  This  includes the wildcard, if used.LIST<,option>  FILE=<filename><*>  This command is used to list some or all existing file entries under the  current accessed qualifier.  Values of REF, CYC, EXP and any flags are  displayed.  The list is sorted alphabetically and by precedence of file  selection if wildcard entries are found.  The FILE keyword is optional.  If given, only the entry which matches the name is listed.  If the list  wildcard (*) is present, all entries which begin with <filename> are  included in the list, and <filename> must not contain the '#' wildcard.  Normally, output pauses after a full screen is output and the user is  prompted with  CONTINUE:>.  A carriage return (transmit) will continue the  listing.  If the 'P' option is given, list output is directed to an  attached printer via an internal @@PRNT/@@NOPR and pauses do not occur.  If the 'C' option is given, there is no screen output.  Instead, a  temporary file (MARS$OUT$) is created and a set of commands to create all  of the selected file entries is written to the file.  This is particularly  useful when many file entries have been made for a complex application and  a test qualifier is established.  Using just a few commands, the entire set  of entries can be copied from an existing qualifier to another.  For  example:    >ACCESS QUAL=BUDGET    BUDGET* >LIST,C    34 COMMANDS WRITTEN TO FILE: MARS$OUT$.    BUDGET* >ACCESS QUAL=T-BUDGET    T-BUDGET* >@ADD MARS$OUT$./5. SELECT mode commandsSELECT<,option>  QUAL=<qualifier>,FILE=<filename>,CYC=<cycle>,HOST=<host-ID>  This command is used to create or append to a selection list.  It can only  be used in ENTRY or SELECT mode.  A selection list is a set of files which  have previously been saved or archived.  Saved files are selected if MARS  is executed with the 'F' option, archived otherwise.  Any user can use this  command to select any file.  When a list is established, SELECT mode is  entered and other commands (following pages) may be used.  The QUAL keyword is required.  FILE is optional.  Either parameter can  contain the wildcard character.  If FILE is omitted, all saved/archived  files with the specified qualifier are selected.  CYC is also optional.  If omitted, all cycles of matching files are selected.  The selection list  may contain up to 1000 files.  If more than that many are selected, the  current SELECT command is rejected.  The HOST keyword is allowed only for multi-host sites.  Its use is  optional.  The <host-ID> can have one of the following values:    A, B, C or D - specifies the STD directory for a specific host    S            - specifies the SHARED directory    L            - specifies the local STD directory    #            - specifies all directories from participating hosts    (omitted)    - specifies the local STD and SHARED directories  There are three options which can be given with the SELECT command.  None  are required.  Only one option can be given per command.  None of these  options have any effect when selecting files saved with FAS (@MARS,F).  The options are:    A  -  This will select all files, regardless of previous reload status.    R  -  This will select only files which have been reloaded previously.          When neither 'A' or 'R' options are given, all files will be          selected except those that have been reloaded into their original          name (before the last archive).    B  -  This will select file(s) residing on backup tapes created when a          match was made with a parameter with the <CRT> flag set. This          should only be done when the original tape is confirmed lost or          damaged, as the tape(s) selected may be offsite.  All backup files          will be selected, regardless of previous reload status.  Files which appear on the selection list are numbered sequentially,  starting with 1.  The file's reference number is displayed by the SUMMARY  command.  After a successful SELECT, summary output for newly-selected  files is displayed on the screen, with appropriate pauses if more than a  screen of files is selected.  The reference number must be supplied to  subsequent commands (PRTF, RELOAD, OMIT, SUMMARY) when referring to  specific files on the list./SELECT mode commands (continued)  SELECT examples:    SELECT QUAL=BUDGET,FILE=PR-OUT,CYC=27     This will select all saved or archived copies of BUDGET*PR-OUT(27).    SELECT,A QUAL=BUDGET,FILE=PRINT#     This will select all archived copies of files with qualifier BUDGET and     filename starting with PRINT (all cycles), including archived files     which have been previously reloaded.    SELECT,R QUAL=PAYROLL     This will select all archived copies of all files with qualifier PAYROLL     (all cycles), which have been previously reloaded.    SELECT QUAL=HRS,HOST=C     This will select all files with qualifier HRS that were archived from     the STD directory of host C./SELECT mode commands (continued)PRTF <parameter list>  This command is used to print detailed information about one or more files  on a selection list.  Several lines are printed for each file.  The first 5  lines are very similar in format to the @PRT,F command.  If the file was  archived, the matching qualifier and filename entries are listed, and the  reason for archive (CYC or REF limit exceeded).  Also the save/archive tape  number(s), starting position, date copied, and tape expiration is listed.  Output pauses each time two files are displayed, and the CONTINUE:> prompt  appears.  A carriage return (transmit) will continue with the next files,  or a different command may be entered and the remainder of output for the  PRTF command will be canceled.  ***** Standard Parameter Format *****  The PRTF, SUMMARY, RELOAD and OMIT commands have a standard parameter list  format.  Each command accepts multiple parameters separated by commas.  The  parameter(s) can be one or a combination of the following:  - A single number referring to one file in the selection list  - A range of numbers, <n1>:<n2>, referring to a contiguous group of files  - The keyword ALL (all files on the list)  - The keyword REL (all files marked for reload)  - The keyword REM (remaining files; not marked for reload)  Examples:    PRTF  1,3,12:14   (Lists files 1,3,12,13,14)    PRTF  REL,7       (Lists all files marked for reload, and file 7)    PRTF  ALL         (Lists all selected files)SUMMARY <parameter list>  This command is used to print a summary listing for some or all files on  the selection list.  This is the same information that is given when the  SELECT command is used.  One line per file is printed, including qualifier,  filename, cycle, track count, catalog date, reference date, archive/save  date, and expiration of backup tape.  The reference number is also shown  for each entry.  The parameter list format is the same as for the PRTF command.  It may be  omitted, in which case all files on the selection list are displayed.  The  CONTINUE:> prompt is given at the end of each screen of output.  A carriage  return will continue the listing, any other input will terminate the  remainder of the listing.  If the input is a valid command it will be  processed normally./SELECT mode commands (continued)RELOAD  <parameter list>  This command is used to mark one or more files on a selection list for  reload.  Little error checking is done at this point, except that if two or  more entries with the same qualifier, filename and cycle are chosen, only  the most recently cataloged/backed up copy is marked.  There is a site-  dependent limit on the maximum number of files that may be reloaded at one  time.  Multiple RELOAD commands may be given, interspersed with other SELECT mode  commands.  The physical reload(s) are not performed until the COMMIT  command is given.  The format of the parameter list is the same as for the PRTF command,  except that the REL keyword is not allowed.  In addition, there is a  supplemental syntax for the RELOAD command which is used to specify that  the file is to be reloaded into a different name:    <number>=<dir#><qualifier>*<filename><(cycle)>  The qualifier and filename are both required.  The cycle is optional.  If  omitted, the file is reloaded into cycle one and no other cycles are  permitted to exist.  The directory ID is allowed only on multi-host  systems.  If used it must be either STD# or SHARED#.  If omitted, the file  is reloaded into its original directory.  Examples:    RELOAD  14    RELOAD  2,5,18:22    RELOAD  6=TEST*PRINT-02(9)    RELOAD  3=SHARED#PAYROLL*FICHE    RELOAD  ALLSUBSTITUTE  QUAL=<qualifier>  This command will cause all files selected for reload to be reloaded with  the qualifier given.  The filename and cycle will be the same as the  original file.  This allows several files from a production system to be  reloaded at one time into a test qualifier, without the need to rename each  of them separately with the RELOAD command as shown above.  If any files  have been reloaded to specific names, this will override the substitute  qualifier on an individual file basis./SELECT mode commands (continued)OMIT<,option>  <parameter list>  This command is used to remove files from a selection list.  This may be  done to make more room on the list if a large number of files were  previously selected.  The most common form uses the REM keyword to omit all  files except those marked for reload:    OMIT REM  After the OMIT command has been used, entries on the selection list are  sequentially renumbered.  If the 'R' option is used, the selected file(s) remain on the list, but the  reload flag is cleared if it had been set.  This can be used if the  sequence of the list is to be preserved but one or more files have been  mistakenly marked for reload.  Renumbering does not occur.  For example:    OMIT,R  19      Removes the reload flag for entry 19.COMMIT  This command is given to initiate a reload of all files on the selection  list that have been marked by the RELOAD command.  At this point, each file  is checked for the following:  - The file must not already be cataloged.  - If other cycles exist, the file must be within the current allowable    cycle range.  - If the file is private, only the owner of the file or a privileged user    may request its reload.  - Only a privileged user is allowed to start a FAS reload into a different    name, if the original file had a read key.  This is not a concern for    archive reloads, as original keys are restored even if the name of the    output file is different from the original.  If one or more files passes all of the above tests, a reload is initiated.  If the site has configured the reload notification feature, the user is  given a choice of having notification sent to the initiating terminal, all  terminals with the initiating userid, or no message.  After this, a final  confirmation response is solicited.  If answered 'Y', a batch reload run  will be started to reload the file(s).  The runid of the run will be  RLxxxx, where <xxxx> is the first 4 characters of the requestor's userid.  After a reload is started, the selection list is released and the user is  returned to ENTRY mode.@ELT,SIQ MARSREL$.DOC/ADMIN-REF,,,172746131637,001H               M. A. R. S.  Site Administrator Reference1.  Introduction    This document will describe privileged commands and functions of the MARSprocessor.  These commands will only operate when MARS is being executed withthe account number which was used to initialize the Archive Control File, andare intended for site administrator use only.  All of the following commandsand keywords may be abbreviated to three letters.2.  ENTRY mode commands    There are several commands used for qualifier maintenance that operate inENTRY mode.  Entry mode is entered when the MARS processor is called, and isindicated by a single asterisk (*) in the user prompt.  There is no indicationof privileged status at signon.  You are privileged if you give a privilegedcommand to MARS and it is accepted.    In other documents, a major distinction is made between ACCESS mode andSELECT mode.  The former reads and updates the Archive Control File and thelatter reads the Archive or Save History File.  All of the following commandsupdate the control file, so can be thought of as ACCESS mode commands for thatreason.  They are executed in ENTRY mode because a qualifier does not need tobe accessed when they are given./ENTRY mode commands (continued)REGISTER QUAL=<qualifier>,OWN=<owner acct>,ACC=(<acct list>),MXR=<ref limit>  This command is used to register a qualifier with MARS, and must be used  before anyone can ACCESS it.  The qualifier given must be unique - it  cannot have already been registered.  It may be wildcarded.  The master  wildcard qualifier (all '#') is often registered to be a 'catch-all' for  all files with unregistered qualifiers.  The OWN parameter is optional.  If used, it specifies the 'owner account'  of the qualifier.  If not used, the owner account will be the account  number as recorded in the MFD on a file-by-file basis.  You should use this  parameter if you want a single user to be responsible for all files with a  specific qualifier.  In the exception report and the expiration report, all  files are grouped by owner account.  For this reason, the owner account, if  used, is typically the major production account number for a production  qualifier, or a personal account number for a personally-used qualifier.  The ACC parameter is optional.  If used, it specifies one or more account  numbers that may be used while performing ACCESS operation on the qualifier  by a nonprivileged user.  If more than one account is given, they are  separated by commas.  MARS does not have command continuation, so the  initial limit will be what can fit on a line.  Up to ten accounts may be  specified for each qualifier.  After initial registration, the account list  is updated in ACCESS mode with the ADD ACC and REMOVE ACC commands.  If the ACC parameter is omitted, or if at a later time the number of access  accounts drops to zero, the qualifier becomes open to ACCESS by all users.  It is not normally necessary to add the site administrator account to the  list of access accounts, but this must be done when only privileged access  is desired, as perhaps with qualifiers SYS$, etc.  The MXR parameter is also optional.  If used, it specifies the maximum  reference limit (REF) that can be given to file entries made under this  qualifier.  If not used, the maximum reference limit defaults to the value  of the configuration parameter M$REFMAX.  The value of MXR must be greater  than zero and less than 1000./ENTRY mode commands (continued)DEREGISTER QUAL=<qualifier>  This command is used to remove the specified qualifier, together with all  associated file entries and related information, from the Archive Control  File.  The <qualifier> must match a registered entry exactly, including the  wildcard if used.ALTER QUAL=<qualifier>,OWN=<owner acct>,MXR=<ref limit>  This command is used to change the owner account or the maximum reference  limit for a registered qualifier.  The qualifier must match an existing  entry exactly, including the wildcard if used.  The QUAL parameter is  required.  Either or both of the OWN and MXR parameters may be given.  The  value of MXR, if given, must be less than 1000.  If MXR is set to zero, the  maximum reference limit reverts to the value of M$REFMAX.  Changing MXR  will not affect existing file entries.  The OWN parameter changes the owner account for a qualifier.  Unlike most  parameters in the control file, the current setting of this parameter  affects all presently-archived files.  The programs which produce the  expiration report and the exception report read the owner account from the  control file when the reports are produced.  The owner account can be 1-12  alphanumeric characters.  To remove an owner account, use a single wildcard  character (#).LIST<,option> QUAL<=qualifier<*>>  This command is used to list some or all currently-registered qualifiers.  One line per qualifier is printed, including the owner account, number of  access accounts and number of file entries.  The list is sorted alpha-  betically and by precedence of qualifier selection if wildcard entries are  found.  The QUAL keyword is required.  The associated parameter is  optional.  If omitted, all qualifiers are listed.  If given, only the  matching entry is listed.  If the list wildcard (*) is present, all entries  which begin with <qualifier> are listed, and <qualifier> must not contain  the '#' wildcard.  Normally, output pauses after a full screen is output and the user is  prompted with  CONTINUE:>.  A carriage return (transmit) will continue the  listing.  If the 'P' option is given, list output is directed to an  attached printer via an internal @@PRNT/@@NOPR and pauses do not occur.  If the 'C' option is given, there is no screen output.  Instead, a  temporary file (MARS$OUT$) is created and a set of commands to completely  re-create all of the selected qualifier(s) and file entries is written to  the file.  This is similar to the nonprivileged LIST,C command which is  used in ACCESS mode, but output contains additional commands to reregister  the qualifier(s) and add appropriate owner and access accounts./ENTRY mode commands (continued)LIST QUAL (continued)  The Archive Control File can be saved in SDF format and recreated at a  later time using the unqualified  LIST,C QUAL  command.  This also has the  effect of optimizing file organization.  The software is efficient enough  that this should never be required, but you may like to know that it is  possible, and may want to produce occasional SDF backups.    >@MARS    * >LIST,C QUAL    1595 COMMANDS WRITTEN TO FILE: MARS$OUT$.    * >EXIT    END MARS.    >@COPY  MARS$OUT$.,<save-file>.  At a later time, the following runstream may be used to recreate the  Archive Control File from a saved SDF file.  Warning messages and a  nonexact duplication may result if any of the following MARS configuration  parameters have been altered since initial MARS installation or since the  last control file rebuild:  M$EXPA(x), M$EXPACNT.  This process should not be attempted (unless you are sure of what you are  doing) if any of the following alterations have occurred: (1) The largest  M$EXPA(x) value has been reduced, (2) M$REFMAX has been reduced, or (3)  M$REFMXW has been reduced.  Error messages may result and some file entries  may be omitted from the recreated file.  Finally, be aware that all information regarding the last user(s) which  have updated each registered qualifier will be lost if this is done.    >@ASG,T  CTL$USE,F53///500  . Much faster if SSD or cached disk is avail!    >@MARS,Y    * >INIT    INITIALIZATION COMPLETE - MASTER ACCOUNT = xxxxxxxxxxxx    * >@ADD  <copy of MARS$OUT$>    <one status message is produced for each qualifier with file entries>    * >LIST QUAL    <verify listing of qualifiers and file entry counts>    * >EXIT    END MARS.    >@COPY  CTL$USE.,SYS$*ARCCTL$/r/w.    . If verification looks OK  *NOTE: This procedure will operate as shown only to save and restore  parameters for the DEFAULT class.  If other storage classes have been  defined, separate LIST,C QUAL operations must be done for each class, with  the output saved in separate files.  When the new control file is created,  each class must be redefined and each command file applied separately.  Pack-id information for each class must also be manually restored,  including that for the DEFAULT class.  For more information, see section 4./3.  ACCESS mode commands    The following privileged commands are valid in ACCESS mode, after aregistered qualifier is accessed via the ACCESS command.  The site admin-istrator can access any registered qualifier.ADD ACC=(<account list>)  This command is used to add one or more account numbers to the list of  those that can ACCESS the current qualifier.  If more than one account is  given, they must be separated with commas.  If only one account is added,  the parenthesis may be omitted.  A maximum of ten access accounts may be  specified per registered qualifier.REMOVE ACC=(<account list>)  This command is used to remove one or more account numbers from the list of  those that can ACCESS the current qualifier.  Commas are required if the  list contains more than one account; parenthesis may be omitted otherwise.LIST ACC  This command is used to list all account numbers that are authorized for  ACCESS operation on the current qualifier.ADD FILE=<name>,<nonprivileged parameters>,FLAG=<privileged flag>MODIFY FILE=<name>,FLAG=<privileged flag>  These commands can be used to add one of the privileged flags to a new or  existing file entry.  The privileged flags are:    BYP - Archive bypass.  Any file which matches this entry for any reason          will never be archived.  Files which would be selected for archive          based on the REF and CYC parameters will be listed on the pre-          archive site administrator report, and  <BYPASS> to the right          indicates that no further action is taken.    BCC - Bypass current cycle.  This is similar to bypass, but protection          is extended only to the highest F-cycle of the file.    CRT - This flag has the same meaning as when used by a nonprivileged          user.  The site administrator may attach it to an entry that          contains a wildcard, however.    DEL - This flag can be attached to a file which is flagged for purge          (the expiration period is zero).  It causes the file to be purged          even if it has not been backed up.  The file entry cannot contain          a wildcard.  This has limited usefulness in special circumstances          and should obviously be used with much caution./4.  Storage class considerations    MARS supports archive from removable packs, implemented through theconcept of 'storage classes'.  Up to twenty of these can be defined by thesite administrator.  Each has a completely independent set of registeredqualifiers and filenames, and each is associated with one or more pack-ids.  Areserved pack-id, <FIX$$$>, is used to represent all of fixed storage.  Allother pack-ids must be removable.  A pack-id may only be contained in oneclass.  If a pack-id is not contained in any class, no files from that packwill be subject to archival.  When a file is catalogued on multiple packs, thefirst pack-id determines the class.  Other pack-ids may or may not be membersof the same class; this is not relevant at archive time.    The DEFAULT storage class has special meaning, because this class isimplicitly referenced if no class-id is specified.  It is only necessary todefine additional classes if separate archive parameters are to apply to filescataloged on removable packs.  If the default parameters are to be used forsome or all removable packs, their pack-ids may be added to the DEFAULT class.    When MARS is initially installed, the DEFAULT class is established,containing the fixed storage pack-id.  If you intend to archive only fromfixed storage, there is nothing more to do.  Information regarding storageclasses is condensed in this one section so it can be skipped if there is noneed to archive from removable packs.  All of the following commands, exceptfor ACCESS, are restricted to site administrator use only.DEFINE CLASS=<class>,PACKS=(<pack list>)  This command is used in ENTRY mode to establish a new storage class.  The  class-id is restricted to 6 or fewer characters.  The pack list may contain  any valid pack-id not already present in another class.RELEASE CLASS=<class-id>  This command is used in ENTRY mode to remove an existing storage class.  The class-id to be released must not contain any registered qualifiers (use  the DEREGISTER command first to remove all of them).  The DEFAULT class can  not be released.LIST CLASS  This command is used in ENTRY mode to obtain a list of all current storage  classes.  Each class is listed with a count of registered qualifiers and a  count of associated pack-ids.  If a class contains the set of fixed packs  (FIX$$$), this is indicated separately./Storage class considerations (continued)    Once a storage class has been defined, it must be accessed in order toperform certain administrative functions.  The ACCESS command may be used inENTRY mode for this purpose.ACCESS CLASS=<class-id>  When used without the QUAL parameter, this will put the user in a special  mode that will allow class-related updates.  This is called 'class-update'  mode.  When in class-update mode, the prompt will be the class-id followed  by a '>>' symbol.  All classes, including DEFAULT, are accessed in this way  to update their set of associated pack-ids.ADD PACK=(<pack list>)REMOVE PACK=(<pack list>)  These commands are used in class-update mode to add and remove pack-ids for  the current class.  The pack list is one or more pack-ids, separated by  commas.  A pack-id may be moved from one class to another by first removing  and then adding.  The FIX$$$ pack-id may be manipulated in the same way.LIST PACKS  This command is used in class-update mode to list all pack-ids that are  associated with the current class.  They are listed in sorted order.REGISTERDEREGISTERALTERLIST QUAL  All of these commands must be used in class-update mode to perform  qualifier maintenance for all but the DEFAULT class.  Their function and  format is unchanged.  If used from ENTRY mode, the DEFAULT set of  qualifiers is will be affected.  The same qualifier can be registered in more than one storage class.  Each  can have the same or different file entries.  Each can have the same or  different access accounts, etc.  Each is independent from all others.  Each  will affect only those files which reside on the pack(s) associated with  their respective classes.  The only exception to the above rule concerns the owner account for  qualifiers - it is always determined from the DEFAULT class, no matter  which device contains the file.  If a registered owner account is desired,  the qualifier should be registered in the DEFAULT class even if its primary  use is in a different class.  If this is done, be sure to give the DEFAULT  qualifier a dummy access account to prevent accidental updates./Storage class considerations (continued)ACCESS CLASS=<class-id>,QUAL=<qualifier>  This expanded form of the ACCESS command can be given by any user with the  proper account to access the specified qualifier and class-id.  Updates to  file parameters can then be made with the ADD, MODIFY and REMOVE commands  as is normally done within the DEFAULT class.  If a qualifier is accessed  with a class-id present, the ACCESS mode prompt will have the qualifier  prefaced by the class-id, separated by a '>>' sign.  This command can be  given from ENTRY or ACCESS mode.--------------------------------------------------------------------------    The selection process will normally consider all defined storage classesthat have at least one associated pack-id and one registered qualifier.  It ispossible to supply a list of one or more classes to the SELECT program withinthe archive runstream.  Only files within the specified class(es) will then beconsidered for archive.  See the internal documentation at the beginning ofthe SELECT program for more information./5.  SELECT mode commands    The site administrator can do little more than other users while usingSELECT mode; inquiry and reload is pretty much open to everyone.  The oneexception involves the PRTF command.  The account and project of a file arenormally slashed unless the user is using the account or project that createdthe file (based on M$PVTACC).  The site administrator is always allowed to seethe original account and project.    If MARS is executed with the 'D' (debug) option, PRTF output includes thesector number within the history file that contains information about the filebeing displayed.    MARS also restricts reload of private files to the original owner, andFAS reloads of keyed files into a different name are not normally allowed.These restrictions are lifted only if the user has the SYS$*DLOC$ fileassigned; site administrator status by itself does not qualify.6.  Test mode execution    The MARS processor normally uses the cataloged versions of the ArchiveControl File (SYS$*ARCCTL$) and the Archive/Save History File (ARCHIST$ orSAVHIST$).  It is possible to execute MARS with test files, as shown by thefollowing examples:    >@USE CTL$USE,<test Control File>    >@ASG,A CTL$USE    >@MARS,Y      <Execution with test Control File>    >@USE HISTIN$,<test Archive History File>    >@ASG,A HISTIN$    >@MARS,Z      <Execution with test Archive History File>        *** DO NOT START A RELOAD USING THIS MODE!!! ***    >@USE HISTIN$,<test Save History File>    >@ASG,A HISTIN$    >@MARS,FZ      <Execution with test Save History File>        (Reloads will work if data is current)    The 'Y' and the 'Z' options may be combined in a single execution.@ELT,SIQ MARSREL$.DOC/EXC-REPORT,,,176113131637,001H               ******  Archive Exception Report  ******     The Archive Exception Report selects and sorts files which are eitherunregistered or may be improperly registered with the MARS system.  Filesare sorted by user group, and within user group by selection reason.  Thereare seven reasons why a file may appear on the report.  A file may have morethan one reason to be listed but it is always shown for the reason closestto the top.  The reasons and explanations follow:UNREGISTERED - There is no matching qualifier*filename in the Archive               Control File.  Corrective action: register the file.IMPROPER-WLD - The file has over 1000 tracks and the matching filename               contains a wildcard.  It is suggested that all files over               1000 tracks should have a unique filename entry in MARS to               be certain that the archive params for the file are correct.           OR: The file has over 100 tracks and the matching filename               is entirely wildcarded.  It is suggested that a better               match be created (which may contain a wildcard).ARCHIVE-BYP - The file would have been archived but was bypassed for some              reason.  The reason is listed in the 'BYP' column.  Flag              characters include: B - Archive bypass, C - Bypass current              cycle, G - G-option file, V - V-option file, O - Write only,              W - Word addressable, D - Hardware/FAS/data disabled.TK-DAYS>5000 - The file is not being archived and the product days-since-               reference (DSR) times (track count) exceeds 5000.  This is               for the most current cycle of a file.  If possible, the REF               parameter should be reduced.TK-DAYS>1000 - The file is not being archived and the product (DSR) times               (track count) exceeds 1000.  This is for a -1 or greater               f-cycle of a file.  If possible, the REF parameter or the               CYC parameter should be reduced.  Also, consider clearing               the <DCY> flag if it is set for this file.LF,EXP>100 - The file contains over 1000 tracks, will be archived within             one week, and has an expiration that exceeds 100 days.  Since             long-expiration tapes may be created less frequently and must             be kept for an extended period, it is best not to archive             large files in this way unless absolutely necessary.  If             possible, the EXP parameter should be reduced.LIST-REQSTD - The user has set the <LST> flag on the matching qual*file              entry in the Archive Control File.  This has caused the file              to be listed in the report.  The expected use of this flag              will be to inform users which files are matching entries              that contain a wildcard.@ELT,SIQ MARSREL$.DOC/ACP,,,141145132037,001H                          ACP User Reference1.  Introduction    ACP, the Archive Copy Processor, is an integral part of the MARSsystem which is used to save and restore user files.  Due to its largebuffer sizes, it operates about four times faster than standard FURPUR whendoing disc-disc copies and about twice as fast when doing disc-tape copies.It has the capacity to restore directory information as well, and aprogrammed interface with the Archive History File.    Operation of ACP within the MARS framework is transparent to the userbecause all processor calls are program-generated.  The purpose of thisdocument is to describe other ways in which users can take advantage of thespeed and directory-manipulation capabilities of ACP.2.  Non-privileged operation    The processor call for ACP is similar to the FURPUR @COPY command. Ithas the following format:  @ACP<,options>  <input-file>.,<output-file>.  <input-file> is the file being used for input.  It can be either disc or               tape.  If tape, it must be in ACP or COPY,G format.  <output-file> is the file being used for output.  It can be either disc                or tape.  Both files can be disc, but both cannot be tape.  The following options are available:  C - Do not abort the run if an error is detected.  This is the default      if operating from demand.  X - Abort if an error is detected.  This is the batch default.  O - When the output file is disc, ACP normally requires it to be empty.      The 'O' option (overwrite) causes ACP to disregard this requirement.  Q - This is valid only if the input file is a COPY,G format tape.  If an      I/O, block sequence or checksum error occurs, ask the operator      whether to abort or continue.  If continuation is requested, the      condition word (T3) will be set to one upon termination.  This will      also be the case at the end of a group of contiguous ACP calls even      if only one error occurred.  Usually the affected file will have one      or more bad tracks and will need to be recovered manually.  V - This verifies that the output file qualifier and filename are the      same as the file originally copied.  The input must be tape and the      output must be disc.  If the names do not match, ACP errors./2.  Non-privileged operation (continued)    There is very little difference between an unprivileged ACP disc-disccopy and one done with FURPUR, other than the speed.  The output file maytend to be somewhat less fragmented, since larger blocks are being written.    Disc-tape copies made by ACP are similar to @COPY,G copies.  Whencopying to tape, ACP requires that the output be positioned at load pointor directly following an EOF mark, and copies are terminated with a doubleEOF, positioned after the first.  Standard tape swapping is performed whenend-of-reel is detected during input or output.    The major difference between a tape created by ACP and one created byCOPY,G is that the format is unique to ACP and will not be readable byother programs (such as TAPTOC/TTOC, for example).  The FURPUR command<@COPY,M> can be used to copy an ACP-produced tape with large blocks (thishas been tested with level 30R1 - it is not guaranteed to work with earlierlevels).  Use this method for single-reel copies only.  FURPUR cannot makea duplicate of a multi-reel ACP output tape.3.  Privileged operation    ACP has many more capabilities when the SYS$*DLOC$ file is assigned.Large disc copies are better made in privileged mode if possible, becausethe extended acquire (EACQ$) function is used to pre-allocate whateverspace is required and this can dramatically reduce fragmentation of anoutput file, if it does not have an adequate initial reserve.  In addition,the following capabilities are available only to the privileged user:SAVE operation    @ACP,S<opt>  <input>.,<output>.    This mode will make a copy of an input disc file that can later beused to restore the file completely, including directory information.  Theoutput file can be either disc or tape.  If tape, the copy format is verysimilar to that discussed previously.  If disc, the output will have aheader in track zero which contains directory info, and will be unusablefor anything except an ACP restore.  Other options (C, X, O) are the sameas with standard copy operation.  ACP level 3R2 has three additional SAVE options that were not available  with earlier levels.  They are:  D - This will delete the input file after a successful copy.  U - The input file is taken from the SHARED directory.  Useful only with      MHFS systems.  Y - The input file is taken from the STD directory.  Useful only with      MHFS systems./3.  Privileged operation (continued)RESTORE operation    @ACP,R<opt>  <input>.,<equip>,<pack-1>,...,<pack-n>    This mode will restore a file, including directory information.  Theinput can be tape or disc, previously created with @ACP,S.  The output fileis recataloged with original options, keys, etc., and its contents arerestored.  It must not exist at the time or the restore will abort.  Thefollowing parameters and options are available - all are optional exceptthe input file:  <equip> - If given, overrides the original equipment code of the file.  <packid(s)>- If given, the file will be restored to this list of               removable pack-ids.  The list may contain no more than               five packs.  All must have the same equipment code.  The               equipment code will be selected automatically and is not               required.  If <packid> is omitted, the file will be               restored to the original storage type.  Options:  C,X - Same as with SAVE.  U,Y - Same as with SAVE, specifies the output file directory.  G - Reverse original G-option.  If the file was originally created with      the G-option, the restored version is not.  If not, the restored      version will have the G-option.  P - If the original file was cataloged on a removable pack, restore it      to fixed storage instead.  This option is ignored if any pack-id      parameter(s) are specified./3. Privileged operation (continued)MOVE operation    This mode combines a save and restore into a single operation.  Theinput file is saved, deleted and restored to original state.  Primary usesfor this mode include: (1) Defragmentation, (2) Changing device allocation,and (3) Adding or removing the G-option.  Its advantages over the usualsequence of copy, delete, recatalog and recopy are speed and preservationof directory information.    An intermediate file, ACP$SCRATCH$, is used during this process.  Ifnot created by the user, a temporary file with a 50,000 track maximum isassigned automatically.  If you are moving data for which no completecurrent backup exists, it is strongly recommended that you catalog andassign this file to the run before proceeding with the move.  If the systemstops after the input file has been deleted, an ACP restore from this filewill recover the original file.    @ACP,M<opt>  <input>.,<equip>,<pack-1>,...,<pack-n>  <input> - This is the file to be moved.  It must be cataloged on disc.  <equip>  - Same as for RESTORE  <packid(s)>  Additional options:  Same as RESTORE4. Restrictions    ACP level 3R2 has the following restrictions:  - All copies from disc storage read the file's DAD tables as a prelude    to actual I/O.  This is done via MSCON$ for cataloged files, and no    current or future problems are anticipated.  For temporary files, this    is done by reading the tables directly from the PCT.  There have been    occasional problems with this when the input file is very large and    very fragmented.  This causes an ACP abort, NOT corruption of user    data.  Unfortunately the problems have occurred in batch runs and    could not be duplicated.  There is also an incompatibility with EXEC    releases SB4+ depending on the setting of the FCNUSRDADBNK parameter.    For these reasons, it is suggested that users refrain from using    temporary files as input to ACP in critical situations.  - ACP cannot be used to copy, save or restore word-addressable files.  - ACP cannot be used to copy, save or restore files which contain more    than 262K tracks.  - ACP has not been used in a production environment in which security is    configured (SENTRY = TRUE).  If you have set the MARS configuration    parameter M$SENTRY to 1, proceed with caution.@ELT,SIQ MARSREL$.DOC/FETCH,,,175465131637,001H                         FETCH User Reference1. Introduction     The FETCH processor provides batch reload capability for files whichhave been archived by the MARS system.  Reloads can be synchronized withthe requesting run so that execution is suspended until the files are back.In effect, this gives archived files some of the same attributes as un-loaded files.  It permits the MARS reference limit (REF) to be reducedsignificantly for infrequently-used files which must remain accessible,such as those which are updated monthly.     When used with the 'A' option, FETCH functions like a general-purposefile assignment (@ASG,A).  The key to its simplicity is that the run neednot know if the requested file(s) are online, unloaded or archived.  Whenthe run regains control, all files are assigned.  When multiple unloadedfiles are encountered, they are rolled back in an efficient manner.  Whiledesigned primarily for use in batch runs, FETCH can also be used fromdemand for quick reloads of the most current copies of files.     Multiple FETCH calls in direct sequence are processed in a singlegroup.  This permits several files to be reloaded at one time and cangreatly reduce the required overhead.  FETCH is called as follows:        @FETCH<,options>  <file-spec1>        @FETCH<,options>  <file-spec2>              .              .        @FETCH<,options>  <file-specn>     FETCH is terminated when the next input line contains anything exceptanother @FETCH statement.  Each call to @FETCH must have one and only onefile specification.  A group of FETCH calls remains continuous even ifdifferent options are used.  FETCH functions like a facility statement, butsince the operating system treats it as a processor call, it is recommendedthat a group of FETCHes be preceded with @SETC,N to improve readability andconserve paper.     All files in a FETCH group are processed in two passes.  In the firstpass the status of each file is checked, but no waiting occurs.  If thefile is online and available, no further processing ensues.  If it is un-loaded, a ROLBAK is initiated.  If it is unavailable, it is passed over.If it is archived, its name is tabled for reload.     At the end of the first pass, a reload run is started if any archivedfiles were requested.  (This is the same process that can be initiated bythe MARS COMMIT command).  If any of these files are in assign/wait status('A', 'X' or 'W' options used) the run will hold at this point until thearchive reload completes.  Pass 2 is then started.     Files which were unloaded, unavailable, or archived with wait statusare checked again in the second pass.  All files requested with the 'A' or'X' options that could not be assigned in pass 1 are re-assigned in pass2, and if necessary the run will go back into wait status until all fileassignments can be completed.  When this is done, FETCH exits./2. Specifications and options   File specifications take the following format:      qualifier*filename(cycle)/read/write.<,age-limit>   where:   <qualifier> is the file qualifier.  If omitted, standard rules apply.      Implied qualifiers (leading *) are allowed.   <filename> is the file name and is the only required parameter.  The      "real" file name must be given.  DO NOT USE AN ATTACHED (@USE) NAME!   <cycle> is the F-cycle of the file.  If omitted, the most recent cycle      is assumed.  If given, it must be absolute.  Relative (+,-) F-cycles      are not supported.   <read> and <write> are the file keys and must be given if the requested      file has keys and the 'A' or 'X' options are used, and read/write      access is desired.   <age-limit> is optional, and requests that if archived, the file will      not be reloaded unless it was archived within this many days of the      current date.  This feature can be used to guarantee that an older      copy will not be reloaded acidentally.   The following options may be used with FETCH:   A - This requests that the file be assigned to the run.  If the file       is online and available, it is assigned immediately.  If unloaded,       a ROLBAK is initiated and the file is assigned during the second       pass (causing a run hold if necessary).  If archived, the run will       wait at the end of pass 1 until the reload completes and the file       will be assigned to the run during pass 2.   X - This option may be used in conjunction with 'A' to request an       exclusive assignment.  Operation is identical with 'A' in other       respects.   W - This will cause the run to wait until the file is reloaded but will       not assign the file to the run.   Q - Query mode (demand only).  If the file has been archived, the date       archived, catalog date and last reference date are displayed.  The       user may then choose whether or not to reload the file. U,Y - Used to select the directory of origin for MHFS systems.  'U' is       SHARED, 'Y' is STD.  If neither are specified, both directories       are searched (STD first).  Do not use both options together. C,T - The 'C' option continues execution (do not take ERR$ exit) if an       error is detected.  This is the demand default.  The 'T' option       will terminate execution if an error is detected.  This is the       batch default.  'T' takes precedence if both are specified./3. Archived file selection considerations     Often several copies of the same file (or many copies with differentF-cycles) may be in archive simultaneously.  Only one of these copies maybe selected by FETCH if no cycle is supplied, or a limited number ifspecific F-cycles are given.  Unlike MARS, where the user can pick andchoose, FETCH must determine which file to reload.  Before using FETCH ina production system, it is very important that the user understand thealgorithm used by FETCH to select a file when several matching files havebeen archived.     FETCH always attempts to select the "most current" copy of a file toreload.  The following criteria are used, in order from most important toleast important:  1) The catalog date/time of the file (most recent is selected)  2) The F-cycle of the file (highest is selected unless a specific cycle     is requested)  3) The date the file was archived (most recent is selected)     This is the same algorithm used when files appear on a SELECT listwith the MARS processor, except that files appear in reverse order, from"least current" to "most current".  If more than one identical file isrequested for reload, MARS always picks the one closest to the bottom ofthe list, and this is the one that FETCH would also choose.     Another important consideration is that FETCH makes no distinctionbetween files which have already been reloaded and those that have not.(This is analogous to always using SELECT,A when choosing archived fileswith MARS).  The file which is "most current" is always the one chosen tobe reloaded, even if it was reloaded in the past.     If the <age-limit> parameter is given, it will always be compared withthe archive date of the "most current" file.  If this file was not archivedrecently enough, no file will be reloaded.  It is not possible to use the<age-limit> parameter to select a file with an earlier catalog date, whichmay have been archived more recently than the most current file.     FETCH will never select a backup archive copy of a critical file.These tapes may be stored offsite without concern that they will be calledfor inadvertently by a periodically-scheduled batch run.  If the originaltape is bad, the responsible programmer must use the MARS processor(SELECT,B command) to request a reload from the backup tape.*IMPORTANT!  ...     Finally, it must be stated that a file which is currently catalogedin the MFD (unloaded or not) will ALWAYS take precedence over an archivedfile, regardless of the above considerations.  If no F-cycle is given andany cycles are cataloged, the highest cataloged F-cycle will be selected.If an F-cycle is given and the same cycle is cataloged, the cataloged filewill be selected, even if it has a less recent catalog date than one whichhas been archived./4. Sample execution   Assume the following:   1) File BUDGET*DATA(1) was created 900112, archived 900122           BUDGET*DATA(2) was created 900114, archived 900124   2) File BUDGET*PARAMS(1) was created 900111, archived 900121           BUDGET*PARAMS(2) was created 900113, archived 900123   3) File BUDGET*ABS(1) was created 900105, is unloaded           BUDGET*ABS(2) was created 900112, archived 900122   4) File BUDGET*ECL(1) was created 900112, archived 900122           BUDGET*ECL(1) was created 900112, is online           BUDGET*ECL(2) was created 900114, archived 900124   5) File BUDGET*INFO(3) was created 900112, archived 900113           BUDGET*INFO(3) was created 900112, archived 900118           BUDGET*INFO(1) was created 900114, archived 900115   Now imagine the following FETCH sequence, executed on 900127:   >@FETCH,A   BUDGET*DATA.   >@FETCH,AX  BUDGET*PARAMS(1).   >@FETCH     BUDGET*ABS.,5   >@FETCH,A   BUDGET*ECL.   >@FETCH,W   BUDGET*INFO.,10   The following will occur in pass 1:    - BUDGET*DATA(2) will be marked for archive reload.    - BUDGET*PARAMS(1) will be marked for archive reload.    - A ROLBAK will be started for BUDGET*ABS(1).  The age-limit (5 days)      is ignored since the file was cataloged in the MFD.    - BUDGET*ECL(1) will be assigned (A).    - No action will be taken for file BUDGET*INFO.  Cycle 1, having the      most recent catalog date, would have been selected, but it was      archived more than 10 days prior to the run.  We will assume the      example is being executed in demand, so it will not abort.   Since at least one of the archive-reload files had either the A, X, or   W options set, the run will hold here until the reload completes.   The following will occur in pass 2:    - BUDGET*DATA(2) will be assigned (A).    - BUDGET*PARAMS(1) will be assigned (AX).    - No action will be taken for BUDGET*ABS(1), as no options were set.    - No further action will be taken for BUDGET*ECL(1).    - No further action will be taken for BUDGET*INFO.@ELT,SIQ MARSREL$.DOC/FILES,,,111354142133,001H                         FILES User Reference     FILES is an interactive processor that can be used to list a setof user files that match a given qualifier, filename or both.  A maskingoption is provided to match all qualifiers/filenames that begin with oneor more characters.  FILES interrogates a pre-existing MFD extract filethat is produced at regular intervals and the information displayed iscurrent as of the most recent extract file update.     All cycles of matching files are always listed.  Information foreach file includes qualifier, filename, cycle, type (Fixed, Removable orTape), track count, catalog date and date of last reference.  The dateand time of the current MFD extract is shown to the right of the heading.     FILES is called as follows:     @FILES<,options>   <name> or: @FILES<,options>   <qualifier>*<filename>.     Format 1 is used when only one name (qualifier OR filename) is tobe compared.  Format 2 is used when BOTH are to be checked.  The followingoptions are available:     D - List catalogued disc files.     T - List catalogued tape files.  (If neither 'D' or 'T' are given,         both are assumed).     F - Compare filename (format 1 only).  This is the default.     Q - Compare qualifier (format 1 only).     M - Match any files which have qualifier(s) or filename(s) that BEGIN         with the character(s) given.  A total match is required otherwise.     B - Brief mode - list only total selected files, track total if disc.     S - Scroll output - do not stop each time a full screen of information         is displayed and wait for user input to continue.     Examples:     @FILES,QT  AUDIT          This will list all catalogued tapes with a qualifier of AUDIT.     @FILES,FMD  PRINT-          This will list all disc files with a filename that begins with          PRINT-.  (All qualifiers are considered.)     @FILES,M  PROD1*PR.          This will list all files with a qualifier that begins with PROD1          and a filename that begins with PR.@ELT,SIP MARSREL$.GROUPACCTS/EXAMPLE,,,135470121732,001. THIS IS A SAMPLE OF THE 'GROUPACCTS' PARAMETER FILE.  A SIMILAR. FILE SHOULD BE CONSTRUCTED FOR YOUR SITE AND PLACED IN ELEMENT. 'GROUPACCTS' IN FILE MARS*MARS.  THIS MUST BE DONE BEFORE THE. ARCHIVE EXPIRATION REPORT OR THE ARCHIVE EXCEPTION REPORT CAN BE. GENERATED.  THE FOLLOWING RULES APPLY:.. 1) THE NAME OF EACH USER OR RESPONSIBLE USER GROUP IS PLACED IN.    THIS FILE, PRECEDED WITH A '>' CHAR IN COLUMN 1.  IT MAY BE UP.    TO, BUT NOT EXCEED, 23 CHARACTERS IN LENGTH.  THE FIRST LINE IN.    THE FILE MUST BE A USER GROUP.  THERE MAY BE UP TO <M$GROUPMAX> OF.    THESE.  THEY SHOULD BE IN THE SAME ORDER DESIRED IN THE OUTPUT.    REPORT - IT IS NOT SORTED... 2) UNDER EACH GROUP NAME THERE SHOULD BE ONE OR MORE ACCOUNT NUMBERS.    FOR WHICH THIS GROUP IS RESPONSIBLE.  EACH ACCOUNT CAN ONLY BE USED.    ONCE.  ACCOUNTS ARE 1-12 CHARACTERS IN LENGTH, AND MUST BE LEFT-.    JUSTIFIED.  THERE MAY BE UP TO <M$ACCTMAX> ACCOUNT ENTRIES... 3) IF AN ACCOUNT NUMBER IS NOT FOUND IN THE PARAMETER FILE, ALL FILES.    ASSOCIATED WITH THIS ACCOUNT APPEAR UNDER THE FIRST GROUP.  THIS.    SHOULD PROBABLY BE THE GROUP USED BY THE SITE ADMINISTRATOR... 4) WHEN A QUALIFIER IS REGISTERED WITH MARS, IT IS GIVEN AN 'OWNER.    ACCOUNT'.  ALL FILES HAVING THIS QUALIFIER WILL BE LISTED UNDER.    THE GROUP RESPONSIBLE FOR THIS ACCOUNT NUMBER.  IF A FILE'S.    QUALIFIER IS NOT REGISTERED, THE ACCOUNT NUMBER USED WHEN THE.    FILE WAS CREATED IS USED TO DETERMINE OWNERSHIP..>SOFTWARE SUPPORTSYS1100>ABBOTT, JASON09-106STAFF06-530PARKS>BAINES, LINDA09-126PSTAFF>GILBERT, WILLIAM09-129PSTAFF>HERMANN, JOHN06-109PSTAFF>KILPATRICK, GLENN09-131PSTAFF>MAPPER COORDINATION09-130PSTAFFSYSMAPPER>MILLER, MARY09-128PSTAFF>MSA APPLICATION GROUP09-105PSTAFF06-310BC06-320AP06-330FA06-340GL06-360HRP06-IE06-600DCI08-804SPERRY03-117ACCTNG03-120ACCTNG03-121ACCTNG03-122ACCTNG03-123ACCTNG03-125ACCTNG03-127ACCTNG03-132ACCTNG>RICHARDSON, LEONARD09-120PSTAFF06-520FLEET>TAX AND LICENSE GROUP09-104PSTAFF09-110PSTAFF06-370BARS06-380BARS-L06-390DCASH06-400PRPMGT06-410FXASET06-420PRKTIC06-430BUSLIC06-440SPECAS06-450SALTAX06-460PIMS06-470WARINV06-480WRKMGT06-550BLAST>UTILITY BILLING09-115PSTAFF09-107PSTAFF06-300UTB08-801TRES03-113CSTSRV>WILSON, JANE09-133PSTAFF@ELT,SIDP MARSREL$.RUN/ARCHIVE,,F$S,213770123237,001@RUN      ARCHIV,,SYS$,999,999@MSG,N  ** DAILY ARCHIVE - OUTPUT TO SITE ADMINISTRATOR **@PRIV                  . REPLACE WITH COMMAND TO MAKE THE RUN PRIVILEGED@ASG,AX   ARCCTL$@ASG,A    ARCHIST$@ASG,A    SAVHIST$      . REQUIRED ONLY IF M$EXPZERO > 0@ASG,AX   ARCMFD$@ASG,T    ARCCTL$HOLD,F///500@COPY     ARCCTL$.,ARCCTL$HOLD.@FREE     ARCCTL$@ASG,A    MARS*MARS@COPY,A   MARS*MARS.MFDEDT,TPF$.@COPY,A   MARS*MARS.SELECT,TPF$.@COPY,A   MARS*MARS.REBUILD,TPF$.@FREE     MARS*MARS@SETC,N@USE      $MFDB$,ARCMFD$@.MFDEDT,SZ  $MFDB$.   . REMOVE 'Z' OPTION TO CLEAR DIRECTORY (TDIR$)@PMD,E@USE      ARCCTL$,ARCCTL$HOLD.@XQT,C    SELECT       . ADD 'D' OPTION TO BEGIN ARCHIVE WITH FILE REMOVAL@PMD,E@TEST     TE/1/T3@JUMP     NOARCH@TEST     TNE/1/T2@JUMP     NOARCH@FREE     SAVHIST$      . ONLY REQUIRED IF ASSIGNED ABOVE@FETCH,S  . SET ARCHIVE IN PROGRESS@USE      ACP$ARCHIST$,SYS$*ARCHIST$.@ASG,UP   ARC-BRKPT(+1),F///1000@BRKPT    PRINT$,ARC-BRKPT(+1)@HDG,P  *** ARCHIVE FILES TO TAPE ***@MSG,W  RETAIN ALL OUTPUT TAPES EVEN IF RUN ERRORS@ADD,P    SELECT$ADD.@ASG,AX   ARCHIST$.@ACP,SJ   ARCHIST$.,OBACKUP1.@ACP,SJC  SAVHIST$.,OBACKUP1.@MARK,C   OBACKUP1.@FREE     OBACKUP1@BRKPT    PRINT$@MSG,N  ** DAILY ARCHIVE - FILE OUTPUT **@ASG,CPV  ARCHIST$(+1),F///50000@USE      HISTIN$,ARCHIST$(+0)@USE      HISTOUT$,ARCHIST$(+1)@HDG,N@XQT,CU   REBUILD@PMD,E@FREE     HISTIN$@FREE     HISTOUT$@FETCH,Z  . CLEAR ARCHIVE IN PROGRESS@NOARCH:@END F$S@ELT,SIDP MARSREL$.RUN/ARCHIVE$-MRG,,F$S,207607123737,001@RUN,/R   ARCMRG,,SYS$,100@MSG,N  MERGE SYS$*ARCHIVE$ W/ SYS$*SAVHIST$ - OUTPUT TO SITE ADMINISTRATOR@SETC,N@ASG,A    ARCHIVE$                   . ORIGINAL SYS$*ARCHIVE$@ASG,T    $MFDB$,F/50//20000         . OUTPUT FILE FOR CONVERSION@ASG,T    XA,F/50//5000              . MAX SHOULD = OR > SYS$*ARCHIVE$ SIZE@ASG,T    R$CORE,///50@XQT      MARS*MARS.ARCHIVE$-CVT     . CONVERT TO PSEUDO-$MFDB$ FORMAT@PMD,E@FREE     XA@ASG,A    SAVHIST$                   . READ AND WRITE KEYS NEEDED@ASG,CPV  SAVHIST$(+1),F///50000     . READ AND WRITE KEYS NEEDED@USE      HISTIN$,SAVHIST$(+0)@USE      HISTOUT$,SAVHIST$(+1)@XQT,FM   MARS*MARS.REBUILD          . PERFORM THE MERGE100       . EXPIRATION (SEE INSTALLATION REF FOR ADDITIONAL INFORMATION)@PMD,E@END F$S@ELT,SIDP MARSREL$.RUN/ARCHIV-MHF1A,,F$S,214162123237,001@RUN      ARCHIV,,SYS$,999,999@MSG,N  ** DAILY ARCHIVE - OUTPUT TO SITE ADMINISTRATOR **@MSG,N  THIS RUN ARCHIVES FILES FROM LOCAL-STD AND SHARED DIRECTORIES@PRIV                  . REPLACE WITH COMMAND TO MAKE THE RUN PRIVILEGED@ASG,AX   SHARED#ARCCTL$@ASG,A    SHARED#ARCHIST$@ASG,A    SHARED#SAVHIST$      . REQUIRED ONLY IF M$EXPZERO > 0@ASG,AX   SHARED#ARCMFD$@ASG,T    ARCCTL$HOLD,F///500@USE      SHARED-CTL,SHARED#ARCCTL$@COPY     SHARED-CTL.,ARCCTL$HOLD.@FREE     SHARED#ARCCTL$@ASG,A    MARS*MARS@COPY,A   MARS*MARS.MFDEDT,TPF$.@COPY,A   MARS*MARS.MFDMRG,TPF$.@COPY,A   MARS*MARS.SELECT,TPF$.@COPY,A   MARS*MARS.REBUILD,TPF$.@FREE     MARS*MARS@SETC,N@ASG,T    $MFDB$STD,F/50//1000@.MFDEDT,SZY  $MFDB$STD.   . REMOVE 'Z' OPTION TO CLEAR DIRECTORY (TDIR$)@PMD,E@ASG,T    $MFDB$SHARED,F/50//1000@.MFDEDT,SZU  $MFDB$SHARED.   . REMOVE 'Z' OPTION TO CLEAR DIRECTORY (TDIR$)@PMD,E@USE      $MFDB$,SHARED#ARCMFD$@XQT      MFDMRG@PMD,E@FREE     $MFDB$STD@FREE     $MFDB$SHARED@USE      ARCCTL$,ARCCTL$HOLD.@XQT,C    SELECT       . ADD 'D' OPTION TO BEGIN ARCHIVE WITH FILE REMOVAL@PMD,E@TEST     TE/1/T3@JUMP     NOARCH@TEST     TNE/1/T2@JUMP     NOARCH@FREE     SHARED#SAVHIST$      . ONLY REQUIRED IF ASSIGNED ABOVE@FETCH,S  . SET ARCHIVE IN PROGRESS@USE      ACP$ARCHIST$,SHARED#SYS$*ARCHIST$.@ASG,UP   SHARED#ARC-BRKPT(+1),F///1000@USE      ARCBK$,SHARED#ARC-BRKPT(+1)@BRKPT    PRINT$,ARCBK$@HDG,P  *** ARCHIVE FILES TO TAPE ***@MSG,W  RETAIN ALL OUTPUT TAPES EVEN IF RUN ERRORS@ADD,P    SELECT$ADD.@ASG,AX   SHARED#ARCHIST$.@ACP,SJU  ARCHIST$.,OBACKUP1.@ACP,SJUC SAVHIST$.,OBACKUP1.@MARK,C   OBACKUP1.@FREE     OBACKUP1@BRKPT    PRINT$@MSG,N  ** DAILY ARCHIVE - FILE OUTPUT **@ASG,CPV  SHARED#ARCHIST$(+1),F///50000@USE      HISTIN$,SHARED#ARCHIST$(+0)@USE      HISTOUT$,SHARED#ARCHIST$(+1)@HDG,N@XQT,CU   REBUILD@PMD,E@FREE     HISTIN$@FREE     HISTOUT$@FETCH,Z  . CLEAR ARCHIVE IN PROGRESS@NOARCH:@END F$S@ELT,SIDP MARSREL$.RUN/ARCHIV-MHF1B,,F$S,214356123237,001@RUN      ARCHIV,,SYS$,999,999@MSG,N  ** DAILY ARCHIVE - OUTPUT TO SITE ADMINISTRATOR **@MSG,N  THIS RUN ARCHIVES FILES FROM THE LOCAL-STD DIRECTORY ONLY@PRIV                  . REPLACE WITH COMMAND TO MAKE THE RUN PRIVILEGED@ASG,AX   SHARED#ARCCTL$@ASG,A    SHARED#ARCHIST$@ASG,A    SHARED#SAVHIST$      . REQUIRED ONLY IF M$EXPZERO > 0@ASG,AX   SHARED#ARCMFD$@ASG,T    ARCCTL$HOLD,F///500@USE      SHARED-CTL,SHARED#ARCCTL$@COPY     SHARED-CTL.,ARCCTL$HOLD.@FREE     SHARED#ARCCTL$@ASG,A    MARS*MARS@COPY,A   MARS*MARS.MFDEDT,TPF$.@COPY,A   MARS*MARS.SELECT,TPF$.@COPY,A   MARS*MARS.REBUILD,TPF$.@FREE     MARS*MARS@SETC,N@USE      $MFDB$,SHARED#ARCMFD$@.MFDEDT,SZY           . REMOVE 'Z' OPTION TO CLEAR DIRECTORY (TDIR$)@PMD,E@USE      ARCCTL$,ARCCTL$HOLD.@XQT,C    SELECT       . ADD 'D' OPTION TO BEGIN ARCHIVE WITH FILE REMOVAL@PMD,E@TEST     TE/1/T3@JUMP     NOARCH@TEST     TNE/1/T2@JUMP     NOARCH@FREE     SHARED#SAVHIST$      . ONLY REQUIRED IF ASSIGNED ABOVE@FETCH,S  . SET ARCHIVE IN PROGRESS@USE      ACP$ARCHIST$,SHARED#SYS$*ARCHIST$.@ASG,UP   SHARED#ARC-BRKPT(+1),F///1000@USE      ARCBK$,SHARED#ARC-BRKPT(+1)@BRKPT    PRINT$,ARCBK$@HDG,P  *** ARCHIVE FILES TO TAPE ***@MSG,W  RETAIN ALL OUTPUT TAPES EVEN IF RUN ERRORS@ADD,P    SELECT$ADD.@ASG,AX   SHARED#ARCHIST$.@ACP,SJU  ARCHIST$.,OBACKUP1.@ACP,SJUC SAVHIST$.,OBACKUP1.@MARK,C   OBACKUP1.@FREE     OBACKUP1@BRKPT    PRINT$@MSG,N  ** DAILY ARCHIVE - FILE OUTPUT **@ASG,CPV  SHARED#ARCHIST$(+1),F///50000@USE      HISTIN$,SHARED#ARCHIST$(+0)@USE      HISTOUT$,SHARED#ARCHIST$(+1)@HDG,N@XQT,CU   REBUILD@PMD,E@FREE     HISTIN$@FREE     HISTOUT$@FETCH,Z  . CLEAR ARCHIVE IN PROGRESS@NOARCH:@END F$S@ELT,SIDP MARSREL$.RUN/ARCUPD,,F$S,214503123237,001@RUN      ARCUPD,,SYS$,999,999@MSG,N  ** DAILY ARCHIVE - FILE OUTPUT **@PRIV                 . REPLACE WITH COMMAND TO MAKE THE RUN PRIVILEGED@ASG,AX   ARCHIST$@ASG,CPV  ARCHIST$(+1),F///50000@USE      HISTIN$,ARCHIST$(+0)@USE      HISTOUT$,ARCHIST$(+1)@SETC,N@FETCH,S  . SET ARCHIVE IN PROGRESS@XQT,CU   MARS*MARS.REBUILD@PMD,E@FREE     HISTIN$@FREE     HISTOUT$@FETCH,Z  . CLEAR ARCHIVE IN PROGRESS@END F$S@ELT,SIDP MARSREL$.RUN/ARCUPD-MHF1,,F$S,214573123237,001@RUN      ARCUPD,,SYS$,999,999@MSG,N  ** DAILY ARCHIVE - FILE OUTPUT **@PRIV                 . REPLACE WITH COMMAND TO MAKE THE RUN PRIVILEGED@ASG,AX   SHARED#ARCHIST$@ASG,CPV  SHARED#ARCHIST$(+1),F///50000@USE      HISTIN$,SHARED#ARCHIST$(+0)@USE      HISTOUT$,SHARED#ARCHIST$(+1)@SETC,N@FETCH,S  . SET ARCHIVE IN PROGRESS@XQT,CU   MARS*MARS.REBUILD@PMD,E@FREE     HISTIN$@FREE     HISTOUT$@FETCH,Z  . CLEAR ARCHIVE IN PROGRESS@END F$S@ELT,SIDP MARSREL$.RUN/CONS-RELOAD,,F$S,136764112332,001@RUN RELOAD,,SYS$@XQT  MARS*MARS.CNSRLD@PMD,E@SYM,D PRINT$@END F$S@ELT,SIDP MARSREL$.RUN/DOCPRT,,F$S,116144040333,001@RUN MRSDOC,,MARS,,200@ASG,AX MARS*RELEASE@USE MARS$,MARS*RELEASE@ADD,P MARS$.PRINTDOC@END F$S@ELT,SIDP MARSREL$.RUN/EXCEPTIONS,,F$S,134773112332,001@RUN ARCEXC,,SYS$,9,999@MSG,N   ARCHIVE EXCEPTION REPORT - OUTPUT TO SITE ADMINISTRATOR@ASG,A ARCCTL$         .  READ KEY NEEDED@ASG,A ARCMFD$@USE $MFDB$,ARCMFD$@XQT,LU MARS*MARS.SELECT   .  REMOVE 'U' OPTION AFTER MOST FILES REGISTERED!@ADD,P MARS*MARS.GROUPACCTS@PMD,E@END F$S@ELT,SIDP MARSREL$.RUN/EXCEP-MHF1A,,F$S,210031123737,001@RUN ARCEXC,,SYS$,9,999@MSG,N   ARCHIVE EXCEPTION REPORT - OUTPUT TO SITE ADMINISTRATOR@MSG,N  THIS RUN WILL LIST FILES FROM LOCAL-STD AND SHARED DIRECTORIES@SETC,N@PRIV                  . REPLACE WITH COMMAND TO MAKE THE RUN PRIVILEGED@ASG,A SHARED#ARCCTL$@ASG,T    $MFDB$STD,F/50//1000@MARS*MARS.MFDEDT,SZY  $MFDB$STD.   . REMOVE 'Z' OPTION TO CLR DIR (TDIR$)@PMD,E@ASG,T    $MFDB$SHARED,F/50//1000@MARS*MARS.MFDEDT,SZU  $MFDB$SHARED.   . REMOVE 'Z' OPTION TO CLR DIR (TDIR$)@PMD,E@ASG,T    $MFDB$MERGED,F/50//1000@USE      $MFDB$,$MFDB$MERGED@XQT      MARS*MARS.MFDMRG@PMD,E@XQT,LU MARS*MARS.SELECT   .  REMOVE 'U' OPTION AFTER MOST FILES REGISTERED!@ADD,P MARS*MARS.GROUPACCTS@PMD,E@END F$S@ELT,SIDP MARSREL$.RUN/EXCEP-MHF1B,,F$S,210104123737,001@RUN ARCEXC,,SYS$,9,999@MSG,N   ARCHIVE EXCEPTION REPORT - OUTPUT TO SITE ADMINISTRATOR@MSG,N  THIS RUN WILL LIST FILES FROM THE LOCAL-STD DIRECTORY ONLY@SETC,N@PRIV                  . REPLACE WITH COMMAND TO MAKE THE RUN PRIVILEGED@ASG,A SHARED#ARCCTL$@ASG,T    $MFDB$,F/50//1000@MARS*MARS.MFDEDT,SZY  . REMOVE 'Z' OPTION TO CLR DIR (TDIR$)@PMD,E@XQT,LU MARS*MARS.SELECT   .  REMOVE 'U' OPTION AFTER MOST FILES REGISTERED!@ADD,P MARS*MARS.GROUPACCTS@PMD,E@END F$S@ELT,SIDP MARSREL$.RUN/EXPIR-MHF1,,F$S,030207070733,001@RUN ARCEXP,,SYS$,10,2000@MSG,N  ARCHIVE EXPIRATION REPORT - OUTPUT TO SITE ADMINISTRATOR@ASG,A SHARED#ARCCTL$           .  READ KEY NEEDED@ASG,A SHARED#ARCHIST$          .  READ KEY NEEDED@XQT MARS*MARS.EXPRPT@ADD,P MARS*MARS.GROUPACCTS@PMD,E@END F$S@ELT,SIDP MARSREL$.RUN/EXPIR-RPT,,F$S,176441053433,001@RUN ARCEXP,,SYS$,10,2000@MSG,N  ARCHIVE EXPIRATION REPORT - OUTPUT TO SITE ADMINISTRATOR@ASG,A ARCCTL$           .  READ KEY NEEDED@ASG,A ARCHIST$          .  READ KEY NEEDED@XQT MARS*MARS.EXPRPT@ADD,P MARS*MARS.GROUPACCTS@PMD,E@END F$S@ELT,SIDP MARSREL$.RUN/FAS$ARC-MRG,,F$S,215223123237,001@RUN,/R   ARCMRG,,SYS$,100@MSG,N  MERGE SYS$*FAS$ARCHIVE W/ SYS$*SAVHIST$ - OUTPUT TO SITE ADMINISTRATOR@SETC,N@ASG,A    FAS$ARCHIVE                . ORIGINAL SYS$*FAS$ARCHIVE@ASG,T    $MFDB$,F/50//20000         . OUTPUT FILE FOR CONVERSION@ASG,T    XA,F/50//5000              . MAX SHOULD = OR > SYS$*FAS$ARCHIVE SIZE@ASG,T    R$CORE,///50@XQT      MARS*MARS.FAS$ARC-CVT      . CONVERT TO PSEUDO-$MFDB$ FORMAT@PMD,E@FREE     XA@ASG,A    SAVHIST$                   . READ AND WRITE KEYS NEEDED@ASG,CPV  SAVHIST$(+1),F///50000     . READ AND WRITE KEYS NEEDED@USE      HISTIN$,SAVHIST$(+0)@USE      HISTOUT$,SAVHIST$(+1)@XQT,FM   MARS*MARS.REBUILD          . PERFORM THE MERGE100       . EXPIRATION (SEE INSTALLATION REF FOR ADDITIONAL INFORMATION)@PMD,E@END F$S@ELT,SIDP MARSREL$.RUN/FAS$MRG-MHF1,,F$S,031044070733,001@RUN,/R   ARCMRG,,SYS$,100@MSG,N  MERGE SYS$*FAS$ARCHIVE W/ SYS$*SAVHIST$ - OUTPUT TO SITE ADMINISTRATOR@SETC,N@ASG,A    FAS$ARCHIVE                . ORIGINAL SYS$*FAS$ARCHIVE@ASG,T    $MFDB$,F/50//20000         . OUTPUT FILE FOR CONVERSION@ASG,T    XA,F/50//5000              . MAX SHOULD = OR > SYS$*FAS$ARCHIVE SIZE@ASG,T    R$CORE,///50@MSG,N  THE <-> IN THE FOLLOWING PROGRAM EXECUTION SHOULD BE REPLACED@MSG,N  WITH A SINGLE OPTION (A-D OR S) TO INDICATE DIRECTORY OF ORIGIN@XQT,-    MARS*MARS.FAS$ARC-CVT      . CONVERT TO PSEUDO-$MFDB$ FORMAT@PMD,E@FREE     XA@ASG,A    SHARED#SAVHIST$                   . READ AND WRITE KEYS NEEDED@ASG,CPV  SHARED#SAVHIST$(+1),F///50000     . READ AND WRITE KEYS NEEDED@USE      HISTIN$,SHARED#SAVHIST$(+0)@USE      HISTOUT$,SHARED#SAVHIST$(+1)@XQT,FM   MARS*MARS.REBUILD          . PERFORM THE MERGE100       . EXPIRATION (SEE INSTALLATION REF FOR ADDITIONAL INFORMATION)@PMD,E@END F$S@ELT,SIDP MARSREL$.RUN/FILEXT,,F$S,120012123033,001@RUN,/R FILEXT,,SYS$@MSG,N  THIS RUN CREATES THE MFD EXTRACT USED BY THE 'FILES' PROGRAM@SETC,N@ASG,UPV  MFDEXT$(+1),F/60//500@PRIV                        . OR WHATEVER NEEDED TO MAKE RUN PRIVILEGED@USE      $MFDB$,MFDEXT$(+1).@MARS*MARS.MFDEDT,SZ  $MFDB$.   . REMOVE 'Z' OPTION TO CLR DIR (TDIR$)@PMD,E@FREE  SYS$*DLOC$@SYM,D  PRINT$@END F$S@ELT,SIDP MARSREL$.RUN/FILEXT-MHF1,,F$S,120174123033,001@RUN,/R FILEXT,,SYS$@MSG,N  THIS RUN CREATES THE MFD EXTRACT USED BY THE 'FILES' PROGRAM@SETC,N@ASG,UPV  STD#MFDEXT$(+1),F/60//500@PRIV                        . OR WHATEVER NEEDED TO MAKE RUN PRIVILEGED@ASG,T    $MFDB$STD,F/50//1000@MARS*MARS.MFDEDT,SZY  $MFDB$STD.   . REMOVE 'Z' OPTION TO CLR DIR (TDIR$)@PMD,E@ASG,T    $MFDB$SHARED,F/50//1000@MARS*MARS.MFDEDT,SZU  $MFDB$SHARED.   . REMOVE 'Z' OPTION TO CLR DIR (TDIR$)@PMD,E@USE      $MFDB$,STD#MFDEXT$(+1).@XQT      MARS*MARS.MFDMRG@PMD,E@FREE  SYS$*DLOC$@SYM,D  PRINT$@END F$S@ELT,SIDP MARSREL$.RUN/FILIST,,F$S,176305053433,001@RUN,/R FILIST,,SYS$,10@MSG,N  CATALOGED FILE LISTING - OUTPUT TO SITE ADMINISTRATOR@SETC,N@ASG,T  $MFDB$,F/60//1000@PRIV                           . REPLACE WITH COMMAND TO MAKE RUN PRIVILEGED@MARS*MARS.MFDEDT,SZF  $MFDB$.  . REMOVE 'Z' OPTION FOR SECURITY CLEAR OF TDIR$@PMD,E@ASG,A  ARCCTL$@FREE SYS$*DLOC$@XQT,O  MARS*MARS.MSREP@PMD,E@XQT,FRGOQ  MARS*MARS.LISTER@ADD,P  MARS*MARS.GROUPACCTS@PMD,E@END F$S@ELT,SIDP MARSREL$.RUN/FILIST-MHF1A,,F$S,216222131637,001@RUN,/R FILIST,,SYS$,10@MSG,N  CATALOGED FILE LISTING - OUTPUT TO SITE ADMINISTRATOR@MSG,N  THIS RUN WILL LIST FILES FROM LOCAL-STD AND SHARED DIRECTORIES@SETC,N@PRIV                           . REPLACE WITH COMMAND TO MAKE RUN PRIVILEGED@ASG,T    $MFDB$STD,F/50//1000@MARS*MARS.MFDEDT,SZY  $MFDB$STD.   . REMOVE 'Z' OPTION TO CLR DIR (TDIR$)@PMD,E@ASG,T    $MFDB$SHARED,F/50//1000@MARS*MARS.MFDEDT,SZU  $MFDB$SHARED.   . REMOVE 'Z' OPTION TO CLR DIR (TDIR$)@PMD,E@ASG,T    $MFDB$MERGED,F/50//1000@USE      $MFDB$,$MFDB$MERGED@XQT      MARS*MARS.MFDMRG@PMD,E@ASG,A  SHARED#ARCCTL$@FREE SYS$*DLOC$@XQT,O  MARS*MARS.MSREP@PMD,E@XQT,FRGOQ  MARS*MARS.LISTER@ADD,P  MARS*MARS.GROUPACCTS@PMD,E@END F$S@ELT,SIDP MARSREL$.RUN/FILIST-MHF1B,,F$S,216602131637,001@RUN,/R FILIST,,SYS$,10@MSG,N  CATALOGED FILE LISTING - OUTPUT TO SITE ADMINISTRATOR@MSG,N  THIS RUN WILL LIST FILES FROM THE LOCAL-STD DIRECTORY ONLY@SETC,N@PRIV                           . REPLACE WITH COMMAND TO MAKE RUN PRIVILEGED@ASG,T    $MFDB$,F/50//1000@MARS*MARS.MFDEDT,SZY  . REMOVE 'Z' OPTION TO CLR DIR (TDIR$)@PMD,E@ASG,A  SHARED#ARCCTL$@FREE SYS$*DLOC$@XQT,O  MARS*MARS.MSREP@PMD,E@XQT,FRGOQ  MARS*MARS.LISTER@ADD,P  MARS*MARS.GROUPACCTS@PMD,E@END F$S@ELT,SIDP MARSREL$.RUN/FULLRPT-MHF1,,F$S,031156070733,001@RUN ARCRPF,,SYS$,200,5000@MSG,N   FULL ARCHIVE REPORT - OUTPUT TO SITE ADMINISTRATOR@ASG,A SHARED#ARCHIST$         .  READ KEY NEEDED@USE HISTIN$,SHARED#ARCHIST$@XQT,R MARS*MARS.REBUILD@PMD,E@END F$S@ELT,SIDP MARSREL$.RUN/FULL-RPT,,F$S,176542053433,001@RUN ARCRPF,,SYS$,200,5000@MSG,N   FULL ARCHIVE REPORT - OUTPUT TO SITE ADMINISTRATOR@ASG,A ARCHIST$         .  READ KEY NEEDED@USE HISTIN$,ARCHIST$@XQT,R MARS*MARS.REBUILD@PMD,E@END F$S@ELT,SIDP MARSREL$.RUN/MARSGEN,,F$S,174672042233,001@RUN MRSGEN,,MARS,30,1000@ASG,AX MARS*RELEASE@USE MARS$,MARS*RELEASE@ADD,P MARS$.FULLBUILD@END F$S@ELT,SIDP MARSREL$.RUN/MFDEDT-GEN,,F$S,214663131637,001@RUN MFDGEN,,MARS@ASG,AX MARS*RELEASE@USE MARS$,MARS*RELEASE@MASM,E MARS$.MFDEDT   . THE FULL MARS GENERATION WILL GIVE A LONG LISTING@MAP,S MARS$.MAP/MFDEDT,.MFDEDT@END F$S@ELT,SIDP MARSREL$.RUN/RLDCTL,,F$S,175017042233,001@RUN RLDCTL,,SYS$,999,9999@MSG,N *** MARS RELOAD CONTROLLER ***@MSG,N   RETURN PRINTOUT TO SITE ADMINISTRATOR@MSG,N  IF ERRORED OR TERMINATED, WAIT 1 MIN BEFORE RESTARTING@COPY,A MARS*MARS.RLDCTL,TPF$.@XQT RLDCTL      .  ADD 'B' OPTION FOR DAILY AUDIT REPORTS@PMD,E@END F$S@ELT,SIDP MARSREL$.RUN/SAVHST,,F$S,215426123237,001@RUN,/R   SAVHST,,SYS$,10@MSG,N  FAS SAVE/SAVALL HISTORY UPDATE - OUTPUT TO SITE ADMINISTRATOR@SETC,N@ASG,UP   SAVHST-MFD(+1),F/60//1000@PRIV                           . REPLACE WITH COMMAND TO MAKE RUN PRIVILEGED@USE      $MFDB$,SAVHST-MFD(+1).@MARS*MARS.MFDEDT,SZ  $MFDB$.   . REMOVE 'Z' OPTION FOR SECURITY CLEAR OF TDIR$@PMD,E@ASG,A    SAVHIST$@ASG,CPV  SAVHIST$(+1),F///50000@USE      HISTIN$,SAVHIST$(+0)@USE      HISTOUT$,SAVHIST$(+1)@TEST     TNE/1@JUMP     SAVALL@XQT,F    MARS*MARS.REBUILD           . @START SAVHST,0  IS FROM SAVE14        . 'SAVE' EXPIRATION (CUSTOMIZE AS REQUIRED; SEE INST REFERENCE)@PMD,E@JUMP     DONE@SAVALL:@XQT,FA   MARS*MARS.REBUILD           . @START SAVHST,1  IS FROM SAVALL35        . 'SAVALL' EXPIRATION (CUSTOMIZE AS REQUIRED; SEE INST REFERENCE)@PMD,E@DONE:@TEST     TNE/0/T3@SYM,D    PRINT$    . ONLY PRINT IF ERROR(S) IN UPDATE@END F$S@ELT,SIDP MARSREL$.RUN/SAVHST-MHF1A,,F$S,210274123737,001@RUN,/R   SAVHST,,SYS$,10@MSG,N  FAS SAVE/SAVALL HISTORY UPDATE - OUTPUT TO SITE ADMINISTRATOR@MSG,N  THIS RUN MERGES BACKUP INFO FROM LOCAL-STD AND SHARED DIRECTORIES@SETC,N@PRIV                           . REPLACE WITH COMMAND TO MAKE RUN PRIVILEGED@ASG,AX   SHARED#SAVHIST$@ASG,T    $MFDB$STD,F/50//1000@MARS*MARS.MFDEDT,SZY  $MFDB$STD.   . REMOVE 'Z' OPT TO CLR DIRECTORY (TDIR$)@PMD,E@ASG,T    $MFDB$SHARED,F/50//1000@MARS*MARS.MFDEDT,SZU  $MFDB$SHARED.   . REMOVE 'Z' OPT TO CLR DIRECTORY (TDIR$)@PMD,E@ASG,UP   SHARED#SAVHST-MFD(+1),F/60//1000@USE      $MFDB$,SHARED#SAVHST-MFD(+1).@XQT      MARS*MARS.MFDMRG@PMD,E@ASG,CPV  SHARED#SAVHIST$(+1),F///50000@USE      HISTIN$,SHARED#SAVHIST$(+0)@USE      HISTOUT$,SHARED#SAVHIST$(+1)@TEST     TNE/1@JUMP     SAVALL@XQT,F    MARS*MARS.REBUILD           . @START SAVHST,0  IS FROM SAVE14        . 'SAVE' EXPIRATION (CUSTOMIZE AS REQUIRED; SEE INST REFERENCE)@PMD,E@JUMP     DONE@SAVALL:@XQT,FA   MARS*MARS.REBUILD           . @START SAVHST,1  IS FROM SAVALL35        . 'SAVALL' EXPIRATION (CUSTOMIZE AS REQUIRED; SEE INST REFERENCE)@PMD,E@DONE:@TEST     TNE/0/T3@SYM,D    PRINT$    . ONLY PRINT IF ERROR(S) IN UPDATE@END F$S@ELT,SIDP MARSREL$.RUN/SAVHST-MHF1B,,F$S,210351123737,001@RUN,/R   SAVHST,,SYS$,10@MSG,N  FAS SAVE/SAVALL HISTORY UPDATE - OUTPUT TO SITE ADMINISTRATOR@MSG,N  THIS RUN MERGES BACKUP INFO FROM THE LOCAL-STD DIRECTORY ONLY@SETC,N@PRIV                           . REPLACE WITH COMMAND TO MAKE RUN PRIVILEGED@ASG,AX   SHARED#SAVHIST$@ASG,UP   SHARED#SAVHST-MFD(+1),F/60//1000@USE      $MFDB$,SHARED#SAVHST-MFD(+1).@MARS*MARS.MFDEDT,SZY           . REMOVE 'Z' OPT TO CLR DIRECTORY (TDIR$)@PMD,E@ASG,CPV  SHARED#SAVHIST$(+1),F///50000@USE      HISTIN$,SHARED#SAVHIST$(+0)@USE      HISTOUT$,SHARED#SAVHIST$(+1)@TEST     TNE/1@JUMP     SAVALL@XQT,F    MARS*MARS.REBUILD           . @START SAVHST,0  IS FROM SAVE14        . 'SAVE' EXPIRATION (CUSTOMIZE AS REQUIRED; SEE INST REFERENCE)@PMD,E@JUMP     DONE@SAVALL:@XQT,FA   MARS*MARS.REBUILD           . @START SAVHST,1  IS FROM SAVALL35        . 'SAVALL' EXPIRATION (CUSTOMIZE AS REQUIRED; SEE INST REFERENCE)@PMD,E@DONE:@TEST     TNE/0/T3@SYM,D    PRINT$    . ONLY PRINT IF ERROR(S) IN UPDATE@END F$S@ELT,SIDP MARSREL$.RUN/STATISTICS,,F$S,174641042233,001@RUN ARSTAT,,SYS$@MSG,N  WEEKLY ARCHIVE STATISTICS - OUTPUT TO SITE ADMINISTRATOR@ASG,A  ARCHIST$        .  READ AND WRITE KEY NEEDED@XQT,Z  MARS*MARS.ARSTAT@PMD,E@END F$S@ELT,SIDP MARSREL$.RUN/STAT-MHF1,,F$S,032224070733,001@RUN ARSTAT,,SYS$@MSG,N  WEEKLY ARCHIVE STATISTICS - OUTPUT TO SITE ADMINISTRATOR@ASG,A  SHARED#ARCHIST$        .  READ AND WRITE KEY NEEDED@XQT,Z  MARS*MARS.ARSTAT@PMD,E@END F$S@ELT,SIDP MARSREL$.RUN/TAPERPT-MHF1,,F$S,032312070733,001@RUN ARCTAP,,SYS$,9,999@MSG,N  ARCHIVE TAPE LISTING - OUTPUT TO SITE ADMINISTRATOR@ASG,A SHARED#ARCHIST$         .  READ KEY NEEDED@XQT,T MARS*MARS.ARSTAT@PMD,E@END F$S@ELT,SIDP MARSREL$.RUN/TAPE-RPT,,F$S,124565112332,001@RUN ARCTAP,,SYS$,9,999@MSG,N  ARCHIVE TAPE LISTING - OUTPUT TO SITE ADMINISTRATOR@ASG,A ARCHIST$         .  READ KEY NEEDED@XQT,T MARS*MARS.ARSTAT@PMD,E@END F$S@ELT,SIDP MARSREL$.RUN/WEEKLY-RPT,,F$S,176576053433,001@RUN ARCRPW,,SYS$,10,1000@MSG,N   WEEKLY ARCHIVE REPORT - OUTPUT TO SITE ADMINISTRATOR@ASG,A ARCHIST$         .  READ KEY NEEDED@USE HISTIN$,ARCHIST$@XQT,RW MARS*MARS.REBUILD@PMD,E@END F$S@ELT,SIDP MARSREL$.RUN/WKLYRPT-MHF1,,F$S,032453070733,001@RUN ARCRPW,,SYS$,10,1000@MSG,N   WEEKLY ARCHIVE REPORT - OUTPUT TO SITE ADMINISTRATOR@ASG,A SHARED#ARCHIST$         .  READ KEY NEEDED@USE HISTIN$,SHARED#ARCHIST$@XQT,RW MARS*MARS.REBUILD@PMD,E@END F$S@SETC,P@FREE MARSREL$.@HDG  *** TOC OF RELEASE FILE ***.L,1@PRT,F MARS*RELEASE.@PRT,TL MARS*RELEASE.@FIN